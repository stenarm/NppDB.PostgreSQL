//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\stena\RiderProjects\NppDB\NppDB.PostgreSQL\PostgreSQLParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419



using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class PostgreSQLParser : PostgreSQLParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Dollar=1, OPEN_PAREN=2, CLOSE_PAREN=3, OPEN_BRACKET=4, CLOSE_BRACKET=5, 
		COMMA=6, SEMI=7, COLON=8, STAR=9, EQUAL=10, DOT=11, PLUS=12, MINUS=13, 
		SLASH=14, CARET=15, LT=16, GT=17, LESS_LESS=18, GREATER_GREATER=19, COLON_EQUALS=20, 
		LESS_EQUALS=21, EQUALS_GREATER=22, GREATER_EQUALS=23, DOT_DOT=24, NOT_EQUALS=25, 
		TYPECAST=26, PERCENT=27, PARAM=28, Operator=29, ALL=30, ANALYSE=31, ANALYZE=32, 
		AND=33, ANY=34, ARRAY=35, AS=36, ASC=37, ASYMMETRIC=38, BOTH=39, CASE=40, 
		CAST=41, CHECK=42, COLLATE=43, COLUMN=44, CONSTRAINT=45, CREATE=46, CURRENT_CATALOG=47, 
		CURRENT_DATE=48, CURRENT_ROLE=49, CURRENT_TIME=50, CURRENT_TIMESTAMP=51, 
		CURRENT_USER=52, DEFAULT=53, DEFERRABLE=54, DESC=55, DISTINCT=56, DO=57, 
		ELSE=58, EXCEPT=59, FALSE_P=60, FETCH=61, FOR=62, FOREIGN=63, FROM=64, 
		GRANT=65, GROUP_P=66, HAVING=67, IN_P=68, INITIALLY=69, INTERSECT=70, 
		INTO=71, LATERAL_P=72, LEADING=73, LIMIT=74, LOCALTIME=75, LOCALTIMESTAMP=76, 
		NOT=77, NULL_P=78, OFFSET=79, ON=80, ONLY=81, OR=82, ORDER=83, PLACING=84, 
		PRIMARY=85, REFERENCES=86, RETURNING=87, SELECT=88, SESSION_USER=89, SOME=90, 
		SYMMETRIC=91, TABLE=92, THEN=93, TO=94, TRAILING=95, TRUE_P=96, UNION=97, 
		UNIQUE=98, USER=99, USING=100, VARIADIC=101, WHEN=102, WHERE=103, WINDOW=104, 
		WITH=105, AUTHORIZATION=106, BINARY=107, COLLATION=108, CONCURRENTLY=109, 
		CROSS=110, CURRENT_SCHEMA=111, FREEZE=112, FULL=113, ILIKE=114, INNER_P=115, 
		IS=116, ISNULL=117, JOIN=118, LEFT=119, LIKE=120, NATURAL=121, NOTNULL=122, 
		OUTER_P=123, OVER=124, OVERLAPS=125, RIGHT=126, SIMILAR=127, VERBOSE=128, 
		ABORT_P=129, ABSOLUTE_P=130, ACCESS=131, ACTION=132, ADD_P=133, ADMIN=134, 
		AFTER=135, AGGREGATE=136, ALSO=137, ALTER=138, ALWAYS=139, ASSERTION=140, 
		ASSIGNMENT=141, AT=142, ATOMIC=143, ATTRIBUTE=144, BACKWARD=145, BEFORE=146, 
		BEGIN_P=147, BY=148, CACHE=149, CALLED=150, CASCADE=151, CASCADED=152, 
		CATALOG=153, CHAIN=154, CHARACTERISTICS=155, CHECKPOINT=156, CLASS=157, 
		CLOSE=158, CLUSTER=159, COMMENT=160, COMMENTS=161, COMMIT=162, COMMITTED=163, 
		CONFIGURATION=164, CONNECTION=165, CONSTRAINTS=166, CONTENT_P=167, CONTINUE_P=168, 
		CONVERSION_P=169, COPY=170, COST=171, CSV=172, CURSOR=173, CYCLE=174, 
		DATA_P=175, DATABASE=176, DAY_P=177, DEALLOCATE=178, DECLARE=179, DEFAULTS=180, 
		DEFERRED=181, DEFINER=182, DELETE_P=183, DELIMITER=184, DELIMITERS=185, 
		DICTIONARY=186, DISABLE_P=187, DISCARD=188, DOCUMENT_P=189, DOMAIN_P=190, 
		DOUBLE_P=191, DROP=192, EACH=193, ENABLE_P=194, ENCODING=195, ENCRYPTED=196, 
		ENUM_P=197, ESCAPE=198, EVENT=199, EXCLUDE=200, EXCLUDING=201, EXCLUSIVE=202, 
		EXECUTE=203, EXPLAIN=204, EXTENSION=205, EXTERNAL=206, FAMILY=207, FIRST_P=208, 
		FOLLOWING=209, FORCE=210, FORWARD=211, FUNCTION=212, FUNCTIONS=213, GLOBAL=214, 
		GRANTED=215, HANDLER=216, HEADER_P=217, HOLD=218, HOUR_P=219, IDENTITY_P=220, 
		IF_P=221, IMMEDIATE=222, IMMUTABLE=223, IMPLICIT_P=224, INCLUDING=225, 
		INCREMENT=226, INDEX=227, INDEXES=228, INHERIT=229, INHERITS=230, INLINE_P=231, 
		INSENSITIVE=232, INSERT=233, INSTEAD=234, INVOKER=235, ISOLATION=236, 
		KEY=237, LABEL=238, LANGUAGE=239, LARGE_P=240, LAST_P=241, LEAKPROOF=242, 
		LEVEL=243, LISTEN=244, LOAD=245, LOCAL=246, LOCATION=247, LOCK_P=248, 
		MAPPING=249, MATCH=250, MATCHED=251, MATERIALIZED=252, MAXVALUE=253, MERGE=254, 
		MINUTE_P=255, MINVALUE=256, MODE=257, MONTH_P=258, MOVE=259, NAME_P=260, 
		NAMES=261, NEXT=262, NO=263, NOTHING=264, NOTIFY=265, NOWAIT=266, NULLS_P=267, 
		OBJECT_P=268, OF=269, OFF=270, OIDS=271, OPERATOR=272, OPTION=273, OPTIONS=274, 
		OWNED=275, OWNER=276, PARSER=277, PARTIAL=278, PARTITION=279, PASSING=280, 
		PASSWORD=281, PLANS=282, PRECEDING=283, PREPARE=284, PREPARED=285, PRESERVE=286, 
		PRIOR=287, PRIVILEGES=288, PROCEDURAL=289, PROCEDURE=290, PROGRAM=291, 
		QUOTE=292, RANGE=293, READ=294, REASSIGN=295, RECHECK=296, RECURSIVE=297, 
		REF=298, REFRESH=299, REINDEX=300, RELATIVE_P=301, RELEASE=302, RENAME=303, 
		REPEATABLE=304, REPLACE=305, REPLICA=306, RESET=307, RESTART=308, RESTRICT=309, 
		RETURNS=310, REVOKE=311, ROLE=312, ROLLBACK=313, ROWS=314, RULE=315, SAVEPOINT=316, 
		SCHEMA=317, SCROLL=318, SEARCH=319, SECOND_P=320, SECURITY=321, SEQUENCE=322, 
		SEQUENCES=323, SERIALIZABLE=324, SERVER=325, SESSION=326, SET=327, SHARE=328, 
		SHOW=329, SIMPLE=330, SNAPSHOT=331, STABLE=332, STANDALONE_P=333, START=334, 
		STATEMENT=335, STATISTICS=336, STDIN=337, STDOUT=338, STORAGE=339, STRICT_P=340, 
		STRIP_P=341, SYSID=342, SYSTEM_P=343, TABLES=344, TABLESPACE=345, TEMP=346, 
		TEMPLATE=347, TEMPORARY=348, TEXT_P=349, TRANSACTION=350, TRIGGER=351, 
		TRUNCATE=352, TRUSTED=353, TYPE_P=354, TYPES_P=355, UNBOUNDED=356, UNCOMMITTED=357, 
		UNENCRYPTED=358, UNKNOWN=359, UNLISTEN=360, UNLOGGED=361, UNTIL=362, UPDATE=363, 
		VACUUM=364, VALID=365, VALIDATE=366, VALIDATOR=367, VARYING=368, VERSION_P=369, 
		VIEW=370, VOLATILE=371, WHITESPACE_P=372, WITHOUT=373, WORK=374, WRAPPER=375, 
		WRITE=376, XML_P=377, YEAR_P=378, YES_P=379, ZONE=380, BETWEEN=381, BIGINT=382, 
		BIT=383, BOOLEAN_P=384, CHAR_P=385, CHARACTER=386, COALESCE=387, DEC=388, 
		DECIMAL_P=389, EXISTS=390, EXTRACT=391, FLOAT_P=392, GREATEST=393, INOUT=394, 
		INT_P=395, INTEGER=396, INTERVAL=397, LEAST=398, NATIONAL=399, NCHAR=400, 
		NONE=401, NULLIF=402, NUMERIC=403, OVERLAY=404, POSITION=405, PRECISION=406, 
		REAL=407, ROW=408, SETOF=409, SMALLINT=410, SUBSTRING=411, TIME=412, TIMESTAMP=413, 
		TREAT=414, TRIM=415, VALUES=416, VARCHAR=417, XMLATTRIBUTES=418, XMLCOMMENT=419, 
		XMLAGG=420, XML_IS_WELL_FORMED=421, XML_IS_WELL_FORMED_DOCUMENT=422, XML_IS_WELL_FORMED_CONTENT=423, 
		XPATH=424, XPATH_EXISTS=425, XMLCONCAT=426, XMLELEMENT=427, XMLEXISTS=428, 
		XMLFOREST=429, XMLPARSE=430, XMLPI=431, XMLROOT=432, XMLSERIALIZE=433, 
		CALL=434, CURRENT_P=435, ATTACH=436, DETACH=437, EXPRESSION=438, GENERATED=439, 
		LOGGED=440, STORED=441, INCLUDE=442, ROUTINE=443, TRANSFORM=444, IMPORT_P=445, 
		POLICY=446, METHOD=447, REFERENCING=448, NEW=449, OLD=450, VALUE_P=451, 
		SUBSCRIPTION=452, PUBLICATION=453, OUT_P=454, END_P=455, ROUTINES=456, 
		SCHEMAS=457, PROCEDURES=458, INPUT_P=459, SUPPORT=460, PARALLEL=461, SQL_P=462, 
		DEPENDS=463, OVERRIDING=464, CONFLICT=465, SKIP_P=466, LOCKED=467, TIES=468, 
		ROLLUP=469, CUBE=470, GROUPING=471, SETS=472, TABLESAMPLE=473, ORDINALITY=474, 
		XMLTABLE=475, COLUMNS=476, XMLNAMESPACES=477, ROWTYPE=478, NORMALIZED=479, 
		WITHIN=480, FILTER=481, GROUPS=482, OTHERS=483, NFC=484, NFD=485, NFKC=486, 
		NFKD=487, UESCAPE=488, VIEWS=489, NORMALIZE=490, DUMP=491, PRINT_STRICT_PARAMS=492, 
		VARIABLE_CONFLICT=493, ERROR=494, USE_VARIABLE=495, USE_COLUMN=496, ALIAS=497, 
		CONSTANT=498, PERFORM=499, GET=500, DIAGNOSTICS=501, STACKED=502, ELSIF=503, 
		WHILE=504, REVERSE=505, FOREACH=506, SLICE=507, EXIT=508, RETURN=509, 
		QUERY=510, RAISE=511, SQLSTATE=512, DEBUG=513, LOG=514, INFO=515, NOTICE=516, 
		WARNING=517, EXCEPTION=518, ASSERT=519, LOOP=520, OPEN=521, ABS=522, CBRT=523, 
		CEIL=524, CEILING=525, DEGREES=526, DIV=527, EXP=528, FACTORIAL=529, FLOOR=530, 
		GCD=531, LCM=532, LN=533, LOG10=534, MIN_SCALE=535, MOD=536, PI=537, POWER=538, 
		RADIANS=539, ROUND=540, SCALE=541, SIGN=542, SQRT=543, TRIM_SCALE=544, 
		TRUNC=545, WIDTH_BUCKET=546, RANDOM=547, SETSEED=548, ACOS=549, ACOSD=550, 
		ASIN=551, ASIND=552, ATAN=553, ATAND=554, ATAN2=555, ATAN2D=556, COS=557, 
		COSD=558, COT=559, COTD=560, SIN=561, SIND=562, TAN=563, TAND=564, SINH=565, 
		COSH=566, TANH=567, ASINH=568, ACOSH=569, ATANH=570, BIT_LENGTH=571, CHAR_LENGTH=572, 
		CHARACTER_LENGTH=573, LOWER=574, OCTET_LENGTH=575, UPPER=576, ASCII=577, 
		BTRIM=578, CHR=579, CONCAT=580, CONCAT_WS=581, FORMAT=582, INITCAP=583, 
		LENGTH=584, LPAD=585, LTRIM=586, MD5=587, PARSE_IDENT=588, PG_CLIENT_ENCODING=589, 
		QUOTE_IDENT=590, QUOTE_LITERAL=591, QUOTE_NULLABLE=592, REGEXP_COUNT=593, 
		REGEXP_INSTR=594, REGEXP_LIKE=595, REGEXP_MATCH=596, REGEXP_MATCHES=597, 
		REGEXP_REPLACE=598, REGEXP_SPLIT_TO_ARRAY=599, REGEXP_SPLIT_TO_TABLE=600, 
		REGEXP_SUBSTR=601, REPEAT=602, RPAD=603, RTRIM=604, SPLIT_PART=605, STARTS_WITH=606, 
		STRING_TO_ARRAY=607, STRING_TO_TABLE=608, STRPOS=609, SUBSTR=610, TO_ASCII=611, 
		TO_HEX=612, TRANSLATE=613, UNISTR=614, AGE=615, CLOCK_TIMESTAMP=616, DATE_BIN=617, 
		DATE_PART=618, DATE_TRUNC=619, ISFINITE=620, JUSTIFY_DAYS=621, JUSTIFY_HOURS=622, 
		JUSTIFY_INTERVAL=623, MAKE_DATE=624, MAKE_INTERVAL=625, MAKE_TIME=626, 
		MAKE_TIMESTAMP=627, MAKE_TIMESTAMPTZ=628, NOW=629, STATEMENT_TIMESTAMP=630, 
		TIMEOFDAY=631, TRANSACTION_TIMESTAMP=632, TO_TIMESTAMP=633, TO_CHAR=634, 
		TO_DATE=635, TO_NUMBER=636, Identifier=637, QuotedIdentifier=638, UnterminatedQuotedIdentifier=639, 
		InvalidQuotedIdentifier=640, InvalidUnterminatedQuotedIdentifier=641, 
		UnicodeQuotedIdentifier=642, UnterminatedUnicodeQuotedIdentifier=643, 
		InvalidUnicodeQuotedIdentifier=644, InvalidUnterminatedUnicodeQuotedIdentifier=645, 
		StringConstant=646, UnterminatedStringConstant=647, UnicodeEscapeStringConstant=648, 
		UnterminatedUnicodeEscapeStringConstant=649, BeginDollarStringConstant=650, 
		BinaryStringConstant=651, UnterminatedBinaryStringConstant=652, InvalidBinaryStringConstant=653, 
		InvalidUnterminatedBinaryStringConstant=654, HexadecimalStringConstant=655, 
		UnterminatedHexadecimalStringConstant=656, InvalidHexadecimalStringConstant=657, 
		InvalidUnterminatedHexadecimalStringConstant=658, Integral=659, NumericFail=660, 
		Numeric=661, PLSQLVARIABLENAME=662, PLSQLIDENTIFIER=663, Whitespace=664, 
		Newline=665, LineComment=666, BlockComment=667, UnterminatedBlockComment=668, 
		MetaCommand=669, EndMetaCommand=670, ErrorCharacter=671, EscapeStringConstant=672, 
		UnterminatedEscapeStringConstant=673, InvalidEscapeStringConstant=674, 
		InvalidUnterminatedEscapeStringConstant=675, AfterEscapeStringConstantMode_NotContinued=676, 
		AfterEscapeStringConstantWithNewlineMode_NotContinued=677, DollarText=678, 
		EndDollarStringConstant=679, AfterEscapeStringConstantWithNewlineMode_Continued=680;
	public const int
		RULE_root = 0, RULE_plsqlroot = 1, RULE_stmtblock = 2, RULE_stmtmulti = 3, 
		RULE_stmt = 4, RULE_plsqlconsolecommand = 5, RULE_callstmt = 6, RULE_createrolestmt = 7, 
		RULE_opt_with = 8, RULE_optrolelist = 9, RULE_alteroptrolelist = 10, RULE_alteroptroleelem = 11, 
		RULE_createoptroleelem = 12, RULE_createuserstmt = 13, RULE_alterrolestmt = 14, 
		RULE_opt_in_database = 15, RULE_alterrolesetstmt = 16, RULE_droprolestmt = 17, 
		RULE_creategroupstmt = 18, RULE_altergroupstmt = 19, RULE_add_drop = 20, 
		RULE_createschemastmt = 21, RULE_optschemaname = 22, RULE_optschemaeltlist = 23, 
		RULE_schema_stmt = 24, RULE_variablesetstmt = 25, RULE_set_rest = 26, 
		RULE_generic_set = 27, RULE_set_rest_more = 28, RULE_var_name = 29, RULE_var_list = 30, 
		RULE_var_value = 31, RULE_iso_level = 32, RULE_opt_boolean_or_string = 33, 
		RULE_zone_value = 34, RULE_opt_encoding = 35, RULE_nonreservedword_or_sconst = 36, 
		RULE_variableresetstmt = 37, RULE_reset_rest = 38, RULE_generic_reset = 39, 
		RULE_setresetclause = 40, RULE_functionsetresetclause = 41, RULE_variableshowstmt = 42, 
		RULE_constraintssetstmt = 43, RULE_constraints_set_list = 44, RULE_constraints_set_mode = 45, 
		RULE_checkpointstmt = 46, RULE_discardstmt = 47, RULE_altertablestmt = 48, 
		RULE_alter_table_cmds = 49, RULE_partition_cmd = 50, RULE_index_partition_cmd = 51, 
		RULE_alter_table_cmd = 52, RULE_alter_column_default = 53, RULE_opt_drop_behavior = 54, 
		RULE_opt_collate_clause = 55, RULE_alter_using = 56, RULE_replica_identity = 57, 
		RULE_reloptions = 58, RULE_opt_reloptions = 59, RULE_reloption_list = 60, 
		RULE_reloption_elem = 61, RULE_alter_identity_column_option_list = 62, 
		RULE_alter_identity_column_option = 63, RULE_partitionboundspec = 64, 
		RULE_hash_partbound_elem = 65, RULE_hash_partbound = 66, RULE_altercompositetypestmt = 67, 
		RULE_alter_type_cmds = 68, RULE_alter_type_cmd = 69, RULE_closeportalstmt = 70, 
		RULE_copystmt = 71, RULE_copy_from = 72, RULE_opt_program = 73, RULE_copy_file_name = 74, 
		RULE_copy_options = 75, RULE_copy_opt_list = 76, RULE_copy_opt_item = 77, 
		RULE_opt_binary = 78, RULE_copy_delimiter = 79, RULE_opt_using = 80, RULE_copy_generic_opt_list = 81, 
		RULE_copy_generic_opt_elem = 82, RULE_copy_generic_opt_arg = 83, RULE_copy_generic_opt_arg_list = 84, 
		RULE_copy_generic_opt_arg_list_item = 85, RULE_createstmt = 86, RULE_opttemp = 87, 
		RULE_opttableelementlist = 88, RULE_opttypedtableelementlist = 89, RULE_tableelementlist = 90, 
		RULE_typedtableelementlist = 91, RULE_tableelement = 92, RULE_typedtableelement = 93, 
		RULE_columnDef = 94, RULE_columnOptions = 95, RULE_colquallist = 96, RULE_colconstraint = 97, 
		RULE_colconstraintelem = 98, RULE_generated_when = 99, RULE_constraintattr = 100, 
		RULE_tablelikeclause = 101, RULE_tablelikeoptionlist = 102, RULE_tablelikeoption = 103, 
		RULE_tableconstraint = 104, RULE_constraintelem = 105, RULE_opt_no_inherit = 106, 
		RULE_opt_column_list = 107, RULE_columnlist = 108, RULE_columnElem = 109, 
		RULE_opt_c_include = 110, RULE_key_match = 111, RULE_exclusionconstraintlist = 112, 
		RULE_exclusionconstraintelem = 113, RULE_exclusionwhereclause = 114, RULE_key_actions = 115, 
		RULE_key_update = 116, RULE_key_delete = 117, RULE_key_action = 118, RULE_optinherit = 119, 
		RULE_optpartitionspec = 120, RULE_partitionspec = 121, RULE_part_params = 122, 
		RULE_part_elem = 123, RULE_table_access_method_clause = 124, RULE_optwith = 125, 
		RULE_oncommitoption = 126, RULE_opttablespace = 127, RULE_optconstablespace = 128, 
		RULE_existingindex = 129, RULE_createstatsstmt = 130, RULE_alterstatsstmt = 131, 
		RULE_createasstmt = 132, RULE_create_as_target = 133, RULE_opt_with_data = 134, 
		RULE_creatematviewstmt = 135, RULE_create_mv_target = 136, RULE_optnolog = 137, 
		RULE_refreshmatviewstmt = 138, RULE_createseqstmt = 139, RULE_alterseqstmt = 140, 
		RULE_optseqoptlist = 141, RULE_optparenthesizedseqoptlist = 142, RULE_seqoptlist = 143, 
		RULE_seqoptelem = 144, RULE_opt_by = 145, RULE_numericonly = 146, RULE_numericonly_list = 147, 
		RULE_createplangstmt = 148, RULE_opt_trusted = 149, RULE_handler_name = 150, 
		RULE_opt_inline_handler = 151, RULE_validator_clause = 152, RULE_opt_validator = 153, 
		RULE_opt_procedural = 154, RULE_createtablespacestmt = 155, RULE_opttablespaceowner = 156, 
		RULE_droptablespacestmt = 157, RULE_createextensionstmt = 158, RULE_create_extension_opt_list = 159, 
		RULE_create_extension_opt_item = 160, RULE_alterextensionstmt = 161, RULE_alter_extension_opt_list = 162, 
		RULE_alter_extension_opt_item = 163, RULE_alterextensioncontentsstmt = 164, 
		RULE_createfdwstmt = 165, RULE_fdw_option = 166, RULE_fdw_options = 167, 
		RULE_opt_fdw_options = 168, RULE_alterfdwstmt = 169, RULE_create_generic_options = 170, 
		RULE_generic_option_list = 171, RULE_alter_generic_options = 172, RULE_alter_generic_option_list = 173, 
		RULE_alter_generic_option_elem = 174, RULE_generic_option_elem = 175, 
		RULE_generic_option_name = 176, RULE_generic_option_arg = 177, RULE_createforeignserverstmt = 178, 
		RULE_opt_type = 179, RULE_foreign_server_version = 180, RULE_opt_foreign_server_version = 181, 
		RULE_alterforeignserverstmt = 182, RULE_createforeigntablestmt = 183, 
		RULE_importforeignschemastmt = 184, RULE_import_qualification_type = 185, 
		RULE_import_qualification = 186, RULE_createusermappingstmt = 187, RULE_auth_ident = 188, 
		RULE_dropusermappingstmt = 189, RULE_alterusermappingstmt = 190, RULE_createpolicystmt = 191, 
		RULE_alterpolicystmt = 192, RULE_rowsecurityoptionalexpr = 193, RULE_rowsecurityoptionalwithcheck = 194, 
		RULE_rowsecuritydefaulttorole = 195, RULE_rowsecurityoptionaltorole = 196, 
		RULE_rowsecuritydefaultpermissive = 197, RULE_rowsecuritydefaultforcmd = 198, 
		RULE_row_security_cmd = 199, RULE_createamstmt = 200, RULE_am_type = 201, 
		RULE_createtrigstmt = 202, RULE_triggeractiontime = 203, RULE_triggerevents = 204, 
		RULE_triggeroneevent = 205, RULE_triggerreferencing = 206, RULE_triggertransitions = 207, 
		RULE_triggertransition = 208, RULE_transitionoldornew = 209, RULE_transitionrowortable = 210, 
		RULE_transitionrelname = 211, RULE_triggerforspec = 212, RULE_triggerforopteach = 213, 
		RULE_triggerfortype = 214, RULE_triggerwhen = 215, RULE_function_or_procedure = 216, 
		RULE_triggerfuncargs = 217, RULE_triggerfuncarg = 218, RULE_optconstrfromtable = 219, 
		RULE_constraintattributespec = 220, RULE_constraintattributeElem = 221, 
		RULE_createeventtrigstmt = 222, RULE_event_trigger_when_list = 223, RULE_event_trigger_when_item = 224, 
		RULE_event_trigger_value_list = 225, RULE_altereventtrigstmt = 226, RULE_enable_trigger = 227, 
		RULE_createassertionstmt = 228, RULE_definestmt = 229, RULE_definition = 230, 
		RULE_def_list = 231, RULE_def_elem = 232, RULE_def_arg = 233, RULE_old_aggr_definition = 234, 
		RULE_old_aggr_list = 235, RULE_old_aggr_elem = 236, RULE_opt_enum_val_list = 237, 
		RULE_enum_val_list = 238, RULE_alterenumstmt = 239, RULE_opt_if_not_exists = 240, 
		RULE_createopclassstmt = 241, RULE_opclass_item_list = 242, RULE_opclass_item = 243, 
		RULE_opt_default = 244, RULE_opt_opfamily = 245, RULE_opclass_purpose = 246, 
		RULE_opt_recheck = 247, RULE_createopfamilystmt = 248, RULE_alteropfamilystmt = 249, 
		RULE_opclass_drop_list = 250, RULE_opclass_drop = 251, RULE_dropopclassstmt = 252, 
		RULE_dropopfamilystmt = 253, RULE_dropownedstmt = 254, RULE_reassignownedstmt = 255, 
		RULE_dropstmt = 256, RULE_object_type_any_name = 257, RULE_object_type_name = 258, 
		RULE_drop_type_name = 259, RULE_object_type_name_on_any_name = 260, RULE_any_name_list = 261, 
		RULE_any_name = 262, RULE_attrs = 263, RULE_type_name_list = 264, RULE_truncatestmt = 265, 
		RULE_opt_restart_seqs = 266, RULE_commentstmt = 267, RULE_comment_text = 268, 
		RULE_seclabelstmt = 269, RULE_opt_provider = 270, RULE_security_label = 271, 
		RULE_fetchstmt = 272, RULE_fetch_args = 273, RULE_from_in = 274, RULE_opt_from_in = 275, 
		RULE_grantstmt = 276, RULE_revokestmt = 277, RULE_privileges = 278, RULE_privilege_list = 279, 
		RULE_privilege = 280, RULE_privilege_target = 281, RULE_grantee_list = 282, 
		RULE_grantee = 283, RULE_opt_grant_grant_option = 284, RULE_grantrolestmt = 285, 
		RULE_revokerolestmt = 286, RULE_opt_grant_admin_option = 287, RULE_opt_granted_by = 288, 
		RULE_alterdefaultprivilegesstmt = 289, RULE_defacloptionlist = 290, RULE_defacloption = 291, 
		RULE_defaclaction = 292, RULE_defacl_privilege_target = 293, RULE_indexstmt = 294, 
		RULE_opt_unique = 295, RULE_opt_concurrently = 296, RULE_opt_index_name = 297, 
		RULE_access_method_clause = 298, RULE_index_params = 299, RULE_index_elem_options = 300, 
		RULE_index_elem = 301, RULE_opt_include = 302, RULE_index_including_params = 303, 
		RULE_opt_collate = 304, RULE_opt_class = 305, RULE_opt_asc_desc = 306, 
		RULE_opt_nulls_order = 307, RULE_createfunctionstmt = 308, RULE_opt_or_replace = 309, 
		RULE_func_args = 310, RULE_func_args_list = 311, RULE_function_with_argtypes_list = 312, 
		RULE_function_with_argtypes = 313, RULE_func_args_with_defaults = 314, 
		RULE_func_args_with_defaults_list = 315, RULE_func_arg = 316, RULE_arg_class = 317, 
		RULE_param_name = 318, RULE_func_return = 319, RULE_func_type = 320, RULE_func_arg_with_default = 321, 
		RULE_aggr_arg = 322, RULE_aggr_args = 323, RULE_aggr_args_list = 324, 
		RULE_aggregate_with_argtypes = 325, RULE_aggregate_with_argtypes_list = 326, 
		RULE_createfunc_opt_list = 327, RULE_common_func_opt_item = 328, RULE_createfunc_opt_item = 329, 
		RULE_func_as = 330, RULE_transform_type_list = 331, RULE_opt_definition = 332, 
		RULE_table_func_column = 333, RULE_table_func_column_list = 334, RULE_alterfunctionstmt = 335, 
		RULE_alterfunc_opt_list = 336, RULE_opt_restrict = 337, RULE_removefuncstmt = 338, 
		RULE_removeaggrstmt = 339, RULE_removeoperstmt = 340, RULE_oper_argtypes = 341, 
		RULE_any_operator = 342, RULE_operator_with_argtypes_list = 343, RULE_operator_with_argtypes = 344, 
		RULE_dostmt = 345, RULE_dostmt_opt_list = 346, RULE_dostmt_opt_item = 347, 
		RULE_createcaststmt = 348, RULE_cast_context = 349, RULE_dropcaststmt = 350, 
		RULE_opt_if_exists = 351, RULE_createtransformstmt = 352, RULE_transform_element_list = 353, 
		RULE_droptransformstmt = 354, RULE_reindexstmt = 355, RULE_reindex_target_type = 356, 
		RULE_reindex_target_multitable = 357, RULE_reindex_option_list = 358, 
		RULE_reindex_option_elem = 359, RULE_altertblspcstmt = 360, RULE_renamestmt = 361, 
		RULE_opt_column = 362, RULE_opt_set_data = 363, RULE_alterobjectdependsstmt = 364, 
		RULE_opt_no = 365, RULE_alterobjectschemastmt = 366, RULE_alteroperatorstmt = 367, 
		RULE_operator_def_list = 368, RULE_operator_def_elem = 369, RULE_operator_def_arg = 370, 
		RULE_altertypestmt = 371, RULE_alterownerstmt = 372, RULE_createpublicationstmt = 373, 
		RULE_opt_publication_for_tables = 374, RULE_publication_for_tables = 375, 
		RULE_alterpublicationstmt = 376, RULE_createsubscriptionstmt = 377, RULE_publication_name_list = 378, 
		RULE_publication_name_item = 379, RULE_altersubscriptionstmt = 380, RULE_dropsubscriptionstmt = 381, 
		RULE_rulestmt = 382, RULE_ruleactionlist = 383, RULE_ruleactionmulti = 384, 
		RULE_ruleactionstmt = 385, RULE_ruleactionstmtOrEmpty = 386, RULE_event = 387, 
		RULE_opt_instead = 388, RULE_notifystmt = 389, RULE_notify_payload = 390, 
		RULE_listenstmt = 391, RULE_unlistenstmt = 392, RULE_transactionstmt = 393, 
		RULE_opt_transaction = 394, RULE_transaction_mode_item = 395, RULE_transaction_mode_list = 396, 
		RULE_transaction_mode_list_or_empty = 397, RULE_opt_transaction_chain = 398, 
		RULE_viewstmt = 399, RULE_opt_check_option = 400, RULE_loadstmt = 401, 
		RULE_createdbstmt = 402, RULE_createdb_opt_list = 403, RULE_createdb_opt_items = 404, 
		RULE_createdb_opt_item = 405, RULE_createdb_opt_name = 406, RULE_opt_equal = 407, 
		RULE_alterdatabasestmt = 408, RULE_alterdatabasesetstmt = 409, RULE_dropdbstmt = 410, 
		RULE_drop_option_list = 411, RULE_drop_option = 412, RULE_altercollationstmt = 413, 
		RULE_altersystemstmt = 414, RULE_createdomainstmt = 415, RULE_alterdomainstmt = 416, 
		RULE_opt_as = 417, RULE_altertsdictionarystmt = 418, RULE_altertsconfigurationstmt = 419, 
		RULE_any_with = 420, RULE_createconversionstmt = 421, RULE_clusterstmt = 422, 
		RULE_cluster_index_specification = 423, RULE_vacuumstmt = 424, RULE_analyzestmt = 425, 
		RULE_vac_analyze_option_list = 426, RULE_analyze_keyword = 427, RULE_vac_analyze_option_elem = 428, 
		RULE_vac_analyze_option_name = 429, RULE_vac_analyze_option_arg = 430, 
		RULE_opt_analyze = 431, RULE_opt_verbose = 432, RULE_opt_full = 433, RULE_opt_freeze = 434, 
		RULE_opt_name_list = 435, RULE_vacuum_relation = 436, RULE_vacuum_relation_list = 437, 
		RULE_opt_vacuum_relation_list = 438, RULE_explainstmt = 439, RULE_explainablestmt = 440, 
		RULE_explain_option_list = 441, RULE_explain_option_elem = 442, RULE_explain_option_name = 443, 
		RULE_explain_option_arg = 444, RULE_preparestmt = 445, RULE_prep_type_clause = 446, 
		RULE_preparablestmt = 447, RULE_executestmt = 448, RULE_execute_param_clause = 449, 
		RULE_deallocatestmt = 450, RULE_insertstmt = 451, RULE_insert_target = 452, 
		RULE_insert_rest = 453, RULE_override_kind = 454, RULE_insert_column_list = 455, 
		RULE_insert_column_item = 456, RULE_opt_on_conflict = 457, RULE_opt_conf_expr = 458, 
		RULE_returning_clause = 459, RULE_mergestmt = 460, RULE_merge_insert_clause = 461, 
		RULE_merge_update_clause = 462, RULE_merge_delete_clause = 463, RULE_deletestmt = 464, 
		RULE_using_clause = 465, RULE_lockstmt = 466, RULE_opt_lock = 467, RULE_lock_type = 468, 
		RULE_opt_nowait = 469, RULE_opt_nowait_or_skip = 470, RULE_updatestmt = 471, 
		RULE_set_clause_list = 472, RULE_set_clause = 473, RULE_set_target = 474, 
		RULE_set_target_list = 475, RULE_declarecursorstmt = 476, RULE_cursor_name = 477, 
		RULE_cursor_options = 478, RULE_opt_hold = 479, RULE_selectstmt = 480, 
		RULE_select_with_parens = 481, RULE_select_no_parens = 482, RULE_select_clause = 483, 
		RULE_simple_select_intersect = 484, RULE_simple_select_pramary = 485, 
		RULE_with_clause = 486, RULE_cte_list = 487, RULE_common_table_expr = 488, 
		RULE_opt_materialized = 489, RULE_opt_with_clause = 490, RULE_into_clause = 491, 
		RULE_opt_strict = 492, RULE_opttempTableName = 493, RULE_opt_table = 494, 
		RULE_all_or_distinct = 495, RULE_distinct_clause = 496, RULE_opt_all_clause = 497, 
		RULE_opt_sort_clause = 498, RULE_sort_clause = 499, RULE_sortby_list = 500, 
		RULE_sortby = 501, RULE_select_limit = 502, RULE_opt_select_limit = 503, 
		RULE_limit_clause = 504, RULE_offset_clause = 505, RULE_select_limit_value = 506, 
		RULE_select_offset_value = 507, RULE_select_fetch_first_value = 508, RULE_i_or_f_const = 509, 
		RULE_row_or_rows = 510, RULE_first_or_next = 511, RULE_group_clause = 512, 
		RULE_group_by_list = 513, RULE_group_by_item = 514, RULE_empty_grouping_set = 515, 
		RULE_rollup_clause = 516, RULE_cube_clause = 517, RULE_grouping_sets_clause = 518, 
		RULE_having_clause = 519, RULE_for_locking_clause = 520, RULE_opt_for_locking_clause = 521, 
		RULE_for_locking_items = 522, RULE_for_locking_item = 523, RULE_for_locking_strength = 524, 
		RULE_locked_rels_list = 525, RULE_values_clause = 526, RULE_from_clause = 527, 
		RULE_from_list = 528, RULE_non_ansi_join = 529, RULE_table_ref = 530, 
		RULE_alias_clause = 531, RULE_opt_alias_clause = 532, RULE_table_alias_clause = 533, 
		RULE_func_alias_clause = 534, RULE_join_type = 535, RULE_join_qual = 536, 
		RULE_relation_expr = 537, RULE_relation_expr_list = 538, RULE_relation_expr_opt_alias = 539, 
		RULE_tablesample_clause = 540, RULE_opt_repeatable_clause = 541, RULE_func_table = 542, 
		RULE_rowsfrom_item = 543, RULE_rowsfrom_list = 544, RULE_opt_col_def_list = 545, 
		RULE_opt_ordinality = 546, RULE_where_clause = 547, RULE_where_or_current_clause = 548, 
		RULE_opttablefuncelementlist = 549, RULE_tablefuncelementlist = 550, RULE_tablefuncelement = 551, 
		RULE_xmltable = 552, RULE_xmltable_column_list = 553, RULE_xmltable_column_el = 554, 
		RULE_xmltable_column_option_list = 555, RULE_xmltable_column_option_el = 556, 
		RULE_xml_namespace_list = 557, RULE_xml_namespace_el = 558, RULE_typename = 559, 
		RULE_opt_array_bounds = 560, RULE_simpletypename = 561, RULE_consttypename = 562, 
		RULE_generictype = 563, RULE_opt_type_modifiers = 564, RULE_numeric = 565, 
		RULE_opt_float = 566, RULE_bit = 567, RULE_constbit = 568, RULE_bitwithlength = 569, 
		RULE_bitwithoutlength = 570, RULE_character = 571, RULE_constcharacter = 572, 
		RULE_character_c = 573, RULE_opt_varying = 574, RULE_constdatetime = 575, 
		RULE_constinterval = 576, RULE_opt_timezone = 577, RULE_opt_interval = 578, 
		RULE_interval_second = 579, RULE_opt_escape = 580, RULE_a_expr = 581, 
		RULE_a_expr_qual = 582, RULE_a_expr_lessless = 583, RULE_a_expr_or = 584, 
		RULE_a_expr_and = 585, RULE_a_expr_between = 586, RULE_a_expr_in = 587, 
		RULE_a_expr_unary_not = 588, RULE_a_expr_isnull = 589, RULE_a_expr_is_not = 590, 
		RULE_a_expr_compare = 591, RULE_a_expr_like = 592, RULE_a_expr_qual_op = 593, 
		RULE_a_expr_unary_qualop = 594, RULE_a_expr_add = 595, RULE_a_expr_mul = 596, 
		RULE_a_expr_caret = 597, RULE_a_expr_unary_sign = 598, RULE_a_expr_at_time_zone = 599, 
		RULE_a_expr_collate = 600, RULE_a_expr_typecast = 601, RULE_b_expr = 602, 
		RULE_c_expr = 603, RULE_plsqlvariablename = 604, RULE_func_application = 605, 
		RULE_func_expr = 606, RULE_func_expr_windowless = 607, RULE_func_expr_common_subexpr = 608, 
		RULE_xml_root_version = 609, RULE_opt_xml_root_standalone = 610, RULE_xml_attributes = 611, 
		RULE_xml_attribute_list = 612, RULE_xml_attribute_el = 613, RULE_document_or_content = 614, 
		RULE_xml_whitespace_option = 615, RULE_xmlexists_argument = 616, RULE_xml_passing_mech = 617, 
		RULE_within_group_clause = 618, RULE_filter_clause = 619, RULE_window_clause = 620, 
		RULE_window_definition_list = 621, RULE_window_definition = 622, RULE_over_clause = 623, 
		RULE_window_specification = 624, RULE_opt_existing_window_name = 625, 
		RULE_opt_partition_clause = 626, RULE_opt_frame_clause = 627, RULE_frame_extent = 628, 
		RULE_frame_bound = 629, RULE_opt_window_exclusion_clause = 630, RULE_row = 631, 
		RULE_explicit_row = 632, RULE_implicit_row = 633, RULE_sub_type = 634, 
		RULE_all_op = 635, RULE_mathop = 636, RULE_qual_op = 637, RULE_qual_all_op = 638, 
		RULE_subquery_Op = 639, RULE_expr_list = 640, RULE_func_arg_list = 641, 
		RULE_func_arg_expr = 642, RULE_type_list = 643, RULE_array_expr = 644, 
		RULE_array_expr_list = 645, RULE_extract_list = 646, RULE_extract_arg = 647, 
		RULE_unicode_normal_form = 648, RULE_overlay_list = 649, RULE_position_list = 650, 
		RULE_substr_list = 651, RULE_trim_list = 652, RULE_in_expr = 653, RULE_case_expr = 654, 
		RULE_when_clause_list = 655, RULE_when_clause = 656, RULE_case_default = 657, 
		RULE_case_arg = 658, RULE_columnref = 659, RULE_indirection_el = 660, 
		RULE_opt_slice_bound = 661, RULE_indirection = 662, RULE_opt_indirection = 663, 
		RULE_opt_target_list = 664, RULE_target_list = 665, RULE_target_el = 666, 
		RULE_qualified_name_list = 667, RULE_qualified_name = 668, RULE_name_list = 669, 
		RULE_name = 670, RULE_attr_name = 671, RULE_file_name = 672, RULE_func_name = 673, 
		RULE_aexprconst = 674, RULE_xconst = 675, RULE_bconst = 676, RULE_fconst = 677, 
		RULE_iconst = 678, RULE_sconst = 679, RULE_anysconst = 680, RULE_opt_uescape = 681, 
		RULE_signediconst = 682, RULE_roleid = 683, RULE_rolespec = 684, RULE_role_list = 685, 
		RULE_colid = 686, RULE_table_alias = 687, RULE_type_function_name = 688, 
		RULE_nonreservedword = 689, RULE_collabel = 690, RULE_identifier = 691, 
		RULE_plsqlidentifier = 692, RULE_unreserved_keyword = 693, RULE_col_name_keyword = 694, 
		RULE_type_func_name_keyword = 695, RULE_reserved_keyword = 696, RULE_builtin_function_name = 697, 
		RULE_pl_function = 698, RULE_comp_options = 699, RULE_comp_option = 700, 
		RULE_sharp = 701, RULE_option_value = 702, RULE_opt_semi = 703, RULE_pl_block = 704, 
		RULE_decl_sect = 705, RULE_decl_start = 706, RULE_decl_stmts = 707, RULE_label_decl = 708, 
		RULE_decl_stmt = 709, RULE_decl_statement = 710, RULE_opt_scrollable = 711, 
		RULE_decl_cursor_query = 712, RULE_decl_cursor_args = 713, RULE_decl_cursor_arglist = 714, 
		RULE_decl_cursor_arg = 715, RULE_decl_is_for = 716, RULE_decl_aliasitem = 717, 
		RULE_decl_varname = 718, RULE_decl_const = 719, RULE_decl_datatype = 720, 
		RULE_decl_collate = 721, RULE_decl_notnull = 722, RULE_decl_defval = 723, 
		RULE_decl_defkey = 724, RULE_assign_operator = 725, RULE_proc_sect = 726, 
		RULE_proc_stmt = 727, RULE_stmt_perform = 728, RULE_stmt_call = 729, RULE_opt_expr_list = 730, 
		RULE_stmt_assign = 731, RULE_stmt_getdiag = 732, RULE_getdiag_area_opt = 733, 
		RULE_getdiag_list = 734, RULE_getdiag_list_item = 735, RULE_getdiag_item = 736, 
		RULE_getdiag_target = 737, RULE_assign_var = 738, RULE_stmt_if = 739, 
		RULE_stmt_elsifs = 740, RULE_stmt_else = 741, RULE_stmt_case = 742, RULE_opt_expr_until_when = 743, 
		RULE_case_when_list = 744, RULE_case_when = 745, RULE_opt_case_else = 746, 
		RULE_stmt_loop = 747, RULE_stmt_while = 748, RULE_stmt_for = 749, RULE_for_control = 750, 
		RULE_opt_for_using_expression = 751, RULE_opt_cursor_parameters = 752, 
		RULE_opt_reverse = 753, RULE_opt_by_expression = 754, RULE_for_variable = 755, 
		RULE_stmt_foreach_a = 756, RULE_foreach_slice = 757, RULE_stmt_exit = 758, 
		RULE_exit_type = 759, RULE_stmt_return = 760, RULE_opt_return_result = 761, 
		RULE_stmt_raise = 762, RULE_opt_stmt_raise_level = 763, RULE_opt_raise_list = 764, 
		RULE_opt_raise_using = 765, RULE_opt_raise_using_elem = 766, RULE_opt_raise_using_elem_list = 767, 
		RULE_stmt_assert = 768, RULE_opt_stmt_assert_message = 769, RULE_loop_body = 770, 
		RULE_stmt_execsql = 771, RULE_stmt_dynexecute = 772, RULE_opt_execute_using = 773, 
		RULE_opt_execute_using_list = 774, RULE_opt_execute_into = 775, RULE_stmt_open = 776, 
		RULE_opt_open_bound_list_item = 777, RULE_opt_open_bound_list = 778, RULE_opt_open_using = 779, 
		RULE_opt_scroll_option = 780, RULE_opt_scroll_option_no = 781, RULE_stmt_fetch = 782, 
		RULE_into_target = 783, RULE_opt_cursor_from = 784, RULE_opt_fetch_direction = 785, 
		RULE_stmt_move = 786, RULE_stmt_close = 787, RULE_stmt_null = 788, RULE_stmt_commit = 789, 
		RULE_stmt_rollback = 790, RULE_plsql_opt_transaction_chain = 791, RULE_stmt_set = 792, 
		RULE_cursor_variable = 793, RULE_exception_sect = 794, RULE_proc_exceptions = 795, 
		RULE_proc_exception = 796, RULE_proc_conditions = 797, RULE_proc_condition = 798, 
		RULE_opt_block_label = 799, RULE_opt_loop_label = 800, RULE_opt_label = 801, 
		RULE_opt_exitcond = 802, RULE_any_identifier = 803, RULE_plsql_unreserved_keyword = 804, 
		RULE_sql_expression = 805, RULE_expr_until_then = 806, RULE_expr_until_semi = 807, 
		RULE_expr_until_rightbracket = 808, RULE_expr_until_loop = 809, RULE_make_execsql_stmt = 810, 
		RULE_opt_returning_clause_into = 811;
	public static readonly string[] ruleNames = {
		"root", "plsqlroot", "stmtblock", "stmtmulti", "stmt", "plsqlconsolecommand", 
		"callstmt", "createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", 
		"alteroptroleelem", "createoptroleelem", "createuserstmt", "alterrolestmt", 
		"opt_in_database", "alterrolesetstmt", "droprolestmt", "creategroupstmt", 
		"altergroupstmt", "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
		"schema_stmt", "variablesetstmt", "set_rest", "generic_set", "set_rest_more", 
		"var_name", "var_list", "var_value", "iso_level", "opt_boolean_or_string", 
		"zone_value", "opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", 
		"reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
		"variableshowstmt", "constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
		"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
		"partition_cmd", "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
		"opt_drop_behavior", "opt_collate_clause", "alter_using", "replica_identity", 
		"reloptions", "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option_list", 
		"alter_identity_column_option", "partitionboundspec", "hash_partbound_elem", 
		"hash_partbound", "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
		"closeportalstmt", "copystmt", "copy_from", "opt_program", "copy_file_name", 
		"copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", "copy_delimiter", 
		"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
		"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createstmt", 
		"opttemp", "opttableelementlist", "opttypedtableelementlist", "tableelementlist", 
		"typedtableelementlist", "tableelement", "typedtableelement", "columnDef", 
		"columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
		"generated_when", "constraintattr", "tablelikeclause", "tablelikeoptionlist", 
		"tablelikeoption", "tableconstraint", "constraintelem", "opt_no_inherit", 
		"opt_column_list", "columnlist", "columnElem", "opt_c_include", "key_match", 
		"exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
		"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
		"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
		"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
		"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
		"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
		"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
		"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
		"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
		"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
		"createtablespacestmt", "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
		"create_extension_opt_list", "create_extension_opt_item", "alterextensionstmt", 
		"alter_extension_opt_list", "alter_extension_opt_item", "alterextensioncontentsstmt", 
		"createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createforeignserverstmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "alterforeignserverstmt", 
		"createforeigntablestmt", "importforeignschemastmt", "import_qualification_type", 
		"import_qualification", "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
		"alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
		"rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
		"rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", "row_security_cmd", 
		"createamstmt", "am_type", "createtrigstmt", "triggeractiontime", "triggerevents", 
		"triggeroneevent", "triggerreferencing", "triggertransitions", "triggertransition", 
		"transitionoldornew", "transitionrowortable", "transitionrelname", "triggerforspec", 
		"triggerforopteach", "triggerfortype", "triggerwhen", "function_or_procedure", 
		"triggerfuncargs", "triggerfuncarg", "optconstrfromtable", "constraintattributespec", 
		"constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
		"event_trigger_when_item", "event_trigger_value_list", "altereventtrigstmt", 
		"enable_trigger", "createassertionstmt", "definestmt", "definition", "def_list", 
		"def_elem", "def_arg", "old_aggr_definition", "old_aggr_list", "old_aggr_elem", 
		"opt_enum_val_list", "enum_val_list", "alterenumstmt", "opt_if_not_exists", 
		"createopclassstmt", "opclass_item_list", "opclass_item", "opt_default", 
		"opt_opfamily", "opclass_purpose", "opt_recheck", "createopfamilystmt", 
		"alteropfamilystmt", "opclass_drop_list", "opclass_drop", "dropopclassstmt", 
		"dropopfamilystmt", "dropownedstmt", "reassignownedstmt", "dropstmt", 
		"object_type_any_name", "object_type_name", "drop_type_name", "object_type_name_on_any_name", 
		"any_name_list", "any_name", "attrs", "type_name_list", "truncatestmt", 
		"opt_restart_seqs", "commentstmt", "comment_text", "seclabelstmt", "opt_provider", 
		"security_label", "fetchstmt", "fetch_args", "from_in", "opt_from_in", 
		"grantstmt", "revokestmt", "privileges", "privilege_list", "privilege", 
		"privilege_target", "grantee_list", "grantee", "opt_grant_grant_option", 
		"grantrolestmt", "revokerolestmt", "opt_grant_admin_option", "opt_granted_by", 
		"alterdefaultprivilegesstmt", "defacloptionlist", "defacloption", "defaclaction", 
		"defacl_privilege_target", "indexstmt", "opt_unique", "opt_concurrently", 
		"opt_index_name", "access_method_clause", "index_params", "index_elem_options", 
		"index_elem", "opt_include", "index_including_params", "opt_collate", 
		"opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
		"opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
		"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
		"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
		"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
		"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
		"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
		"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
		"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
		"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
		"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
		"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
		"reindex_option_list", "reindex_option_elem", "altertblspcstmt", "renamestmt", 
		"opt_column", "opt_set_data", "alterobjectdependsstmt", "opt_no", "alterobjectschemastmt", 
		"alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
		"altertypestmt", "alterownerstmt", "createpublicationstmt", "opt_publication_for_tables", 
		"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
		"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
		"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
		"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "opt_instead", "notifystmt", 
		"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "opt_transaction", 
		"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
		"opt_transaction_chain", "viewstmt", "opt_check_option", "loadstmt", "createdbstmt", 
		"createdb_opt_list", "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
		"opt_equal", "alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", 
		"drop_option_list", "drop_option", "altercollationstmt", "altersystemstmt", 
		"createdomainstmt", "alterdomainstmt", "opt_as", "altertsdictionarystmt", 
		"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
		"cluster_index_specification", "vacuumstmt", "analyzestmt", "vac_analyze_option_list", 
		"analyze_keyword", "vac_analyze_option_elem", "vac_analyze_option_name", 
		"vac_analyze_option_arg", "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
		"opt_name_list", "vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
		"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
		"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
		"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
		"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
		"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
		"mergestmt", "merge_insert_clause", "merge_update_clause", "merge_delete_clause", 
		"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
		"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", "set_target", 
		"set_target_list", "declarecursorstmt", "cursor_name", "cursor_options", 
		"opt_hold", "selectstmt", "select_with_parens", "select_no_parens", "select_clause", 
		"simple_select_intersect", "simple_select_pramary", "with_clause", "cte_list", 
		"common_table_expr", "opt_materialized", "opt_with_clause", "into_clause", 
		"opt_strict", "opttempTableName", "opt_table", "all_or_distinct", "distinct_clause", 
		"opt_all_clause", "opt_sort_clause", "sort_clause", "sortby_list", "sortby", 
		"select_limit", "opt_select_limit", "limit_clause", "offset_clause", "select_limit_value", 
		"select_offset_value", "select_fetch_first_value", "i_or_f_const", "row_or_rows", 
		"first_or_next", "group_clause", "group_by_list", "group_by_item", "empty_grouping_set", 
		"rollup_clause", "cube_clause", "grouping_sets_clause", "having_clause", 
		"for_locking_clause", "opt_for_locking_clause", "for_locking_items", "for_locking_item", 
		"for_locking_strength", "locked_rels_list", "values_clause", "from_clause", 
		"from_list", "non_ansi_join", "table_ref", "alias_clause", "opt_alias_clause", 
		"table_alias_clause", "func_alias_clause", "join_type", "join_qual", "relation_expr", 
		"relation_expr_list", "relation_expr_opt_alias", "tablesample_clause", 
		"opt_repeatable_clause", "func_table", "rowsfrom_item", "rowsfrom_list", 
		"opt_col_def_list", "opt_ordinality", "where_clause", "where_or_current_clause", 
		"opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
		"xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
		"xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
		"typename", "opt_array_bounds", "simpletypename", "consttypename", "generictype", 
		"opt_type_modifiers", "numeric", "opt_float", "bit", "constbit", "bitwithlength", 
		"bitwithoutlength", "character", "constcharacter", "character_c", "opt_varying", 
		"constdatetime", "constinterval", "opt_timezone", "opt_interval", "interval_second", 
		"opt_escape", "a_expr", "a_expr_qual", "a_expr_lessless", "a_expr_or", 
		"a_expr_and", "a_expr_between", "a_expr_in", "a_expr_unary_not", "a_expr_isnull", 
		"a_expr_is_not", "a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
		"a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
		"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
		"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
		"xml_root_version", "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
		"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
		"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
		"window_definition_list", "window_definition", "over_clause", "window_specification", 
		"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
		"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", "explicit_row", 
		"implicit_row", "sub_type", "all_op", "mathop", "qual_op", "qual_all_op", 
		"subquery_Op", "expr_list", "func_arg_list", "func_arg_expr", "type_list", 
		"array_expr", "array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
		"overlay_list", "position_list", "substr_list", "trim_list", "in_expr", 
		"case_expr", "when_clause_list", "when_clause", "case_default", "case_arg", 
		"columnref", "indirection_el", "opt_slice_bound", "indirection", "opt_indirection", 
		"opt_target_list", "target_list", "target_el", "qualified_name_list", 
		"qualified_name", "name_list", "name", "attr_name", "file_name", "func_name", 
		"aexprconst", "xconst", "bconst", "fconst", "iconst", "sconst", "anysconst", 
		"opt_uescape", "signediconst", "roleid", "rolespec", "role_list", "colid", 
		"table_alias", "type_function_name", "nonreservedword", "collabel", "identifier", 
		"plsqlidentifier", "unreserved_keyword", "col_name_keyword", "type_func_name_keyword", 
		"reserved_keyword", "builtin_function_name", "pl_function", "comp_options", 
		"comp_option", "sharp", "option_value", "opt_semi", "pl_block", "decl_sect", 
		"decl_start", "decl_stmts", "label_decl", "decl_stmt", "decl_statement", 
		"opt_scrollable", "decl_cursor_query", "decl_cursor_args", "decl_cursor_arglist", 
		"decl_cursor_arg", "decl_is_for", "decl_aliasitem", "decl_varname", "decl_const", 
		"decl_datatype", "decl_collate", "decl_notnull", "decl_defval", "decl_defkey", 
		"assign_operator", "proc_sect", "proc_stmt", "stmt_perform", "stmt_call", 
		"opt_expr_list", "stmt_assign", "stmt_getdiag", "getdiag_area_opt", "getdiag_list", 
		"getdiag_list_item", "getdiag_item", "getdiag_target", "assign_var", "stmt_if", 
		"stmt_elsifs", "stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", 
		"case_when", "opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
		"opt_for_using_expression", "opt_cursor_parameters", "opt_reverse", "opt_by_expression", 
		"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
		"stmt_return", "opt_return_result", "stmt_raise", "opt_stmt_raise_level", 
		"opt_raise_list", "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
		"stmt_assert", "opt_stmt_assert_message", "loop_body", "stmt_execsql", 
		"stmt_dynexecute", "opt_execute_using", "opt_execute_using_list", "opt_execute_into", 
		"stmt_open", "opt_open_bound_list_item", "opt_open_bound_list", "opt_open_using", 
		"opt_scroll_option", "opt_scroll_option_no", "stmt_fetch", "into_target", 
		"opt_cursor_from", "opt_fetch_direction", "stmt_move", "stmt_close", "stmt_null", 
		"stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", "stmt_set", 
		"cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
		"proc_conditions", "proc_condition", "opt_block_label", "opt_loop_label", 
		"opt_label", "opt_exitcond", "any_identifier", "plsql_unreserved_keyword", 
		"sql_expression", "expr_until_then", "expr_until_semi", "expr_until_rightbracket", 
		"expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", "'='", 
		"'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", "':='", 
		"'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", null, null, "'ALL'", 
		"'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", 
		"'ASYMMETRIC'", "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", 
		"'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", 
		"'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
		"'DEFAULT'", "'DEFERRABLE'", "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", 
		"'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", 
		"'GROUP'", "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", "'INTO'", 
		"'LATERAL'", "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
		"'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
		"'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
		"'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", 
		"'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", 
		"'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
		"'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", 
		"'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", 
		"'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
		"'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", "'AFTER'", 
		"'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", 
		"'AT'", "'ATOMIC'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", 
		"'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", 
		"'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", 
		"'CLUSTER'", "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
		"'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
		"'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
		"'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", 
		"'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", 
		"'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", 
		"'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", 
		"'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", 
		"'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", 
		"'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", 
		"'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", 
		"'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", "'INDEXES'", "'INHERIT'", 
		"'INHERITS'", "'INLINE'", "'INSENSITIVE'", "'INSERT'", "'INSTEAD'", "'INVOKER'", 
		"'ISOLATION'", "'KEY'", "'LABEL'", "'LANGUAGE'", "'LARGE'", "'LAST'", 
		"'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", "'LOCAL'", "'LOCATION'", 
		"'LOCK'", "'MAPPING'", "'MATCH'", "'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", 
		"'MERGE'", "'MINUTE'", "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", "'NAME'", 
		"'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", "'NOTIFY'", "'NOWAIT'", "'NULLS'", 
		"'OBJECT'", "'OF'", "'OFF'", "'OIDS'", "'OPERATOR'", "'OPTION'", "'OPTIONS'", 
		"'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", "'PARTITION'", "'PASSING'", 
		"'PASSWORD'", "'PLANS'", "'PRECEDING'", "'PREPARE'", "'PREPARED'", "'PRESERVE'", 
		"'PRIOR'", "'PRIVILEGES'", "'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", 
		"'QUOTE'", "'RANGE'", "'READ'", "'REASSIGN'", "'RECHECK'", "'RECURSIVE'", 
		"'REF'", "'REFRESH'", "'REINDEX'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
		"'REPEATABLE'", "'REPLACE'", "'REPLICA'", "'RESET'", "'RESTART'", "'RESTRICT'", 
		"'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", "'RULE'", "'SAVEPOINT'", 
		"'SCHEMA'", "'SCROLL'", "'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", 
		"'SEQUENCES'", "'SERIALIZABLE'", "'SERVER'", "'SESSION'", "'SET'", "'SHARE'", 
		"'SHOW'", "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", "'STANDALONE'", "'START'", 
		"'STATEMENT'", "'STATISTICS'", "'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", 
		"'STRIP'", "'SYSID'", "'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", 
		"'TEMPLATE'", "'TEMPORARY'", "'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", 
		"'TRUSTED'", "'TYPE'", "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", 
		"'UNKNOWN'", "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", "'VACUUM'", 
		"'VALID'", "'VALIDATE'", "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", 
		"'VOLATILE'", "'WHITESPACE'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", 
		"'XML'", "'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", 
		"'BOOLEAN'", "'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", 
		"'EXISTS'", "'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", 
		"'INTEGER'", "'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", 
		"'NULLIF'", "'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", 
		"'ROW'", "'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", 
		"'TREAT'", "'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCOMMENT'", 
		"'XMLAGG'", "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", "'XML_IS_WELL_FORMED_CONTENT'", 
		"'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", 
		"'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
		"'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", "'GENERATED'", 
		"'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", 
		"'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", "'VALUE'", 
		"'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", "'ROUTINES'", "'SCHEMAS'", 
		"'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", "'SQL'", "'DEPENDS'", 
		"'OVERRIDING'", "'CONFLICT'", "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", 
		"'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", 
		"'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", 
		"'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", 
		"'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'PRINT_STRICT_PARAMS'", 
		"'VARIABLE_CONFLICT'", "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'ALIAS'", 
		"'CONSTANT'", "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", 
		"'WHILE'", "'REVERSE'", "'FOREACH'", "'SLICE'", "'EXIT'", "'RETURN'", 
		"'QUERY'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'LOG'", "'INFO'", "'NOTICE'", 
		"'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", "'OPEN'", "'ABS'", "'CBRT'", 
		"'CEIL'", "'CEILING'", "'DEGREES'", "'DIV'", "'EXP'", "'FACTORIAL'", "'FLOOR'", 
		"'GCD'", "'LCM'", "'LN'", "'LOG10'", "'MIN_SCALE'", "'MOD'", "'PI'", "'POWER'", 
		"'RADIANS'", "'ROUND'", "'SCALE'", "'SIGN'", "'SQRT'", "'TRIM_SCALE'", 
		"'TRUNC'", "'WIDTH_BUCKET'", "'RANDOM'", "'SETSEED'", "'ACOS'", "'ACOSD'", 
		"'ASIN'", "'ASIND'", "'ATAN'", "'ATAND'", "'ATAN2'", "'ATAN2D'", "'COS'", 
		"'COSD'", "'COT'", "'COTD'", "'SIN'", "'SIND'", "'TAN'", "'TAND'", "'SINH'", 
		"'COSH'", "'TANH'", "'ASINH'", "'ACOSH'", "'ATANH'", "'BIT_LENGTH'", "'CHAR_LENGTH'", 
		"'CHARACTER_LENGTH'", "'LOWER'", "'OCTET_LENGTH'", "'UPPER'", "'ASCII'", 
		"'BTRIM'", "'CHR'", "'CONCAT'", "'CONCAT_WS'", "'FORMAT'", "'INITCAP'", 
		"'LENGTH'", "'LPAD'", "'LTRIM'", "'MD5'", "'PARSE_IDENT'", "'PG_CLIENT_ENCODING'", 
		"'QUOTE_IDENT'", "'QUOTE_LITERAL'", "'QUOTE_NULLABLE'", "'REGEXP_COUNT'", 
		"'REGEXP_INSTR'", "'REGEXP_LIKE'", "'REGEXP_MATCH'", "'REGEXP_MATCHES'", 
		"'REGEXP_REPLACE'", "'REGEXP_SPLIT_TO_ARRAY'", "'REGEXP_SPLIT_TO_TABLE'", 
		"'REGEXP_SUBSTR'", "'REPEAT'", "'RPAD'", "'RTRIM'", "'SPLIT_PART'", "'STARTS_WITH'", 
		"'STRING_TO_ARRAY'", "'STRING_TO_TABLE'", "'STRPOS'", "'SUBSTR'", "'TO_ASCII'", 
		"'TO_HEX'", "'TRANSLATE'", "'UNISTR'", "'AGE'", "'CLOCK_TIMESTAMP'", "'DATE_BIN'", 
		"'DATE_PART'", "'DATE_TRUNC'", "'ISFINITE'", "'JUSTIFY_DAYS'", "'JUSTIFY_HOURS'", 
		"'JUSTIFY_INTERVAL'", "'MAKE_DATE'", "'MAKE_INTERVAL'", "'MAKE_TIME'", 
		"'MAKE_TIMESTAMP'", "'MAKE_TIMESTAMPTZ'", "'NOW'", "'STATEMENT_TIMESTAMP'", 
		"'TIMEOFDAY'", "'TRANSACTION_TIMESTAMP'", "'TO_TIMESTAMP'", "'TO_CHAR'", 
		"'TO_DATE'", "'TO_NUMBER'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'\\\\'", null, null, null, null, null, null, null, null, 
		null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
		"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", "LESS_EQUALS", 
		"EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", "TYPECAST", 
		"PERCENT", "PARAM", "Operator", "ALL", "ANALYSE", "ANALYZE", "AND", "ANY", 
		"ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", "COLLATE", 
		"COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", 
		"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DEFAULT", "DEFERRABLE", 
		"DESC", "DISTINCT", "DO", "ELSE", "EXCEPT", "FALSE_P", "FETCH", "FOR", 
		"FOREIGN", "FROM", "GRANT", "GROUP_P", "HAVING", "IN_P", "INITIALLY", 
		"INTERSECT", "INTO", "LATERAL_P", "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", 
		"NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", "PRIMARY", 
		"REFERENCES", "RETURNING", "SELECT", "SESSION_USER", "SOME", "SYMMETRIC", 
		"TABLE", "THEN", "TO", "TRAILING", "TRUE_P", "UNION", "UNIQUE", "USER", 
		"USING", "VARIADIC", "WHEN", "WHERE", "WINDOW", "WITH", "AUTHORIZATION", 
		"BINARY", "COLLATION", "CONCURRENTLY", "CROSS", "CURRENT_SCHEMA", "FREEZE", 
		"FULL", "ILIKE", "INNER_P", "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", 
		"NOTNULL", "OUTER_P", "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", 
		"ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", 
		"AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", 
		"ATOMIC", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", 
		"CALLED", "CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
		"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", 
		"COMMITTED", "CONFIGURATION", "CONNECTION", "CONSTRAINTS", "CONTENT_P", 
		"CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", 
		"DATA_P", "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", 
		"DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DICTIONARY", "DISABLE_P", 
		"DISCARD", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ENABLE_P", 
		"ENCODING", "ENCRYPTED", "ENUM_P", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", 
		"EXCLUSIVE", "EXECUTE", "EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", 
		"FIRST_P", "FOLLOWING", "FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", 
		"GRANTED", "HANDLER", "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", 
		"IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", 
		"INDEXES", "INHERIT", "INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", 
		"INSTEAD", "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", 
		"LAST_P", "LEAKPROOF", "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", 
		"LOCK_P", "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", 
		"MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", 
		"NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", "OF", 
		"OFF", "OIDS", "OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", "PARSER", 
		"PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", "PRECEDING", "PREPARE", 
		"PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", 
		"PROGRAM", "QUOTE", "RANGE", "READ", "REASSIGN", "RECHECK", "RECURSIVE", 
		"REF", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", 
		"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", 
		"ROLE", "ROLLBACK", "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", 
		"SECOND_P", "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", 
		"SESSION", "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", "STANDALONE_P", 
		"START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P", 
		"STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", "TEMP", "TEMPLATE", 
		"TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", "TRUNCATE", "TRUSTED", 
		"TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", 
		"UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "VACUUM", "VALID", "VALIDATE", 
		"VALIDATOR", "VARYING", "VERSION_P", "VIEW", "VOLATILE", "WHITESPACE_P", 
		"WITHOUT", "WORK", "WRAPPER", "WRITE", "XML_P", "YEAR_P", "YES_P", "ZONE", 
		"BETWEEN", "BIGINT", "BIT", "BOOLEAN_P", "CHAR_P", "CHARACTER", "COALESCE", 
		"DEC", "DECIMAL_P", "EXISTS", "EXTRACT", "FLOAT_P", "GREATEST", "INOUT", 
		"INT_P", "INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", 
		"NULLIF", "NUMERIC", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", 
		"SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", 
		"VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCOMMENT", "XMLAGG", "XML_IS_WELL_FORMED", 
		"XML_IS_WELL_FORMED_DOCUMENT", "XML_IS_WELL_FORMED_CONTENT", "XPATH", 
		"XPATH_EXISTS", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", 
		"XMLPI", "XMLROOT", "XMLSERIALIZE", "CALL", "CURRENT_P", "ATTACH", "DETACH", 
		"EXPRESSION", "GENERATED", "LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", 
		"IMPORT_P", "POLICY", "METHOD", "REFERENCING", "NEW", "OLD", "VALUE_P", 
		"SUBSCRIPTION", "PUBLICATION", "OUT_P", "END_P", "ROUTINES", "SCHEMAS", 
		"PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", "SQL_P", "DEPENDS", "OVERRIDING", 
		"CONFLICT", "SKIP_P", "LOCKED", "TIES", "ROLLUP", "CUBE", "GROUPING", 
		"SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", "COLUMNS", "XMLNAMESPACES", 
		"ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", "GROUPS", "OTHERS", "NFC", 
		"NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", "NORMALIZE", "DUMP", "PRINT_STRICT_PARAMS", 
		"VARIABLE_CONFLICT", "ERROR", "USE_VARIABLE", "USE_COLUMN", "ALIAS", "CONSTANT", 
		"PERFORM", "GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "REVERSE", 
		"FOREACH", "SLICE", "EXIT", "RETURN", "QUERY", "RAISE", "SQLSTATE", "DEBUG", 
		"LOG", "INFO", "NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", 
		"ABS", "CBRT", "CEIL", "CEILING", "DEGREES", "DIV", "EXP", "FACTORIAL", 
		"FLOOR", "GCD", "LCM", "LN", "LOG10", "MIN_SCALE", "MOD", "PI", "POWER", 
		"RADIANS", "ROUND", "SCALE", "SIGN", "SQRT", "TRIM_SCALE", "TRUNC", "WIDTH_BUCKET", 
		"RANDOM", "SETSEED", "ACOS", "ACOSD", "ASIN", "ASIND", "ATAN", "ATAND", 
		"ATAN2", "ATAN2D", "COS", "COSD", "COT", "COTD", "SIN", "SIND", "TAN", 
		"TAND", "SINH", "COSH", "TANH", "ASINH", "ACOSH", "ATANH", "BIT_LENGTH", 
		"CHAR_LENGTH", "CHARACTER_LENGTH", "LOWER", "OCTET_LENGTH", "UPPER", "ASCII", 
		"BTRIM", "CHR", "CONCAT", "CONCAT_WS", "FORMAT", "INITCAP", "LENGTH", 
		"LPAD", "LTRIM", "MD5", "PARSE_IDENT", "PG_CLIENT_ENCODING", "QUOTE_IDENT", 
		"QUOTE_LITERAL", "QUOTE_NULLABLE", "REGEXP_COUNT", "REGEXP_INSTR", "REGEXP_LIKE", 
		"REGEXP_MATCH", "REGEXP_MATCHES", "REGEXP_REPLACE", "REGEXP_SPLIT_TO_ARRAY", 
		"REGEXP_SPLIT_TO_TABLE", "REGEXP_SUBSTR", "REPEAT", "RPAD", "RTRIM", "SPLIT_PART", 
		"STARTS_WITH", "STRING_TO_ARRAY", "STRING_TO_TABLE", "STRPOS", "SUBSTR", 
		"TO_ASCII", "TO_HEX", "TRANSLATE", "UNISTR", "AGE", "CLOCK_TIMESTAMP", 
		"DATE_BIN", "DATE_PART", "DATE_TRUNC", "ISFINITE", "JUSTIFY_DAYS", "JUSTIFY_HOURS", 
		"JUSTIFY_INTERVAL", "MAKE_DATE", "MAKE_INTERVAL", "MAKE_TIME", "MAKE_TIMESTAMP", 
		"MAKE_TIMESTAMPTZ", "NOW", "STATEMENT_TIMESTAMP", "TIMEOFDAY", "TRANSACTION_TIMESTAMP", 
		"TO_TIMESTAMP", "TO_CHAR", "TO_DATE", "TO_NUMBER", "Identifier", "QuotedIdentifier", 
		"UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
		"UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", "InvalidUnicodeQuotedIdentifier", 
		"InvalidUnterminatedUnicodeQuotedIdentifier", "StringConstant", "UnterminatedStringConstant", 
		"UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
		"BeginDollarStringConstant", "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
		"InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
		"HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
		"InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
		"Integral", "NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", 
		"Whitespace", "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
		"MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
		"UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
		"AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
		"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PostgreSQLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PostgreSQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}



		public PostgreSQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PostgreSQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtblockContext stmtblock() {
			return GetRuleContext<StmtblockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PostgreSQLParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1624;
			stmtblock();
			State = 1625;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlrootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pl_functionContext pl_function() {
			return GetRuleContext<Pl_functionContext>(0);
		}
		public PlsqlrootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlroot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlroot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlroot(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlrootContext plsqlroot() {
		PlsqlrootContext _localctx = new PlsqlrootContext(Context, State);
		EnterRule(_localctx, 2, RULE_plsqlroot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			pl_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtblockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtmultiContext stmtmulti() {
			return GetRuleContext<StmtmultiContext>(0);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtblock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtblock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtblock(this);
		}
	}

	[RuleVersion(0)]
	public StmtblockContext stmtblock() {
		StmtblockContext _localctx = new StmtblockContext(Context, State);
		EnterRule(_localctx, 4, RULE_stmtblock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1629;
			stmtmulti();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PostgreSQLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PostgreSQLParser.SEMI, i);
		}
		public StmtmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmtmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmtmulti(this);
		}
	}

	[RuleVersion(0)]
	public StmtmultiContext stmtmulti() {
		StmtmultiContext _localctx = new StmtmultiContext(Context, State);
		EnterRule(_localctx, 6, RULE_stmtmulti);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2450028572476178436L) != 0 || (((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 1099654234113L) != 0 || (((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & -8627205824675839487L) != 0 || (((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 4686037194794598403L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 1170022785714177L) != 0 || (((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & 6401L) != 0 || (((_la - 416)) & ~0x3f) == 0 && ((1L << (_la - 416)) & 550292946945L) != 0 || _la==MetaCommand) {
				{
				{
				State = 1631;
				stmt();
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMI) {
					{
					State = 1632;
					Match(SEMI);
					}
				}

				}
				}
				State = 1639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AltereventtrigstmtContext altereventtrigstmt() {
			return GetRuleContext<AltereventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercollationstmtContext altercollationstmt() {
			return GetRuleContext<AltercollationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasestmtContext alterdatabasestmt() {
			return GetRuleContext<AlterdatabasestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdatabasesetstmtContext alterdatabasesetstmt() {
			return GetRuleContext<AlterdatabasesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
			return GetRuleContext<AlterdefaultprivilegesstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterdomainstmtContext alterdomainstmt() {
			return GetRuleContext<AlterdomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterenumstmtContext alterenumstmt() {
			return GetRuleContext<AlterenumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensionstmtContext alterextensionstmt() {
			return GetRuleContext<AlterextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
			return GetRuleContext<AlterextensioncontentsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfdwstmtContext alterfdwstmt() {
			return GetRuleContext<AlterfdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterforeignserverstmtContext alterforeignserverstmt() {
			return GetRuleContext<AlterforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterfunctionstmtContext alterfunctionstmt() {
			return GetRuleContext<AlterfunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltergroupstmtContext altergroupstmt() {
			return GetRuleContext<AltergroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectdependsstmtContext alterobjectdependsstmt() {
			return GetRuleContext<AlterobjectdependsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterobjectschemastmtContext alterobjectschemastmt() {
			return GetRuleContext<AlterobjectschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterownerstmtContext alterownerstmt() {
			return GetRuleContext<AlterownerstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroperatorstmtContext alteroperatorstmt() {
			return GetRuleContext<AlteroperatorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertypestmtContext altertypestmt() {
			return GetRuleContext<AltertypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpolicystmtContext alterpolicystmt() {
			return GetRuleContext<AlterpolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterseqstmtContext alterseqstmt() {
			return GetRuleContext<AlterseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersystemstmtContext altersystemstmt() {
			return GetRuleContext<AltersystemstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertablestmtContext altertablestmt() {
			return GetRuleContext<AltertablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertblspcstmtContext altertblspcstmt() {
			return GetRuleContext<AltertblspcstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltercompositetypestmtContext altercompositetypestmt() {
			return GetRuleContext<AltercompositetypestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterpublicationstmtContext alterpublicationstmt() {
			return GetRuleContext<AlterpublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolesetstmtContext alterrolesetstmt() {
			return GetRuleContext<AlterrolesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterrolestmtContext alterrolestmt() {
			return GetRuleContext<AlterrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltersubscriptionstmtContext altersubscriptionstmt() {
			return GetRuleContext<AltersubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterstatsstmtContext alterstatsstmt() {
			return GetRuleContext<AlterstatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsconfigurationstmtContext altertsconfigurationstmt() {
			return GetRuleContext<AltertsconfigurationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AltertsdictionarystmtContext altertsdictionarystmt() {
			return GetRuleContext<AltertsdictionarystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterusermappingstmtContext alterusermappingstmt() {
			return GetRuleContext<AlterusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzestmtContext analyzestmt() {
			return GetRuleContext<AnalyzestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallstmtContext callstmt() {
			return GetRuleContext<CallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckpointstmtContext checkpointstmt() {
			return GetRuleContext<CheckpointstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloseportalstmtContext closeportalstmt() {
			return GetRuleContext<CloseportalstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClusterstmtContext clusterstmt() {
			return GetRuleContext<ClusterstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentstmtContext commentstmt() {
			return GetRuleContext<CommentstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintssetstmtContext constraintssetstmt() {
			return GetRuleContext<ConstraintssetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopystmtContext copystmt() {
			return GetRuleContext<CopystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateamstmtContext createamstmt() {
			return GetRuleContext<CreateamstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateassertionstmtContext createassertionstmt() {
			return GetRuleContext<CreateassertionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatecaststmtContext createcaststmt() {
			return GetRuleContext<CreatecaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateconversionstmtContext createconversionstmt() {
			return GetRuleContext<CreateconversionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedomainstmtContext createdomainstmt() {
			return GetRuleContext<CreatedomainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateextensionstmtContext createextensionstmt() {
			return GetRuleContext<CreateextensionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefdwstmtContext createfdwstmt() {
			return GetRuleContext<CreatefdwstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeignserverstmtContext createforeignserverstmt() {
			return GetRuleContext<CreateforeignserverstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateforeigntablestmtContext createforeigntablestmt() {
			return GetRuleContext<CreateforeigntablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatefunctionstmtContext createfunctionstmt() {
			return GetRuleContext<CreatefunctionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreategroupstmtContext creategroupstmt() {
			return GetRuleContext<CreategroupstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopclassstmtContext createopclassstmt() {
			return GetRuleContext<CreateopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateopfamilystmtContext createopfamilystmt() {
			return GetRuleContext<CreateopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepublicationstmtContext createpublicationstmt() {
			return GetRuleContext<CreatepublicationstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteropfamilystmtContext alteropfamilystmt() {
			return GetRuleContext<AlteropfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatepolicystmtContext createpolicystmt() {
			return GetRuleContext<CreatepolicystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateplangstmtContext createplangstmt() {
			return GetRuleContext<CreateplangstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateschemastmtContext createschemastmt() {
			return GetRuleContext<CreateschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatesubscriptionstmtContext createsubscriptionstmt() {
			return GetRuleContext<CreatesubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatestatsstmtContext createstatsstmt() {
			return GetRuleContext<CreatestatsstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetablespacestmtContext createtablespacestmt() {
			return GetRuleContext<CreatetablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetransformstmtContext createtransformstmt() {
			return GetRuleContext<CreatetransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateeventtrigstmtContext createeventtrigstmt() {
			return GetRuleContext<CreateeventtrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreaterolestmtContext createrolestmt() {
			return GetRuleContext<CreaterolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateuserstmtContext createuserstmt() {
			return GetRuleContext<CreateuserstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateusermappingstmtContext createusermappingstmt() {
			return GetRuleContext<CreateusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatedbstmtContext createdbstmt() {
			return GetRuleContext<CreatedbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatestmtContext deallocatestmt() {
			return GetRuleContext<DeallocatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinestmtContext definestmt() {
			return GetRuleContext<DefinestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardstmtContext discardstmt() {
			return GetRuleContext<DiscardstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DostmtContext dostmt() {
			return GetRuleContext<DostmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropcaststmtContext dropcaststmt() {
			return GetRuleContext<DropcaststmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopclassstmtContext dropopclassstmt() {
			return GetRuleContext<DropopclassstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropopfamilystmtContext dropopfamilystmt() {
			return GetRuleContext<DropopfamilystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropownedstmtContext dropownedstmt() {
			return GetRuleContext<DropownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropstmtContext dropstmt() {
			return GetRuleContext<DropstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropsubscriptionstmtContext dropsubscriptionstmt() {
			return GetRuleContext<DropsubscriptionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptablespacestmtContext droptablespacestmt() {
			return GetRuleContext<DroptablespacestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroptransformstmtContext droptransformstmt() {
			return GetRuleContext<DroptransformstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DroprolestmtContext droprolestmt() {
			return GetRuleContext<DroprolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropusermappingstmtContext dropusermappingstmt() {
			return GetRuleContext<DropusermappingstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropdbstmtContext dropdbstmt() {
			return GetRuleContext<DropdbstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainstmtContext explainstmt() {
			return GetRuleContext<ExplainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FetchstmtContext fetchstmt() {
			return GetRuleContext<FetchstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantrolestmtContext grantrolestmt() {
			return GetRuleContext<GrantrolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportforeignschemastmtContext importforeignschemastmt() {
			return GetRuleContext<ImportforeignschemastmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergestmtContext mergestmt() {
			return GetRuleContext<MergestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListenstmtContext listenstmt() {
			return GetRuleContext<ListenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadstmtContext loadstmt() {
			return GetRuleContext<LoadstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockstmtContext lockstmt() {
			return GetRuleContext<LockstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparestmtContext preparestmt() {
			return GetRuleContext<PreparestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReassignownedstmtContext reassignownedstmt() {
			return GetRuleContext<ReassignownedstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReindexstmtContext reindexstmt() {
			return GetRuleContext<ReindexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveaggrstmtContext removeaggrstmt() {
			return GetRuleContext<RemoveaggrstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemovefuncstmtContext removefuncstmt() {
			return GetRuleContext<RemovefuncstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveoperstmtContext removeoperstmt() {
			return GetRuleContext<RemoveoperstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenamestmtContext renamestmt() {
			return GetRuleContext<RenamestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokestmtContext revokestmt() {
			return GetRuleContext<RevokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokerolestmtContext revokerolestmt() {
			return GetRuleContext<RevokerolestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RulestmtContext rulestmt() {
			return GetRuleContext<RulestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeclabelstmtContext seclabelstmt() {
			return GetRuleContext<SeclabelstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionstmtContext transactionstmt() {
			return GetRuleContext<TransactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncatestmtContext truncatestmt() {
			return GetRuleContext<TruncatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlistenstmtContext unlistenstmt() {
			return GetRuleContext<UnlistenstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VacuumstmtContext vacuumstmt() {
			return GetRuleContext<VacuumstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesetstmtContext variablesetstmt() {
			return GetRuleContext<VariablesetstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableshowstmtContext variableshowstmt() {
			return GetRuleContext<VariableshowstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlconsolecommandContext plsqlconsolecommand() {
			return GetRuleContext<PlsqlconsolecommandContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_stmt);
		try {
			State = 1765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1640;
				altereventtrigstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1641;
				altercollationstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1642;
				alterdatabasestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1643;
				alterdatabasesetstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1644;
				alterdefaultprivilegesstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1645;
				alterdomainstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1646;
				alterenumstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1647;
				alterextensionstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1648;
				alterextensioncontentsstmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1649;
				alterfdwstmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1650;
				alterforeignserverstmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1651;
				alterfunctionstmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1652;
				altergroupstmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1653;
				alterobjectdependsstmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1654;
				alterobjectschemastmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1655;
				alterownerstmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1656;
				alteroperatorstmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1657;
				altertypestmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1658;
				alterpolicystmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1659;
				alterseqstmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1660;
				altersystemstmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1661;
				altertablestmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1662;
				altertblspcstmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1663;
				altercompositetypestmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1664;
				alterpublicationstmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1665;
				alterrolesetstmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1666;
				alterrolestmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1667;
				altersubscriptionstmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1668;
				alterstatsstmt();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1669;
				altertsconfigurationstmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1670;
				altertsdictionarystmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1671;
				alterusermappingstmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1672;
				analyzestmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1673;
				callstmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1674;
				checkpointstmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1675;
				closeportalstmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1676;
				clusterstmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1677;
				commentstmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1678;
				constraintssetstmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1679;
				copystmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1680;
				createamstmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1681;
				createasstmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1682;
				createassertionstmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1683;
				createcaststmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1684;
				createconversionstmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1685;
				createdomainstmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1686;
				createextensionstmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1687;
				createfdwstmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1688;
				createforeignserverstmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1689;
				createforeigntablestmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1690;
				createfunctionstmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1691;
				creategroupstmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1692;
				creatematviewstmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1693;
				createopclassstmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1694;
				createopfamilystmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1695;
				createpublicationstmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1696;
				alteropfamilystmt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1697;
				createpolicystmt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1698;
				createplangstmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1699;
				createschemastmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1700;
				createseqstmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1701;
				createstmt();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1702;
				createsubscriptionstmt();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1703;
				createstatsstmt();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1704;
				createtablespacestmt();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1705;
				createtransformstmt();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1706;
				createtrigstmt();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1707;
				createeventtrigstmt();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1708;
				createrolestmt();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1709;
				createuserstmt();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1710;
				createusermappingstmt();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1711;
				createdbstmt();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1712;
				deallocatestmt();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1713;
				declarecursorstmt();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1714;
				definestmt();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1715;
				deletestmt();
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 1716;
				discardstmt();
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 1717;
				dostmt();
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 1718;
				dropcaststmt();
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 1719;
				dropopclassstmt();
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 1720;
				dropopfamilystmt();
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 1721;
				dropownedstmt();
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 1722;
				dropstmt();
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 1723;
				dropsubscriptionstmt();
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 1724;
				droptablespacestmt();
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 1725;
				droptransformstmt();
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 1726;
				droprolestmt();
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 1727;
				dropusermappingstmt();
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 1728;
				dropdbstmt();
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 1729;
				executestmt();
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 1730;
				explainstmt();
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 1731;
				fetchstmt();
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 1732;
				grantstmt();
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 1733;
				grantrolestmt();
				}
				break;
			case 95:
				EnterOuterAlt(_localctx, 95);
				{
				State = 1734;
				importforeignschemastmt();
				}
				break;
			case 96:
				EnterOuterAlt(_localctx, 96);
				{
				State = 1735;
				indexstmt();
				}
				break;
			case 97:
				EnterOuterAlt(_localctx, 97);
				{
				State = 1736;
				insertstmt();
				}
				break;
			case 98:
				EnterOuterAlt(_localctx, 98);
				{
				State = 1737;
				mergestmt();
				}
				break;
			case 99:
				EnterOuterAlt(_localctx, 99);
				{
				State = 1738;
				listenstmt();
				}
				break;
			case 100:
				EnterOuterAlt(_localctx, 100);
				{
				State = 1739;
				refreshmatviewstmt();
				}
				break;
			case 101:
				EnterOuterAlt(_localctx, 101);
				{
				State = 1740;
				loadstmt();
				}
				break;
			case 102:
				EnterOuterAlt(_localctx, 102);
				{
				State = 1741;
				lockstmt();
				}
				break;
			case 103:
				EnterOuterAlt(_localctx, 103);
				{
				State = 1742;
				notifystmt();
				}
				break;
			case 104:
				EnterOuterAlt(_localctx, 104);
				{
				State = 1743;
				preparestmt();
				}
				break;
			case 105:
				EnterOuterAlt(_localctx, 105);
				{
				State = 1744;
				reassignownedstmt();
				}
				break;
			case 106:
				EnterOuterAlt(_localctx, 106);
				{
				State = 1745;
				reindexstmt();
				}
				break;
			case 107:
				EnterOuterAlt(_localctx, 107);
				{
				State = 1746;
				removeaggrstmt();
				}
				break;
			case 108:
				EnterOuterAlt(_localctx, 108);
				{
				State = 1747;
				removefuncstmt();
				}
				break;
			case 109:
				EnterOuterAlt(_localctx, 109);
				{
				State = 1748;
				removeoperstmt();
				}
				break;
			case 110:
				EnterOuterAlt(_localctx, 110);
				{
				State = 1749;
				renamestmt();
				}
				break;
			case 111:
				EnterOuterAlt(_localctx, 111);
				{
				State = 1750;
				revokestmt();
				}
				break;
			case 112:
				EnterOuterAlt(_localctx, 112);
				{
				State = 1751;
				revokerolestmt();
				}
				break;
			case 113:
				EnterOuterAlt(_localctx, 113);
				{
				State = 1752;
				rulestmt();
				}
				break;
			case 114:
				EnterOuterAlt(_localctx, 114);
				{
				State = 1753;
				seclabelstmt();
				}
				break;
			case 115:
				EnterOuterAlt(_localctx, 115);
				{
				State = 1754;
				selectstmt();
				}
				break;
			case 116:
				EnterOuterAlt(_localctx, 116);
				{
				State = 1755;
				transactionstmt();
				}
				break;
			case 117:
				EnterOuterAlt(_localctx, 117);
				{
				State = 1756;
				truncatestmt();
				}
				break;
			case 118:
				EnterOuterAlt(_localctx, 118);
				{
				State = 1757;
				unlistenstmt();
				}
				break;
			case 119:
				EnterOuterAlt(_localctx, 119);
				{
				State = 1758;
				updatestmt();
				}
				break;
			case 120:
				EnterOuterAlt(_localctx, 120);
				{
				State = 1759;
				vacuumstmt();
				}
				break;
			case 121:
				EnterOuterAlt(_localctx, 121);
				{
				State = 1760;
				variableresetstmt();
				}
				break;
			case 122:
				EnterOuterAlt(_localctx, 122);
				{
				State = 1761;
				variablesetstmt();
				}
				break;
			case 123:
				EnterOuterAlt(_localctx, 123);
				{
				State = 1762;
				variableshowstmt();
				}
				break;
			case 124:
				EnterOuterAlt(_localctx, 124);
				{
				State = 1763;
				viewstmt();
				}
				break;
			case 125:
				EnterOuterAlt(_localctx, 125);
				{
				State = 1764;
				plsqlconsolecommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlconsolecommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MetaCommand() { return GetToken(PostgreSQLParser.MetaCommand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndMetaCommand() { return GetToken(PostgreSQLParser.EndMetaCommand, 0); }
		public PlsqlconsolecommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlconsolecommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlconsolecommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlconsolecommand(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlconsolecommandContext plsqlconsolecommand() {
		PlsqlconsolecommandContext _localctx = new PlsqlconsolecommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_plsqlconsolecommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767;
			Match(MetaCommand);
			State = 1769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EndMetaCommand) {
				{
				State = 1768;
				Match(EndMetaCommand);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCallstmt(this);
		}
	}

	[RuleVersion(0)]
	public CallstmtContext callstmt() {
		CallstmtContext _localctx = new CallstmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_callstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1771;
			Match(CALL);
			State = 1772;
			func_application();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreaterolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreaterolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreaterolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreaterolestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreaterolestmtContext createrolestmt() {
		CreaterolestmtContext _localctx = new CreaterolestmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_createrolestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774;
			Match(CREATE);
			State = 1775;
			Match(ROLE);
			State = 1776;
			roleid();
			State = 1777;
			opt_with();
			State = 1778;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Opt_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with(this);
		}
	}

	[RuleVersion(0)]
	public Opt_withContext opt_with() {
		Opt_withContext _localctx = new Opt_withContext(Context, State);
		EnterRule(_localctx, 16, RULE_opt_with);
		try {
			State = 1782;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1780;
				Match(WITH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateoptroleelemContext[] createoptroleelem() {
			return GetRuleContexts<CreateoptroleelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateoptroleelemContext createoptroleelem(int i) {
			return GetRuleContext<CreateoptroleelemContext>(i);
		}
		public OptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public OptrolelistContext optrolelist() {
		OptrolelistContext _localctx = new OptrolelistContext(Context, State);
		EnterRule(_localctx, 18, RULE_optrolelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1787;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1784;
					createoptroleelem();
					}
					} 
				}
				State = 1789;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroptrolelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext[] alteroptroleelem() {
			return GetRuleContexts<AlteroptroleelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem(int i) {
			return GetRuleContext<AlteroptroleelemContext>(i);
		}
		public AlteroptrolelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptrolelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptrolelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptrolelist(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptrolelistContext alteroptrolelist() {
		AlteroptrolelistContext _localctx = new AlteroptrolelistContext(Context, State);
		EnterRule(_localctx, 20, RULE_alteroptrolelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1790;
					alteroptroleelem();
					}
					} 
				}
				State = 1795;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlteroptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public AlteroptroleelemContext alteroptroleelem() {
		AlteroptroleelemContext _localctx = new AlteroptroleelemContext(Context, State);
		EnterRule(_localctx, 22, RULE_alteroptroleelem);
		int _la;
		try {
			State = 1814;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PASSWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1796;
				Match(PASSWORD);
				State = 1799;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 1797;
					sconst();
					}
					break;
				case NULL_P:
					{
					State = 1798;
					Match(NULL_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTED:
			case UNENCRYPTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1801;
				_la = TokenStream.LA(1);
				if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1802;
				Match(PASSWORD);
				State = 1803;
				sconst();
				}
				break;
			case INHERIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1804;
				Match(INHERIT);
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1805;
				Match(CONNECTION);
				State = 1806;
				Match(LIMIT);
				State = 1807;
				signediconst();
				}
				break;
			case VALID:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1808;
				Match(VALID);
				State = 1809;
				Match(UNTIL);
				State = 1810;
				sconst();
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1811;
				Match(USER);
				State = 1812;
				role_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1813;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateoptroleelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptroleelemContext alteroptroleelem() {
			return GetRuleContext<AlteroptroleelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public CreateoptroleelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createoptroleelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateoptroleelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateoptroleelem(this);
		}
	}

	[RuleVersion(0)]
	public CreateoptroleelemContext createoptroleelem() {
		CreateoptroleelemContext _localctx = new CreateoptroleelemContext(Context, State);
		EnterRule(_localctx, 24, RULE_createoptroleelem);
		int _la;
		try {
			State = 1826;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case USER:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONNECTION:
			case CONTINUE_P:
			case CURSOR:
			case ENCRYPTED:
			case FIRST_P:
			case FORWARD:
			case INHERIT:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PASSWORD:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case UNENCRYPTED:
			case VALID:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1816;
				alteroptroleelem();
				}
				break;
			case SYSID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1817;
				Match(SYSID);
				State = 1818;
				iconst();
				}
				break;
			case ADMIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1819;
				Match(ADMIN);
				State = 1820;
				role_list();
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1821;
				Match(ROLE);
				State = 1822;
				role_list();
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1823;
				Match(IN_P);
				State = 1824;
				_la = TokenStream.LA(1);
				if ( !(_la==GROUP_P || _la==ROLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1825;
				role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateuserstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreateuserstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createuserstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateuserstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateuserstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateuserstmtContext createuserstmt() {
		CreateuserstmtContext _localctx = new CreateuserstmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_createuserstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828;
			Match(CREATE);
			State = 1829;
			Match(USER);
			State = 1830;
			roleid();
			State = 1831;
			opt_with();
			State = 1832;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlteroptrolelistContext alteroptrolelist() {
			return GetRuleContext<AlteroptrolelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public AlterrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolestmtContext alterrolestmt() {
		AlterrolestmtContext _localctx = new AlterrolestmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterrolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1834;
			Match(ALTER);
			State = 1835;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1836;
			rolespec();
			State = 1837;
			opt_with();
			State = 1838;
			alteroptrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_in_databaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_in_databaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_in_database; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_in_database(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_in_database(this);
		}
	}

	[RuleVersion(0)]
	public Opt_in_databaseContext opt_in_database() {
		Opt_in_databaseContext _localctx = new Opt_in_databaseContext(Context, State);
		EnterRule(_localctx, 30, RULE_opt_in_database);
		try {
			State = 1844;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESET:
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1841;
				Match(IN_P);
				State = 1842;
				Match(DATABASE);
				State = 1843;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterrolesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_in_databaseContext opt_in_database() {
			return GetRuleContext<Opt_in_databaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public AlterrolesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterrolesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterrolesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterrolesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterrolesetstmtContext alterrolesetstmt() {
		AlterrolesetstmtContext _localctx = new AlterrolesetstmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterrolesetstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1846;
			Match(ALTER);
			State = 1847;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 1848;
				Match(ALL);
				}
			}

			State = 1851;
			rolespec();
			State = 1852;
			opt_in_database();
			State = 1853;
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroprolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DroprolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droprolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroprolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroprolestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroprolestmtContext droprolestmt() {
		DroprolestmtContext _localctx = new DroprolestmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_droprolestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1855;
			Match(DROP);
			State = 1856;
			_la = TokenStream.LA(1);
			if ( !(_la==GROUP_P || _la==USER || _la==ROLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 1857;
				Match(IF_P);
				State = 1858;
				Match(EXISTS);
				}
				break;
			}
			State = 1861;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreategroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid() {
			return GetRuleContext<RoleidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptrolelistContext optrolelist() {
			return GetRuleContext<OptrolelistContext>(0);
		}
		public CreategroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creategroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreategroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreategroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreategroupstmtContext creategroupstmt() {
		CreategroupstmtContext _localctx = new CreategroupstmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_creategroupstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863;
			Match(CREATE);
			State = 1864;
			Match(GROUP_P);
			State = 1865;
			roleid();
			State = 1866;
			opt_with();
			State = 1867;
			optrolelist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltergroupstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public AltergroupstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altergroupstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltergroupstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltergroupstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltergroupstmtContext altergroupstmt() {
		AltergroupstmtContext _localctx = new AltergroupstmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_altergroupstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1869;
			Match(ALTER);
			State = 1870;
			Match(GROUP_P);
			State = 1871;
			rolespec();
			State = 1872;
			add_drop();
			State = 1873;
			Match(USER);
			State = 1874;
			role_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Add_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAdd_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAdd_drop(this);
		}
	}

	[RuleVersion(0)]
	public Add_dropContext add_drop() {
		Add_dropContext _localctx = new Add_dropContext(Context, State);
		EnterRule(_localctx, 40, RULE_add_drop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1876;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD_P || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptschemaeltlistContext optschemaeltlist() {
			return GetRuleContext<OptschemaeltlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptschemanameContext optschemaname() {
			return GetRuleContext<OptschemanameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateschemastmtContext createschemastmt() {
		CreateschemastmtContext _localctx = new CreateschemastmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_createschemastmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1878;
			Match(CREATE);
			State = 1879;
			Match(SCHEMA);
			State = 1883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 1880;
				Match(IF_P);
				State = 1881;
				Match(NOT);
				State = 1882;
				Match(EXISTS);
				}
				break;
			}
			State = 1890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 1885;
				optschemaname();
				State = 1886;
				Match(AUTHORIZATION);
				State = 1887;
				rolespec();
				}
				break;
			case 2:
				{
				State = 1889;
				colid();
				}
				break;
			}
			State = 1892;
			optschemaeltlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemanameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public OptschemanameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaname(this);
		}
	}

	[RuleVersion(0)]
	public OptschemanameContext optschemaname() {
		OptschemanameContext _localctx = new OptschemanameContext(Context, State);
		EnterRule(_localctx, 44, RULE_optschemaname);
		try {
			State = 1896;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1894;
				colid();
				}
				break;
			case AUTHORIZATION:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptschemaeltlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Schema_stmtContext[] schema_stmt() {
			return GetRuleContexts<Schema_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Schema_stmtContext schema_stmt(int i) {
			return GetRuleContext<Schema_stmtContext>(i);
		}
		public OptschemaeltlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optschemaeltlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptschemaeltlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptschemaeltlist(this);
		}
	}

	[RuleVersion(0)]
	public OptschemaeltlistContext optschemaeltlist() {
		OptschemaeltlistContext _localctx = new OptschemaeltlistContext(Context, State);
		EnterRule(_localctx, 46, RULE_optschemaeltlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1901;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1898;
					schema_stmt();
					}
					} 
				}
				State = 1903;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreatestmtContext createstmt() {
			return GetRuleContext<CreatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexstmtContext indexstmt() {
			return GetRuleContext<IndexstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateseqstmtContext createseqstmt() {
			return GetRuleContext<CreateseqstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatetrigstmtContext createtrigstmt() {
			return GetRuleContext<CreatetrigstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantstmtContext grantstmt() {
			return GetRuleContext<GrantstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewstmtContext viewstmt() {
			return GetRuleContext<ViewstmtContext>(0);
		}
		public Schema_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSchema_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSchema_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Schema_stmtContext schema_stmt() {
		Schema_stmtContext _localctx = new Schema_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_schema_stmt);
		try {
			State = 1910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1904;
				createstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1905;
				indexstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1906;
				createseqstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1907;
				createtrigstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1908;
				grantstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1909;
				viewstmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		public VariablesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variablesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariablesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariablesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariablesetstmtContext variablesetstmt() {
		VariablesetstmtContext _localctx = new VariablesetstmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_variablesetstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1912;
			Match(SET);
			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 1913;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1916;
			set_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		public Set_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest(this);
		}
	}

	[RuleVersion(0)]
	public Set_restContext set_rest() {
		Set_restContext _localctx = new Set_restContext(Context, State);
		EnterRule(_localctx, 52, RULE_set_rest);
		try {
			State = 1926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1918;
				Match(TRANSACTION);
				State = 1919;
				transaction_mode_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920;
				Match(SESSION);
				State = 1921;
				Match(CHARACTERISTICS);
				State = 1922;
				Match(AS);
				State = 1923;
				Match(TRANSACTION);
				State = 1924;
				transaction_mode_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1925;
				set_rest_more();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_listContext var_list() {
			return GetRuleContext<Var_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Generic_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_set(this);
		}
	}

	[RuleVersion(0)]
	public Generic_setContext generic_set() {
		Generic_setContext _localctx = new Generic_setContext(Context, State);
		EnterRule(_localctx, 54, RULE_generic_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928;
			var_name();
			State = 1929;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1930;
			var_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_rest_moreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Zone_valueContext zone_value() {
			return GetRuleContext<Zone_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(PostgreSQLParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_encodingContext opt_encoding() {
			return GetRuleContext<Opt_encodingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		public Set_rest_moreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_rest_more; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_rest_more(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_rest_more(this);
		}
	}

	[RuleVersion(0)]
	public Set_rest_moreContext set_rest_more() {
		Set_rest_moreContext _localctx = new Set_rest_moreContext(Context, State);
		EnterRule(_localctx, 56, RULE_set_rest_more);
		try {
			State = 1957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1932;
				generic_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1933;
				var_name();
				State = 1934;
				Match(FROM);
				State = 1935;
				Match(CURRENT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1937;
				Match(TIME);
				State = 1938;
				Match(ZONE);
				State = 1939;
				zone_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1940;
				Match(CATALOG);
				State = 1941;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1942;
				Match(SCHEMA);
				State = 1943;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1944;
				Match(NAMES);
				State = 1945;
				opt_encoding();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1946;
				Match(ROLE);
				State = 1947;
				nonreservedword_or_sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1948;
				Match(SESSION);
				State = 1949;
				Match(AUTHORIZATION);
				State = 1950;
				nonreservedword_or_sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1951;
				Match(XML_P);
				State = 1952;
				Match(OPTION);
				State = 1953;
				document_or_content();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1954;
				Match(TRANSACTION);
				State = 1955;
				Match(SNAPSHOT);
				State = 1956;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_var_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1959;
			colid();
			State = 1964;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1960;
				Match(DOT);
				State = 1961;
				colid();
				}
				}
				State = 1966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_valueContext[] var_value() {
			return GetRuleContexts<Var_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_valueContext var_value(int i) {
			return GetRuleContext<Var_valueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_list(this);
		}
	}

	[RuleVersion(0)]
	public Var_listContext var_list() {
		Var_listContext _localctx = new Var_listContext(Context, State);
		EnterRule(_localctx, 60, RULE_var_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1967;
			var_value();
			State = 1972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1968;
				Match(COMMA);
				State = 1969;
				var_value();
				}
				}
				State = 1974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Var_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVar_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVar_value(this);
		}
	}

	[RuleVersion(0)]
	public Var_valueContext var_value() {
		Var_valueContext _localctx = new Var_valueContext(Context, State);
		EnterRule(_localctx, 62, RULE_var_value);
		try {
			State = 1977;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1975;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1976;
				numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iso_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public Iso_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iso_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIso_level(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIso_level(this);
		}
	}

	[RuleVersion(0)]
	public Iso_levelContext iso_level() {
		Iso_levelContext _localctx = new Iso_levelContext(Context, State);
		EnterRule(_localctx, 64, RULE_iso_level);
		int _la;
		try {
			State = 1984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1979;
				Match(READ);
				State = 1980;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED || _la==UNCOMMITTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REPEATABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1981;
				Match(REPEATABLE);
				State = 1982;
				Match(READ);
				}
				break;
			case SERIALIZABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1983;
				Match(SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_boolean_or_stringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Opt_boolean_or_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_boolean_or_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_boolean_or_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_boolean_or_string(this);
		}
	}

	[RuleVersion(0)]
	public Opt_boolean_or_stringContext opt_boolean_or_string() {
		Opt_boolean_or_stringContext _localctx = new Opt_boolean_or_stringContext(Context, State);
		EnterRule(_localctx, 66, RULE_opt_boolean_or_string);
		try {
			State = 1990;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1986;
				Match(TRUE_P);
				}
				break;
			case FALSE_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1987;
				Match(FALSE_P);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1988;
				Match(ON);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1989;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zone_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Zone_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zone_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterZone_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitZone_value(this);
		}
	}

	[RuleVersion(0)]
	public Zone_valueContext zone_value() {
		Zone_valueContext _localctx = new Zone_valueContext(Context, State);
		EnterRule(_localctx, 68, RULE_zone_value);
		try {
			State = 2007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1992;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1993;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1994;
				constinterval();
				State = 1995;
				sconst();
				State = 1996;
				opt_interval();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1998;
				constinterval();
				State = 1999;
				Match(OPEN_PAREN);
				State = 2000;
				iconst();
				State = 2001;
				Match(CLOSE_PAREN);
				State = 2002;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2004;
				numericonly();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2005;
				Match(DEFAULT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2006;
				Match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_encodingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_encodingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_encoding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_encoding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_encoding(this);
		}
	}

	[RuleVersion(0)]
	public Opt_encodingContext opt_encoding() {
		Opt_encodingContext _localctx = new Opt_encodingContext(Context, State);
		EnterRule(_localctx, 70, RULE_opt_encoding);
		try {
			State = 2012;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2009;
				sconst();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2010;
				Match(DEFAULT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CALLED:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case COST:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case EXTERNAL:
			case IMMUTABLE:
			case INSERT:
			case LANGUAGE:
			case LEAKPROOF:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case STABLE:
			case START:
			case STRICT_P:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VOLATILE:
			case VALUES:
			case CALL:
			case TRANSFORM:
			case IMPORT_P:
			case END_P:
			case SUPPORT:
			case PARALLEL:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonreservedword_or_sconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Nonreservedword_or_sconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword_or_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword_or_sconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword_or_sconst(this);
		}
	}

	[RuleVersion(0)]
	public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
		Nonreservedword_or_sconstContext _localctx = new Nonreservedword_or_sconstContext(Context, State);
		EnterRule(_localctx, 72, RULE_nonreservedword_or_sconst);
		try {
			State = 2016;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2014;
				nonreservedword();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2015;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableresetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reset_restContext reset_rest() {
			return GetRuleContext<Reset_restContext>(0);
		}
		public VariableresetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableresetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableresetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableresetstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableresetstmtContext variableresetstmt() {
		VariableresetstmtContext _localctx = new VariableresetstmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableresetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			Match(RESET);
			State = 2019;
			reset_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reset_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_resetContext generic_reset() {
			return GetRuleContext<Generic_resetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Reset_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reset_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReset_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReset_rest(this);
		}
	}

	[RuleVersion(0)]
	public Reset_restContext reset_rest() {
		Reset_restContext _localctx = new Reset_restContext(Context, State);
		EnterRule(_localctx, 76, RULE_reset_rest);
		try {
			State = 2029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2021;
				generic_reset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2022;
				Match(TIME);
				State = 2023;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2024;
				Match(TRANSACTION);
				State = 2025;
				Match(ISOLATION);
				State = 2026;
				Match(LEVEL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2027;
				Match(SESSION);
				State = 2028;
				Match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Generic_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_reset(this);
		}
	}

	[RuleVersion(0)]
	public Generic_resetContext generic_reset() {
		Generic_resetContext _localctx = new Generic_resetContext(Context, State);
		EnterRule(_localctx, 78, RULE_generic_reset);
		try {
			State = 2033;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2031;
				var_name();
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2032;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_restContext set_rest() {
			return GetRuleContext<Set_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public SetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public SetresetclauseContext setresetclause() {
		SetresetclauseContext _localctx = new SetresetclauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_setresetclause);
		try {
			State = 2038;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2035;
				Match(SET);
				State = 2036;
				set_rest();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2037;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionsetresetclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_rest_moreContext set_rest_more() {
			return GetRuleContext<Set_rest_moreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableresetstmtContext variableresetstmt() {
			return GetRuleContext<VariableresetstmtContext>(0);
		}
		public FunctionsetresetclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionsetresetclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunctionsetresetclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunctionsetresetclause(this);
		}
	}

	[RuleVersion(0)]
	public FunctionsetresetclauseContext functionsetresetclause() {
		FunctionsetresetclauseContext _localctx = new FunctionsetresetclauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionsetresetclause);
		try {
			State = 2043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2040;
				Match(SET);
				State = 2041;
				set_rest_more();
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2042;
				variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableshowstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public VariableshowstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableshowstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVariableshowstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVariableshowstmt(this);
		}
	}

	[RuleVersion(0)]
	public VariableshowstmtContext variableshowstmt() {
		VariableshowstmtContext _localctx = new VariableshowstmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_variableshowstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2045;
			Match(SHOW);
			State = 2055;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 2046;
				var_name();
				}
				break;
			case 2:
				{
				State = 2047;
				Match(TIME);
				State = 2048;
				Match(ZONE);
				}
				break;
			case 3:
				{
				State = 2049;
				Match(TRANSACTION);
				State = 2050;
				Match(ISOLATION);
				State = 2051;
				Match(LEVEL);
				}
				break;
			case 4:
				{
				State = 2052;
				Match(SESSION);
				State = 2053;
				Match(AUTHORIZATION);
				}
				break;
			case 5:
				{
				State = 2054;
				Match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintssetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_listContext constraints_set_list() {
			return GetRuleContext<Constraints_set_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constraints_set_modeContext constraints_set_mode() {
			return GetRuleContext<Constraints_set_modeContext>(0);
		}
		public ConstraintssetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintssetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintssetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintssetstmt(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintssetstmtContext constraintssetstmt() {
		ConstraintssetstmtContext _localctx = new ConstraintssetstmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_constraintssetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057;
			Match(SET);
			State = 2058;
			Match(CONSTRAINTS);
			State = 2059;
			constraints_set_list();
			State = 2060;
			constraints_set_mode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Constraints_set_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_list(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_listContext constraints_set_list() {
		Constraints_set_listContext _localctx = new Constraints_set_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_constraints_set_list);
		try {
			State = 2064;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2062;
				Match(ALL);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2063;
				qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraints_set_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public Constraints_set_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints_set_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraints_set_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraints_set_mode(this);
		}
	}

	[RuleVersion(0)]
	public Constraints_set_modeContext constraints_set_mode() {
		Constraints_set_modeContext _localctx = new Constraints_set_modeContext(Context, State);
		EnterRule(_localctx, 90, RULE_constraints_set_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckpointstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		public CheckpointstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkpointstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCheckpointstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCheckpointstmt(this);
		}
	}

	[RuleVersion(0)]
	public CheckpointstmtContext checkpointstmt() {
		CheckpointstmtContext _localctx = new CheckpointstmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_checkpointstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			Match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		public DiscardstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDiscardstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDiscardstmt(this);
		}
	}

	[RuleVersion(0)]
	public DiscardstmtContext discardstmt() {
		DiscardstmtContext _localctx = new DiscardstmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_discardstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2070;
			Match(DISCARD);
			State = 2071;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdsContext alter_table_cmds() {
			return GetRuleContext<Alter_table_cmdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Partition_cmdContext partition_cmd() {
			return GetRuleContext<Partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TABLESPACE() { return GetTokens(PostgreSQLParser.TABLESPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE(int i) {
			return GetToken(PostgreSQLParser.TABLESPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowaitContext opt_nowait() {
			return GetRuleContext<Opt_nowaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_partition_cmdContext index_partition_cmd() {
			return GetRuleContext<Index_partition_cmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		public AltertablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertablestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertablestmtContext altertablestmt() {
		AltertablestmtContext _localctx = new AltertablestmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_altertablestmt);
		int _la;
		try {
			State = 2182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2073;
				Match(ALTER);
				State = 2074;
				Match(TABLE);
				State = 2077;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
				case 1:
					{
					State = 2075;
					Match(IF_P);
					State = 2076;
					Match(EXISTS);
					}
					break;
				}
				State = 2079;
				relation_expr();
				State = 2082;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					State = 2080;
					alter_table_cmds();
					}
					break;
				case ATTACH:
				case DETACH:
					{
					State = 2081;
					partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2084;
				Match(ALTER);
				State = 2085;
				Match(TABLE);
				State = 2086;
				Match(ALL);
				State = 2087;
				Match(IN_P);
				State = 2088;
				Match(TABLESPACE);
				State = 2089;
				name();
				State = 2093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 2090;
					Match(OWNED);
					State = 2091;
					Match(BY);
					State = 2092;
					role_list();
					}
				}

				State = 2095;
				Match(SET);
				State = 2096;
				Match(TABLESPACE);
				State = 2097;
				name();
				State = 2098;
				opt_nowait();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2100;
				Match(ALTER);
				State = 2101;
				Match(INDEX);
				State = 2104;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 2102;
					Match(IF_P);
					State = 2103;
					Match(EXISTS);
					}
					break;
				}
				State = 2106;
				qualified_name();
				State = 2109;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT:
				case ADD_P:
				case ALTER:
				case CLUSTER:
				case DISABLE_P:
				case DROP:
				case ENABLE_P:
				case FORCE:
				case INHERIT:
				case NO:
				case OF:
				case OPTIONS:
				case OWNER:
				case REPLICA:
				case RESET:
				case SET:
				case VALIDATE:
					{
					State = 2107;
					alter_table_cmds();
					}
					break;
				case ATTACH:
					{
					State = 2108;
					index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2111;
				Match(ALTER);
				State = 2112;
				Match(INDEX);
				State = 2113;
				Match(ALL);
				State = 2114;
				Match(IN_P);
				State = 2115;
				Match(TABLESPACE);
				State = 2116;
				name();
				State = 2120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 2117;
					Match(OWNED);
					State = 2118;
					Match(BY);
					State = 2119;
					role_list();
					}
				}

				State = 2122;
				Match(SET);
				State = 2123;
				Match(TABLESPACE);
				State = 2124;
				name();
				State = 2125;
				opt_nowait();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2127;
				Match(ALTER);
				State = 2128;
				Match(SEQUENCE);
				State = 2131;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 2129;
					Match(IF_P);
					State = 2130;
					Match(EXISTS);
					}
					break;
				}
				State = 2133;
				qualified_name();
				State = 2134;
				alter_table_cmds();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2136;
				Match(ALTER);
				State = 2137;
				Match(VIEW);
				State = 2140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 2138;
					Match(IF_P);
					State = 2139;
					Match(EXISTS);
					}
					break;
				}
				State = 2142;
				qualified_name();
				State = 2143;
				alter_table_cmds();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2145;
				Match(ALTER);
				State = 2146;
				Match(MATERIALIZED);
				State = 2147;
				Match(VIEW);
				State = 2150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 2148;
					Match(IF_P);
					State = 2149;
					Match(EXISTS);
					}
					break;
				}
				State = 2152;
				qualified_name();
				State = 2153;
				alter_table_cmds();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2155;
				Match(ALTER);
				State = 2156;
				Match(MATERIALIZED);
				State = 2157;
				Match(VIEW);
				State = 2158;
				Match(ALL);
				State = 2159;
				Match(IN_P);
				State = 2160;
				Match(TABLESPACE);
				State = 2161;
				name();
				State = 2165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OWNED) {
					{
					State = 2162;
					Match(OWNED);
					State = 2163;
					Match(BY);
					State = 2164;
					role_list();
					}
				}

				State = 2167;
				Match(SET);
				State = 2168;
				Match(TABLESPACE);
				State = 2169;
				name();
				State = 2170;
				opt_nowait();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2172;
				Match(ALTER);
				State = 2173;
				Match(FOREIGN);
				State = 2174;
				Match(TABLE);
				State = 2177;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 2175;
					Match(IF_P);
					State = 2176;
					Match(EXISTS);
					}
					break;
				}
				State = 2179;
				relation_expr();
				State = 2180;
				alter_table_cmds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdContext[] alter_table_cmd() {
			return GetRuleContexts<Alter_table_cmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_cmdContext alter_table_cmd(int i) {
			return GetRuleContext<Alter_table_cmdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_table_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdsContext alter_table_cmds() {
		Alter_table_cmdsContext _localctx = new Alter_table_cmdsContext(Context, State);
		EnterRule(_localctx, 98, RULE_alter_table_cmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2184;
			alter_table_cmd();
			State = 2189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2185;
				Match(COMMA);
				State = 2186;
				alter_table_cmd();
				}
				}
				State = 2191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		public Partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Partition_cmdContext partition_cmd() {
		Partition_cmdContext _localctx = new Partition_cmdContext(Context, State);
		EnterRule(_localctx, 100, RULE_partition_cmd);
		try {
			State = 2200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2192;
				Match(ATTACH);
				State = 2193;
				Match(PARTITION);
				State = 2194;
				qualified_name();
				State = 2195;
				partitionboundspec();
				}
				break;
			case DETACH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2197;
				Match(DETACH);
				State = 2198;
				Match(PARTITION);
				State = 2199;
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_partition_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public Index_partition_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_partition_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_partition_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_partition_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Index_partition_cmdContext index_partition_cmd() {
		Index_partition_cmdContext _localctx = new Index_partition_cmdContext(Context, State);
		EnterRule(_localctx, 102, RULE_index_partition_cmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2202;
			Match(ATTACH);
			State = 2203;
			Match(PARTITION);
			State = 2204;
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_columnContext opt_column() {
			return GetRuleContext<Opt_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_option_listContext alter_identity_column_option_list() {
			return GetRuleContext<Alter_identity_column_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_dataContext opt_set_data() {
			return GetRuleContext<Opt_set_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_usingContext alter_using() {
			return GetRuleContext<Alter_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Replica_identityContext replica_identity() {
			return GetRuleContext<Replica_identityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Alter_table_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_cmdContext alter_table_cmd() {
		Alter_table_cmdContext _localctx = new Alter_table_cmdContext(Context, State);
		EnterRule(_localctx, 104, RULE_alter_table_cmd);
		try {
			State = 2458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2206;
				Match(ADD_P);
				State = 2207;
				columnDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2208;
				Match(ADD_P);
				State = 2209;
				Match(IF_P);
				State = 2210;
				Match(NOT);
				State = 2211;
				Match(EXISTS);
				State = 2212;
				columnDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2213;
				Match(ADD_P);
				State = 2214;
				Match(COLUMN);
				State = 2215;
				columnDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2216;
				Match(ADD_P);
				State = 2217;
				Match(COLUMN);
				State = 2218;
				Match(IF_P);
				State = 2219;
				Match(NOT);
				State = 2220;
				Match(EXISTS);
				State = 2221;
				columnDef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2222;
				Match(ALTER);
				State = 2223;
				opt_column();
				State = 2224;
				colid();
				State = 2225;
				alter_column_default();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2227;
				Match(ALTER);
				State = 2228;
				opt_column();
				State = 2229;
				colid();
				State = 2230;
				Match(DROP);
				State = 2231;
				Match(NOT);
				State = 2232;
				Match(NULL_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2234;
				Match(ALTER);
				State = 2235;
				opt_column();
				State = 2236;
				colid();
				State = 2237;
				Match(SET);
				State = 2238;
				Match(NOT);
				State = 2239;
				Match(NULL_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2241;
				Match(ALTER);
				State = 2242;
				opt_column();
				State = 2243;
				colid();
				State = 2244;
				Match(DROP);
				State = 2245;
				Match(EXPRESSION);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2247;
				Match(ALTER);
				State = 2248;
				opt_column();
				State = 2249;
				colid();
				State = 2250;
				Match(DROP);
				State = 2251;
				Match(EXPRESSION);
				State = 2252;
				Match(IF_P);
				State = 2253;
				Match(EXISTS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2255;
				Match(ALTER);
				State = 2256;
				opt_column();
				State = 2257;
				colid();
				State = 2258;
				Match(SET);
				State = 2259;
				Match(STATISTICS);
				State = 2260;
				signediconst();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2262;
				Match(ALTER);
				State = 2263;
				opt_column();
				State = 2264;
				iconst();
				State = 2265;
				Match(SET);
				State = 2266;
				Match(STATISTICS);
				State = 2267;
				signediconst();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2269;
				Match(ALTER);
				State = 2270;
				opt_column();
				State = 2271;
				colid();
				State = 2272;
				Match(SET);
				State = 2273;
				reloptions();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2275;
				Match(ALTER);
				State = 2276;
				opt_column();
				State = 2277;
				colid();
				State = 2278;
				Match(RESET);
				State = 2279;
				reloptions();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2281;
				Match(ALTER);
				State = 2282;
				opt_column();
				State = 2283;
				colid();
				State = 2284;
				Match(SET);
				State = 2285;
				Match(STORAGE);
				State = 2286;
				colid();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2288;
				Match(ALTER);
				State = 2289;
				opt_column();
				State = 2290;
				colid();
				State = 2291;
				Match(ADD_P);
				State = 2292;
				Match(GENERATED);
				State = 2293;
				generated_when();
				State = 2294;
				Match(AS);
				State = 2295;
				Match(IDENTITY_P);
				State = 2296;
				optparenthesizedseqoptlist();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2298;
				Match(ALTER);
				State = 2299;
				opt_column();
				State = 2300;
				colid();
				State = 2301;
				alter_identity_column_option_list();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2303;
				Match(ALTER);
				State = 2304;
				opt_column();
				State = 2305;
				colid();
				State = 2306;
				Match(DROP);
				State = 2307;
				Match(IDENTITY_P);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2309;
				Match(ALTER);
				State = 2310;
				opt_column();
				State = 2311;
				colid();
				State = 2312;
				Match(DROP);
				State = 2313;
				Match(IDENTITY_P);
				State = 2314;
				Match(IF_P);
				State = 2315;
				Match(EXISTS);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2317;
				Match(DROP);
				State = 2318;
				opt_column();
				State = 2319;
				Match(IF_P);
				State = 2320;
				Match(EXISTS);
				State = 2321;
				colid();
				State = 2322;
				opt_drop_behavior();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2324;
				Match(DROP);
				State = 2325;
				opt_column();
				State = 2326;
				colid();
				State = 2327;
				opt_drop_behavior();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2329;
				Match(ALTER);
				State = 2330;
				opt_column();
				State = 2331;
				colid();
				State = 2332;
				opt_set_data();
				State = 2333;
				Match(TYPE_P);
				State = 2334;
				typename();
				State = 2335;
				opt_collate_clause();
				State = 2336;
				alter_using();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2338;
				Match(ALTER);
				State = 2339;
				opt_column();
				State = 2340;
				colid();
				State = 2341;
				alter_generic_options();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2343;
				Match(ADD_P);
				State = 2344;
				tableconstraint();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2345;
				Match(ALTER);
				State = 2346;
				Match(CONSTRAINT);
				State = 2347;
				name();
				State = 2348;
				constraintattributespec();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2350;
				Match(VALIDATE);
				State = 2351;
				Match(CONSTRAINT);
				State = 2352;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2353;
				Match(DROP);
				State = 2354;
				Match(CONSTRAINT);
				State = 2355;
				Match(IF_P);
				State = 2356;
				Match(EXISTS);
				State = 2357;
				name();
				State = 2358;
				opt_drop_behavior();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2360;
				Match(DROP);
				State = 2361;
				Match(CONSTRAINT);
				State = 2362;
				name();
				State = 2363;
				opt_drop_behavior();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2365;
				Match(SET);
				State = 2366;
				Match(WITHOUT);
				State = 2367;
				Match(OIDS);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2368;
				Match(CLUSTER);
				State = 2369;
				Match(ON);
				State = 2370;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2371;
				Match(SET);
				State = 2372;
				Match(WITHOUT);
				State = 2373;
				Match(CLUSTER);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2374;
				Match(SET);
				State = 2375;
				Match(LOGGED);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2376;
				Match(SET);
				State = 2377;
				Match(UNLOGGED);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2378;
				Match(ENABLE_P);
				State = 2379;
				Match(TRIGGER);
				State = 2380;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2381;
				Match(ENABLE_P);
				State = 2382;
				Match(ALWAYS);
				State = 2383;
				Match(TRIGGER);
				State = 2384;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2385;
				Match(ENABLE_P);
				State = 2386;
				Match(REPLICA);
				State = 2387;
				Match(TRIGGER);
				State = 2388;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2389;
				Match(ENABLE_P);
				State = 2390;
				Match(TRIGGER);
				State = 2391;
				Match(ALL);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2392;
				Match(ENABLE_P);
				State = 2393;
				Match(TRIGGER);
				State = 2394;
				Match(USER);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2395;
				Match(DISABLE_P);
				State = 2396;
				Match(TRIGGER);
				State = 2397;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2398;
				Match(DISABLE_P);
				State = 2399;
				Match(TRIGGER);
				State = 2400;
				Match(ALL);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2401;
				Match(DISABLE_P);
				State = 2402;
				Match(TRIGGER);
				State = 2403;
				Match(USER);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2404;
				Match(ENABLE_P);
				State = 2405;
				Match(RULE);
				State = 2406;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2407;
				Match(ENABLE_P);
				State = 2408;
				Match(ALWAYS);
				State = 2409;
				Match(RULE);
				State = 2410;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 2411;
				Match(ENABLE_P);
				State = 2412;
				Match(REPLICA);
				State = 2413;
				Match(RULE);
				State = 2414;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 2415;
				Match(DISABLE_P);
				State = 2416;
				Match(RULE);
				State = 2417;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 2418;
				Match(INHERIT);
				State = 2419;
				qualified_name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 2420;
				Match(NO);
				State = 2421;
				Match(INHERIT);
				State = 2422;
				qualified_name();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 2423;
				Match(OF);
				State = 2424;
				any_name();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 2425;
				Match(NOT);
				State = 2426;
				Match(OF);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 2427;
				Match(OWNER);
				State = 2428;
				Match(TO);
				State = 2429;
				rolespec();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 2430;
				Match(SET);
				State = 2431;
				Match(TABLESPACE);
				State = 2432;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 2433;
				Match(SET);
				State = 2434;
				reloptions();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 2435;
				Match(RESET);
				State = 2436;
				reloptions();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 2437;
				Match(REPLICA);
				State = 2438;
				Match(IDENTITY_P);
				State = 2439;
				replica_identity();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 2440;
				Match(ENABLE_P);
				State = 2441;
				Match(ROW);
				State = 2442;
				Match(LEVEL);
				State = 2443;
				Match(SECURITY);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 2444;
				Match(DISABLE_P);
				State = 2445;
				Match(ROW);
				State = 2446;
				Match(LEVEL);
				State = 2447;
				Match(SECURITY);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 2448;
				Match(FORCE);
				State = 2449;
				Match(ROW);
				State = 2450;
				Match(LEVEL);
				State = 2451;
				Match(SECURITY);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 2452;
				Match(NO);
				State = 2453;
				Match(FORCE);
				State = 2454;
				Match(ROW);
				State = 2455;
				Match(LEVEL);
				State = 2456;
				Match(SECURITY);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 2457;
				alter_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_column_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public Alter_column_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_column_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_column_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_column_default(this);
		}
	}

	[RuleVersion(0)]
	public Alter_column_defaultContext alter_column_default() {
		Alter_column_defaultContext _localctx = new Alter_column_defaultContext(Context, State);
		EnterRule(_localctx, 106, RULE_alter_column_default);
		try {
			State = 2465;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2460;
				Match(SET);
				State = 2461;
				Match(DEFAULT);
				State = 2462;
				a_expr();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2463;
				Match(DROP);
				State = 2464;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_drop_behaviorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_drop_behaviorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_drop_behavior; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_drop_behavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_drop_behavior(this);
		}
	}

	[RuleVersion(0)]
	public Opt_drop_behaviorContext opt_drop_behavior() {
		Opt_drop_behaviorContext _localctx = new Opt_drop_behaviorContext(Context, State);
		EnterRule(_localctx, 108, RULE_opt_drop_behavior);
		try {
			State = 2470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2467;
				Match(CASCADE);
				}
				break;
			case RESTRICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2468;
				Match(RESTRICT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_collate_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_collate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_collate_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_collate_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_collate_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_collate_clauseContext opt_collate_clause() {
		Opt_collate_clauseContext _localctx = new Opt_collate_clauseContext(Context, State);
		EnterRule(_localctx, 110, RULE_opt_collate_clause);
		try {
			State = 2475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLLATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2472;
				Match(COLLATE);
				State = 2473;
				any_name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Alter_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_using(this);
		}
	}

	[RuleVersion(0)]
	public Alter_usingContext alter_using() {
		Alter_usingContext _localctx = new Alter_usingContext(Context, State);
		EnterRule(_localctx, 112, RULE_alter_using);
		try {
			State = 2480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2477;
				Match(USING);
				State = 2478;
				a_expr();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replica_identityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Replica_identityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replica_identity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReplica_identity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReplica_identity(this);
		}
	}

	[RuleVersion(0)]
	public Replica_identityContext replica_identity() {
		Replica_identityContext _localctx = new Replica_identityContext(Context, State);
		EnterRule(_localctx, 114, RULE_replica_identity);
		try {
			State = 2488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOTHING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2482;
				Match(NOTHING);
				}
				break;
			case FULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2483;
				Match(FULL);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2484;
				Match(DEFAULT);
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2485;
				Match(USING);
				State = 2486;
				Match(INDEX);
				State = 2487;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReloptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_listContext reloption_list() {
			return GetRuleContext<Reloption_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloptions(this);
		}
	}

	[RuleVersion(0)]
	public ReloptionsContext reloptions() {
		ReloptionsContext _localctx = new ReloptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_reloptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2490;
			Match(OPEN_PAREN);
			State = 2491;
			reloption_list();
			State = 2492;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_reloptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Opt_reloptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_reloptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_reloptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_reloptions(this);
		}
	}

	[RuleVersion(0)]
	public Opt_reloptionsContext opt_reloptions() {
		Opt_reloptionsContext _localctx = new Opt_reloptionsContext(Context, State);
		EnterRule(_localctx, 118, RULE_opt_reloptions);
		try {
			State = 2497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2494;
				Match(WITH);
				State = 2495;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloption_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_elemContext[] reloption_elem() {
			return GetRuleContexts<Reloption_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reloption_elemContext reloption_elem(int i) {
			return GetRuleContext<Reloption_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Reloption_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_list(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_listContext reloption_list() {
		Reloption_listContext _localctx = new Reloption_listContext(Context, State);
		EnterRule(_localctx, 120, RULE_reloption_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			reloption_elem();
			State = 2504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2500;
				Match(COMMA);
				State = 2501;
				reloption_elem();
				}
				}
				State = 2506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reloption_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext[] collabel() {
			return GetRuleContexts<CollabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel(int i) {
			return GetRuleContext<CollabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		public Reloption_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloption_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReloption_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReloption_elem(this);
		}
	}

	[RuleVersion(0)]
	public Reloption_elemContext reloption_elem() {
		Reloption_elemContext _localctx = new Reloption_elemContext(Context, State);
		EnterRule(_localctx, 122, RULE_reloption_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			collabel();
			State = 2516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				{
				State = 2508;
				Match(EQUAL);
				State = 2509;
				def_arg();
				}
				break;
			case DOT:
				{
				State = 2510;
				Match(DOT);
				State = 2511;
				collabel();
				State = 2514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 2512;
					Match(EQUAL);
					State = 2513;
					def_arg();
					}
				}

				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identity_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_optionContext[] alter_identity_column_option() {
			return GetRuleContexts<Alter_identity_column_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_identity_column_optionContext alter_identity_column_option(int i) {
			return GetRuleContext<Alter_identity_column_optionContext>(i);
		}
		public Alter_identity_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_option_listContext alter_identity_column_option_list() {
		Alter_identity_column_option_listContext _localctx = new Alter_identity_column_option_listContext(Context, State);
		EnterRule(_localctx, 124, RULE_alter_identity_column_option_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2518;
					alter_identity_column_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identity_column_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem() {
			return GetRuleContext<SeqoptelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		public Alter_identity_column_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identity_column_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_identity_column_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_identity_column_option(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identity_column_optionContext alter_identity_column_option() {
		Alter_identity_column_optionContext _localctx = new Alter_identity_column_optionContext(Context, State);
		EnterRule(_localctx, 126, RULE_alter_identity_column_option);
		try {
			State = 2535;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTART:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2523;
				Match(RESTART);
				State = 2527;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 2524;
					opt_with();
					State = 2525;
					numericonly();
					}
					break;
				}
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2529;
				Match(SET);
				State = 2533;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case OWNED:
				case RESTART:
				case SEQUENCE:
				case START:
					{
					State = 2530;
					seqoptelem();
					}
					break;
				case GENERATED:
					{
					State = 2531;
					Match(GENERATED);
					State = 2532;
					generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionboundspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partboundContext hash_partbound() {
			return GetRuleContext<Hash_partboundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public PartitionboundspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionboundspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionboundspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionboundspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionboundspecContext partitionboundspec() {
		PartitionboundspecContext _localctx = new PartitionboundspecContext(Context, State);
		EnterRule(_localctx, 128, RULE_partitionboundspec);
		try {
			State = 2563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2537;
				Match(FOR);
				State = 2538;
				Match(VALUES);
				State = 2539;
				Match(WITH);
				State = 2540;
				Match(OPEN_PAREN);
				State = 2541;
				hash_partbound();
				State = 2542;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2544;
				Match(FOR);
				State = 2545;
				Match(VALUES);
				State = 2546;
				Match(IN_P);
				State = 2547;
				Match(OPEN_PAREN);
				State = 2548;
				expr_list();
				State = 2549;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2551;
				Match(FOR);
				State = 2552;
				Match(VALUES);
				State = 2553;
				Match(FROM);
				State = 2554;
				Match(OPEN_PAREN);
				State = 2555;
				expr_list();
				State = 2556;
				Match(CLOSE_PAREN);
				State = 2557;
				Match(TO);
				State = 2558;
				Match(OPEN_PAREN);
				State = 2559;
				expr_list();
				State = 2560;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2562;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partbound_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Hash_partbound_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound_elem(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partbound_elemContext hash_partbound_elem() {
		Hash_partbound_elemContext _localctx = new Hash_partbound_elemContext(Context, State);
		EnterRule(_localctx, 130, RULE_hash_partbound_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2565;
			nonreservedword();
			State = 2566;
			iconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partbound_elemContext[] hash_partbound_elem() {
			return GetRuleContexts<Hash_partbound_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hash_partbound_elemContext hash_partbound_elem(int i) {
			return GetRuleContext<Hash_partbound_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Hash_partboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partbound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHash_partbound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHash_partbound(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partboundContext hash_partbound() {
		Hash_partboundContext _localctx = new Hash_partboundContext(Context, State);
		EnterRule(_localctx, 132, RULE_hash_partbound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568;
			hash_partbound_elem();
			State = 2573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2569;
				Match(COMMA);
				State = 2570;
				hash_partbound_elem();
				}
				}
				State = 2575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltercompositetypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdsContext alter_type_cmds() {
			return GetRuleContext<Alter_type_cmdsContext>(0);
		}
		public AltercompositetypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercompositetypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercompositetypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercompositetypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercompositetypestmtContext altercompositetypestmt() {
		AltercompositetypestmtContext _localctx = new AltercompositetypestmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_altercompositetypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2576;
			Match(ALTER);
			State = 2577;
			Match(TYPE_P);
			State = 2578;
			any_name();
			State = 2579;
			alter_type_cmds();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_type_cmdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdContext[] alter_type_cmd() {
			return GetRuleContexts<Alter_type_cmdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_type_cmdContext alter_type_cmd(int i) {
			return GetRuleContext<Alter_type_cmdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_type_cmdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmds(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdsContext alter_type_cmds() {
		Alter_type_cmdsContext _localctx = new Alter_type_cmdsContext(Context, State);
		EnterRule(_localctx, 136, RULE_alter_type_cmds);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2581;
			alter_type_cmd();
			State = 2586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2582;
				Match(COMMA);
				State = 2583;
				alter_type_cmd();
				}
				}
				State = 2588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_type_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement() {
			return GetRuleContext<TablefuncelementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_set_dataContext opt_set_data() {
			return GetRuleContext<Opt_set_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		public Alter_type_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_type_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_type_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Alter_type_cmdContext alter_type_cmd() {
		Alter_type_cmdContext _localctx = new Alter_type_cmdContext(Context, State);
		EnterRule(_localctx, 138, RULE_alter_type_cmd);
		try {
			State = 2612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2589;
				Match(ADD_P);
				State = 2590;
				Match(ATTRIBUTE);
				State = 2591;
				tablefuncelement();
				State = 2592;
				opt_drop_behavior();
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2594;
				Match(DROP);
				State = 2595;
				Match(ATTRIBUTE);
				State = 2598;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 2596;
					Match(IF_P);
					State = 2597;
					Match(EXISTS);
					}
					break;
				}
				State = 2600;
				colid();
				State = 2601;
				opt_drop_behavior();
				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2603;
				Match(ALTER);
				State = 2604;
				Match(ATTRIBUTE);
				State = 2605;
				colid();
				State = 2606;
				opt_set_data();
				State = 2607;
				Match(TYPE_P);
				State = 2608;
				typename();
				State = 2609;
				opt_collate_clause();
				State = 2610;
				opt_drop_behavior();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseportalstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public CloseportalstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeportalstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCloseportalstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCloseportalstmt(this);
		}
	}

	[RuleVersion(0)]
	public CloseportalstmtContext closeportalstmt() {
		CloseportalstmtContext _localctx = new CloseportalstmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_closeportalstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2614;
			Match(CLOSE);
			State = 2617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 2615;
				cursor_name();
				}
				break;
			case ALL:
				{
				State = 2616;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_binaryContext opt_binary() {
			return GetRuleContext<Opt_binaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_fromContext copy_from() {
			return GetRuleContext<Copy_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_programContext opt_program() {
			return GetRuleContext<Opt_programContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_file_nameContext copy_file_name() {
			return GetRuleContext<Copy_file_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_delimiterContext copy_delimiter() {
			return GetRuleContext<Copy_delimiterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_optionsContext copy_options() {
			return GetRuleContext<Copy_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public CopystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopystmt(this);
		}
	}

	[RuleVersion(0)]
	public CopystmtContext copystmt() {
		CopystmtContext _localctx = new CopystmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_copystmt);
		try {
			State = 2641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2619;
				Match(COPY);
				State = 2620;
				opt_binary();
				State = 2621;
				qualified_name();
				State = 2622;
				opt_column_list();
				State = 2623;
				copy_from();
				State = 2624;
				opt_program();
				State = 2625;
				copy_file_name();
				State = 2626;
				copy_delimiter();
				State = 2627;
				opt_with();
				State = 2628;
				copy_options();
				State = 2629;
				where_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2631;
				Match(COPY);
				State = 2632;
				Match(OPEN_PAREN);
				State = 2633;
				preparablestmt();
				State = 2634;
				Match(CLOSE_PAREN);
				State = 2635;
				Match(TO);
				State = 2636;
				opt_program();
				State = 2637;
				copy_file_name();
				State = 2638;
				opt_with();
				State = 2639;
				copy_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Copy_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_from(this);
		}
	}

	[RuleVersion(0)]
	public Copy_fromContext copy_from() {
		Copy_fromContext _localctx = new Copy_fromContext(Context, State);
		EnterRule(_localctx, 144, RULE_copy_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2643;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_programContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		public Opt_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_program(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_program(this);
		}
	}

	[RuleVersion(0)]
	public Opt_programContext opt_program() {
		Opt_programContext _localctx = new Opt_programContext(Context, State);
		EnterRule(_localctx, 146, RULE_opt_program);
		try {
			State = 2647;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROGRAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2645;
				Match(PROGRAM);
				}
				break;
			case STDIN:
			case STDOUT:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_file_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		public Copy_file_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_file_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_file_name(this);
		}
	}

	[RuleVersion(0)]
	public Copy_file_nameContext copy_file_name() {
		Copy_file_nameContext _localctx = new Copy_file_nameContext(Context, State);
		EnterRule(_localctx, 148, RULE_copy_file_name);
		try {
			State = 2652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2649;
				sconst();
				}
				break;
			case STDIN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2650;
				Match(STDIN);
				}
				break;
			case STDOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2651;
				Match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_listContext copy_opt_list() {
			return GetRuleContext<Copy_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_listContext copy_generic_opt_list() {
			return GetRuleContext<Copy_generic_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_options(this);
		}
	}

	[RuleVersion(0)]
	public Copy_optionsContext copy_options() {
		Copy_optionsContext _localctx = new Copy_optionsContext(Context, State);
		EnterRule(_localctx, 150, RULE_copy_options);
		try {
			State = 2659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2654;
				copy_opt_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2655;
				Match(OPEN_PAREN);
				State = 2656;
				copy_generic_opt_list();
				State = 2657;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_itemContext[] copy_opt_item() {
			return GetRuleContexts<Copy_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_opt_itemContext copy_opt_item(int i) {
			return GetRuleContext<Copy_opt_itemContext>(i);
		}
		public Copy_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_listContext copy_opt_list() {
		Copy_opt_listContext _localctx = new Copy_opt_listContext(Context, State);
		EnterRule(_localctx, 152, RULE_copy_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 17716740097L) != 0 || (((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 35459325497345L) != 0 || _la==QUOTE) {
				{
				{
				State = 2661;
				copy_opt_item();
				}
				}
				State = 2666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		public Copy_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_opt_itemContext copy_opt_item() {
		Copy_opt_itemContext _localctx = new Copy_opt_itemContext(Context, State);
		EnterRule(_localctx, 154, RULE_copy_opt_item);
		try {
			State = 2702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2667;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2668;
				Match(FREEZE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2669;
				Match(DELIMITER);
				State = 2670;
				opt_as();
				State = 2671;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2673;
				Match(NULL_P);
				State = 2674;
				opt_as();
				State = 2675;
				sconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2677;
				Match(CSV);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2678;
				Match(HEADER_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2679;
				Match(QUOTE);
				State = 2680;
				opt_as();
				State = 2681;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2683;
				Match(ESCAPE);
				State = 2684;
				opt_as();
				State = 2685;
				sconst();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2687;
				Match(FORCE);
				State = 2688;
				Match(QUOTE);
				State = 2689;
				columnlist();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2690;
				Match(FORCE);
				State = 2691;
				Match(QUOTE);
				State = 2692;
				Match(STAR);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2693;
				Match(FORCE);
				State = 2694;
				Match(NOT);
				State = 2695;
				Match(NULL_P);
				State = 2696;
				columnlist();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2697;
				Match(FORCE);
				State = 2698;
				Match(NULL_P);
				State = 2699;
				columnlist();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2700;
				Match(ENCODING);
				State = 2701;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_binaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		public Opt_binaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_binary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_binary(this);
		}
	}

	[RuleVersion(0)]
	public Opt_binaryContext opt_binary() {
		Opt_binaryContext _localctx = new Opt_binaryContext(Context, State);
		EnterRule(_localctx, 156, RULE_opt_binary);
		try {
			State = 2706;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2704;
				Match(BINARY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_delimiterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_usingContext opt_using() {
			return GetRuleContext<Opt_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Copy_delimiterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_delimiter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_delimiter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_delimiter(this);
		}
	}

	[RuleVersion(0)]
	public Copy_delimiterContext copy_delimiter() {
		Copy_delimiterContext _localctx = new Copy_delimiterContext(Context, State);
		EnterRule(_localctx, 158, RULE_copy_delimiter);
		try {
			State = 2713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
			case DELIMITERS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2708;
				opt_using();
				State = 2709;
				Match(DELIMITERS);
				State = 2710;
				sconst();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NULL_P:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case BINARY:
			case FREEZE:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case CSV:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DELIMITER:
			case DISCARD:
			case DROP:
			case ENCODING:
			case ESCAPE:
			case EXECUTE:
			case EXPLAIN:
			case FORCE:
			case HEADER_P:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case QUOTE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		public Opt_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_usingContext opt_using() {
		Opt_usingContext _localctx = new Opt_usingContext(Context, State);
		EnterRule(_localctx, 160, RULE_opt_using);
		try {
			State = 2717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2715;
				Match(USING);
				}
				break;
			case DELIMITERS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_elemContext[] copy_generic_opt_elem() {
			return GetRuleContexts<Copy_generic_opt_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_elemContext copy_generic_opt_elem(int i) {
			return GetRuleContext<Copy_generic_opt_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_listContext copy_generic_opt_list() {
		Copy_generic_opt_listContext _localctx = new Copy_generic_opt_listContext(Context, State);
		EnterRule(_localctx, 162, RULE_copy_generic_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2719;
			copy_generic_opt_elem();
			State = 2724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2720;
				Match(COMMA);
				State = 2721;
				copy_generic_opt_elem();
				}
				}
				State = 2726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_argContext copy_generic_opt_arg() {
			return GetRuleContext<Copy_generic_opt_argContext>(0);
		}
		public Copy_generic_opt_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_elem(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_elemContext copy_generic_opt_elem() {
		Copy_generic_opt_elemContext _localctx = new Copy_generic_opt_elemContext(Context, State);
		EnterRule(_localctx, 164, RULE_copy_generic_opt_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2727;
			collabel();
			State = 2728;
			copy_generic_opt_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
			return GetRuleContext<Copy_generic_opt_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Copy_generic_opt_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_argContext copy_generic_opt_arg() {
		Copy_generic_opt_argContext _localctx = new Copy_generic_opt_argContext(Context, State);
		EnterRule(_localctx, 166, RULE_copy_generic_opt_arg);
		try {
			State = 2738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2730;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2731;
				numericonly();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2732;
				Match(STAR);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2733;
				Match(OPEN_PAREN);
				State = 2734;
				copy_generic_opt_arg_list();
				State = 2735;
				Match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_list_itemContext[] copy_generic_opt_arg_list_item() {
			return GetRuleContexts<Copy_generic_opt_arg_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item(int i) {
			return GetRuleContext<Copy_generic_opt_arg_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Copy_generic_opt_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_listContext copy_generic_opt_arg_list() {
		Copy_generic_opt_arg_listContext _localctx = new Copy_generic_opt_arg_listContext(Context, State);
		EnterRule(_localctx, 168, RULE_copy_generic_opt_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2740;
			copy_generic_opt_arg_list_item();
			State = 2745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2741;
				Match(COMMA);
				State = 2742;
				copy_generic_opt_arg_list_item();
				}
				}
				State = 2747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Copy_generic_opt_arg_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		public Copy_generic_opt_arg_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copy_generic_opt_arg_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCopy_generic_opt_arg_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCopy_generic_opt_arg_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Copy_generic_opt_arg_list_itemContext copy_generic_opt_arg_list_item() {
		Copy_generic_opt_arg_list_itemContext _localctx = new Copy_generic_opt_arg_list_itemContext(Context, State);
		EnterRule(_localctx, 170, RULE_copy_generic_opt_arg_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2748;
			opt_boolean_or_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptpartitionspecContext optpartitionspec() {
			return GetRuleContext<OptpartitionspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestmtContext createstmt() {
		CreatestmtContext _localctx = new CreatestmtContext(Context, State);
		EnterRule(_localctx, 172, RULE_createstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2750;
			Match(CREATE);
			State = 2751;
			opttemp();
			State = 2752;
			Match(TABLE);
			State = 2756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 2753;
				Match(IF_P);
				State = 2754;
				Match(NOT);
				State = 2755;
				Match(EXISTS);
				}
				break;
			}
			State = 2758;
			qualified_name();
			State = 2789;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				{
				State = 2759;
				Match(OPEN_PAREN);
				State = 2760;
				opttableelementlist();
				State = 2761;
				Match(CLOSE_PAREN);
				State = 2762;
				optinherit();
				State = 2763;
				optpartitionspec();
				State = 2764;
				table_access_method_clause();
				State = 2765;
				optwith();
				State = 2766;
				oncommitoption();
				State = 2767;
				opttablespace();
				}
				break;
			case OF:
				{
				State = 2769;
				Match(OF);
				State = 2770;
				any_name();
				State = 2771;
				opttypedtableelementlist();
				State = 2772;
				optpartitionspec();
				State = 2773;
				table_access_method_clause();
				State = 2774;
				optwith();
				State = 2775;
				oncommitoption();
				State = 2776;
				opttablespace();
				}
				break;
			case PARTITION:
				{
				State = 2778;
				Match(PARTITION);
				State = 2779;
				Match(OF);
				State = 2780;
				qualified_name();
				State = 2781;
				opttypedtableelementlist();
				State = 2782;
				partitionboundspec();
				State = 2783;
				optpartitionspec();
				State = 2784;
				table_access_method_clause();
				State = 2785;
				optwith();
				State = 2786;
				oncommitoption();
				State = 2787;
				opttablespace();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OpttempContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttemp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttemp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttemp(this);
		}
	}

	[RuleVersion(0)]
	public OpttempContext opttemp() {
		OpttempContext _localctx = new OpttempContext(Context, State);
		EnterRule(_localctx, 174, RULE_opttemp);
		int _la;
		try {
			State = 2799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TEMPORARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2791;
				Match(TEMPORARY);
				}
				break;
			case TEMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2792;
				Match(TEMP);
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2793;
				Match(LOCAL);
				State = 2794;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case GLOBAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2795;
				Match(GLOBAL);
				State = 2796;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case UNLOGGED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2797;
				Match(UNLOGGED);
				}
				break;
			case TABLE:
			case RECURSIVE:
			case SEQUENCE:
			case VIEW:
				EnterOuterAlt(_localctx, 6);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementlistContext tableelementlist() {
			return GetRuleContext<TableelementlistContext>(0);
		}
		public OpttableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttableelementlistContext opttableelementlist() {
		OpttableelementlistContext _localctx = new OpttableelementlistContext(Context, State);
		EnterRule(_localctx, 176, RULE_opttableelementlist);
		try {
			State = 2803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case FOREIGN:
			case PRIMARY:
			case TABLE:
			case UNIQUE:
			case IS:
			case LEFT:
			case LIKE:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2801;
				tableelementlist();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementlistContext typedtableelementlist() {
			return GetRuleContext<TypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OpttypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttypedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttypedtableelementlistContext opttypedtableelementlist() {
		OpttypedtableelementlistContext _localctx = new OpttypedtableelementlistContext(Context, State);
		EnterRule(_localctx, 178, RULE_opttypedtableelementlist);
		try {
			State = 2810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2805;
				Match(OPEN_PAREN);
				State = 2806;
				typedtableelementlist();
				State = 2807;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableelementContext[] tableelement() {
			return GetRuleContexts<TableelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableelementContext tableelement(int i) {
			return GetRuleContext<TableelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TableelementlistContext tableelementlist() {
		TableelementlistContext _localctx = new TableelementlistContext(Context, State);
		EnterRule(_localctx, 180, RULE_tableelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2812;
			tableelement();
			State = 2817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2813;
				Match(COMMA);
				State = 2814;
				tableelement();
				}
				}
				State = 2819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedtableelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementContext[] typedtableelement() {
			return GetRuleContexts<TypedtableelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedtableelementContext typedtableelement(int i) {
			return GetRuleContext<TypedtableelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TypedtableelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementlistContext typedtableelementlist() {
		TypedtableelementlistContext _localctx = new TypedtableelementlistContext(Context, State);
		EnterRule(_localctx, 182, RULE_typedtableelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2820;
			typedtableelement();
			State = 2825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2821;
				Match(COMMA);
				State = 2822;
				typedtableelement();
				}
				}
				State = 2827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeclauseContext tablelikeclause() {
			return GetRuleContext<TablelikeclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefContext columnDef() {
			return GetRuleContext<ColumnDefContext>(0);
		}
		public TableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableelement(this);
		}
	}

	[RuleVersion(0)]
	public TableelementContext tableelement() {
		TableelementContext _localctx = new TableelementContext(Context, State);
		EnterRule(_localctx, 184, RULE_tableelement);
		try {
			State = 2831;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2828;
				tableconstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2829;
				tablelikeclause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2830;
				columnDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedtableelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnOptionsContext columnOptions() {
			return GetRuleContext<ColumnOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		public TypedtableelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedtableelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypedtableelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypedtableelement(this);
		}
	}

	[RuleVersion(0)]
	public TypedtableelementContext typedtableelement() {
		TypedtableelementContext _localctx = new TypedtableelementContext(Context, State);
		EnterRule(_localctx, 186, RULE_typedtableelement);
		try {
			State = 2835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2833;
				columnOptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2834;
				tableconstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnDef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefContext columnDef() {
		ColumnDefContext _localctx = new ColumnDefContext(Context, State);
		EnterRule(_localctx, 188, RULE_columnDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2837;
			colid();
			State = 2838;
			typename();
			State = 2839;
			create_generic_options();
			State = 2840;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnOptions(this);
		}
	}

	[RuleVersion(0)]
	public ColumnOptionsContext columnOptions() {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(Context, State);
		EnterRule(_localctx, 190, RULE_columnOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2842;
			colid();
			State = 2845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2843;
				Match(WITH);
				State = 2844;
				Match(OPTIONS);
				}
			}

			State = 2847;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColquallistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintContext[] colconstraint() {
			return GetRuleContexts<ColconstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintContext colconstraint(int i) {
			return GetRuleContext<ColconstraintContext>(i);
		}
		public ColquallistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colquallist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColquallist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColquallist(this);
		}
	}

	[RuleVersion(0)]
	public ColquallistContext colquallist() {
		ColquallistContext _localctx = new ColquallistContext(Context, State);
		EnterRule(_localctx, 192, RULE_colquallist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 72084085530433547L) != 0 || _la==GENERATED) {
				{
				{
				State = 2849;
				colconstraint();
				}
				}
				State = 2854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColconstraintelemContext colconstraintelem() {
			return GetRuleContext<ColconstraintelemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattrContext constraintattr() {
			return GetRuleContext<ConstraintattrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ColconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraint(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintContext colconstraint() {
		ColconstraintContext _localctx = new ColconstraintContext(Context, State);
		EnterRule(_localctx, 194, RULE_colconstraint);
		try {
			State = 2863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2855;
				Match(CONSTRAINT);
				State = 2856;
				name();
				State = 2857;
				colconstraintelem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2859;
				colconstraintelem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2860;
				constraintattr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2861;
				Match(COLLATE);
				State = 2862;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_no_inheritContext opt_no_inherit() {
			return GetRuleContext<Opt_no_inheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generated_whenContext generated_when() {
			return GetRuleContext<Generated_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
			return GetRuleContext<OptparenthesizedseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ColconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ColconstraintelemContext colconstraintelem() {
		ColconstraintelemContext _localctx = new ColconstraintelemContext(Context, State);
		EnterRule(_localctx, 196, RULE_colconstraintelem);
		try {
			State = 2903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2865;
				Match(NOT);
				State = 2866;
				Match(NULL_P);
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2867;
				Match(NULL_P);
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2868;
				Match(UNIQUE);
				State = 2869;
				opt_definition();
				State = 2870;
				optconstablespace();
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2872;
				Match(PRIMARY);
				State = 2873;
				Match(KEY);
				State = 2874;
				opt_definition();
				State = 2875;
				optconstablespace();
				}
				break;
			case CHECK:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2877;
				Match(CHECK);
				State = 2878;
				Match(OPEN_PAREN);
				State = 2879;
				a_expr();
				State = 2880;
				Match(CLOSE_PAREN);
				State = 2881;
				opt_no_inherit();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2883;
				Match(DEFAULT);
				State = 2884;
				b_expr(0);
				}
				break;
			case GENERATED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2885;
				Match(GENERATED);
				State = 2886;
				generated_when();
				State = 2887;
				Match(AS);
				State = 2895;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTITY_P:
					{
					State = 2888;
					Match(IDENTITY_P);
					State = 2889;
					optparenthesizedseqoptlist();
					}
					break;
				case OPEN_PAREN:
					{
					State = 2890;
					Match(OPEN_PAREN);
					State = 2891;
					a_expr();
					State = 2892;
					Match(CLOSE_PAREN);
					State = 2893;
					Match(STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2897;
				Match(REFERENCES);
				State = 2898;
				qualified_name();
				State = 2899;
				opt_column_list();
				State = 2900;
				key_match();
				State = 2901;
				key_actions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generated_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Generated_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generated_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerated_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerated_when(this);
		}
	}

	[RuleVersion(0)]
	public Generated_whenContext generated_when() {
		Generated_whenContext _localctx = new Generated_whenContext(Context, State);
		EnterRule(_localctx, 198, RULE_generated_when);
		try {
			State = 2908;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALWAYS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2905;
				Match(ALWAYS);
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2906;
				Match(BY);
				State = 2907;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		public ConstraintattrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattr(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattrContext constraintattr() {
		ConstraintattrContext _localctx = new ConstraintattrContext(Context, State);
		EnterRule(_localctx, 200, RULE_constraintattr);
		int _la;
		try {
			State = 2915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFERRABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2910;
				Match(DEFERRABLE);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2911;
				Match(NOT);
				State = 2912;
				Match(DEFERRABLE);
				}
				break;
			case INITIALLY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2913;
				Match(INITIALLY);
				State = 2914;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionlistContext tablelikeoptionlist() {
			return GetRuleContext<TablelikeoptionlistContext>(0);
		}
		public TablelikeclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeclause(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeclauseContext tablelikeclause() {
		TablelikeclauseContext _localctx = new TablelikeclauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_tablelikeclause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2917;
			Match(LIKE);
			State = 2918;
			qualified_name();
			State = 2919;
			tablelikeoptionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeoptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionContext[] tablelikeoption() {
			return GetRuleContexts<TablelikeoptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablelikeoptionContext tablelikeoption(int i) {
			return GetRuleContext<TablelikeoptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INCLUDING() { return GetTokens(PostgreSQLParser.INCLUDING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING(int i) {
			return GetToken(PostgreSQLParser.INCLUDING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUDING() { return GetTokens(PostgreSQLParser.EXCLUDING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING(int i) {
			return GetToken(PostgreSQLParser.EXCLUDING, i);
		}
		public TablelikeoptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoptionlist(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionlistContext tablelikeoptionlist() {
		TablelikeoptionlistContext _localctx = new TablelikeoptionlistContext(Context, State);
		EnterRule(_localctx, 204, RULE_tablelikeoptionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCLUDING || _la==INCLUDING) {
				{
				{
				State = 2921;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2922;
				tablelikeoption();
				}
				}
				State = 2927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablelikeoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public TablelikeoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablelikeoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablelikeoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablelikeoption(this);
		}
	}

	[RuleVersion(0)]
	public TablelikeoptionContext tablelikeoption() {
		TablelikeoptionContext _localctx = new TablelikeoptionContext(Context, State);
		EnterRule(_localctx, 206, RULE_tablelikeoption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2928;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || (((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 576460752303947809L) != 0 || _la==INDEXES || _la==STATISTICS || _la==STORAGE || _la==GENERATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintelemContext constraintelem() {
			return GetRuleContext<ConstraintelemContext>(0);
		}
		public TableconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTableconstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTableconstraint(this);
		}
	}

	[RuleVersion(0)]
	public TableconstraintContext tableconstraint() {
		TableconstraintContext _localctx = new TableconstraintContext(Context, State);
		EnterRule(_localctx, 208, RULE_tableconstraint);
		try {
			State = 2935;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONSTRAINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2930;
				Match(CONSTRAINT);
				State = 2931;
				name();
				State = 2932;
				constraintelem();
				}
				break;
			case CHECK:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
			case EXCLUDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2934;
				constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_c_includeContext opt_c_include() {
			return GetRuleContext<Opt_c_includeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptconstablespaceContext optconstablespace() {
			return GetRuleContext<OptconstablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistingindexContext existingindex() {
			return GetRuleContext<ExistingindexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintlistContext exclusionconstraintlist() {
			return GetRuleContext<ExclusionconstraintlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionwhereclauseContext exclusionwhereclause() {
			return GetRuleContext<ExclusionwhereclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_matchContext key_match() {
			return GetRuleContext<Key_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionsContext key_actions() {
			return GetRuleContext<Key_actionsContext>(0);
		}
		public ConstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintelemContext constraintelem() {
		ConstraintelemContext _localctx = new ConstraintelemContext(Context, State);
		EnterRule(_localctx, 210, RULE_constraintelem);
		try {
			State = 2995;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHECK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2937;
				Match(CHECK);
				State = 2938;
				Match(OPEN_PAREN);
				State = 2939;
				a_expr();
				State = 2940;
				Match(CLOSE_PAREN);
				State = 2941;
				constraintattributespec();
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2943;
				Match(UNIQUE);
				State = 2955;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 2944;
					Match(OPEN_PAREN);
					State = 2945;
					columnlist();
					State = 2946;
					Match(CLOSE_PAREN);
					State = 2947;
					opt_c_include();
					State = 2948;
					opt_definition();
					State = 2949;
					optconstablespace();
					State = 2950;
					constraintattributespec();
					}
					break;
				case USING:
					{
					State = 2952;
					existingindex();
					State = 2953;
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PRIMARY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2957;
				Match(PRIMARY);
				State = 2958;
				Match(KEY);
				State = 2970;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 2959;
					Match(OPEN_PAREN);
					State = 2960;
					columnlist();
					State = 2961;
					Match(CLOSE_PAREN);
					State = 2962;
					opt_c_include();
					State = 2963;
					opt_definition();
					State = 2964;
					optconstablespace();
					State = 2965;
					constraintattributespec();
					}
					break;
				case USING:
					{
					State = 2967;
					existingindex();
					State = 2968;
					constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EXCLUDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2972;
				Match(EXCLUDE);
				State = 2973;
				access_method_clause();
				State = 2974;
				Match(OPEN_PAREN);
				State = 2975;
				exclusionconstraintlist();
				State = 2976;
				Match(CLOSE_PAREN);
				State = 2977;
				opt_c_include();
				State = 2978;
				opt_definition();
				State = 2979;
				optconstablespace();
				State = 2980;
				exclusionwhereclause();
				State = 2981;
				constraintattributespec();
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2983;
				Match(FOREIGN);
				State = 2984;
				Match(KEY);
				State = 2985;
				Match(OPEN_PAREN);
				State = 2986;
				columnlist();
				State = 2987;
				Match(CLOSE_PAREN);
				State = 2988;
				Match(REFERENCES);
				State = 2989;
				qualified_name();
				State = 2990;
				opt_column_list();
				State = 2991;
				key_match();
				State = 2992;
				key_actions();
				State = 2993;
				constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_no_inheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public Opt_no_inheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_no_inherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_no_inherit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_no_inherit(this);
		}
	}

	[RuleVersion(0)]
	public Opt_no_inheritContext opt_no_inherit() {
		Opt_no_inheritContext _localctx = new Opt_no_inheritContext(Context, State);
		EnterRule(_localctx, 212, RULE_opt_no_inherit);
		try {
			State = 3000;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2997;
				Match(NO);
				State = 2998;
				Match(INHERIT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_column_listContext opt_column_list() {
		Opt_column_listContext _localctx = new Opt_column_listContext(Context, State);
		EnterRule(_localctx, 214, RULE_opt_column_list);
		try {
			State = 3007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3002;
				Match(OPEN_PAREN);
				State = 3003;
				columnlist();
				State = 3004;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnElemContext[] columnElem() {
			return GetRuleContexts<ColumnElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnElemContext columnElem(int i) {
			return GetRuleContext<ColumnElemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public ColumnlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnlist(this);
		}
	}

	[RuleVersion(0)]
	public ColumnlistContext columnlist() {
		ColumnlistContext _localctx = new ColumnlistContext(Context, State);
		EnterRule(_localctx, 216, RULE_columnlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009;
			columnElem();
			State = 3014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3010;
				Match(COMMA);
				State = 3011;
				columnElem();
				}
				}
				State = 3016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnElem(this);
		}
	}

	[RuleVersion(0)]
	public ColumnElemContext columnElem() {
		ColumnElemContext _localctx = new ColumnElemContext(Context, State);
		EnterRule(_localctx, 218, RULE_columnElem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3017;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_c_includeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_c_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_c_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_c_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_c_include(this);
		}
	}

	[RuleVersion(0)]
	public Opt_c_includeContext opt_c_include() {
		Opt_c_includeContext _localctx = new Opt_c_includeContext(Context, State);
		EnterRule(_localctx, 220, RULE_opt_c_include);
		try {
			State = 3025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3019;
				Match(INCLUDE);
				State = 3020;
				Match(OPEN_PAREN);
				State = 3021;
				columnlist();
				State = 3022;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case USING:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_matchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		public Key_matchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_match(this);
		}
	}

	[RuleVersion(0)]
	public Key_matchContext key_match() {
		Key_matchContext _localctx = new Key_matchContext(Context, State);
		EnterRule(_localctx, 222, RULE_key_match);
		int _la;
		try {
			State = 3030;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3027;
				Match(MATCH);
				State = 3028;
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case ON:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionconstraintlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintelemContext[] exclusionconstraintelem() {
			return GetRuleContexts<ExclusionconstraintelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusionconstraintelemContext exclusionconstraintelem(int i) {
			return GetRuleContext<ExclusionconstraintelemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public ExclusionconstraintlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintlist(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintlistContext exclusionconstraintlist() {
		ExclusionconstraintlistContext _localctx = new ExclusionconstraintlistContext(Context, State);
		EnterRule(_localctx, 224, RULE_exclusionconstraintlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032;
			exclusionconstraintelem();
			State = 3037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3033;
				Match(COMMA);
				State = 3034;
				exclusionconstraintelem();
				}
				}
				State = 3039;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionconstraintelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem() {
			return GetRuleContext<Index_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionconstraintelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionconstraintelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionconstraintelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionconstraintelem(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionconstraintelemContext exclusionconstraintelem() {
		ExclusionconstraintelemContext _localctx = new ExclusionconstraintelemContext(Context, State);
		EnterRule(_localctx, 226, RULE_exclusionconstraintelem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3040;
			index_elem();
			State = 3041;
			Match(WITH);
			State = 3048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 3042;
				any_operator();
				}
				break;
			case 2:
				{
				State = 3043;
				Match(OPERATOR);
				State = 3044;
				Match(OPEN_PAREN);
				State = 3045;
				any_operator();
				State = 3046;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusionwhereclauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExclusionwhereclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusionwhereclause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExclusionwhereclause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExclusionwhereclause(this);
		}
	}

	[RuleVersion(0)]
	public ExclusionwhereclauseContext exclusionwhereclause() {
		ExclusionwhereclauseContext _localctx = new ExclusionwhereclauseContext(Context, State);
		EnterRule(_localctx, 228, RULE_exclusionwhereclause);
		try {
			State = 3056;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3050;
				Match(WHERE);
				State = 3051;
				Match(OPEN_PAREN);
				State = 3052;
				a_expr();
				State = 3053;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_updateContext key_update() {
			return GetRuleContext<Key_updateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_deleteContext key_delete() {
			return GetRuleContext<Key_deleteContext>(0);
		}
		public Key_actionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_actions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_actions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_actions(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionsContext key_actions() {
		Key_actionsContext _localctx = new Key_actionsContext(Context, State);
		EnterRule(_localctx, 230, RULE_key_actions);
		try {
			State = 3067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3058;
				key_update();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3059;
				key_delete();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3060;
				key_update();
				State = 3061;
				key_delete();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3063;
				key_delete();
				State = 3064;
				key_update();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_updateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_updateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_update; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_update(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_update(this);
		}
	}

	[RuleVersion(0)]
	public Key_updateContext key_update() {
		Key_updateContext _localctx = new Key_updateContext(Context, State);
		EnterRule(_localctx, 232, RULE_key_update);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3069;
			Match(ON);
			State = 3070;
			Match(UPDATE);
			State = 3071;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_deleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Key_actionContext key_action() {
			return GetRuleContext<Key_actionContext>(0);
		}
		public Key_deleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_delete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_delete(this);
		}
	}

	[RuleVersion(0)]
	public Key_deleteContext key_delete() {
		Key_deleteContext _localctx = new Key_deleteContext(Context, State);
		EnterRule(_localctx, 234, RULE_key_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3073;
			Match(ON);
			State = 3074;
			Match(DELETE_P);
			State = 3075;
			key_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_actionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Key_actionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterKey_action(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitKey_action(this);
		}
	}

	[RuleVersion(0)]
	public Key_actionContext key_action() {
		Key_actionContext _localctx = new Key_actionContext(Context, State);
		EnterRule(_localctx, 236, RULE_key_action);
		int _la;
		try {
			State = 3083;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3077;
				Match(NO);
				State = 3078;
				Match(ACTION);
				}
				break;
			case RESTRICT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3079;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3080;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3081;
				Match(SET);
				State = 3082;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_P) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptinheritContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptinheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optinherit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptinherit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptinherit(this);
		}
	}

	[RuleVersion(0)]
	public OptinheritContext optinherit() {
		OptinheritContext _localctx = new OptinheritContext(Context, State);
		EnterRule(_localctx, 238, RULE_optinherit);
		try {
			State = 3091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INHERITS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3085;
				Match(INHERITS);
				State = 3086;
				Match(OPEN_PAREN);
				State = 3087;
				qualified_name_list();
				State = 3088;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PARTITION:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SERVER:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptpartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionspecContext partitionspec() {
			return GetRuleContext<PartitionspecContext>(0);
		}
		public OptpartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optpartitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptpartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptpartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public OptpartitionspecContext optpartitionspec() {
		OptpartitionspecContext _localctx = new OptpartitionspecContext(Context, State);
		EnterRule(_localctx, 240, RULE_optpartitionspec);
		try {
			State = 3095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3093;
				partitionspec();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Part_paramsContext part_params() {
			return GetRuleContext<Part_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PartitionspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPartitionspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPartitionspec(this);
		}
	}

	[RuleVersion(0)]
	public PartitionspecContext partitionspec() {
		PartitionspecContext _localctx = new PartitionspecContext(Context, State);
		EnterRule(_localctx, 242, RULE_partitionspec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3097;
			Match(PARTITION);
			State = 3098;
			Match(BY);
			State = 3099;
			colid();
			State = 3100;
			Match(OPEN_PAREN);
			State = 3101;
			part_params();
			State = 3102;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Part_elemContext[] part_elem() {
			return GetRuleContexts<Part_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Part_elemContext part_elem(int i) {
			return GetRuleContext<Part_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Part_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_params(this);
		}
	}

	[RuleVersion(0)]
	public Part_paramsContext part_params() {
		Part_paramsContext _localctx = new Part_paramsContext(Context, State);
		EnterRule(_localctx, 244, RULE_part_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3104;
			part_elem();
			State = 3109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3105;
				Match(COMMA);
				State = 3106;
				part_elem();
				}
				}
				State = 3111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Part_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collateContext opt_collate() {
			return GetRuleContext<Opt_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_classContext opt_class() {
			return GetRuleContext<Opt_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Part_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_part_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPart_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPart_elem(this);
		}
	}

	[RuleVersion(0)]
	public Part_elemContext part_elem() {
		Part_elemContext _localctx = new Part_elemContext(Context, State);
		EnterRule(_localctx, 246, RULE_part_elem);
		try {
			State = 3126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3112;
				colid();
				State = 3113;
				opt_collate();
				State = 3114;
				opt_class();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3116;
				func_expr_windowless();
				State = 3117;
				opt_collate();
				State = 3118;
				opt_class();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3120;
				Match(OPEN_PAREN);
				State = 3121;
				a_expr();
				State = 3122;
				Match(CLOSE_PAREN);
				State = 3123;
				opt_collate();
				State = 3124;
				opt_class();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Table_access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_access_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_access_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Table_access_method_clauseContext table_access_method_clause() {
		Table_access_method_clauseContext _localctx = new Table_access_method_clauseContext(Context, State);
		EnterRule(_localctx, 248, RULE_table_access_method_clause);
		try {
			State = 3131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3128;
				Match(USING);
				State = 3129;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case WITHOUT:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptwithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		public OptwithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optwith; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptwith(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptwith(this);
		}
	}

	[RuleVersion(0)]
	public OptwithContext optwith() {
		OptwithContext _localctx = new OptwithContext(Context, State);
		EnterRule(_localctx, 250, RULE_optwith);
		try {
			State = 3138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3133;
				Match(WITH);
				State = 3134;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3135;
				Match(WITHOUT);
				State = 3136;
				Match(OIDS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OncommitoptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		public OncommitoptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oncommitoption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOncommitoption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOncommitoption(this);
		}
	}

	[RuleVersion(0)]
	public OncommitoptionContext oncommitoption() {
		OncommitoptionContext _localctx = new OncommitoptionContext(Context, State);
		EnterRule(_localctx, 252, RULE_oncommitoption);
		try {
			State = 3150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3140;
				Match(ON);
				State = 3141;
				Match(COMMIT);
				State = 3147;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DROP:
					{
					State = 3142;
					Match(DROP);
					}
					break;
				case DELETE_P:
					{
					State = 3143;
					Match(DELETE_P);
					State = 3144;
					Match(ROWS);
					}
					break;
				case PRESERVE:
					{
					State = 3145;
					Match(PRESERVE);
					State = 3146;
					Match(ROWS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OpttablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespace(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceContext opttablespace() {
		OpttablespaceContext _localctx = new OpttablespaceContext(Context, State);
		EnterRule(_localctx, 254, RULE_opttablespace);
		try {
			State = 3155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3152;
				Match(TABLESPACE);
				State = 3153;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AS:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public OptconstablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstablespace(this);
		}
	}

	[RuleVersion(0)]
	public OptconstablespaceContext optconstablespace() {
		OptconstablespaceContext _localctx = new OptconstablespaceContext(Context, State);
		EnterRule(_localctx, 256, RULE_optconstablespace);
		try {
			State = 3162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3157;
				Match(USING);
				State = 3158;
				Match(INDEX);
				State = 3159;
				Match(TABLESPACE);
				State = 3160;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistingindexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExistingindexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existingindex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExistingindex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExistingindex(this);
		}
	}

	[RuleVersion(0)]
	public ExistingindexContext existingindex() {
		ExistingindexContext _localctx = new ExistingindexContext(Context, State);
		EnterRule(_localctx, 258, RULE_existingindex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3164;
			Match(USING);
			State = 3165;
			Match(INDEX);
			State = 3166;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatestatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatestatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatestatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatestatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatestatsstmtContext createstatsstmt() {
		CreatestatsstmtContext _localctx = new CreatestatsstmtContext(Context, State);
		EnterRule(_localctx, 260, RULE_createstatsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3168;
			Match(CREATE);
			State = 3169;
			Match(STATISTICS);
			State = 3173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 3170;
				Match(IF_P);
				State = 3171;
				Match(NOT);
				State = 3172;
				Match(EXISTS);
				}
				break;
			}
			State = 3175;
			any_name();
			State = 3176;
			opt_name_list();
			State = 3177;
			Match(ON);
			State = 3178;
			expr_list();
			State = 3179;
			Match(FROM);
			State = 3180;
			from_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterstatsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STATISTICS() { return GetTokens(PostgreSQLParser.STATISTICS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS(int i) {
			return GetToken(PostgreSQLParser.STATISTICS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterstatsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterstatsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterstatsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterstatsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterstatsstmtContext alterstatsstmt() {
		AlterstatsstmtContext _localctx = new AlterstatsstmtContext(Context, State);
		EnterRule(_localctx, 262, RULE_alterstatsstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3182;
			Match(ALTER);
			State = 3183;
			Match(STATISTICS);
			State = 3186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 3184;
				Match(IF_P);
				State = 3185;
				Match(EXISTS);
				}
				break;
			}
			State = 3188;
			any_name();
			State = 3189;
			Match(SET);
			State = 3190;
			Match(STATISTICS);
			State = 3191;
			signediconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateasstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateasstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createasstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateasstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateasstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateasstmtContext createasstmt() {
		CreateasstmtContext _localctx = new CreateasstmtContext(Context, State);
		EnterRule(_localctx, 264, RULE_createasstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3193;
			Match(CREATE);
			State = 3194;
			opttemp();
			State = 3195;
			Match(TABLE);
			State = 3199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 3196;
				Match(IF_P);
				State = 3197;
				Match(NOT);
				State = 3198;
				Match(EXISTS);
				}
				break;
			}
			State = 3201;
			create_as_target();
			State = 3202;
			Match(AS);
			State = 3203;
			selectstmt();
			State = 3204;
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_as_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptwithContext optwith() {
			return GetRuleContext<OptwithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OncommitoptionContext oncommitoption() {
			return GetRuleContext<OncommitoptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_as_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_as_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_as_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_as_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_as_targetContext create_as_target() {
		Create_as_targetContext _localctx = new Create_as_targetContext(Context, State);
		EnterRule(_localctx, 266, RULE_create_as_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3206;
			qualified_name();
			State = 3207;
			opt_column_list();
			State = 3208;
			table_access_method_clause();
			State = 3209;
			optwith();
			State = 3210;
			oncommitoption();
			State = 3211;
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_with_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_with_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with_data(this);
		}
	}

	[RuleVersion(0)]
	public Opt_with_dataContext opt_with_data() {
		Opt_with_dataContext _localctx = new Opt_with_dataContext(Context, State);
		EnterRule(_localctx, 268, RULE_opt_with_data);
		try {
			State = 3220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3213;
				Match(WITH);
				State = 3217;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATA_P:
					{
					State = 3214;
					Match(DATA_P);
					}
					break;
				case NO:
					{
					State = 3215;
					Match(NO);
					State = 3216;
					Match(DATA_P);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatematviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptnologContext optnolog() {
			return GetRuleContext<OptnologContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_mv_targetContext create_mv_target() {
			return GetRuleContext<Create_mv_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreatematviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creatematviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatematviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatematviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatematviewstmtContext creatematviewstmt() {
		CreatematviewstmtContext _localctx = new CreatematviewstmtContext(Context, State);
		EnterRule(_localctx, 270, RULE_creatematviewstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			Match(CREATE);
			State = 3223;
			optnolog();
			State = 3224;
			Match(MATERIALIZED);
			State = 3225;
			Match(VIEW);
			State = 3229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 3226;
				Match(IF_P);
				State = 3227;
				Match(NOT);
				State = 3228;
				Match(EXISTS);
				}
				break;
			}
			State = 3231;
			create_mv_target();
			State = 3232;
			Match(AS);
			State = 3233;
			selectstmt();
			State = 3234;
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_mv_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_access_method_clauseContext table_access_method_clause() {
			return GetRuleContext<Table_access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		public Create_mv_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_mv_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_mv_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_mv_target(this);
		}
	}

	[RuleVersion(0)]
	public Create_mv_targetContext create_mv_target() {
		Create_mv_targetContext _localctx = new Create_mv_targetContext(Context, State);
		EnterRule(_localctx, 272, RULE_create_mv_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236;
			qualified_name();
			State = 3237;
			opt_column_list();
			State = 3238;
			table_access_method_clause();
			State = 3239;
			opt_reloptions();
			State = 3240;
			opttablespace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptnologContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		public OptnologContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optnolog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptnolog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptnolog(this);
		}
	}

	[RuleVersion(0)]
	public OptnologContext optnolog() {
		OptnologContext _localctx = new OptnologContext(Context, State);
		EnterRule(_localctx, 274, RULE_optnolog);
		try {
			State = 3244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNLOGGED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3242;
				Match(UNLOGGED);
				}
				break;
			case MATERIALIZED:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefreshmatviewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		public RefreshmatviewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refreshmatviewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRefreshmatviewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRefreshmatviewstmt(this);
		}
	}

	[RuleVersion(0)]
	public RefreshmatviewstmtContext refreshmatviewstmt() {
		RefreshmatviewstmtContext _localctx = new RefreshmatviewstmtContext(Context, State);
		EnterRule(_localctx, 276, RULE_refreshmatviewstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3246;
			Match(REFRESH);
			State = 3247;
			Match(MATERIALIZED);
			State = 3248;
			Match(VIEW);
			State = 3249;
			opt_concurrently();
			State = 3250;
			qualified_name();
			State = 3251;
			opt_with_data();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptseqoptlistContext optseqoptlist() {
			return GetRuleContext<OptseqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateseqstmtContext createseqstmt() {
		CreateseqstmtContext _localctx = new CreateseqstmtContext(Context, State);
		EnterRule(_localctx, 278, RULE_createseqstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3253;
			Match(CREATE);
			State = 3254;
			opttemp();
			State = 3255;
			Match(SEQUENCE);
			State = 3259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				{
				State = 3256;
				Match(IF_P);
				State = 3257;
				Match(NOT);
				State = 3258;
				Match(EXISTS);
				}
				break;
			}
			State = 3261;
			qualified_name();
			State = 3262;
			optseqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterseqstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterseqstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterseqstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterseqstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterseqstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterseqstmtContext alterseqstmt() {
		AlterseqstmtContext _localctx = new AlterseqstmtContext(Context, State);
		EnterRule(_localctx, 280, RULE_alterseqstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3264;
			Match(ALTER);
			State = 3265;
			Match(SEQUENCE);
			State = 3268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 3266;
				Match(IF_P);
				State = 3267;
				Match(EXISTS);
				}
				break;
			}
			State = 3270;
			qualified_name();
			State = 3271;
			seqoptlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		public OptseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptseqoptlistContext optseqoptlist() {
		OptseqoptlistContext _localctx = new OptseqoptlistContext(Context, State);
		EnterRule(_localctx, 282, RULE_optseqoptlist);
		try {
			State = 3275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3273;
				seqoptlist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptparenthesizedseqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptlistContext seqoptlist() {
			return GetRuleContext<SeqoptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public OptparenthesizedseqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optparenthesizedseqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptparenthesizedseqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptparenthesizedseqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public OptparenthesizedseqoptlistContext optparenthesizedseqoptlist() {
		OptparenthesizedseqoptlistContext _localctx = new OptparenthesizedseqoptlistContext(Context, State);
		EnterRule(_localctx, 284, RULE_optparenthesizedseqoptlist);
		try {
			State = 3282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3277;
				Match(OPEN_PAREN);
				State = 3278;
				seqoptlist();
				State = 3279;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqoptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext[] seqoptelem() {
			return GetRuleContexts<SeqoptelemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeqoptelemContext seqoptelem(int i) {
			return GetRuleContext<SeqoptelemContext>(i);
		}
		public SeqoptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptlist(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptlistContext seqoptlist() {
		SeqoptlistContext _localctx = new SeqoptlistContext(Context, State);
		EnterRule(_localctx, 286, RULE_seqoptlist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3285;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3284;
					seqoptelem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeqoptelemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_byContext opt_by() {
			return GetRuleContext<Opt_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public SeqoptelemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seqoptelem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeqoptelem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeqoptelem(this);
		}
	}

	[RuleVersion(0)]
	public SeqoptelemContext seqoptelem() {
		SeqoptelemContext _localctx = new SeqoptelemContext(Context, State);
		EnterRule(_localctx, 288, RULE_seqoptelem);
		int _la;
		try {
			State = 3319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3289;
				Match(AS);
				State = 3290;
				simpletypename();
				}
				break;
			case CACHE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3291;
				Match(CACHE);
				State = 3292;
				numericonly();
				}
				break;
			case CYCLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3293;
				Match(CYCLE);
				}
				break;
			case INCREMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3294;
				Match(INCREMENT);
				State = 3295;
				opt_by();
				State = 3296;
				numericonly();
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3298;
				Match(MAXVALUE);
				State = 3299;
				numericonly();
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3300;
				Match(MINVALUE);
				State = 3301;
				numericonly();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3302;
				Match(NO);
				State = 3303;
				_la = TokenStream.LA(1);
				if ( !(_la==CYCLE || _la==MAXVALUE || _la==MINVALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case OWNED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3304;
				Match(OWNED);
				State = 3305;
				Match(BY);
				State = 3306;
				any_name();
				}
				break;
			case SEQUENCE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3307;
				Match(SEQUENCE);
				State = 3308;
				Match(NAME_P);
				State = 3309;
				any_name();
				}
				break;
			case START:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3310;
				Match(START);
				State = 3311;
				opt_with();
				State = 3312;
				numericonly();
				}
				break;
			case RESTART:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3314;
				Match(RESTART);
				State = 3315;
				opt_with();
				State = 3317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS || _la==MINUS || _la==Integral || _la==Numeric) {
					{
					State = 3316;
					numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public Opt_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_by(this);
		}
	}

	[RuleVersion(0)]
	public Opt_byContext opt_by() {
		Opt_byContext _localctx = new Opt_byContext(Context, State);
		EnterRule(_localctx, 290, RULE_opt_by);
		try {
			State = 3323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3321;
				Match(BY);
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericonlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		public NumericonlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly(this);
		}
	}

	[RuleVersion(0)]
	public NumericonlyContext numericonly() {
		NumericonlyContext _localctx = new NumericonlyContext(Context, State);
		EnterRule(_localctx, 292, RULE_numericonly);
		try {
			State = 3331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3325;
				fconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3326;
				Match(PLUS);
				State = 3327;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3328;
				Match(MINUS);
				State = 3329;
				fconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3330;
				signediconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numericonly_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext[] numericonly() {
			return GetRuleContexts<NumericonlyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly(int i) {
			return GetRuleContext<NumericonlyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Numericonly_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericonly_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumericonly_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumericonly_list(this);
		}
	}

	[RuleVersion(0)]
	public Numericonly_listContext numericonly_list() {
		Numericonly_listContext _localctx = new Numericonly_listContext(Context, State);
		EnterRule(_localctx, 294, RULE_numericonly_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3333;
			numericonly();
			State = 3338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3334;
				Match(COMMA);
				State = 3335;
				numericonly();
				}
				}
				State = 3340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateplangstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_trustedContext opt_trusted() {
			return GetRuleContext<Opt_trustedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_inline_handlerContext opt_inline_handler() {
			return GetRuleContext<Opt_inline_handlerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_validatorContext opt_validator() {
			return GetRuleContext<Opt_validatorContext>(0);
		}
		public CreateplangstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createplangstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateplangstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateplangstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateplangstmtContext createplangstmt() {
		CreateplangstmtContext _localctx = new CreateplangstmtContext(Context, State);
		EnterRule(_localctx, 296, RULE_createplangstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3341;
			Match(CREATE);
			State = 3342;
			opt_or_replace();
			State = 3343;
			opt_trusted();
			State = 3344;
			opt_procedural();
			State = 3345;
			Match(LANGUAGE);
			State = 3346;
			name();
			State = 3352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HANDLER) {
				{
				State = 3347;
				Match(HANDLER);
				State = 3348;
				handler_name();
				State = 3349;
				opt_inline_handler();
				State = 3350;
				opt_validator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_trustedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		public Opt_trustedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_trusted; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_trusted(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_trusted(this);
		}
	}

	[RuleVersion(0)]
	public Opt_trustedContext opt_trusted() {
		Opt_trustedContext _localctx = new Opt_trustedContext(Context, State);
		EnterRule(_localctx, 298, RULE_opt_trusted);
		try {
			State = 3356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUSTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3354;
				Match(TRUSTED);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Handler_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Handler_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHandler_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHandler_name(this);
		}
	}

	[RuleVersion(0)]
	public Handler_nameContext handler_name() {
		Handler_nameContext _localctx = new Handler_nameContext(Context, State);
		EnterRule(_localctx, 300, RULE_handler_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3358;
			name();
			State = 3360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 3359;
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_inline_handlerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public Opt_inline_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_inline_handler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_inline_handler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_inline_handler(this);
		}
	}

	[RuleVersion(0)]
	public Opt_inline_handlerContext opt_inline_handler() {
		Opt_inline_handlerContext _localctx = new Opt_inline_handlerContext(Context, State);
		EnterRule(_localctx, 302, RULE_opt_inline_handler);
		try {
			State = 3365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INLINE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3362;
				Match(INLINE_P);
				State = 3363;
				handler_name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NO:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALIDATOR:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Validator_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Validator_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validator_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValidator_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValidator_clause(this);
		}
	}

	[RuleVersion(0)]
	public Validator_clauseContext validator_clause() {
		Validator_clauseContext _localctx = new Validator_clauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_validator_clause);
		try {
			State = 3371;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3367;
				Match(VALIDATOR);
				State = 3368;
				handler_name();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3369;
				Match(NO);
				State = 3370;
				Match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_validatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Validator_clauseContext validator_clause() {
			return GetRuleContext<Validator_clauseContext>(0);
		}
		public Opt_validatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_validator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_validator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_validator(this);
		}
	}

	[RuleVersion(0)]
	public Opt_validatorContext opt_validator() {
		Opt_validatorContext _localctx = new Opt_validatorContext(Context, State);
		EnterRule(_localctx, 306, RULE_opt_validator);
		try {
			State = 3375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3373;
				validator_clause();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_proceduralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Opt_proceduralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_procedural; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_procedural(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_procedural(this);
		}
	}

	[RuleVersion(0)]
	public Opt_proceduralContext opt_procedural() {
		Opt_proceduralContext _localctx = new Opt_proceduralContext(Context, State);
		EnterRule(_localctx, 308, RULE_opt_procedural);
		try {
			State = 3379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3377;
				Match(PROCEDURAL);
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceownerContext opttablespaceowner() {
			return GetRuleContext<OpttablespaceownerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		public CreatetablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetablespacestmtContext createtablespacestmt() {
		CreatetablespacestmtContext _localctx = new CreatetablespacestmtContext(Context, State);
		EnterRule(_localctx, 310, RULE_createtablespacestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3381;
			Match(CREATE);
			State = 3382;
			Match(TABLESPACE);
			State = 3383;
			name();
			State = 3384;
			opttablespaceowner();
			State = 3385;
			Match(LOCATION);
			State = 3386;
			sconst();
			State = 3387;
			opt_reloptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablespaceownerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public OpttablespaceownerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablespaceowner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablespaceowner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablespaceowner(this);
		}
	}

	[RuleVersion(0)]
	public OpttablespaceownerContext opttablespaceowner() {
		OpttablespaceownerContext _localctx = new OpttablespaceownerContext(Context, State);
		EnterRule(_localctx, 312, RULE_opttablespaceowner);
		try {
			State = 3392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OWNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3389;
				Match(OWNER);
				State = 3390;
				rolespec();
				}
				break;
			case LOCATION:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptablespacestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DroptablespacestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptablespacestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptablespacestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptablespacestmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptablespacestmtContext droptablespacestmt() {
		DroptablespacestmtContext _localctx = new DroptablespacestmtContext(Context, State);
		EnterRule(_localctx, 314, RULE_droptablespacestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3394;
			Match(DROP);
			State = 3395;
			Match(TABLESPACE);
			State = 3398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 3396;
				Match(IF_P);
				State = 3397;
				Match(EXISTS);
				}
				break;
			}
			State = 3400;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_listContext create_extension_opt_list() {
			return GetRuleContext<Create_extension_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateextensionstmtContext createextensionstmt() {
		CreateextensionstmtContext _localctx = new CreateextensionstmtContext(Context, State);
		EnterRule(_localctx, 316, RULE_createextensionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3402;
			Match(CREATE);
			State = 3403;
			Match(EXTENSION);
			State = 3407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
			case 1:
				{
				State = 3404;
				Match(IF_P);
				State = 3405;
				Match(NOT);
				State = 3406;
				Match(EXISTS);
				}
				break;
			}
			State = 3409;
			name();
			State = 3410;
			opt_with();
			State = 3411;
			create_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_itemContext[] create_extension_opt_item() {
			return GetRuleContexts<Create_extension_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_extension_opt_itemContext create_extension_opt_item(int i) {
			return GetRuleContext<Create_extension_opt_itemContext>(i);
		}
		public Create_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_listContext create_extension_opt_list() {
		Create_extension_opt_listContext _localctx = new Create_extension_opt_listContext(Context, State);
		EnterRule(_localctx, 318, RULE_create_extension_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FROM || _la==CASCADE || _la==SCHEMA || _la==VERSION_P) {
				{
				{
				State = 3413;
				create_extension_opt_item();
				}
				}
				State = 3418;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		public Create_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Create_extension_opt_itemContext create_extension_opt_item() {
		Create_extension_opt_itemContext _localctx = new Create_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 320, RULE_create_extension_opt_item);
		try {
			State = 3426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCHEMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3419;
				Match(SCHEMA);
				State = 3420;
				name();
				}
				break;
			case VERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3421;
				Match(VERSION_P);
				State = 3422;
				nonreservedword_or_sconst();
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3423;
				Match(FROM);
				State = 3424;
				nonreservedword_or_sconst();
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3425;
				Match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_listContext alter_extension_opt_list() {
			return GetRuleContext<Alter_extension_opt_listContext>(0);
		}
		public AlterextensionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensionstmtContext alterextensionstmt() {
		AlterextensionstmtContext _localctx = new AlterextensionstmtContext(Context, State);
		EnterRule(_localctx, 322, RULE_alterextensionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3428;
			Match(ALTER);
			State = 3429;
			Match(EXTENSION);
			State = 3430;
			name();
			State = 3431;
			Match(UPDATE);
			State = 3432;
			alter_extension_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_itemContext[] alter_extension_opt_item() {
			return GetRuleContexts<Alter_extension_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_extension_opt_itemContext alter_extension_opt_item(int i) {
			return GetRuleContext<Alter_extension_opt_itemContext>(i);
		}
		public Alter_extension_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_listContext alter_extension_opt_list() {
		Alter_extension_opt_listContext _localctx = new Alter_extension_opt_listContext(Context, State);
		EnterRule(_localctx, 324, RULE_alter_extension_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TO) {
				{
				{
				State = 3434;
				alter_extension_opt_item();
				}
				}
				State = 3439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_extension_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Alter_extension_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_extension_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_extension_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_extension_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Alter_extension_opt_itemContext alter_extension_opt_item() {
		Alter_extension_opt_itemContext _localctx = new Alter_extension_opt_itemContext(Context, State);
		EnterRule(_localctx, 326, RULE_alter_extension_opt_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3440;
			Match(TO);
			State = 3441;
			nonreservedword_or_sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterextensioncontentsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_dropContext add_drop() {
			return GetRuleContext<Add_dropContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterextensioncontentsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterextensioncontentsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterextensioncontentsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterextensioncontentsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterextensioncontentsstmtContext alterextensioncontentsstmt() {
		AlterextensioncontentsstmtContext _localctx = new AlterextensioncontentsstmtContext(Context, State);
		EnterRule(_localctx, 328, RULE_alterextensioncontentsstmt);
		try {
			State = 3547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3443;
				Match(ALTER);
				State = 3444;
				Match(EXTENSION);
				State = 3445;
				name();
				State = 3446;
				add_drop();
				State = 3447;
				object_type_name();
				State = 3448;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3450;
				Match(ALTER);
				State = 3451;
				Match(EXTENSION);
				State = 3452;
				name();
				State = 3453;
				add_drop();
				State = 3454;
				object_type_any_name();
				State = 3455;
				any_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3457;
				Match(ALTER);
				State = 3458;
				Match(EXTENSION);
				State = 3459;
				name();
				State = 3460;
				add_drop();
				State = 3461;
				Match(AGGREGATE);
				State = 3462;
				aggregate_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3464;
				Match(ALTER);
				State = 3465;
				Match(EXTENSION);
				State = 3466;
				name();
				State = 3467;
				add_drop();
				State = 3468;
				Match(CAST);
				State = 3469;
				Match(OPEN_PAREN);
				State = 3470;
				typename();
				State = 3471;
				Match(AS);
				State = 3472;
				typename();
				State = 3473;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3475;
				Match(ALTER);
				State = 3476;
				Match(EXTENSION);
				State = 3477;
				name();
				State = 3478;
				add_drop();
				State = 3479;
				Match(DOMAIN_P);
				State = 3480;
				typename();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3482;
				Match(ALTER);
				State = 3483;
				Match(EXTENSION);
				State = 3484;
				name();
				State = 3485;
				add_drop();
				State = 3486;
				Match(FUNCTION);
				State = 3487;
				function_with_argtypes();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3489;
				Match(ALTER);
				State = 3490;
				Match(EXTENSION);
				State = 3491;
				name();
				State = 3492;
				add_drop();
				State = 3493;
				Match(OPERATOR);
				State = 3494;
				operator_with_argtypes();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3496;
				Match(ALTER);
				State = 3497;
				Match(EXTENSION);
				State = 3498;
				name();
				State = 3499;
				add_drop();
				State = 3500;
				Match(OPERATOR);
				State = 3501;
				Match(CLASS);
				State = 3502;
				any_name();
				State = 3503;
				Match(USING);
				State = 3504;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3506;
				Match(ALTER);
				State = 3507;
				Match(EXTENSION);
				State = 3508;
				name();
				State = 3509;
				add_drop();
				State = 3510;
				Match(OPERATOR);
				State = 3511;
				Match(FAMILY);
				State = 3512;
				any_name();
				State = 3513;
				Match(USING);
				State = 3514;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3516;
				Match(ALTER);
				State = 3517;
				Match(EXTENSION);
				State = 3518;
				name();
				State = 3519;
				add_drop();
				State = 3520;
				Match(PROCEDURE);
				State = 3521;
				function_with_argtypes();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3523;
				Match(ALTER);
				State = 3524;
				Match(EXTENSION);
				State = 3525;
				name();
				State = 3526;
				add_drop();
				State = 3527;
				Match(ROUTINE);
				State = 3528;
				function_with_argtypes();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3530;
				Match(ALTER);
				State = 3531;
				Match(EXTENSION);
				State = 3532;
				name();
				State = 3533;
				add_drop();
				State = 3534;
				Match(TRANSFORM);
				State = 3535;
				Match(FOR);
				State = 3536;
				typename();
				State = 3537;
				Match(LANGUAGE);
				State = 3538;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3540;
				Match(ALTER);
				State = 3541;
				Match(EXTENSION);
				State = 3542;
				name();
				State = 3543;
				add_drop();
				State = 3544;
				Match(TYPE_P);
				State = 3545;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fdw_optionsContext opt_fdw_options() {
			return GetRuleContext<Opt_fdw_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public CreatefdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefdwstmtContext createfdwstmt() {
		CreatefdwstmtContext _localctx = new CreatefdwstmtContext(Context, State);
		EnterRule(_localctx, 330, RULE_createfdwstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549;
			Match(CREATE);
			State = 3550;
			Match(FOREIGN);
			State = 3551;
			Match(DATA_P);
			State = 3552;
			Match(WRAPPER);
			State = 3553;
			name();
			State = 3554;
			opt_fdw_options();
			State = 3555;
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		public Fdw_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_option(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionContext fdw_option() {
		Fdw_optionContext _localctx = new Fdw_optionContext(Context, State);
		EnterRule(_localctx, 332, RULE_fdw_option);
		try {
			State = 3565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3557;
				Match(HANDLER);
				State = 3558;
				handler_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3559;
				Match(NO);
				State = 3560;
				Match(HANDLER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3561;
				Match(VALIDATOR);
				State = 3562;
				handler_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3563;
				Match(NO);
				State = 3564;
				Match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fdw_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionContext[] fdw_option() {
			return GetRuleContexts<Fdw_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionContext fdw_option(int i) {
			return GetRuleContext<Fdw_optionContext>(i);
		}
		public Fdw_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fdw_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFdw_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFdw_options(this);
		}
	}

	[RuleVersion(0)]
	public Fdw_optionsContext fdw_options() {
		Fdw_optionsContext _localctx = new Fdw_optionsContext(Context, State);
		EnterRule(_localctx, 334, RULE_fdw_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3567;
				fdw_option();
				}
				}
				State = 3570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HANDLER || _la==NO || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fdw_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public Opt_fdw_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_fdw_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_fdw_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_fdw_options(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fdw_optionsContext opt_fdw_options() {
		Opt_fdw_optionsContext _localctx = new Opt_fdw_optionsContext(Context, State);
		EnterRule(_localctx, 336, RULE_opt_fdw_options);
		try {
			State = 3574;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HANDLER:
			case NO:
			case VALIDATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3572;
				fdw_options();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case OPTIONS:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterfdwstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fdw_optionsContext opt_fdw_options() {
			return GetRuleContext<Opt_fdw_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fdw_optionsContext fdw_options() {
			return GetRuleContext<Fdw_optionsContext>(0);
		}
		public AlterfdwstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfdwstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfdwstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfdwstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfdwstmtContext alterfdwstmt() {
		AlterfdwstmtContext _localctx = new AlterfdwstmtContext(Context, State);
		EnterRule(_localctx, 338, RULE_alterfdwstmt);
		try {
			State = 3591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3576;
				Match(ALTER);
				State = 3577;
				Match(FOREIGN);
				State = 3578;
				Match(DATA_P);
				State = 3579;
				Match(WRAPPER);
				State = 3580;
				name();
				State = 3581;
				opt_fdw_options();
				State = 3582;
				alter_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3584;
				Match(ALTER);
				State = 3585;
				Match(FOREIGN);
				State = 3586;
				Match(DATA_P);
				State = 3587;
				Match(WRAPPER);
				State = 3588;
				name();
				State = 3589;
				fdw_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_listContext generic_option_list() {
			return GetRuleContext<Generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreate_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreate_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Create_generic_optionsContext create_generic_options() {
		Create_generic_optionsContext _localctx = new Create_generic_optionsContext(Context, State);
		EnterRule(_localctx, 340, RULE_create_generic_options);
		try {
			State = 3599;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3593;
				Match(OPTIONS);
				State = 3594;
				Match(OPEN_PAREN);
				State = 3595;
				generic_option_list();
				State = 3596;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CHECK:
			case COLLATE:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INITIALLY:
			case INTO:
			case NOT:
			case NULL_P:
			case PRIMARY:
			case REFERENCES:
			case SELECT:
			case TABLE:
			case UNIQUE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case GENERATED:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext[] generic_option_elem() {
			return GetRuleContexts<Generic_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem(int i) {
			return GetRuleContext<Generic_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_listContext generic_option_list() {
		Generic_option_listContext _localctx = new Generic_option_listContext(Context, State);
		EnterRule(_localctx, 342, RULE_generic_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3601;
			generic_option_elem();
			State = 3606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3602;
				Match(COMMA);
				State = 3603;
				generic_option_elem();
				}
				}
				State = 3608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_listContext alter_generic_option_list() {
			return GetRuleContext<Alter_generic_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_generic_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_options(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_optionsContext alter_generic_options() {
		Alter_generic_optionsContext _localctx = new Alter_generic_optionsContext(Context, State);
		EnterRule(_localctx, 344, RULE_alter_generic_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3609;
			Match(OPTIONS);
			State = 3610;
			Match(OPEN_PAREN);
			State = 3611;
			alter_generic_option_list();
			State = 3612;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_elemContext[] alter_generic_option_elem() {
			return GetRuleContexts<Alter_generic_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_option_elemContext alter_generic_option_elem(int i) {
			return GetRuleContext<Alter_generic_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_generic_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_listContext alter_generic_option_list() {
		Alter_generic_option_listContext _localctx = new Alter_generic_option_listContext(Context, State);
		EnterRule(_localctx, 346, RULE_alter_generic_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3614;
			alter_generic_option_elem();
			State = 3619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3615;
				Match(COMMA);
				State = 3616;
				alter_generic_option_elem();
				}
				}
				State = 3621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_elemContext generic_option_elem() {
			return GetRuleContext<Generic_option_elemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		public Alter_generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlter_generic_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlter_generic_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Alter_generic_option_elemContext alter_generic_option_elem() {
		Alter_generic_option_elemContext _localctx = new Alter_generic_option_elemContext(Context, State);
		EnterRule(_localctx, 348, RULE_alter_generic_option_elem);
		try {
			State = 3629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3622;
				generic_option_elem();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3623;
				Match(SET);
				State = 3624;
				generic_option_elem();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3625;
				Match(ADD_P);
				State = 3626;
				generic_option_elem();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3627;
				Match(DROP);
				State = 3628;
				generic_option_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_nameContext generic_option_name() {
			return GetRuleContext<Generic_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_option_argContext generic_option_arg() {
			return GetRuleContext<Generic_option_argContext>(0);
		}
		public Generic_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_elemContext generic_option_elem() {
		Generic_option_elemContext _localctx = new Generic_option_elemContext(Context, State);
		EnterRule(_localctx, 350, RULE_generic_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3631;
			generic_option_name();
			State = 3632;
			generic_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Generic_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_nameContext generic_option_name() {
		Generic_option_nameContext _localctx = new Generic_option_nameContext(Context, State);
		EnterRule(_localctx, 352, RULE_generic_option_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3634;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Generic_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGeneric_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGeneric_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Generic_option_argContext generic_option_arg() {
		Generic_option_argContext _localctx = new Generic_option_argContext(Context, State);
		EnterRule(_localctx, 354, RULE_generic_option_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3636;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_typeContext opt_type() {
			return GetRuleContext<Opt_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_foreign_server_versionContext opt_foreign_server_version() {
			return GetRuleContext<Opt_foreign_server_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeignserverstmtContext createforeignserverstmt() {
		CreateforeignserverstmtContext _localctx = new CreateforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 356, RULE_createforeignserverstmt);
		try {
			State = 3663;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3638;
				Match(CREATE);
				State = 3639;
				Match(SERVER);
				State = 3640;
				name();
				State = 3641;
				opt_type();
				State = 3642;
				opt_foreign_server_version();
				State = 3643;
				Match(FOREIGN);
				State = 3644;
				Match(DATA_P);
				State = 3645;
				Match(WRAPPER);
				State = 3646;
				name();
				State = 3647;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3649;
				Match(CREATE);
				State = 3650;
				Match(SERVER);
				State = 3651;
				Match(IF_P);
				State = 3652;
				Match(NOT);
				State = 3653;
				Match(EXISTS);
				State = 3654;
				name();
				State = 3655;
				opt_type();
				State = 3656;
				opt_foreign_server_version();
				State = 3657;
				Match(FOREIGN);
				State = 3658;
				Match(DATA_P);
				State = 3659;
				Match(WRAPPER);
				State = 3660;
				name();
				State = 3661;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Opt_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_type(this);
		}
	}

	[RuleVersion(0)]
	public Opt_typeContext opt_type() {
		Opt_typeContext _localctx = new Opt_typeContext(Context, State);
		EnterRule(_localctx, 358, RULE_opt_type);
		try {
			State = 3668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3665;
				Match(TYPE_P);
				State = 3666;
				sconst();
				}
				break;
			case FOREIGN:
			case VERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_server_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Foreign_server_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_server_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeign_server_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeign_server_version(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_server_versionContext foreign_server_version() {
		Foreign_server_versionContext _localctx = new Foreign_server_versionContext(Context, State);
		EnterRule(_localctx, 360, RULE_foreign_server_version);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3670;
			Match(VERSION_P);
			State = 3673;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				{
				State = 3671;
				sconst();
				}
				break;
			case NULL_P:
				{
				State = 3672;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_foreign_server_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		public Opt_foreign_server_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_foreign_server_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_foreign_server_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_foreign_server_version(this);
		}
	}

	[RuleVersion(0)]
	public Opt_foreign_server_versionContext opt_foreign_server_version() {
		Opt_foreign_server_versionContext _localctx = new Opt_foreign_server_versionContext(Context, State);
		EnterRule(_localctx, 362, RULE_opt_foreign_server_version);
		try {
			State = 3677;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERSION_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3675;
				foreign_server_version();
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterforeignserverstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreign_server_versionContext foreign_server_version() {
			return GetRuleContext<Foreign_server_versionContext>(0);
		}
		public AlterforeignserverstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterforeignserverstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterforeignserverstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterforeignserverstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterforeignserverstmtContext alterforeignserverstmt() {
		AlterforeignserverstmtContext _localctx = new AlterforeignserverstmtContext(Context, State);
		EnterRule(_localctx, 364, RULE_alterforeignserverstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3679;
			Match(ALTER);
			State = 3680;
			Match(SERVER);
			State = 3681;
			name();
			State = 3687;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTIONS:
				{
				State = 3682;
				alter_generic_options();
				}
				break;
			case VERSION_P:
				{
				State = 3683;
				foreign_server_version();
				State = 3685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONS) {
					{
					State = 3684;
					alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateforeigntablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttableelementlistContext opttableelementlist() {
			return GetRuleContext<OpttableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptinheritContext optinherit() {
			return GetRuleContext<OptinheritContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttypedtableelementlistContext opttypedtableelementlist() {
			return GetRuleContext<OpttypedtableelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionboundspecContext partitionboundspec() {
			return GetRuleContext<PartitionboundspecContext>(0);
		}
		public CreateforeigntablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createforeigntablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateforeigntablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateforeigntablestmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateforeigntablestmtContext createforeigntablestmt() {
		CreateforeigntablestmtContext _localctx = new CreateforeigntablestmtContext(Context, State);
		EnterRule(_localctx, 366, RULE_createforeigntablestmt);
		try {
			State = 3745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3689;
				Match(CREATE);
				State = 3690;
				Match(FOREIGN);
				State = 3691;
				Match(TABLE);
				State = 3692;
				qualified_name();
				State = 3693;
				Match(OPEN_PAREN);
				State = 3694;
				opttableelementlist();
				State = 3695;
				Match(CLOSE_PAREN);
				State = 3696;
				optinherit();
				State = 3697;
				Match(SERVER);
				State = 3698;
				name();
				State = 3699;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3701;
				Match(CREATE);
				State = 3702;
				Match(FOREIGN);
				State = 3703;
				Match(TABLE);
				State = 3704;
				Match(IF_P);
				State = 3705;
				Match(NOT);
				State = 3706;
				Match(EXISTS);
				State = 3707;
				qualified_name();
				State = 3708;
				Match(OPEN_PAREN);
				State = 3709;
				opttableelementlist();
				State = 3710;
				Match(CLOSE_PAREN);
				State = 3711;
				optinherit();
				State = 3712;
				Match(SERVER);
				State = 3713;
				name();
				State = 3714;
				create_generic_options();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3716;
				Match(CREATE);
				State = 3717;
				Match(FOREIGN);
				State = 3718;
				Match(TABLE);
				State = 3719;
				qualified_name();
				State = 3720;
				Match(PARTITION);
				State = 3721;
				Match(OF);
				State = 3722;
				qualified_name();
				State = 3723;
				opttypedtableelementlist();
				State = 3724;
				partitionboundspec();
				State = 3725;
				Match(SERVER);
				State = 3726;
				name();
				State = 3727;
				create_generic_options();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3729;
				Match(CREATE);
				State = 3730;
				Match(FOREIGN);
				State = 3731;
				Match(TABLE);
				State = 3732;
				Match(IF_P);
				State = 3733;
				Match(NOT);
				State = 3734;
				Match(EXISTS);
				State = 3735;
				qualified_name();
				State = 3736;
				Match(PARTITION);
				State = 3737;
				Match(OF);
				State = 3738;
				qualified_name();
				State = 3739;
				opttypedtableelementlist();
				State = 3740;
				partitionboundspec();
				State = 3741;
				Match(SERVER);
				State = 3742;
				name();
				State = 3743;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportforeignschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualificationContext import_qualification() {
			return GetRuleContext<Import_qualificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		public ImportforeignschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importforeignschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImportforeignschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImportforeignschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public ImportforeignschemastmtContext importforeignschemastmt() {
		ImportforeignschemastmtContext _localctx = new ImportforeignschemastmtContext(Context, State);
		EnterRule(_localctx, 368, RULE_importforeignschemastmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3747;
			Match(IMPORT_P);
			State = 3748;
			Match(FOREIGN);
			State = 3749;
			Match(SCHEMA);
			State = 3750;
			name();
			State = 3751;
			import_qualification();
			State = 3752;
			Match(FROM);
			State = 3753;
			Match(SERVER);
			State = 3754;
			name();
			State = 3755;
			Match(INTO);
			State = 3756;
			name();
			State = 3757;
			create_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualification_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		public Import_qualification_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification_type(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualification_typeContext import_qualification_type() {
		Import_qualification_typeContext _localctx = new Import_qualification_typeContext(Context, State);
		EnterRule(_localctx, 370, RULE_import_qualification_type);
		try {
			State = 3762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3759;
				Match(LIMIT);
				State = 3760;
				Match(TO);
				}
				break;
			case EXCEPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3761;
				Match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_qualificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_qualification_typeContext import_qualification_type() {
			return GetRuleContext<Import_qualification_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Import_qualificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_qualification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImport_qualification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImport_qualification(this);
		}
	}

	[RuleVersion(0)]
	public Import_qualificationContext import_qualification() {
		Import_qualificationContext _localctx = new Import_qualificationContext(Context, State);
		EnterRule(_localctx, 372, RULE_import_qualification);
		try {
			State = 3770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCEPT:
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3764;
				import_qualification_type();
				State = 3765;
				Match(OPEN_PAREN);
				State = 3766;
				relation_expr_list();
				State = 3767;
				Match(CLOSE_PAREN);
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_generic_optionsContext create_generic_options() {
			return GetRuleContext<Create_generic_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public CreateusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateusermappingstmtContext createusermappingstmt() {
		CreateusermappingstmtContext _localctx = new CreateusermappingstmtContext(Context, State);
		EnterRule(_localctx, 374, RULE_createusermappingstmt);
		try {
			State = 3793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3772;
				Match(CREATE);
				State = 3773;
				Match(USER);
				State = 3774;
				Match(MAPPING);
				State = 3775;
				Match(FOR);
				State = 3776;
				auth_ident();
				State = 3777;
				Match(SERVER);
				State = 3778;
				name();
				State = 3779;
				create_generic_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3781;
				Match(CREATE);
				State = 3782;
				Match(USER);
				State = 3783;
				Match(MAPPING);
				State = 3784;
				Match(IF_P);
				State = 3785;
				Match(NOT);
				State = 3786;
				Match(EXISTS);
				State = 3787;
				Match(FOR);
				State = 3788;
				auth_ident();
				State = 3789;
				Match(SERVER);
				State = 3790;
				name();
				State = 3791;
				create_generic_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Auth_identContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public Auth_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_auth_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAuth_ident(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAuth_ident(this);
		}
	}

	[RuleVersion(0)]
	public Auth_identContext auth_ident() {
		Auth_identContext _localctx = new Auth_identContext(Context, State);
		EnterRule(_localctx, 376, RULE_auth_ident);
		try {
			State = 3797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3795;
				rolespec();
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3796;
				Match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropusermappingstmtContext dropusermappingstmt() {
		DropusermappingstmtContext _localctx = new DropusermappingstmtContext(Context, State);
		EnterRule(_localctx, 378, RULE_dropusermappingstmt);
		try {
			State = 3817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3799;
				Match(DROP);
				State = 3800;
				Match(USER);
				State = 3801;
				Match(MAPPING);
				State = 3802;
				Match(FOR);
				State = 3803;
				auth_ident();
				State = 3804;
				Match(SERVER);
				State = 3805;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3807;
				Match(DROP);
				State = 3808;
				Match(USER);
				State = 3809;
				Match(MAPPING);
				State = 3810;
				Match(IF_P);
				State = 3811;
				Match(EXISTS);
				State = 3812;
				Match(FOR);
				State = 3813;
				auth_ident();
				State = 3814;
				Match(SERVER);
				State = 3815;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterusermappingstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Auth_identContext auth_ident() {
			return GetRuleContext<Auth_identContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_generic_optionsContext alter_generic_options() {
			return GetRuleContext<Alter_generic_optionsContext>(0);
		}
		public AlterusermappingstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterusermappingstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterusermappingstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterusermappingstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterusermappingstmtContext alterusermappingstmt() {
		AlterusermappingstmtContext _localctx = new AlterusermappingstmtContext(Context, State);
		EnterRule(_localctx, 380, RULE_alterusermappingstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3819;
			Match(ALTER);
			State = 3820;
			Match(USER);
			State = 3821;
			Match(MAPPING);
			State = 3822;
			Match(FOR);
			State = 3823;
			auth_ident();
			State = 3824;
			Match(SERVER);
			State = 3825;
			name();
			State = 3826;
			alter_generic_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
			return GetRuleContext<RowsecuritydefaultpermissiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
			return GetRuleContext<RowsecuritydefaultforcmdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
			return GetRuleContext<RowsecuritydefaulttoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public CreatepolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepolicystmtContext createpolicystmt() {
		CreatepolicystmtContext _localctx = new CreatepolicystmtContext(Context, State);
		EnterRule(_localctx, 382, RULE_createpolicystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3828;
			Match(CREATE);
			State = 3829;
			Match(POLICY);
			State = 3830;
			name();
			State = 3831;
			Match(ON);
			State = 3832;
			qualified_name();
			State = 3833;
			rowsecuritydefaultpermissive();
			State = 3834;
			rowsecuritydefaultforcmd();
			State = 3835;
			rowsecuritydefaulttorole();
			State = 3836;
			rowsecurityoptionalexpr();
			State = 3837;
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpolicystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
			return GetRuleContext<RowsecurityoptionaltoroleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
			return GetRuleContext<RowsecurityoptionalexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
			return GetRuleContext<RowsecurityoptionalwithcheckContext>(0);
		}
		public AlterpolicystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpolicystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpolicystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpolicystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpolicystmtContext alterpolicystmt() {
		AlterpolicystmtContext _localctx = new AlterpolicystmtContext(Context, State);
		EnterRule(_localctx, 384, RULE_alterpolicystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3839;
			Match(ALTER);
			State = 3840;
			Match(POLICY);
			State = 3841;
			name();
			State = 3842;
			Match(ON);
			State = 3843;
			qualified_name();
			State = 3844;
			rowsecurityoptionaltorole();
			State = 3845;
			rowsecurityoptionalexpr();
			State = 3846;
			rowsecurityoptionalwithcheck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalexpr(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalexprContext rowsecurityoptionalexpr() {
		RowsecurityoptionalexprContext _localctx = new RowsecurityoptionalexprContext(Context, State);
		EnterRule(_localctx, 386, RULE_rowsecurityoptionalexpr);
		try {
			State = 3854;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3848;
				Match(USING);
				State = 3849;
				Match(OPEN_PAREN);
				State = 3850;
				a_expr();
				State = 3851;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionalwithcheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RowsecurityoptionalwithcheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionalwithcheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionalwithcheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionalwithcheck(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionalwithcheckContext rowsecurityoptionalwithcheck() {
		RowsecurityoptionalwithcheckContext _localctx = new RowsecurityoptionalwithcheckContext(Context, State);
		EnterRule(_localctx, 388, RULE_rowsecurityoptionalwithcheck);
		try {
			State = 3863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3856;
				Match(WITH);
				State = 3857;
				Match(CHECK);
				State = 3858;
				Match(OPEN_PAREN);
				State = 3859;
				a_expr();
				State = 3860;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaulttoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecuritydefaulttoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaulttorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaulttorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaulttorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaulttoroleContext rowsecuritydefaulttorole() {
		RowsecuritydefaulttoroleContext _localctx = new RowsecuritydefaulttoroleContext(Context, State);
		EnterRule(_localctx, 390, RULE_rowsecuritydefaulttorole);
		try {
			State = 3868;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3865;
				Match(TO);
				State = 3866;
				role_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecurityoptionaltoroleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		public RowsecurityoptionaltoroleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecurityoptionaltorole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecurityoptionaltorole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecurityoptionaltorole(this);
		}
	}

	[RuleVersion(0)]
	public RowsecurityoptionaltoroleContext rowsecurityoptionaltorole() {
		RowsecurityoptionaltoroleContext _localctx = new RowsecurityoptionaltoroleContext(Context, State);
		EnterRule(_localctx, 392, RULE_rowsecurityoptionaltorole);
		try {
			State = 3873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3870;
				Match(TO);
				State = 3871;
				role_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultpermissiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public RowsecuritydefaultpermissiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultpermissive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultpermissive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultpermissive(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultpermissiveContext rowsecuritydefaultpermissive() {
		RowsecuritydefaultpermissiveContext _localctx = new RowsecuritydefaultpermissiveContext(Context, State);
		EnterRule(_localctx, 394, RULE_rowsecuritydefaultpermissive);
		try {
			State = 3878;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3875;
				Match(AS);
				State = 3876;
				identifier();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowsecuritydefaultforcmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Row_security_cmdContext row_security_cmd() {
			return GetRuleContext<Row_security_cmdContext>(0);
		}
		public RowsecuritydefaultforcmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsecuritydefaultforcmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsecuritydefaultforcmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsecuritydefaultforcmd(this);
		}
	}

	[RuleVersion(0)]
	public RowsecuritydefaultforcmdContext rowsecuritydefaultforcmd() {
		RowsecuritydefaultforcmdContext _localctx = new RowsecuritydefaultforcmdContext(Context, State);
		EnterRule(_localctx, 396, RULE_rowsecuritydefaultforcmd);
		try {
			State = 3883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3880;
				Match(FOR);
				State = 3881;
				row_security_cmd();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case TO:
			case USING:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_security_cmdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		public Row_security_cmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_security_cmd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_security_cmd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_security_cmd(this);
		}
	}

	[RuleVersion(0)]
	public Row_security_cmdContext row_security_cmd() {
		Row_security_cmdContext _localctx = new Row_security_cmdContext(Context, State);
		EnterRule(_localctx, 398, RULE_row_security_cmd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3885;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateamstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Am_typeContext am_type() {
			return GetRuleContext<Am_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Handler_nameContext handler_name() {
			return GetRuleContext<Handler_nameContext>(0);
		}
		public CreateamstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createamstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateamstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateamstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateamstmtContext createamstmt() {
		CreateamstmtContext _localctx = new CreateamstmtContext(Context, State);
		EnterRule(_localctx, 400, RULE_createamstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3887;
			Match(CREATE);
			State = 3888;
			Match(ACCESS);
			State = 3889;
			Match(METHOD);
			State = 3890;
			name();
			State = 3891;
			Match(TYPE_P);
			State = 3892;
			am_type();
			State = 3893;
			Match(HANDLER);
			State = 3894;
			handler_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Am_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Am_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_am_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAm_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAm_type(this);
		}
	}

	[RuleVersion(0)]
	public Am_typeContext am_type() {
		Am_typeContext _localctx = new Am_typeContext(Context, State);
		EnterRule(_localctx, 402, RULE_am_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3896;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggeractiontimeContext triggeractiontime() {
			return GetRuleContext<TriggeractiontimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggereventsContext triggerevents() {
			return GetRuleContext<TriggereventsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerreferencingContext triggerreferencing() {
			return GetRuleContext<TriggerreferencingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforspecContext triggerforspec() {
			return GetRuleContext<TriggerforspecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerwhenContext triggerwhen() {
			return GetRuleContext<TriggerwhenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargsContext triggerfuncargs() {
			return GetRuleContext<TriggerfuncargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptconstrfromtableContext optconstrfromtable() {
			return GetRuleContext<OptconstrfromtableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		public CreatetrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetrigstmtContext createtrigstmt() {
		CreatetrigstmtContext _localctx = new CreatetrigstmtContext(Context, State);
		EnterRule(_localctx, 404, RULE_createtrigstmt);
		try {
			State = 3937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3898;
				Match(CREATE);
				State = 3899;
				opt_or_replace();
				State = 3900;
				Match(TRIGGER);
				State = 3901;
				name();
				State = 3902;
				triggeractiontime();
				State = 3903;
				triggerevents();
				State = 3904;
				Match(ON);
				State = 3905;
				qualified_name();
				State = 3906;
				triggerreferencing();
				State = 3907;
				triggerforspec();
				State = 3908;
				triggerwhen();
				State = 3909;
				Match(EXECUTE);
				State = 3910;
				function_or_procedure();
				State = 3911;
				func_name();
				State = 3912;
				Match(OPEN_PAREN);
				State = 3913;
				triggerfuncargs();
				State = 3914;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3916;
				Match(CREATE);
				State = 3917;
				Match(CONSTRAINT);
				State = 3918;
				Match(TRIGGER);
				State = 3919;
				name();
				State = 3920;
				Match(AFTER);
				State = 3921;
				triggerevents();
				State = 3922;
				Match(ON);
				State = 3923;
				qualified_name();
				State = 3924;
				optconstrfromtable();
				State = 3925;
				constraintattributespec();
				State = 3926;
				Match(FOR);
				State = 3927;
				Match(EACH);
				State = 3928;
				Match(ROW);
				State = 3929;
				triggerwhen();
				State = 3930;
				Match(EXECUTE);
				State = 3931;
				function_or_procedure();
				State = 3932;
				func_name();
				State = 3933;
				Match(OPEN_PAREN);
				State = 3934;
				triggerfuncargs();
				State = 3935;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggeractiontimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		public TriggeractiontimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeractiontime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeractiontime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeractiontime(this);
		}
	}

	[RuleVersion(0)]
	public TriggeractiontimeContext triggeractiontime() {
		TriggeractiontimeContext _localctx = new TriggeractiontimeContext(Context, State);
		EnterRule(_localctx, 406, RULE_triggeractiontime);
		try {
			State = 3943;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3939;
				Match(BEFORE);
				}
				break;
			case AFTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3940;
				Match(AFTER);
				}
				break;
			case INSTEAD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3941;
				Match(INSTEAD);
				State = 3942;
				Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggereventsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggeroneeventContext[] triggeroneevent() {
			return GetRuleContexts<TriggeroneeventContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggeroneeventContext triggeroneevent(int i) {
			return GetRuleContext<TriggeroneeventContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public TriggereventsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerevents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerevents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerevents(this);
		}
	}

	[RuleVersion(0)]
	public TriggereventsContext triggerevents() {
		TriggereventsContext _localctx = new TriggereventsContext(Context, State);
		EnterRule(_localctx, 408, RULE_triggerevents);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3945;
			triggeroneevent();
			State = 3950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 3946;
				Match(OR);
				State = 3947;
				triggeroneevent();
				}
				}
				State = 3952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggeroneeventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		public TriggeroneeventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggeroneevent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggeroneevent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggeroneevent(this);
		}
	}

	[RuleVersion(0)]
	public TriggeroneeventContext triggeroneevent() {
		TriggeroneeventContext _localctx = new TriggeroneeventContext(Context, State);
		EnterRule(_localctx, 410, RULE_triggeroneevent);
		try {
			State = 3960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3953;
				Match(INSERT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3954;
				Match(DELETE_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3955;
				Match(UPDATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3956;
				Match(UPDATE);
				State = 3957;
				Match(OF);
				State = 3958;
				columnlist();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3959;
				Match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerreferencingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionsContext triggertransitions() {
			return GetRuleContext<TriggertransitionsContext>(0);
		}
		public TriggerreferencingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerreferencing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerreferencing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerreferencing(this);
		}
	}

	[RuleVersion(0)]
	public TriggerreferencingContext triggerreferencing() {
		TriggerreferencingContext _localctx = new TriggerreferencingContext(Context, State);
		EnterRule(_localctx, 412, RULE_triggerreferencing);
		try {
			State = 3965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REFERENCING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3962;
				Match(REFERENCING);
				State = 3963;
				triggertransitions();
				}
				break;
			case FOR:
			case WHEN:
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertransitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionContext[] triggertransition() {
			return GetRuleContexts<TriggertransitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggertransitionContext triggertransition(int i) {
			return GetRuleContext<TriggertransitionContext>(i);
		}
		public TriggertransitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransitions(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionsContext triggertransitions() {
		TriggertransitionsContext _localctx = new TriggertransitionsContext(Context, State);
		EnterRule(_localctx, 414, RULE_triggertransitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3967;
				triggertransition();
				}
				}
				State = 3970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NEW || _la==OLD );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggertransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransitionoldornewContext transitionoldornew() {
			return GetRuleContext<TransitionoldornewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrowortableContext transitionrowortable() {
			return GetRuleContext<TransitionrowortableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionrelnameContext transitionrelname() {
			return GetRuleContext<TransitionrelnameContext>(0);
		}
		public TriggertransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggertransition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggertransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggertransition(this);
		}
	}

	[RuleVersion(0)]
	public TriggertransitionContext triggertransition() {
		TriggertransitionContext _localctx = new TriggertransitionContext(Context, State);
		EnterRule(_localctx, 416, RULE_triggertransition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3972;
			transitionoldornew();
			State = 3973;
			transitionrowortable();
			State = 3974;
			opt_as();
			State = 3975;
			transitionrelname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionoldornewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		public TransitionoldornewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionoldornew; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionoldornew(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionoldornew(this);
		}
	}

	[RuleVersion(0)]
	public TransitionoldornewContext transitionoldornew() {
		TransitionoldornewContext _localctx = new TransitionoldornewContext(Context, State);
		EnterRule(_localctx, 418, RULE_transitionoldornew);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3977;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrowortableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		public TransitionrowortableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrowortable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrowortable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrowortable(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrowortableContext transitionrowortable() {
		TransitionrowortableContext _localctx = new TransitionrowortableContext(Context, State);
		EnterRule(_localctx, 420, RULE_transitionrowortable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3979;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionrelnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public TransitionrelnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionrelname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransitionrelname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransitionrelname(this);
		}
	}

	[RuleVersion(0)]
	public TransitionrelnameContext transitionrelname() {
		TransitionrelnameContext _localctx = new TransitionrelnameContext(Context, State);
		EnterRule(_localctx, 422, RULE_transitionrelname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3981;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforspecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerforopteachContext triggerforopteach() {
			return GetRuleContext<TriggerforopteachContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfortypeContext triggerfortype() {
			return GetRuleContext<TriggerfortypeContext>(0);
		}
		public TriggerforspecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforspec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforspec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforspec(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforspecContext triggerforspec() {
		TriggerforspecContext _localctx = new TriggerforspecContext(Context, State);
		EnterRule(_localctx, 424, RULE_triggerforspec);
		try {
			State = 3988;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3983;
				Match(FOR);
				State = 3984;
				triggerforopteach();
				State = 3985;
				triggerfortype();
				}
				break;
			case WHEN:
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerforopteachContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		public TriggerforopteachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerforopteach; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerforopteach(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerforopteach(this);
		}
	}

	[RuleVersion(0)]
	public TriggerforopteachContext triggerforopteach() {
		TriggerforopteachContext _localctx = new TriggerforopteachContext(Context, State);
		EnterRule(_localctx, 426, RULE_triggerforopteach);
		try {
			State = 3992;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3990;
				Match(EACH);
				}
				break;
			case STATEMENT:
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfortypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		public TriggerfortypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfortype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfortype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfortype(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfortypeContext triggerfortype() {
		TriggerfortypeContext _localctx = new TriggerfortypeContext(Context, State);
		EnterRule(_localctx, 428, RULE_triggerfortype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3994;
			_la = TokenStream.LA(1);
			if ( !(_la==STATEMENT || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerwhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TriggerwhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerwhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerwhen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerwhen(this);
		}
	}

	[RuleVersion(0)]
	public TriggerwhenContext triggerwhen() {
		TriggerwhenContext _localctx = new TriggerwhenContext(Context, State);
		EnterRule(_localctx, 430, RULE_triggerwhen);
		try {
			State = 4002;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3996;
				Match(WHEN);
				State = 3997;
				Match(OPEN_PAREN);
				State = 3998;
				a_expr();
				State = 3999;
				Match(CLOSE_PAREN);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_or_procedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		public Function_or_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_or_procedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_or_procedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_or_procedure(this);
		}
	}

	[RuleVersion(0)]
	public Function_or_procedureContext function_or_procedure() {
		Function_or_procedureContext _localctx = new Function_or_procedureContext(Context, State);
		EnterRule(_localctx, 432, RULE_function_or_procedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4004;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfuncargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargContext[] triggerfuncarg() {
			return GetRuleContexts<TriggerfuncargContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerfuncargContext triggerfuncarg(int i) {
			return GetRuleContext<TriggerfuncargContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TriggerfuncargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncargs(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargsContext triggerfuncargs() {
		TriggerfuncargsContext _localctx = new TriggerfuncargsContext(Context, State);
		EnterRule(_localctx, 434, RULE_triggerfuncargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				State = 4006;
				triggerfuncarg();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4010;
				Match(COMMA);
				State = 4011;
				triggerfuncarg();
				}
				}
				State = 4016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerfuncargContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public TriggerfuncargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerfuncarg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTriggerfuncarg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTriggerfuncarg(this);
		}
	}

	[RuleVersion(0)]
	public TriggerfuncargContext triggerfuncarg() {
		TriggerfuncargContext _localctx = new TriggerfuncargContext(Context, State);
		EnterRule(_localctx, 436, RULE_triggerfuncarg);
		try {
			State = 4021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4017;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4018;
				fconst();
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4019;
				sconst();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case IN_P:
			case INITIALLY:
			case INTERSECT:
			case LATERAL_P:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4020;
				collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptconstrfromtableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		public OptconstrfromtableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optconstrfromtable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOptconstrfromtable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOptconstrfromtable(this);
		}
	}

	[RuleVersion(0)]
	public OptconstrfromtableContext optconstrfromtable() {
		OptconstrfromtableContext _localctx = new OptconstrfromtableContext(Context, State);
		EnterRule(_localctx, 438, RULE_optconstrfromtable);
		try {
			State = 4026;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4023;
				Match(FROM);
				State = 4024;
				qualified_name();
				}
				break;
			case DEFERRABLE:
			case FOR:
			case INITIALLY:
			case NOT:
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattributespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributeElemContext[] constraintattributeElem() {
			return GetRuleContexts<ConstraintattributeElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributeElemContext constraintattributeElem(int i) {
			return GetRuleContext<ConstraintattributeElemContext>(i);
		}
		public ConstraintattributespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributespec(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributespecContext constraintattributespec() {
		ConstraintattributespecContext _localctx = new ConstraintattributespecContext(Context, State);
		EnterRule(_localctx, 440, RULE_constraintattributespec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 8421377L) != 0 || _la==NO) {
				{
				{
				State = 4028;
				constraintattributeElem();
				}
				}
				State = 4033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintattributeElemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		public ConstraintattributeElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintattributeElem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstraintattributeElem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstraintattributeElem(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintattributeElemContext constraintattributeElem() {
		ConstraintattributeElemContext _localctx = new ConstraintattributeElemContext(Context, State);
		EnterRule(_localctx, 442, RULE_constraintattributeElem);
		try {
			State = 4045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4034;
				Match(NOT);
				State = 4035;
				Match(DEFERRABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4036;
				Match(DEFERRABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4037;
				Match(INITIALLY);
				State = 4038;
				Match(IMMEDIATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4039;
				Match(INITIALLY);
				State = 4040;
				Match(DEFERRED);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4041;
				Match(NOT);
				State = 4042;
				Match(VALID);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4043;
				Match(NO);
				State = 4044;
				Match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateeventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_or_procedureContext function_or_procedure() {
			return GetRuleContext<Function_or_procedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_listContext event_trigger_when_list() {
			return GetRuleContext<Event_trigger_when_listContext>(0);
		}
		public CreateeventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createeventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateeventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateeventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateeventtrigstmtContext createeventtrigstmt() {
		CreateeventtrigstmtContext _localctx = new CreateeventtrigstmtContext(Context, State);
		EnterRule(_localctx, 444, RULE_createeventtrigstmt);
		try {
			State = 4073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4047;
				Match(CREATE);
				State = 4048;
				Match(EVENT);
				State = 4049;
				Match(TRIGGER);
				State = 4050;
				name();
				State = 4051;
				Match(ON);
				State = 4052;
				collabel();
				State = 4053;
				Match(EXECUTE);
				State = 4054;
				function_or_procedure();
				State = 4055;
				func_name();
				State = 4056;
				Match(OPEN_PAREN);
				State = 4057;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4059;
				Match(CREATE);
				State = 4060;
				Match(EVENT);
				State = 4061;
				Match(TRIGGER);
				State = 4062;
				name();
				State = 4063;
				Match(ON);
				State = 4064;
				collabel();
				State = 4065;
				Match(WHEN);
				State = 4066;
				event_trigger_when_list();
				State = 4067;
				Match(EXECUTE);
				State = 4068;
				function_or_procedure();
				State = 4069;
				func_name();
				State = 4070;
				Match(OPEN_PAREN);
				State = 4071;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_when_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_itemContext[] event_trigger_when_item() {
			return GetRuleContexts<Event_trigger_when_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_when_itemContext event_trigger_when_item(int i) {
			return GetRuleContext<Event_trigger_when_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PostgreSQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PostgreSQLParser.AND, i);
		}
		public Event_trigger_when_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_listContext event_trigger_when_list() {
		Event_trigger_when_listContext _localctx = new Event_trigger_when_listContext(Context, State);
		EnterRule(_localctx, 446, RULE_event_trigger_when_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4075;
			event_trigger_when_item();
			State = 4080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 4076;
				Match(AND);
				State = 4077;
				event_trigger_when_item();
				}
				}
				State = 4082;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_when_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Event_trigger_value_listContext event_trigger_value_list() {
			return GetRuleContext<Event_trigger_value_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Event_trigger_when_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_when_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_when_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_when_item(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_when_itemContext event_trigger_when_item() {
		Event_trigger_when_itemContext _localctx = new Event_trigger_when_itemContext(Context, State);
		EnterRule(_localctx, 448, RULE_event_trigger_when_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4083;
			colid();
			State = 4084;
			Match(IN_P);
			State = 4085;
			Match(OPEN_PAREN);
			State = 4086;
			event_trigger_value_list();
			State = 4087;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_trigger_value_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Event_trigger_value_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_trigger_value_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent_trigger_value_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent_trigger_value_list(this);
		}
	}

	[RuleVersion(0)]
	public Event_trigger_value_listContext event_trigger_value_list() {
		Event_trigger_value_listContext _localctx = new Event_trigger_value_listContext(Context, State);
		EnterRule(_localctx, 450, RULE_event_trigger_value_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4089;
			sconst();
			State = 4094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4090;
				Match(COMMA);
				State = 4091;
				sconst();
				}
				}
				State = 4096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltereventtrigstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enable_triggerContext enable_trigger() {
			return GetRuleContext<Enable_triggerContext>(0);
		}
		public AltereventtrigstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altereventtrigstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltereventtrigstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltereventtrigstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltereventtrigstmtContext altereventtrigstmt() {
		AltereventtrigstmtContext _localctx = new AltereventtrigstmtContext(Context, State);
		EnterRule(_localctx, 452, RULE_altereventtrigstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4097;
			Match(ALTER);
			State = 4098;
			Match(EVENT);
			State = 4099;
			Match(TRIGGER);
			State = 4100;
			name();
			State = 4101;
			enable_trigger();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public Enable_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnable_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnable_trigger(this);
		}
	}

	[RuleVersion(0)]
	public Enable_triggerContext enable_trigger() {
		Enable_triggerContext _localctx = new Enable_triggerContext(Context, State);
		EnterRule(_localctx, 454, RULE_enable_trigger);
		try {
			State = 4109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4103;
				Match(ENABLE_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4104;
				Match(ENABLE_P);
				State = 4105;
				Match(REPLICA);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4106;
				Match(ENABLE_P);
				State = 4107;
				Match(ALWAYS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4108;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateassertionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintattributespecContext constraintattributespec() {
			return GetRuleContext<ConstraintattributespecContext>(0);
		}
		public CreateassertionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createassertionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateassertionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateassertionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateassertionstmtContext createassertionstmt() {
		CreateassertionstmtContext _localctx = new CreateassertionstmtContext(Context, State);
		EnterRule(_localctx, 456, RULE_createassertionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4111;
			Match(CREATE);
			State = 4112;
			Match(ASSERTION);
			State = 4113;
			any_name();
			State = 4114;
			Match(CHECK);
			State = 4115;
			Match(OPEN_PAREN);
			State = 4116;
			a_expr();
			State = 4117;
			Match(CLOSE_PAREN);
			State = 4118;
			constraintattributespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_definitionContext old_aggr_definition() {
			return GetRuleContext<Old_aggr_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttablefuncelementlistContext opttablefuncelementlist() {
			return GetRuleContext<OpttablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_enum_val_listContext opt_enum_val_list() {
			return GetRuleContext<Opt_enum_val_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		public DefinestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinestmt(this);
		}
	}

	[RuleVersion(0)]
	public DefinestmtContext definestmt() {
		DefinestmtContext _localctx = new DefinestmtContext(Context, State);
		EnterRule(_localctx, 458, RULE_definestmt);
		try {
			State = 4226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4120;
				Match(CREATE);
				State = 4121;
				opt_or_replace();
				State = 4122;
				Match(AGGREGATE);
				State = 4123;
				func_name();
				State = 4124;
				aggr_args();
				State = 4125;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4127;
				Match(CREATE);
				State = 4128;
				opt_or_replace();
				State = 4129;
				Match(AGGREGATE);
				State = 4130;
				func_name();
				State = 4131;
				old_aggr_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4133;
				Match(CREATE);
				State = 4134;
				Match(OPERATOR);
				State = 4135;
				any_operator();
				State = 4136;
				definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4138;
				Match(CREATE);
				State = 4139;
				Match(TYPE_P);
				State = 4140;
				any_name();
				State = 4141;
				definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4143;
				Match(CREATE);
				State = 4144;
				Match(TYPE_P);
				State = 4145;
				any_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4146;
				Match(CREATE);
				State = 4147;
				Match(TYPE_P);
				State = 4148;
				any_name();
				State = 4149;
				Match(AS);
				State = 4150;
				Match(OPEN_PAREN);
				State = 4151;
				opttablefuncelementlist();
				State = 4152;
				Match(CLOSE_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4154;
				Match(CREATE);
				State = 4155;
				Match(TYPE_P);
				State = 4156;
				any_name();
				State = 4157;
				Match(AS);
				State = 4158;
				Match(ENUM_P);
				State = 4159;
				Match(OPEN_PAREN);
				State = 4160;
				opt_enum_val_list();
				State = 4161;
				Match(CLOSE_PAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4163;
				Match(CREATE);
				State = 4164;
				Match(TYPE_P);
				State = 4165;
				any_name();
				State = 4166;
				Match(AS);
				State = 4167;
				Match(RANGE);
				State = 4168;
				definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4170;
				Match(CREATE);
				State = 4171;
				Match(TEXT_P);
				State = 4172;
				Match(SEARCH);
				State = 4173;
				Match(PARSER);
				State = 4174;
				any_name();
				State = 4175;
				definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4177;
				Match(CREATE);
				State = 4178;
				Match(TEXT_P);
				State = 4179;
				Match(SEARCH);
				State = 4180;
				Match(DICTIONARY);
				State = 4181;
				any_name();
				State = 4182;
				definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4184;
				Match(CREATE);
				State = 4185;
				Match(TEXT_P);
				State = 4186;
				Match(SEARCH);
				State = 4187;
				Match(TEMPLATE);
				State = 4188;
				any_name();
				State = 4189;
				definition();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4191;
				Match(CREATE);
				State = 4192;
				Match(TEXT_P);
				State = 4193;
				Match(SEARCH);
				State = 4194;
				Match(CONFIGURATION);
				State = 4195;
				any_name();
				State = 4196;
				definition();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4198;
				Match(CREATE);
				State = 4199;
				Match(COLLATION);
				State = 4200;
				any_name();
				State = 4201;
				definition();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4203;
				Match(CREATE);
				State = 4204;
				Match(COLLATION);
				State = 4205;
				Match(IF_P);
				State = 4206;
				Match(NOT);
				State = 4207;
				Match(EXISTS);
				State = 4208;
				any_name();
				State = 4209;
				definition();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4211;
				Match(CREATE);
				State = 4212;
				Match(COLLATION);
				State = 4213;
				any_name();
				State = 4214;
				Match(FROM);
				State = 4215;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4217;
				Match(CREATE);
				State = 4218;
				Match(COLLATION);
				State = 4219;
				Match(IF_P);
				State = 4220;
				Match(NOT);
				State = 4221;
				Match(EXISTS);
				State = 4222;
				any_name();
				State = 4223;
				Match(FROM);
				State = 4224;
				any_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_listContext def_list() {
			return GetRuleContext<Def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 460, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4228;
			Match(OPEN_PAREN);
			State = 4229;
			def_list();
			State = 4230;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Def_elemContext[] def_elem() {
			return GetRuleContexts<Def_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_elemContext def_elem(int i) {
			return GetRuleContext<Def_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_list(this);
		}
	}

	[RuleVersion(0)]
	public Def_listContext def_list() {
		Def_listContext _localctx = new Def_listContext(Context, State);
		EnterRule(_localctx, 462, RULE_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4232;
			def_elem();
			State = 4237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4233;
				Match(COMMA);
				State = 4234;
				def_elem();
				}
				}
				State = 4239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_elem(this);
		}
	}

	[RuleVersion(0)]
	public Def_elemContext def_elem() {
		Def_elemContext _localctx = new Def_elemContext(Context, State);
		EnterRule(_localctx, 464, RULE_def_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4240;
			collabel();
			State = 4243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 4241;
				Match(EQUAL);
				State = 4242;
				def_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDef_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDef_arg(this);
		}
	}

	[RuleVersion(0)]
	public Def_argContext def_arg() {
		Def_argContext _localctx = new Def_argContext(Context, State);
		EnterRule(_localctx, 466, RULE_def_arg);
		try {
			State = 4251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4245;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4246;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4247;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4248;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4249;
				sconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4250;
				Match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_listContext old_aggr_list() {
			return GetRuleContext<Old_aggr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Old_aggr_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_definition(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_definitionContext old_aggr_definition() {
		Old_aggr_definitionContext _localctx = new Old_aggr_definitionContext(Context, State);
		EnterRule(_localctx, 468, RULE_old_aggr_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4253;
			Match(OPEN_PAREN);
			State = 4254;
			old_aggr_list();
			State = 4255;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_elemContext[] old_aggr_elem() {
			return GetRuleContexts<Old_aggr_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Old_aggr_elemContext old_aggr_elem(int i) {
			return GetRuleContext<Old_aggr_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Old_aggr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_list(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_listContext old_aggr_list() {
		Old_aggr_listContext _localctx = new Old_aggr_listContext(Context, State);
		EnterRule(_localctx, 470, RULE_old_aggr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4257;
			old_aggr_elem();
			State = 4262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4258;
				Match(COMMA);
				State = 4259;
				old_aggr_elem();
				}
				}
				State = 4264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Old_aggr_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_argContext def_arg() {
			return GetRuleContext<Def_argContext>(0);
		}
		public Old_aggr_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_old_aggr_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOld_aggr_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOld_aggr_elem(this);
		}
	}

	[RuleVersion(0)]
	public Old_aggr_elemContext old_aggr_elem() {
		Old_aggr_elemContext _localctx = new Old_aggr_elemContext(Context, State);
		EnterRule(_localctx, 472, RULE_old_aggr_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4265;
			identifier();
			State = 4266;
			Match(EQUAL);
			State = 4267;
			def_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_enum_val_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_val_listContext enum_val_list() {
			return GetRuleContext<Enum_val_listContext>(0);
		}
		public Opt_enum_val_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_enum_val_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_enum_val_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_enum_val_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_enum_val_listContext opt_enum_val_list() {
		Opt_enum_val_listContext _localctx = new Opt_enum_val_listContext(Context, State);
		EnterRule(_localctx, 474, RULE_opt_enum_val_list);
		try {
			State = 4271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4269;
				enum_val_list();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_val_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Enum_val_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_val_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEnum_val_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEnum_val_list(this);
		}
	}

	[RuleVersion(0)]
	public Enum_val_listContext enum_val_list() {
		Enum_val_listContext _localctx = new Enum_val_listContext(Context, State);
		EnterRule(_localctx, 476, RULE_enum_val_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4273;
			sconst();
			State = 4278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4274;
				Match(COMMA);
				State = 4275;
				sconst();
				}
				}
				State = 4280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterenumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_not_existsContext opt_if_not_exists() {
			return GetRuleContext<Opt_if_not_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public AlterenumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterenumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterenumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterenumstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterenumstmtContext alterenumstmt() {
		AlterenumstmtContext _localctx = new AlterenumstmtContext(Context, State);
		EnterRule(_localctx, 478, RULE_alterenumstmt);
		try {
			State = 4318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4281;
				Match(ALTER);
				State = 4282;
				Match(TYPE_P);
				State = 4283;
				any_name();
				State = 4284;
				Match(ADD_P);
				State = 4285;
				Match(VALUE_P);
				State = 4286;
				opt_if_not_exists();
				State = 4287;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4289;
				Match(ALTER);
				State = 4290;
				Match(TYPE_P);
				State = 4291;
				any_name();
				State = 4292;
				Match(ADD_P);
				State = 4293;
				Match(VALUE_P);
				State = 4294;
				opt_if_not_exists();
				State = 4295;
				sconst();
				State = 4296;
				Match(BEFORE);
				State = 4297;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4299;
				Match(ALTER);
				State = 4300;
				Match(TYPE_P);
				State = 4301;
				any_name();
				State = 4302;
				Match(ADD_P);
				State = 4303;
				Match(VALUE_P);
				State = 4304;
				opt_if_not_exists();
				State = 4305;
				sconst();
				State = 4306;
				Match(AFTER);
				State = 4307;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4309;
				Match(ALTER);
				State = 4310;
				Match(TYPE_P);
				State = 4311;
				any_name();
				State = 4312;
				Match(RENAME);
				State = 4313;
				Match(VALUE_P);
				State = 4314;
				sconst();
				State = 4315;
				Match(TO);
				State = 4316;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_if_not_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_not_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_if_not_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_if_not_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_if_not_exists(this);
		}
	}

	[RuleVersion(0)]
	public Opt_if_not_existsContext opt_if_not_exists() {
		Opt_if_not_existsContext _localctx = new Opt_if_not_existsContext(Context, State);
		EnterRule(_localctx, 480, RULE_opt_if_not_exists);
		try {
			State = 4324;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4320;
				Match(IF_P);
				State = 4321;
				Match(NOT);
				State = 4322;
				Match(EXISTS);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_defaultContext opt_default() {
			return GetRuleContext<Opt_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_opfamilyContext opt_opfamily() {
			return GetRuleContext<Opt_opfamilyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		public CreateopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopclassstmtContext createopclassstmt() {
		CreateopclassstmtContext _localctx = new CreateopclassstmtContext(Context, State);
		EnterRule(_localctx, 482, RULE_createopclassstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4326;
			Match(CREATE);
			State = 4327;
			Match(OPERATOR);
			State = 4328;
			Match(CLASS);
			State = 4329;
			any_name();
			State = 4330;
			opt_default();
			State = 4331;
			Match(FOR);
			State = 4332;
			Match(TYPE_P);
			State = 4333;
			typename();
			State = 4334;
			Match(USING);
			State = 4335;
			name();
			State = 4336;
			opt_opfamily();
			State = 4337;
			Match(AS);
			State = 4338;
			opclass_item_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_itemContext[] opclass_item() {
			return GetRuleContexts<Opclass_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_itemContext opclass_item(int i) {
			return GetRuleContext<Opclass_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_item_listContext opclass_item_list() {
		Opclass_item_listContext _localctx = new Opclass_item_listContext(Context, State);
		EnterRule(_localctx, 484, RULE_opclass_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4340;
			opclass_item();
			State = 4345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4341;
				Match(COMMA);
				State = 4342;
				opclass_item();
				}
				}
				State = 4347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_purposeContext opclass_purpose() {
			return GetRuleContext<Opclass_purposeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_recheckContext opt_recheck() {
			return GetRuleContext<Opt_recheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Opclass_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_item(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_itemContext opclass_item() {
		Opclass_itemContext _localctx = new Opclass_itemContext(Context, State);
		EnterRule(_localctx, 486, RULE_opclass_item);
		try {
			State = 4373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4348;
				Match(OPERATOR);
				State = 4349;
				iconst();
				State = 4350;
				any_operator();
				State = 4351;
				opclass_purpose();
				State = 4352;
				opt_recheck();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4354;
				Match(OPERATOR);
				State = 4355;
				iconst();
				State = 4356;
				operator_with_argtypes();
				State = 4357;
				opclass_purpose();
				State = 4358;
				opt_recheck();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4360;
				Match(FUNCTION);
				State = 4361;
				iconst();
				State = 4362;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4364;
				Match(FUNCTION);
				State = 4365;
				iconst();
				State = 4366;
				Match(OPEN_PAREN);
				State = 4367;
				type_list();
				State = 4368;
				Match(CLOSE_PAREN);
				State = 4369;
				function_with_argtypes();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4371;
				Match(STORAGE);
				State = 4372;
				typename();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Opt_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_default(this);
		}
	}

	[RuleVersion(0)]
	public Opt_defaultContext opt_default() {
		Opt_defaultContext _localctx = new Opt_defaultContext(Context, State);
		EnterRule(_localctx, 488, RULE_opt_default);
		try {
			State = 4377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4375;
				Match(DEFAULT);
				}
				break;
			case FOR:
			case CONVERSION_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_opfamilyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_opfamilyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_opfamily; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_opfamily(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_opfamily(this);
		}
	}

	[RuleVersion(0)]
	public Opt_opfamilyContext opt_opfamily() {
		Opt_opfamilyContext _localctx = new Opt_opfamilyContext(Context, State);
		EnterRule(_localctx, 490, RULE_opt_opfamily);
		try {
			State = 4382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FAMILY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4379;
				Match(FAMILY);
				State = 4380;
				any_name();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_purposeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opclass_purposeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_purpose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_purpose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_purpose(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_purposeContext opclass_purpose() {
		Opclass_purposeContext _localctx = new Opclass_purposeContext(Context, State);
		EnterRule(_localctx, 492, RULE_opclass_purpose);
		try {
			State = 4391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4384;
				Match(FOR);
				State = 4385;
				Match(SEARCH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4386;
				Match(FOR);
				State = 4387;
				Match(ORDER);
				State = 4388;
				Match(BY);
				State = 4389;
				any_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_recheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECHECK() { return GetToken(PostgreSQLParser.RECHECK, 0); }
		public Opt_recheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_recheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_recheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_recheck(this);
		}
	}

	[RuleVersion(0)]
	public Opt_recheckContext opt_recheck() {
		Opt_recheckContext _localctx = new Opt_recheckContext(Context, State);
		EnterRule(_localctx, 494, RULE_opt_recheck);
		try {
			State = 4395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECHECK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4393;
				Match(RECHECK);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public CreateopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateopfamilystmtContext createopfamilystmt() {
		CreateopfamilystmtContext _localctx = new CreateopfamilystmtContext(Context, State);
		EnterRule(_localctx, 496, RULE_createopfamilystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4397;
			Match(CREATE);
			State = 4398;
			Match(OPERATOR);
			State = 4399;
			Match(FAMILY);
			State = 4400;
			any_name();
			State = 4401;
			Match(USING);
			State = 4402;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteropfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_item_listContext opclass_item_list() {
			return GetRuleContext<Opclass_item_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_drop_listContext opclass_drop_list() {
			return GetRuleContext<Opclass_drop_listContext>(0);
		}
		public AlteropfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteropfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteropfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteropfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteropfamilystmtContext alteropfamilystmt() {
		AlteropfamilystmtContext _localctx = new AlteropfamilystmtContext(Context, State);
		EnterRule(_localctx, 498, RULE_alteropfamilystmt);
		try {
			State = 4422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4404;
				Match(ALTER);
				State = 4405;
				Match(OPERATOR);
				State = 4406;
				Match(FAMILY);
				State = 4407;
				any_name();
				State = 4408;
				Match(USING);
				State = 4409;
				name();
				State = 4410;
				Match(ADD_P);
				State = 4411;
				opclass_item_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4413;
				Match(ALTER);
				State = 4414;
				Match(OPERATOR);
				State = 4415;
				Match(FAMILY);
				State = 4416;
				any_name();
				State = 4417;
				Match(USING);
				State = 4418;
				name();
				State = 4419;
				Match(DROP);
				State = 4420;
				opclass_drop_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_drop_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_dropContext[] opclass_drop() {
			return GetRuleContexts<Opclass_dropContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opclass_dropContext opclass_drop(int i) {
			return GetRuleContext<Opclass_dropContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opclass_drop_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop_list(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_drop_listContext opclass_drop_list() {
		Opclass_drop_listContext _localctx = new Opclass_drop_listContext(Context, State);
		EnterRule(_localctx, 500, RULE_opclass_drop_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4424;
			opclass_drop();
			State = 4429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4425;
				Match(COMMA);
				State = 4426;
				opclass_drop();
				}
				}
				State = 4431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opclass_dropContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		public Opclass_dropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opclass_drop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpclass_drop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpclass_drop(this);
		}
	}

	[RuleVersion(0)]
	public Opclass_dropContext opclass_drop() {
		Opclass_dropContext _localctx = new Opclass_dropContext(Context, State);
		EnterRule(_localctx, 502, RULE_opclass_drop);
		try {
			State = 4444;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPERATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4432;
				Match(OPERATOR);
				State = 4433;
				iconst();
				State = 4434;
				Match(OPEN_PAREN);
				State = 4435;
				type_list();
				State = 4436;
				Match(CLOSE_PAREN);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4438;
				Match(FUNCTION);
				State = 4439;
				iconst();
				State = 4440;
				Match(OPEN_PAREN);
				State = 4441;
				type_list();
				State = 4442;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopclassstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopclassstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopclassstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopclassstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopclassstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopclassstmtContext dropopclassstmt() {
		DropopclassstmtContext _localctx = new DropopclassstmtContext(Context, State);
		EnterRule(_localctx, 504, RULE_dropopclassstmt);
		try {
			State = 4464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4446;
				Match(DROP);
				State = 4447;
				Match(OPERATOR);
				State = 4448;
				Match(CLASS);
				State = 4449;
				any_name();
				State = 4450;
				Match(USING);
				State = 4451;
				name();
				State = 4452;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4454;
				Match(DROP);
				State = 4455;
				Match(OPERATOR);
				State = 4456;
				Match(CLASS);
				State = 4457;
				Match(IF_P);
				State = 4458;
				Match(EXISTS);
				State = 4459;
				any_name();
				State = 4460;
				Match(USING);
				State = 4461;
				name();
				State = 4462;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropopfamilystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropopfamilystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropopfamilystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropopfamilystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropopfamilystmt(this);
		}
	}

	[RuleVersion(0)]
	public DropopfamilystmtContext dropopfamilystmt() {
		DropopfamilystmtContext _localctx = new DropopfamilystmtContext(Context, State);
		EnterRule(_localctx, 506, RULE_dropopfamilystmt);
		try {
			State = 4484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4466;
				Match(DROP);
				State = 4467;
				Match(OPERATOR);
				State = 4468;
				Match(FAMILY);
				State = 4469;
				any_name();
				State = 4470;
				Match(USING);
				State = 4471;
				name();
				State = 4472;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4474;
				Match(DROP);
				State = 4475;
				Match(OPERATOR);
				State = 4476;
				Match(FAMILY);
				State = 4477;
				Match(IF_P);
				State = 4478;
				Match(EXISTS);
				State = 4479;
				any_name();
				State = 4480;
				Match(USING);
				State = 4481;
				name();
				State = 4482;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DropownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropownedstmtContext dropownedstmt() {
		DropownedstmtContext _localctx = new DropownedstmtContext(Context, State);
		EnterRule(_localctx, 508, RULE_dropownedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4486;
			Match(DROP);
			State = 4487;
			Match(OWNED);
			State = 4488;
			Match(BY);
			State = 4489;
			role_list();
			State = 4490;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReassignownedstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public ReassignownedstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reassignownedstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReassignownedstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReassignownedstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReassignownedstmtContext reassignownedstmt() {
		ReassignownedstmtContext _localctx = new ReassignownedstmtContext(Context, State);
		EnterRule(_localctx, 510, RULE_reassignownedstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4492;
			Match(REASSIGN);
			State = 4493;
			Match(OWNED);
			State = 4494;
			Match(BY);
			State = 4495;
			role_list();
			State = 4496;
			Match(TO);
			State = 4497;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_name_listContext type_name_list() {
			return GetRuleContext<Type_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public DropstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropstmtContext dropstmt() {
		DropstmtContext _localctx = new DropstmtContext(Context, State);
		EnterRule(_localctx, 512, RULE_dropstmt);
		try {
			State = 4577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4499;
				Match(DROP);
				State = 4500;
				object_type_any_name();
				State = 4501;
				Match(IF_P);
				State = 4502;
				Match(EXISTS);
				State = 4503;
				any_name_list();
				State = 4504;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4506;
				Match(DROP);
				State = 4507;
				object_type_any_name();
				State = 4508;
				any_name_list();
				State = 4509;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4511;
				Match(DROP);
				State = 4512;
				drop_type_name();
				State = 4513;
				Match(IF_P);
				State = 4514;
				Match(EXISTS);
				State = 4515;
				name_list();
				State = 4516;
				opt_drop_behavior();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4518;
				Match(DROP);
				State = 4519;
				drop_type_name();
				State = 4520;
				name_list();
				State = 4521;
				opt_drop_behavior();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4523;
				Match(DROP);
				State = 4524;
				object_type_name_on_any_name();
				State = 4525;
				name();
				State = 4526;
				Match(ON);
				State = 4527;
				any_name();
				State = 4528;
				opt_drop_behavior();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4530;
				Match(DROP);
				State = 4531;
				object_type_name_on_any_name();
				State = 4532;
				Match(IF_P);
				State = 4533;
				Match(EXISTS);
				State = 4534;
				name();
				State = 4535;
				Match(ON);
				State = 4536;
				any_name();
				State = 4537;
				opt_drop_behavior();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4539;
				Match(DROP);
				State = 4540;
				Match(TYPE_P);
				State = 4541;
				type_name_list();
				State = 4542;
				opt_drop_behavior();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4544;
				Match(DROP);
				State = 4545;
				Match(TYPE_P);
				State = 4546;
				Match(IF_P);
				State = 4547;
				Match(EXISTS);
				State = 4548;
				type_name_list();
				State = 4549;
				opt_drop_behavior();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4551;
				Match(DROP);
				State = 4552;
				Match(DOMAIN_P);
				State = 4553;
				type_name_list();
				State = 4554;
				opt_drop_behavior();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4556;
				Match(DROP);
				State = 4557;
				Match(DOMAIN_P);
				State = 4558;
				Match(IF_P);
				State = 4559;
				Match(EXISTS);
				State = 4560;
				type_name_list();
				State = 4561;
				opt_drop_behavior();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4563;
				Match(DROP);
				State = 4564;
				Match(INDEX);
				State = 4565;
				Match(CONCURRENTLY);
				State = 4566;
				any_name_list();
				State = 4567;
				opt_drop_behavior();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4569;
				Match(DROP);
				State = 4570;
				Match(INDEX);
				State = 4571;
				Match(CONCURRENTLY);
				State = 4572;
				Match(IF_P);
				State = 4573;
				Match(EXISTS);
				State = 4574;
				any_name_list();
				State = 4575;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		public Object_type_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_any_nameContext object_type_any_name() {
		Object_type_any_nameContext _localctx = new Object_type_any_nameContext(Context, State);
		EnterRule(_localctx, 514, RULE_object_type_any_name);
		try {
			State = 4602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4579;
				Match(TABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4580;
				Match(SEQUENCE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4581;
				Match(VIEW);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4582;
				Match(MATERIALIZED);
				State = 4583;
				Match(VIEW);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4584;
				Match(INDEX);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4585;
				Match(FOREIGN);
				State = 4586;
				Match(TABLE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4587;
				Match(COLLATION);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4588;
				Match(CONVERSION_P);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4589;
				Match(STATISTICS);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4590;
				Match(TEXT_P);
				State = 4591;
				Match(SEARCH);
				State = 4592;
				Match(PARSER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4593;
				Match(TEXT_P);
				State = 4594;
				Match(SEARCH);
				State = 4595;
				Match(DICTIONARY);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4596;
				Match(TEXT_P);
				State = 4597;
				Match(SEARCH);
				State = 4598;
				Match(TEMPLATE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4599;
				Match(TEXT_P);
				State = 4600;
				Match(SEARCH);
				State = 4601;
				Match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_type_nameContext drop_type_name() {
			return GetRuleContext<Drop_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_nameContext object_type_name() {
		Object_type_nameContext _localctx = new Object_type_nameContext(Context, State);
		EnterRule(_localctx, 516, RULE_object_type_name);
		try {
			State = 4609;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOREIGN:
			case ACCESS:
			case EVENT:
			case EXTENSION:
			case LANGUAGE:
			case PROCEDURAL:
			case SCHEMA:
			case SERVER:
			case PUBLICATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4604;
				drop_type_name();
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4605;
				Match(DATABASE);
				}
				break;
			case ROLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4606;
				Match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4607;
				Match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4608;
				Match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		public Drop_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Drop_type_nameContext drop_type_name() {
		Drop_type_nameContext _localctx = new Drop_type_nameContext(Context, State);
		EnterRule(_localctx, 518, RULE_drop_type_name);
		try {
			State = 4625;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4611;
				Match(ACCESS);
				State = 4612;
				Match(METHOD);
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4613;
				Match(EVENT);
				State = 4614;
				Match(TRIGGER);
				}
				break;
			case EXTENSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4615;
				Match(EXTENSION);
				}
				break;
			case FOREIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4616;
				Match(FOREIGN);
				State = 4617;
				Match(DATA_P);
				State = 4618;
				Match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4619;
				opt_procedural();
				State = 4620;
				Match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4622;
				Match(PUBLICATION);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4623;
				Match(SCHEMA);
				}
				break;
			case SERVER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4624;
				Match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_name_on_any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		public Object_type_name_on_any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_name_on_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterObject_type_name_on_any_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitObject_type_name_on_any_name(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
		Object_type_name_on_any_nameContext _localctx = new Object_type_name_on_any_nameContext(Context, State);
		EnterRule(_localctx, 520, RULE_object_type_name_on_any_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4627;
			_la = TokenStream.LA(1);
			if ( !(_la==RULE || _la==TRIGGER || _la==POLICY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Any_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Any_name_listContext any_name_list() {
		Any_name_listContext _localctx = new Any_name_listContext(Context, State);
		EnterRule(_localctx, 522, RULE_any_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4629;
			any_name();
			State = 4634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4630;
				Match(COMMA);
				State = 4631;
				any_name();
				}
				}
				State = 4636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 524, RULE_any_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4637;
			colid();
			State = 4639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 4638;
				attrs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext[] attr_name() {
			return GetRuleContexts<Attr_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name(int i) {
			return GetRuleContext<Attr_nameContext>(i);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttrs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttrs(this);
		}
	}

	[RuleVersion(0)]
	public AttrsContext attrs() {
		AttrsContext _localctx = new AttrsContext(Context, State);
		EnterRule(_localctx, 526, RULE_attrs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4643;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4641;
					Match(DOT);
					State = 4642;
					attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4645;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Type_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_name_listContext type_name_list() {
		Type_name_listContext _localctx = new Type_name_listContext(Context, State);
		EnterRule(_localctx, 528, RULE_type_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4647;
			typename();
			State = 4652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4648;
				Match(COMMA);
				State = 4649;
				typename();
				}
				}
				State = 4654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_restart_seqsContext opt_restart_seqs() {
			return GetRuleContext<Opt_restart_seqsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public TruncatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTruncatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTruncatestmt(this);
		}
	}

	[RuleVersion(0)]
	public TruncatestmtContext truncatestmt() {
		TruncatestmtContext _localctx = new TruncatestmtContext(Context, State);
		EnterRule(_localctx, 530, RULE_truncatestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4655;
			Match(TRUNCATE);
			State = 4656;
			opt_table();
			State = 4657;
			relation_expr_list();
			State = 4658;
			opt_restart_seqs();
			State = 4659;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_restart_seqsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		public Opt_restart_seqsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_restart_seqs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_restart_seqs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_restart_seqs(this);
		}
	}

	[RuleVersion(0)]
	public Opt_restart_seqsContext opt_restart_seqs() {
		Opt_restart_seqsContext _localctx = new Opt_restart_seqsContext(Context, State);
		EnterRule(_localctx, 532, RULE_opt_restart_seqs);
		try {
			State = 4666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONTINUE_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4661;
				Match(CONTINUE_P);
				State = 4662;
				Match(IDENTITY_P);
				}
				break;
			case RESTART:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4663;
				Match(RESTART);
				State = 4664;
				Match(IDENTITY_P);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comment_textContext comment_text() {
			return GetRuleContext<Comment_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_name_on_any_nameContext object_type_name_on_any_name() {
			return GetRuleContext<Object_type_name_on_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CommentstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommentstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommentstmt(this);
		}
	}

	[RuleVersion(0)]
	public CommentstmtContext commentstmt() {
		CommentstmtContext _localctx = new CommentstmtContext(Context, State);
		EnterRule(_localctx, 534, RULE_commentstmt);
		try {
			State = 4815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4668;
				Match(COMMENT);
				State = 4669;
				Match(ON);
				State = 4670;
				object_type_any_name();
				State = 4671;
				any_name();
				State = 4672;
				Match(IS);
				State = 4673;
				comment_text();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4675;
				Match(COMMENT);
				State = 4676;
				Match(ON);
				State = 4677;
				Match(COLUMN);
				State = 4678;
				any_name();
				State = 4679;
				Match(IS);
				State = 4680;
				comment_text();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4682;
				Match(COMMENT);
				State = 4683;
				Match(ON);
				State = 4684;
				object_type_name();
				State = 4685;
				name();
				State = 4686;
				Match(IS);
				State = 4687;
				comment_text();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4689;
				Match(COMMENT);
				State = 4690;
				Match(ON);
				State = 4691;
				Match(TYPE_P);
				State = 4692;
				typename();
				State = 4693;
				Match(IS);
				State = 4694;
				comment_text();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4696;
				Match(COMMENT);
				State = 4697;
				Match(ON);
				State = 4698;
				Match(DOMAIN_P);
				State = 4699;
				typename();
				State = 4700;
				Match(IS);
				State = 4701;
				comment_text();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4703;
				Match(COMMENT);
				State = 4704;
				Match(ON);
				State = 4705;
				Match(AGGREGATE);
				State = 4706;
				aggregate_with_argtypes();
				State = 4707;
				Match(IS);
				State = 4708;
				comment_text();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4710;
				Match(COMMENT);
				State = 4711;
				Match(ON);
				State = 4712;
				Match(FUNCTION);
				State = 4713;
				function_with_argtypes();
				State = 4714;
				Match(IS);
				State = 4715;
				comment_text();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4717;
				Match(COMMENT);
				State = 4718;
				Match(ON);
				State = 4719;
				Match(OPERATOR);
				State = 4720;
				operator_with_argtypes();
				State = 4721;
				Match(IS);
				State = 4722;
				comment_text();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4724;
				Match(COMMENT);
				State = 4725;
				Match(ON);
				State = 4726;
				Match(CONSTRAINT);
				State = 4727;
				name();
				State = 4728;
				Match(ON);
				State = 4729;
				any_name();
				State = 4730;
				Match(IS);
				State = 4731;
				comment_text();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4733;
				Match(COMMENT);
				State = 4734;
				Match(ON);
				State = 4735;
				Match(CONSTRAINT);
				State = 4736;
				name();
				State = 4737;
				Match(ON);
				State = 4738;
				Match(DOMAIN_P);
				State = 4739;
				any_name();
				State = 4740;
				Match(IS);
				State = 4741;
				comment_text();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4743;
				Match(COMMENT);
				State = 4744;
				Match(ON);
				State = 4745;
				object_type_name_on_any_name();
				State = 4746;
				name();
				State = 4747;
				Match(ON);
				State = 4748;
				any_name();
				State = 4749;
				Match(IS);
				State = 4750;
				comment_text();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4752;
				Match(COMMENT);
				State = 4753;
				Match(ON);
				State = 4754;
				Match(PROCEDURE);
				State = 4755;
				function_with_argtypes();
				State = 4756;
				Match(IS);
				State = 4757;
				comment_text();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4759;
				Match(COMMENT);
				State = 4760;
				Match(ON);
				State = 4761;
				Match(ROUTINE);
				State = 4762;
				function_with_argtypes();
				State = 4763;
				Match(IS);
				State = 4764;
				comment_text();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4766;
				Match(COMMENT);
				State = 4767;
				Match(ON);
				State = 4768;
				Match(TRANSFORM);
				State = 4769;
				Match(FOR);
				State = 4770;
				typename();
				State = 4771;
				Match(LANGUAGE);
				State = 4772;
				name();
				State = 4773;
				Match(IS);
				State = 4774;
				comment_text();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4776;
				Match(COMMENT);
				State = 4777;
				Match(ON);
				State = 4778;
				Match(OPERATOR);
				State = 4779;
				Match(CLASS);
				State = 4780;
				any_name();
				State = 4781;
				Match(USING);
				State = 4782;
				name();
				State = 4783;
				Match(IS);
				State = 4784;
				comment_text();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4786;
				Match(COMMENT);
				State = 4787;
				Match(ON);
				State = 4788;
				Match(OPERATOR);
				State = 4789;
				Match(FAMILY);
				State = 4790;
				any_name();
				State = 4791;
				Match(USING);
				State = 4792;
				name();
				State = 4793;
				Match(IS);
				State = 4794;
				comment_text();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4796;
				Match(COMMENT);
				State = 4797;
				Match(ON);
				State = 4798;
				Match(LARGE_P);
				State = 4799;
				Match(OBJECT_P);
				State = 4800;
				numericonly();
				State = 4801;
				Match(IS);
				State = 4802;
				comment_text();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4804;
				Match(COMMENT);
				State = 4805;
				Match(ON);
				State = 4806;
				Match(CAST);
				State = 4807;
				Match(OPEN_PAREN);
				State = 4808;
				typename();
				State = 4809;
				Match(AS);
				State = 4810;
				typename();
				State = 4811;
				Match(CLOSE_PAREN);
				State = 4812;
				Match(IS);
				State = 4813;
				comment_text();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Comment_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComment_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComment_text(this);
		}
	}

	[RuleVersion(0)]
	public Comment_textContext comment_text() {
		Comment_textContext _localctx = new Comment_textContext(Context, State);
		EnterRule(_localctx, 536, RULE_comment_text);
		try {
			State = 4819;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4817;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4818;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeclabelstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_providerContext opt_provider() {
			return GetRuleContext<Opt_providerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_any_nameContext object_type_any_name() {
			return GetRuleContext<Object_type_any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Security_labelContext security_label() {
			return GetRuleContext<Security_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_type_nameContext object_type_name() {
			return GetRuleContext<Object_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public SeclabelstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seclabelstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSeclabelstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSeclabelstmt(this);
		}
	}

	[RuleVersion(0)]
	public SeclabelstmtContext seclabelstmt() {
		SeclabelstmtContext _localctx = new SeclabelstmtContext(Context, State);
		EnterRule(_localctx, 538, RULE_seclabelstmt);
		try {
			State = 4912;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4821;
				Match(SECURITY);
				State = 4822;
				Match(LABEL);
				State = 4823;
				opt_provider();
				State = 4824;
				Match(ON);
				State = 4825;
				object_type_any_name();
				State = 4826;
				any_name();
				State = 4827;
				Match(IS);
				State = 4828;
				security_label();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4830;
				Match(SECURITY);
				State = 4831;
				Match(LABEL);
				State = 4832;
				opt_provider();
				State = 4833;
				Match(ON);
				State = 4834;
				Match(COLUMN);
				State = 4835;
				any_name();
				State = 4836;
				Match(IS);
				State = 4837;
				security_label();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4839;
				Match(SECURITY);
				State = 4840;
				Match(LABEL);
				State = 4841;
				opt_provider();
				State = 4842;
				Match(ON);
				State = 4843;
				object_type_name();
				State = 4844;
				name();
				State = 4845;
				Match(IS);
				State = 4846;
				security_label();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4848;
				Match(SECURITY);
				State = 4849;
				Match(LABEL);
				State = 4850;
				opt_provider();
				State = 4851;
				Match(ON);
				State = 4852;
				Match(TYPE_P);
				State = 4853;
				typename();
				State = 4854;
				Match(IS);
				State = 4855;
				security_label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4857;
				Match(SECURITY);
				State = 4858;
				Match(LABEL);
				State = 4859;
				opt_provider();
				State = 4860;
				Match(ON);
				State = 4861;
				Match(DOMAIN_P);
				State = 4862;
				typename();
				State = 4863;
				Match(IS);
				State = 4864;
				security_label();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4866;
				Match(SECURITY);
				State = 4867;
				Match(LABEL);
				State = 4868;
				opt_provider();
				State = 4869;
				Match(ON);
				State = 4870;
				Match(AGGREGATE);
				State = 4871;
				aggregate_with_argtypes();
				State = 4872;
				Match(IS);
				State = 4873;
				security_label();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4875;
				Match(SECURITY);
				State = 4876;
				Match(LABEL);
				State = 4877;
				opt_provider();
				State = 4878;
				Match(ON);
				State = 4879;
				Match(FUNCTION);
				State = 4880;
				function_with_argtypes();
				State = 4881;
				Match(IS);
				State = 4882;
				security_label();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4884;
				Match(SECURITY);
				State = 4885;
				Match(LABEL);
				State = 4886;
				opt_provider();
				State = 4887;
				Match(ON);
				State = 4888;
				Match(LARGE_P);
				State = 4889;
				Match(OBJECT_P);
				State = 4890;
				numericonly();
				State = 4891;
				Match(IS);
				State = 4892;
				security_label();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4894;
				Match(SECURITY);
				State = 4895;
				Match(LABEL);
				State = 4896;
				opt_provider();
				State = 4897;
				Match(ON);
				State = 4898;
				Match(PROCEDURE);
				State = 4899;
				function_with_argtypes();
				State = 4900;
				Match(IS);
				State = 4901;
				security_label();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4903;
				Match(SECURITY);
				State = 4904;
				Match(LABEL);
				State = 4905;
				opt_provider();
				State = 4906;
				Match(ON);
				State = 4907;
				Match(ROUTINE);
				State = 4908;
				function_with_argtypes();
				State = 4909;
				Match(IS);
				State = 4910;
				security_label();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_providerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Opt_providerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_provider; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_provider(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_provider(this);
		}
	}

	[RuleVersion(0)]
	public Opt_providerContext opt_provider() {
		Opt_providerContext _localctx = new Opt_providerContext(Context, State);
		EnterRule(_localctx, 540, RULE_opt_provider);
		try {
			State = 4917;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4914;
				Match(FOR);
				State = 4915;
				nonreservedword_or_sconst();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Security_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Security_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_security_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSecurity_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSecurity_label(this);
		}
	}

	[RuleVersion(0)]
	public Security_labelContext security_label() {
		Security_labelContext _localctx = new Security_labelContext(Context, State);
		EnterRule(_localctx, 542, RULE_security_label);
		try {
			State = 4921;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4919;
				sconst();
				}
				break;
			case NULL_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4920;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FetchstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fetch_argsContext fetch_args() {
			return GetRuleContext<Fetch_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		public FetchstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetchstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetchstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetchstmt(this);
		}
	}

	[RuleVersion(0)]
	public FetchstmtContext fetchstmt() {
		FetchstmtContext _localctx = new FetchstmtContext(Context, State);
		EnterRule(_localctx, 544, RULE_fetchstmt);
		try {
			State = 4927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FETCH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4923;
				Match(FETCH);
				State = 4924;
				fetch_args();
				}
				break;
			case MOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4925;
				Match(MOVE);
				State = 4926;
				fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_from_inContext opt_from_in() {
			return GetRuleContext<Opt_from_inContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		public Fetch_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFetch_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFetch_args(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_argsContext fetch_args() {
		Fetch_argsContext _localctx = new Fetch_argsContext(Context, State);
		EnterRule(_localctx, 546, RULE_fetch_args);
		try {
			State = 4995;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4929;
				cursor_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4930;
				from_in();
				State = 4931;
				cursor_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4933;
				Match(NEXT);
				State = 4934;
				opt_from_in();
				State = 4935;
				cursor_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4937;
				Match(PRIOR);
				State = 4938;
				opt_from_in();
				State = 4939;
				cursor_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4941;
				Match(FIRST_P);
				State = 4942;
				opt_from_in();
				State = 4943;
				cursor_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4945;
				Match(LAST_P);
				State = 4946;
				opt_from_in();
				State = 4947;
				cursor_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4949;
				Match(ABSOLUTE_P);
				State = 4950;
				signediconst();
				State = 4951;
				opt_from_in();
				State = 4952;
				cursor_name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4954;
				Match(RELATIVE_P);
				State = 4955;
				signediconst();
				State = 4956;
				opt_from_in();
				State = 4957;
				cursor_name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4959;
				signediconst();
				State = 4960;
				opt_from_in();
				State = 4961;
				cursor_name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4963;
				Match(ALL);
				State = 4964;
				opt_from_in();
				State = 4965;
				cursor_name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4967;
				Match(FORWARD);
				State = 4968;
				opt_from_in();
				State = 4969;
				cursor_name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4971;
				Match(FORWARD);
				State = 4972;
				signediconst();
				State = 4973;
				opt_from_in();
				State = 4974;
				cursor_name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4976;
				Match(FORWARD);
				State = 4977;
				Match(ALL);
				State = 4978;
				opt_from_in();
				State = 4979;
				cursor_name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4981;
				Match(BACKWARD);
				State = 4982;
				opt_from_in();
				State = 4983;
				cursor_name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4985;
				Match(BACKWARD);
				State = 4986;
				signediconst();
				State = 4987;
				opt_from_in();
				State = 4988;
				cursor_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4990;
				Match(BACKWARD);
				State = 4991;
				Match(ALL);
				State = 4992;
				opt_from_in();
				State = 4993;
				cursor_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public From_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_in(this);
		}
	}

	[RuleVersion(0)]
	public From_inContext from_in() {
		From_inContext _localctx = new From_inContext(Context, State);
		EnterRule(_localctx, 548, RULE_from_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4997;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM || _la==IN_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_from_inContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public From_inContext from_in() {
			return GetRuleContext<From_inContext>(0);
		}
		public Opt_from_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_from_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_from_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_from_in(this);
		}
	}

	[RuleVersion(0)]
	public Opt_from_inContext opt_from_in() {
		Opt_from_inContext _localctx = new Opt_from_inContext(Context, State);
		EnterRule(_localctx, 550, RULE_opt_from_in);
		try {
			State = 5001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4999;
				from_in();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return GetRuleContext<Opt_grant_grant_optionContext>(0);
		}
		public GrantstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantstmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantstmtContext grantstmt() {
		GrantstmtContext _localctx = new GrantstmtContext(Context, State);
		EnterRule(_localctx, 552, RULE_grantstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5003;
			Match(GRANT);
			State = 5004;
			privileges();
			State = 5005;
			Match(ON);
			State = 5006;
			privilege_target();
			State = 5007;
			Match(TO);
			State = 5008;
			grantee_list();
			State = 5009;
			opt_grant_grant_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_targetContext privilege_target() {
			return GetRuleContext<Privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokestmtContext revokestmt() {
		RevokestmtContext _localctx = new RevokestmtContext(Context, State);
		EnterRule(_localctx, 554, RULE_revokestmt);
		try {
			State = 5030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5011;
				Match(REVOKE);
				State = 5012;
				privileges();
				State = 5013;
				Match(ON);
				State = 5014;
				privilege_target();
				State = 5015;
				Match(FROM);
				State = 5016;
				grantee_list();
				State = 5017;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5019;
				Match(REVOKE);
				State = 5020;
				Match(GRANT);
				State = 5021;
				Match(OPTION);
				State = 5022;
				Match(FOR);
				State = 5023;
				privileges();
				State = 5024;
				Match(ON);
				State = 5025;
				privilege_target();
				State = 5026;
				Match(FROM);
				State = 5027;
				grantee_list();
				State = 5028;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privileges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivileges(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesContext privileges() {
		PrivilegesContext _localctx = new PrivilegesContext(Context, State);
		EnterRule(_localctx, 556, RULE_privileges);
		try {
			State = 5047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5032;
				privilege_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5033;
				Match(ALL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5034;
				Match(ALL);
				State = 5035;
				Match(PRIVILEGES);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5036;
				Match(ALL);
				State = 5037;
				Match(OPEN_PAREN);
				State = 5038;
				columnlist();
				State = 5039;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5041;
				Match(ALL);
				State = 5042;
				Match(PRIVILEGES);
				State = 5043;
				Match(OPEN_PAREN);
				State = 5044;
				columnlist();
				State = 5045;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Privilege_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_list(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_listContext privilege_list() {
		Privilege_listContext _localctx = new Privilege_listContext(Context, State);
		EnterRule(_localctx, 558, RULE_privilege_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5049;
			privilege();
			State = 5054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5050;
				Match(COMMA);
				State = 5051;
				privilege();
				}
				}
				State = 5056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 560, RULE_privilege);
		try {
			State = 5066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5057;
				Match(SELECT);
				State = 5058;
				opt_column_list();
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5059;
				Match(REFERENCES);
				State = 5060;
				opt_column_list();
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5061;
				Match(CREATE);
				State = 5062;
				opt_column_list();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5063;
				colid();
				State = 5064;
				opt_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Numericonly_listContext numericonly_list() {
			return GetRuleContext<Numericonly_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		public Privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrivilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrivilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Privilege_targetContext privilege_target() {
		Privilege_targetContext _localctx = new Privilege_targetContext(Context, State);
		EnterRule(_localctx, 562, RULE_privilege_target);
		try {
			State = 5126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5068;
				qualified_name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5069;
				Match(TABLE);
				State = 5070;
				qualified_name_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5071;
				Match(SEQUENCE);
				State = 5072;
				qualified_name_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5073;
				Match(FOREIGN);
				State = 5074;
				Match(DATA_P);
				State = 5075;
				Match(WRAPPER);
				State = 5076;
				name_list();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5077;
				Match(FOREIGN);
				State = 5078;
				Match(SERVER);
				State = 5079;
				name_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5080;
				Match(FUNCTION);
				State = 5081;
				function_with_argtypes_list();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5082;
				Match(PROCEDURE);
				State = 5083;
				function_with_argtypes_list();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5084;
				Match(ROUTINE);
				State = 5085;
				function_with_argtypes_list();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5086;
				Match(DATABASE);
				State = 5087;
				name_list();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5088;
				Match(DOMAIN_P);
				State = 5089;
				any_name_list();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5090;
				Match(LANGUAGE);
				State = 5091;
				name_list();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5092;
				Match(LARGE_P);
				State = 5093;
				Match(OBJECT_P);
				State = 5094;
				numericonly_list();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5095;
				Match(SCHEMA);
				State = 5096;
				name_list();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5097;
				Match(TABLESPACE);
				State = 5098;
				name_list();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5099;
				Match(TYPE_P);
				State = 5100;
				any_name_list();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5101;
				Match(ALL);
				State = 5102;
				Match(TABLES);
				State = 5103;
				Match(IN_P);
				State = 5104;
				Match(SCHEMA);
				State = 5105;
				name_list();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5106;
				Match(ALL);
				State = 5107;
				Match(SEQUENCES);
				State = 5108;
				Match(IN_P);
				State = 5109;
				Match(SCHEMA);
				State = 5110;
				name_list();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5111;
				Match(ALL);
				State = 5112;
				Match(FUNCTIONS);
				State = 5113;
				Match(IN_P);
				State = 5114;
				Match(SCHEMA);
				State = 5115;
				name_list();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5116;
				Match(ALL);
				State = 5117;
				Match(PROCEDURES);
				State = 5118;
				Match(IN_P);
				State = 5119;
				Match(SCHEMA);
				State = 5120;
				name_list();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5121;
				Match(ALL);
				State = 5122;
				Match(ROUTINES);
				State = 5123;
				Match(IN_P);
				State = 5124;
				Match(SCHEMA);
				State = 5125;
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grantee_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GranteeContext[] grantee() {
			return GetRuleContexts<GranteeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GranteeContext grantee(int i) {
			return GetRuleContext<GranteeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Grantee_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee_list(this);
		}
	}

	[RuleVersion(0)]
	public Grantee_listContext grantee_list() {
		Grantee_listContext _localctx = new Grantee_listContext(Context, State);
		EnterRule(_localctx, 564, RULE_grantee_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5128;
			grantee();
			State = 5133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5129;
				Match(COMMA);
				State = 5130;
				grantee();
				}
				}
				State = 5135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GranteeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantee(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantee(this);
		}
	}

	[RuleVersion(0)]
	public GranteeContext grantee() {
		GranteeContext _localctx = new GranteeContext(Context, State);
		EnterRule(_localctx, 566, RULE_grantee);
		try {
			State = 5139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FETCH:
			case SESSION_USER:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5136;
				rolespec();
				}
				break;
			case GROUP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5137;
				Match(GROUP_P);
				State = 5138;
				rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_grant_grant_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_grant_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_grant_grant_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_grant_grant_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_grant_grant_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_grant_grant_optionContext opt_grant_grant_option() {
		Opt_grant_grant_optionContext _localctx = new Opt_grant_grant_optionContext(Context, State);
		EnterRule(_localctx, 568, RULE_opt_grant_grant_option);
		try {
			State = 5145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5141;
				Match(WITH);
				State = 5142;
				Match(GRANT);
				State = 5143;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantrolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_admin_optionContext opt_grant_admin_option() {
			return GetRuleContext<Opt_grant_admin_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_granted_byContext opt_granted_by() {
			return GetRuleContext<Opt_granted_byContext>(0);
		}
		public GrantrolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantrolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrantrolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrantrolestmt(this);
		}
	}

	[RuleVersion(0)]
	public GrantrolestmtContext grantrolestmt() {
		GrantrolestmtContext _localctx = new GrantrolestmtContext(Context, State);
		EnterRule(_localctx, 570, RULE_grantrolestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5147;
			Match(GRANT);
			State = 5148;
			privilege_list();
			State = 5149;
			Match(TO);
			State = 5150;
			role_list();
			State = 5151;
			opt_grant_admin_option();
			State = 5152;
			opt_granted_by();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokerolestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Privilege_listContext privilege_list() {
			return GetRuleContext<Privilege_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_granted_byContext opt_granted_by() {
			return GetRuleContext<Opt_granted_byContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public RevokerolestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokerolestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRevokerolestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRevokerolestmt(this);
		}
	}

	[RuleVersion(0)]
	public RevokerolestmtContext revokerolestmt() {
		RevokerolestmtContext _localctx = new RevokerolestmtContext(Context, State);
		EnterRule(_localctx, 572, RULE_revokerolestmt);
		try {
			State = 5171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5154;
				Match(REVOKE);
				State = 5155;
				privilege_list();
				State = 5156;
				Match(FROM);
				State = 5157;
				role_list();
				State = 5158;
				opt_granted_by();
				State = 5159;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5161;
				Match(REVOKE);
				State = 5162;
				Match(ADMIN);
				State = 5163;
				Match(OPTION);
				State = 5164;
				Match(FOR);
				State = 5165;
				privilege_list();
				State = 5166;
				Match(FROM);
				State = 5167;
				role_list();
				State = 5168;
				opt_granted_by();
				State = 5169;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_grant_admin_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		public Opt_grant_admin_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_grant_admin_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_grant_admin_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_grant_admin_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_grant_admin_optionContext opt_grant_admin_option() {
		Opt_grant_admin_optionContext _localctx = new Opt_grant_admin_optionContext(Context, State);
		EnterRule(_localctx, 574, RULE_opt_grant_admin_option);
		try {
			State = 5177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5173;
				Match(WITH);
				State = 5174;
				Match(ADMIN);
				State = 5175;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_granted_byContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public Opt_granted_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_granted_by; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_granted_by(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_granted_by(this);
		}
	}

	[RuleVersion(0)]
	public Opt_granted_byContext opt_granted_by() {
		Opt_granted_byContext _localctx = new Opt_granted_byContext(Context, State);
		EnterRule(_localctx, 576, RULE_opt_granted_by);
		try {
			State = 5183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRANTED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5179;
				Match(GRANTED);
				State = 5180;
				Match(BY);
				State = 5181;
				rolespec();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CASCADE:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case RESTRICT:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdefaultprivilegesstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionlistContext defacloptionlist() {
			return GetRuleContext<DefacloptionlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaclactionContext defaclaction() {
			return GetRuleContext<DefaclactionContext>(0);
		}
		public AlterdefaultprivilegesstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdefaultprivilegesstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdefaultprivilegesstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdefaultprivilegesstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdefaultprivilegesstmtContext alterdefaultprivilegesstmt() {
		AlterdefaultprivilegesstmtContext _localctx = new AlterdefaultprivilegesstmtContext(Context, State);
		EnterRule(_localctx, 578, RULE_alterdefaultprivilegesstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5185;
			Match(ALTER);
			State = 5186;
			Match(DEFAULT);
			State = 5187;
			Match(PRIVILEGES);
			State = 5188;
			defacloptionlist();
			State = 5189;
			defaclaction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefacloptionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionContext[] defacloption() {
			return GetRuleContexts<DefacloptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefacloptionContext defacloption(int i) {
			return GetRuleContext<DefacloptionContext>(i);
		}
		public DefacloptionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloptionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloptionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloptionlist(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionlistContext defacloptionlist() {
		DefacloptionlistContext _localctx = new DefacloptionlistContext(Context, State);
		EnterRule(_localctx, 580, RULE_defacloptionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==IN_P) {
				{
				{
				State = 5191;
				defacloption();
				}
				}
				State = 5196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefacloptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Role_listContext role_list() {
			return GetRuleContext<Role_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		public DefacloptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacloption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacloption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacloption(this);
		}
	}

	[RuleVersion(0)]
	public DefacloptionContext defacloption() {
		DefacloptionContext _localctx = new DefacloptionContext(Context, State);
		EnterRule(_localctx, 582, RULE_defacloption);
		try {
			State = 5206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5197;
				Match(IN_P);
				State = 5198;
				Match(SCHEMA);
				State = 5199;
				name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5200;
				Match(FOR);
				State = 5201;
				Match(ROLE);
				State = 5202;
				role_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5203;
				Match(FOR);
				State = 5204;
				Match(USER);
				State = 5205;
				role_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaclactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesContext privileges() {
			return GetRuleContext<PrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Defacl_privilege_targetContext defacl_privilege_target() {
			return GetRuleContext<Defacl_privilege_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Grantee_listContext grantee_list() {
			return GetRuleContext<Grantee_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_grant_grant_optionContext opt_grant_grant_option() {
			return GetRuleContext<Opt_grant_grant_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public DefaclactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaclaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefaclaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefaclaction(this);
		}
	}

	[RuleVersion(0)]
	public DefaclactionContext defaclaction() {
		DefaclactionContext _localctx = new DefaclactionContext(Context, State);
		EnterRule(_localctx, 584, RULE_defaclaction);
		try {
			State = 5235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5208;
				Match(GRANT);
				State = 5209;
				privileges();
				State = 5210;
				Match(ON);
				State = 5211;
				defacl_privilege_target();
				State = 5212;
				Match(TO);
				State = 5213;
				grantee_list();
				State = 5214;
				opt_grant_grant_option();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5216;
				Match(REVOKE);
				State = 5217;
				privileges();
				State = 5218;
				Match(ON);
				State = 5219;
				defacl_privilege_target();
				State = 5220;
				Match(FROM);
				State = 5221;
				grantee_list();
				State = 5222;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5224;
				Match(REVOKE);
				State = 5225;
				Match(GRANT);
				State = 5226;
				Match(OPTION);
				State = 5227;
				Match(FOR);
				State = 5228;
				privileges();
				State = 5229;
				Match(ON);
				State = 5230;
				defacl_privilege_target();
				State = 5231;
				Match(FROM);
				State = 5232;
				grantee_list();
				State = 5233;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Defacl_privilege_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		public Defacl_privilege_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defacl_privilege_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDefacl_privilege_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDefacl_privilege_target(this);
		}
	}

	[RuleVersion(0)]
	public Defacl_privilege_targetContext defacl_privilege_target() {
		Defacl_privilege_targetContext _localctx = new Defacl_privilege_targetContext(Context, State);
		EnterRule(_localctx, 586, RULE_defacl_privilege_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5237;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTIONS || (((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & 4297064449L) != 0 || _la==ROUTINES || _la==SCHEMAS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uniqueContext opt_unique() {
			return GetRuleContext<Opt_uniqueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_index_nameContext opt_index_name() {
			return GetRuleContext<Opt_index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_method_clauseContext access_method_clause() {
			return GetRuleContext<Access_method_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_includeContext opt_include() {
			return GetRuleContext<Opt_includeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttablespaceContext opttablespace() {
			return GetRuleContext<OpttablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IndexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndexstmt(this);
		}
	}

	[RuleVersion(0)]
	public IndexstmtContext indexstmt() {
		IndexstmtContext _localctx = new IndexstmtContext(Context, State);
		EnterRule(_localctx, 588, RULE_indexstmt);
		try {
			State = 5274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5239;
				Match(CREATE);
				State = 5240;
				opt_unique();
				State = 5241;
				Match(INDEX);
				State = 5242;
				opt_concurrently();
				State = 5243;
				opt_index_name();
				State = 5244;
				Match(ON);
				State = 5245;
				relation_expr();
				State = 5246;
				access_method_clause();
				State = 5247;
				Match(OPEN_PAREN);
				State = 5248;
				index_params();
				State = 5249;
				Match(CLOSE_PAREN);
				State = 5250;
				opt_include();
				State = 5251;
				opt_reloptions();
				State = 5252;
				opttablespace();
				State = 5253;
				where_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5255;
				Match(CREATE);
				State = 5256;
				opt_unique();
				State = 5257;
				Match(INDEX);
				State = 5258;
				opt_concurrently();
				State = 5259;
				Match(IF_P);
				State = 5260;
				Match(NOT);
				State = 5261;
				Match(EXISTS);
				State = 5262;
				name();
				State = 5263;
				Match(ON);
				State = 5264;
				relation_expr();
				State = 5265;
				access_method_clause();
				State = 5266;
				Match(OPEN_PAREN);
				State = 5267;
				index_params();
				State = 5268;
				Match(CLOSE_PAREN);
				State = 5269;
				opt_include();
				State = 5270;
				opt_reloptions();
				State = 5271;
				opttablespace();
				State = 5272;
				where_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_uniqueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		public Opt_uniqueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_unique; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_unique(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_unique(this);
		}
	}

	[RuleVersion(0)]
	public Opt_uniqueContext opt_unique() {
		Opt_uniqueContext _localctx = new Opt_uniqueContext(Context, State);
		EnterRule(_localctx, 590, RULE_opt_unique);
		try {
			State = 5278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5276;
				Match(UNIQUE);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_concurrentlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Opt_concurrentlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_concurrently; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_concurrently(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_concurrently(this);
		}
	}

	[RuleVersion(0)]
	public Opt_concurrentlyContext opt_concurrently() {
		Opt_concurrentlyContext _localctx = new Opt_concurrentlyContext(Context, State);
		EnterRule(_localctx, 592, RULE_opt_concurrently);
		try {
			State = 5282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONCURRENTLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5280;
				Match(CONCURRENTLY);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case ON:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_index_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_index_name(this);
		}
	}

	[RuleVersion(0)]
	public Opt_index_nameContext opt_index_name() {
		Opt_index_nameContext _localctx = new Opt_index_nameContext(Context, State);
		EnterRule(_localctx, 594, RULE_opt_index_name);
		try {
			State = 5286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5284;
				name();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_method_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Access_method_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_method_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAccess_method_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAccess_method_clause(this);
		}
	}

	[RuleVersion(0)]
	public Access_method_clauseContext access_method_clause() {
		Access_method_clauseContext _localctx = new Access_method_clauseContext(Context, State);
		EnterRule(_localctx, 596, RULE_access_method_clause);
		try {
			State = 5291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5288;
				Match(USING);
				State = 5289;
				name();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext[] index_elem() {
			return GetRuleContexts<Index_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem(int i) {
			return GetRuleContext<Index_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Index_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_paramsContext index_params() {
		Index_paramsContext _localctx = new Index_paramsContext(Context, State);
		EnterRule(_localctx, 598, RULE_index_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5293;
			index_elem();
			State = 5298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5294;
				Match(COMMA);
				State = 5295;
				index_elem();
				}
				}
				State = 5300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_elem_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collateContext opt_collate() {
			return GetRuleContext<Opt_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_classContext opt_class() {
			return GetRuleContext<Opt_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asc_descContext opt_asc_desc() {
			return GetRuleContext<Opt_asc_descContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nulls_orderContext opt_nulls_order() {
			return GetRuleContext<Opt_nulls_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		public Index_elem_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem_options(this);
		}
	}

	[RuleVersion(0)]
	public Index_elem_optionsContext index_elem_options() {
		Index_elem_optionsContext _localctx = new Index_elem_optionsContext(Context, State);
		EnterRule(_localctx, 600, RULE_index_elem_options);
		try {
			State = 5312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5301;
				opt_collate();
				State = 5302;
				opt_class();
				State = 5303;
				opt_asc_desc();
				State = 5304;
				opt_nulls_order();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5306;
				opt_collate();
				State = 5307;
				any_name();
				State = 5308;
				reloptions();
				State = 5309;
				opt_asc_desc();
				State = 5310;
				opt_nulls_order();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elem_optionsContext index_elem_options() {
			return GetRuleContext<Index_elem_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Index_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_elem(this);
		}
	}

	[RuleVersion(0)]
	public Index_elemContext index_elem() {
		Index_elemContext _localctx = new Index_elemContext(Context, State);
		EnterRule(_localctx, 602, RULE_index_elem);
		try {
			State = 5325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5314;
				colid();
				State = 5315;
				index_elem_options();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5317;
				func_expr_windowless();
				State = 5318;
				index_elem_options();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5320;
				Match(OPEN_PAREN);
				State = 5321;
				a_expr();
				State = 5322;
				Match(CLOSE_PAREN);
				State = 5323;
				index_elem_options();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_includeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_including_paramsContext index_including_params() {
			return GetRuleContext<Index_including_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_includeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_include(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_include(this);
		}
	}

	[RuleVersion(0)]
	public Opt_includeContext opt_include() {
		Opt_includeContext _localctx = new Opt_includeContext(Context, State);
		EnterRule(_localctx, 604, RULE_opt_include);
		try {
			State = 5333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5327;
				Match(INCLUDE);
				State = 5328;
				Match(OPEN_PAREN);
				State = 5329;
				index_including_params();
				State = 5330;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TABLESPACE:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_including_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext[] index_elem() {
			return GetRuleContexts<Index_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_elemContext index_elem(int i) {
			return GetRuleContext<Index_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Index_including_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_including_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndex_including_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndex_including_params(this);
		}
	}

	[RuleVersion(0)]
	public Index_including_paramsContext index_including_params() {
		Index_including_paramsContext _localctx = new Index_including_paramsContext(Context, State);
		EnterRule(_localctx, 606, RULE_index_including_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5335;
			index_elem();
			State = 5340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5336;
				Match(COMMA);
				State = 5337;
				index_elem();
				}
				}
				State = 5342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_collate(this);
		}
	}

	[RuleVersion(0)]
	public Opt_collateContext opt_collate() {
		Opt_collateContext _localctx = new Opt_collateContext(Context, State);
		EnterRule(_localctx, 608, RULE_opt_collate);
		try {
			State = 5346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5343;
				Match(COLLATE);
				State = 5344;
				any_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Opt_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_class(this);
		}
	}

	[RuleVersion(0)]
	public Opt_classContext opt_class() {
		Opt_classContext _localctx = new Opt_classContext(Context, State);
		EnterRule(_localctx, 610, RULE_opt_class);
		try {
			State = 5350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5348;
				any_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_asc_descContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		public Opt_asc_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_asc_desc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_asc_desc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_asc_desc(this);
		}
	}

	[RuleVersion(0)]
	public Opt_asc_descContext opt_asc_desc() {
		Opt_asc_descContext _localctx = new Opt_asc_descContext(Context, State);
		EnterRule(_localctx, 612, RULE_opt_asc_desc);
		try {
			State = 5355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5352;
				Match(ASC);
				}
				break;
			case DESC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5353;
				Match(DESC);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nulls_orderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		public Opt_nulls_orderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nulls_order; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nulls_order(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nulls_order(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nulls_orderContext opt_nulls_order() {
		Opt_nulls_orderContext _localctx = new Opt_nulls_orderContext(Context, State);
		EnterRule(_localctx, 614, RULE_opt_nulls_order);
		try {
			State = 5362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5357;
				Match(NULLS_P);
				State = 5358;
				Match(FIRST_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5359;
				Match(NULLS_P);
				State = 5360;
				Match(LAST_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatefunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaultsContext func_args_with_defaults() {
			return GetRuleContext<Func_args_with_defaultsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_listContext createfunc_opt_list() {
			return GetRuleContext<Createfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_returnContext func_return() {
			return GetRuleContext<Func_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_column_listContext table_func_column_list() {
			return GetRuleContext<Table_func_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatefunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatefunctionstmtContext createfunctionstmt() {
		CreatefunctionstmtContext _localctx = new CreatefunctionstmtContext(Context, State);
		EnterRule(_localctx, 616, RULE_createfunctionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5364;
			Match(CREATE);
			State = 5365;
			opt_or_replace();
			State = 5366;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==TRIGGER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5367;
			func_name();
			State = 5368;
			func_args_with_defaults();
			State = 5378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 5369;
				Match(RETURNS);
				State = 5376;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
				case 1:
					{
					State = 5370;
					func_return();
					}
					break;
				case 2:
					{
					State = 5371;
					Match(TABLE);
					State = 5372;
					Match(OPEN_PAREN);
					State = 5373;
					table_func_column_list();
					State = 5374;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			State = 5380;
			createfunc_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_or_replaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		public Opt_or_replaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_or_replace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_or_replace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_or_replace(this);
		}
	}

	[RuleVersion(0)]
	public Opt_or_replaceContext opt_or_replace() {
		Opt_or_replaceContext _localctx = new Opt_or_replaceContext(Context, State);
		EnterRule(_localctx, 618, RULE_opt_or_replace);
		try {
			State = 5385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5382;
				Match(OR);
				State = 5383;
				Match(REPLACE);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case LANGUAGE:
			case PROCEDURAL:
			case PROCEDURE:
			case RULE:
			case TRIGGER:
			case TRUSTED:
			case TRANSFORM:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_listContext func_args_list() {
			return GetRuleContext<Func_args_listContext>(0);
		}
		public Func_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args(this);
		}
	}

	[RuleVersion(0)]
	public Func_argsContext func_args() {
		Func_argsContext _localctx = new Func_argsContext(Context, State);
		EnterRule(_localctx, 620, RULE_func_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5387;
			Match(OPEN_PAREN);
			State = 5389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576460786949430277L) != 0 || (((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & -4398046511135L) != 0 || (((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & -1L) != 0 || (((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & -37748737L) != 0 || (((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & -1L) != 0 || (((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & -1L) != 0 || (((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & -17179869185L) != 0 || (((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & -34362359809L) != 0 || (((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & -1L) != 0 || (((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & 1688850464243711L) != 0) {
				{
				State = 5388;
				func_args_list();
				}
			}

			State = 5391;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext[] func_arg() {
			return GetRuleContexts<Func_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg(int i) {
			return GetRuleContext<Func_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_listContext func_args_list() {
		Func_args_listContext _localctx = new Func_args_listContext(Context, State);
		EnterRule(_localctx, 622, RULE_func_args_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5393;
			func_arg();
			State = 5398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5394;
				Match(COMMA);
				State = 5395;
				func_arg();
				}
				}
				State = 5400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext[] function_with_argtypes() {
			return GetRuleContexts<Function_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes(int i) {
			return GetRuleContext<Function_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Function_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypes_listContext function_with_argtypes_list() {
		Function_with_argtypes_listContext _localctx = new Function_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 624, RULE_function_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5401;
			function_with_argtypes();
			State = 5406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5402;
				Match(COMMA);
				State = 5403;
				function_with_argtypes();
				}
				}
				State = 5408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_argsContext func_args() {
			return GetRuleContext<Func_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Function_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunction_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunction_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Function_with_argtypesContext function_with_argtypes() {
		Function_with_argtypesContext _localctx = new Function_with_argtypesContext(Context, State);
		EnterRule(_localctx, 626, RULE_function_with_argtypes);
		int _la;
		try {
			State = 5417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5409;
				func_name();
				State = 5410;
				func_args();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5412;
				type_func_name_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5413;
				colid();
				State = 5415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET || _la==DOT) {
					{
					State = 5414;
					indirection();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_args_with_defaults_listContext func_args_with_defaults_list() {
			return GetRuleContext<Func_args_with_defaults_listContext>(0);
		}
		public Func_args_with_defaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaultsContext func_args_with_defaults() {
		Func_args_with_defaultsContext _localctx = new Func_args_with_defaultsContext(Context, State);
		EnterRule(_localctx, 628, RULE_func_args_with_defaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5419;
			Match(OPEN_PAREN);
			State = 5421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576460786949430277L) != 0 || (((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & -4398046511135L) != 0 || (((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & -1L) != 0 || (((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & -37748737L) != 0 || (((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & -1L) != 0 || (((_la - 357)) & ~0x3f) == 0 && ((1L << (_la - 357)) & -1L) != 0 || (((_la - 421)) & ~0x3f) == 0 && ((1L << (_la - 421)) & -17179869185L) != 0 || (((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & -34362359809L) != 0 || (((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & -1L) != 0 || (((_la - 613)) & ~0x3f) == 0 && ((1L << (_la - 613)) & 1688850464243711L) != 0) {
				{
				State = 5420;
				func_args_with_defaults_list();
				}
			}

			State = 5423;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_args_with_defaults_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_with_defaultContext[] func_arg_with_default() {
			return GetRuleContexts<Func_arg_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_with_defaultContext func_arg_with_default(int i) {
			return GetRuleContext<Func_arg_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_args_with_defaults_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_args_with_defaults_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_args_with_defaults_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_args_with_defaults_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_args_with_defaults_listContext func_args_with_defaults_list() {
		Func_args_with_defaults_listContext _localctx = new Func_args_with_defaults_listContext(Context, State);
		EnterRule(_localctx, 630, RULE_func_args_with_defaults_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5425;
			func_arg_with_default();
			State = 5430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5426;
				Match(COMMA);
				State = 5427;
				func_arg_with_default();
				}
				}
				State = 5432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arg_classContext arg_class() {
			return GetRuleContext<Arg_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		public Func_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg(this);
		}
	}

	[RuleVersion(0)]
	public Func_argContext func_arg() {
		Func_argContext _localctx = new Func_argContext(Context, State);
		EnterRule(_localctx, 632, RULE_func_arg);
		try {
			State = 5446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5433;
				arg_class();
				State = 5435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
				case 1:
					{
					State = 5434;
					param_name();
					}
					break;
				}
				State = 5437;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5439;
				param_name();
				State = 5441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
				case 1:
					{
					State = 5440;
					arg_class();
					}
					break;
				}
				State = 5443;
				func_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5445;
				func_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		public Arg_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArg_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArg_class(this);
		}
	}

	[RuleVersion(0)]
	public Arg_classContext arg_class() {
		Arg_classContext _localctx = new Arg_classContext(Context, State);
		EnterRule(_localctx, 634, RULE_arg_class);
		try {
			State = 5455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5448;
				Match(IN_P);
				State = 5450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
				case 1:
					{
					State = 5449;
					Match(OUT_P);
					}
					break;
				}
				}
				break;
			case OUT_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5452;
				Match(OUT_P);
				}
				break;
			case INOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5453;
				Match(INOUT);
				}
				break;
			case VARIADIC:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5454;
				Match(VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(Context, State);
		EnterRule(_localctx, 636, RULE_param_name);
		try {
			State = 5461;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5457;
				type_function_name();
				}
				break;
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5458;
				builtin_function_name();
				}
				break;
			case LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5459;
				Match(LEFT);
				}
				break;
			case RIGHT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5460;
				Match(RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_return(this);
		}
	}

	[RuleVersion(0)]
	public Func_returnContext func_return() {
		Func_returnContext _localctx = new Func_returnContext(Context, State);
		EnterRule(_localctx, 638, RULE_func_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5463;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		public Func_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_type(this);
		}
	}

	[RuleVersion(0)]
	public Func_typeContext func_type() {
		Func_typeContext _localctx = new Func_typeContext(Context, State);
		EnterRule(_localctx, 640, RULE_func_type);
		int _la;
		try {
			State = 5479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5465;
				typename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SETOF) {
					{
					State = 5466;
					Match(SETOF);
					}
				}

				State = 5473;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REPLACE:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case REVERSE:
				case LOG:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
					{
					State = 5469;
					builtin_function_name();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case COLUMNS:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 5470;
					type_function_name();
					}
					break;
				case LEFT:
					{
					State = 5471;
					Match(LEFT);
					}
					break;
				case RIGHT:
					{
					State = 5472;
					Match(RIGHT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5475;
				attrs();
				State = 5476;
				Match(PERCENT);
				State = 5477;
				Match(TYPE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Func_arg_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_with_default(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_with_defaultContext func_arg_with_default() {
		Func_arg_with_defaultContext _localctx = new Func_arg_with_defaultContext(Context, State);
		EnterRule(_localctx, 642, RULE_func_arg_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5481;
			func_arg();
			State = 5484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL || _la==DEFAULT) {
				{
				State = 5482;
				_la = TokenStream.LA(1);
				if ( !(_la==EQUAL || _la==DEFAULT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5483;
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_argContext func_arg() {
			return GetRuleContext<Func_argContext>(0);
		}
		public Aggr_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_arg(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argContext aggr_arg() {
		Aggr_argContext _localctx = new Aggr_argContext(Context, State);
		EnterRule(_localctx, 644, RULE_aggr_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5486;
			func_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext[] aggr_args_list() {
			return GetRuleContexts<Aggr_args_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_args_listContext aggr_args_list(int i) {
			return GetRuleContext<Aggr_args_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		public Aggr_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_argsContext aggr_args() {
		Aggr_argsContext _localctx = new Aggr_argsContext(Context, State);
		EnterRule(_localctx, 646, RULE_aggr_args);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5488;
			Match(OPEN_PAREN);
			State = 5499;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				{
				State = 5489;
				Match(STAR);
				}
				break;
			case 2:
				{
				State = 5490;
				aggr_args_list();
				}
				break;
			case 3:
				{
				State = 5491;
				Match(ORDER);
				State = 5492;
				Match(BY);
				State = 5493;
				aggr_args_list();
				}
				break;
			case 4:
				{
				State = 5494;
				aggr_args_list();
				State = 5495;
				Match(ORDER);
				State = 5496;
				Match(BY);
				State = 5497;
				aggr_args_list();
				}
				break;
			}
			State = 5501;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggr_args_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argContext[] aggr_arg() {
			return GetRuleContexts<Aggr_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argContext aggr_arg(int i) {
			return GetRuleContext<Aggr_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Aggr_args_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggr_args_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggr_args_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggr_args_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggr_args_listContext aggr_args_list() {
		Aggr_args_listContext _localctx = new Aggr_args_listContext(Context, State);
		EnterRule(_localctx, 648, RULE_aggr_args_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5503;
			aggr_arg();
			State = 5508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5504;
				Match(COMMA);
				State = 5505;
				aggr_arg();
				}
				}
				State = 5510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggr_argsContext aggr_args() {
			return GetRuleContext<Aggr_argsContext>(0);
		}
		public Aggregate_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypesContext aggregate_with_argtypes() {
		Aggregate_with_argtypesContext _localctx = new Aggregate_with_argtypesContext(Context, State);
		EnterRule(_localctx, 650, RULE_aggregate_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5511;
			func_name();
			State = 5512;
			aggr_args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext[] aggregate_with_argtypes() {
			return GetRuleContexts<Aggregate_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes(int i) {
			return GetRuleContext<Aggregate_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Aggregate_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAggregate_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAggregate_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
		Aggregate_with_argtypes_listContext _localctx = new Aggregate_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 652, RULE_aggregate_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5514;
			aggregate_with_argtypes();
			State = 5519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5515;
				Match(COMMA);
				State = 5516;
				aggregate_with_argtypes();
				}
				}
				State = 5521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext[] createfunc_opt_item() {
			return GetRuleContexts<Createfunc_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createfunc_opt_itemContext createfunc_opt_item(int i) {
			return GetRuleContext<Createfunc_opt_itemContext>(i);
		}
		public Createfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_listContext createfunc_opt_list() {
		Createfunc_opt_listContext _localctx = new Createfunc_opt_listContext(Context, State);
		EnterRule(_localctx, 654, RULE_createfunc_opt_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5523;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5522;
					createfunc_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5525;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,286,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );

			                ParseRoutineBody(_localctx);
			            
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_func_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_P() { return GetTokens(PostgreSQLParser.NULL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P(int i) {
			return GetToken(PostgreSQLParser.NULL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionsetresetclauseContext functionsetresetclause() {
			return GetRuleContext<FunctionsetresetclauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Common_func_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_func_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_func_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_func_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Common_func_opt_itemContext common_func_opt_item() {
		Common_func_opt_itemContext _localctx = new Common_func_opt_itemContext(Context, State);
		EnterRule(_localctx, 656, RULE_common_func_opt_item);
		try {
			State = 5564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5529;
				Match(CALLED);
				State = 5530;
				Match(ON);
				State = 5531;
				Match(NULL_P);
				State = 5532;
				Match(INPUT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5533;
				Match(RETURNS);
				State = 5534;
				Match(NULL_P);
				State = 5535;
				Match(ON);
				State = 5536;
				Match(NULL_P);
				State = 5537;
				Match(INPUT_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5538;
				Match(STRICT_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5539;
				Match(IMMUTABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5540;
				Match(STABLE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5541;
				Match(VOLATILE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5542;
				Match(EXTERNAL);
				State = 5543;
				Match(SECURITY);
				State = 5544;
				Match(DEFINER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5545;
				Match(EXTERNAL);
				State = 5546;
				Match(SECURITY);
				State = 5547;
				Match(INVOKER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5548;
				Match(SECURITY);
				State = 5549;
				Match(DEFINER);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5550;
				Match(SECURITY);
				State = 5551;
				Match(INVOKER);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5552;
				Match(LEAKPROOF);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5553;
				Match(NOT);
				State = 5554;
				Match(LEAKPROOF);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5555;
				Match(COST);
				State = 5556;
				numericonly();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5557;
				Match(ROWS);
				State = 5558;
				numericonly();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5559;
				Match(SUPPORT);
				State = 5560;
				any_name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5561;
				functionsetresetclause();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5562;
				Match(PARALLEL);
				State = 5563;
				colid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createfunc_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_asContext func_as() {
			return GetRuleContext<Func_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_type_listContext transform_type_list() {
			return GetRuleContext<Transform_type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item() {
			return GetRuleContext<Common_func_opt_itemContext>(0);
		}
		public Createfunc_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createfunc_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatefunc_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatefunc_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createfunc_opt_itemContext createfunc_opt_item() {
		Createfunc_opt_itemContext _localctx = new Createfunc_opt_itemContext(Context, State);
		EnterRule(_localctx, 658, RULE_createfunc_opt_item);
		try {
			State = 5574;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5566;
				Match(AS);
				State = 5567;
				func_as();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5568;
				Match(LANGUAGE);
				State = 5569;
				nonreservedword_or_sconst();
				}
				break;
			case TRANSFORM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5570;
				Match(TRANSFORM);
				State = 5571;
				transform_type_list();
				}
				break;
			case WINDOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5572;
				Match(WINDOW);
				}
				break;
			case NOT:
			case CALLED:
			case COST:
			case EXTERNAL:
			case IMMUTABLE:
			case LEAKPROOF:
			case RESET:
			case RETURNS:
			case ROWS:
			case SECURITY:
			case SET:
			case STABLE:
			case STRICT_P:
			case VOLATILE:
			case SUPPORT:
			case PARALLEL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5573;
				common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_asContext : ParserRuleContext {
		public ParserRuleContext Definition;
		public SconstContext def;
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_as(this);
		}
	}

	[RuleVersion(0)]
	public Func_asContext func_as() {
		Func_asContext _localctx = new Func_asContext(Context, State);
		EnterRule(_localctx, 660, RULE_func_as);
		try {
			State = 5581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5576;
				_localctx.def = sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5577;
				sconst();
				State = 5578;
				Match(COMMA);
				State = 5579;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(PostgreSQLParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(PostgreSQLParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE_P() { return GetTokens(PostgreSQLParser.TYPE_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P(int i) {
			return GetToken(PostgreSQLParser.TYPE_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Transform_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_type_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_type_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_type_listContext transform_type_list() {
		Transform_type_listContext _localctx = new Transform_type_listContext(Context, State);
		EnterRule(_localctx, 662, RULE_transform_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5583;
			Match(FOR);
			State = 5584;
			Match(TYPE_P);
			State = 5585;
			typename();
			State = 5592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5586;
				Match(COMMA);
				State = 5587;
				Match(FOR);
				State = 5588;
				Match(TYPE_P);
				State = 5589;
				typename();
				}
				}
				State = 5594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public Opt_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_definition(this);
		}
	}

	[RuleVersion(0)]
	public Opt_definitionContext opt_definition() {
		Opt_definitionContext _localctx = new Opt_definitionContext(Context, State);
		EnterRule(_localctx, 664, RULE_opt_definition);
		try {
			State = 5598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5595;
				Match(WITH);
				State = 5596;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		public Table_func_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_columnContext table_func_column() {
		Table_func_columnContext _localctx = new Table_func_columnContext(Context, State);
		EnterRule(_localctx, 666, RULE_table_func_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5600;
			param_name();
			State = 5601;
			func_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_func_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_columnContext[] table_func_column() {
			return GetRuleContexts<Table_func_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_func_columnContext table_func_column(int i) {
			return GetRuleContext<Table_func_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Table_func_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_func_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_func_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_func_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Table_func_column_listContext table_func_column_list() {
		Table_func_column_listContext _localctx = new Table_func_column_listContext(Context, State);
		EnterRule(_localctx, 668, RULE_table_func_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5603;
			table_func_column();
			State = 5608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5604;
				Match(COMMA);
				State = 5605;
				table_func_column();
				}
				}
				State = 5610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterfunctionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alterfunc_opt_listContext alterfunc_opt_list() {
			return GetRuleContext<Alterfunc_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_restrictContext opt_restrict() {
			return GetRuleContext<Opt_restrictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public AlterfunctionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunctionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunctionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunctionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterfunctionstmtContext alterfunctionstmt() {
		AlterfunctionstmtContext _localctx = new AlterfunctionstmtContext(Context, State);
		EnterRule(_localctx, 670, RULE_alterfunctionstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5611;
			Match(ALTER);
			State = 5612;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5613;
			function_with_argtypes();
			State = 5614;
			alterfunc_opt_list();
			State = 5615;
			opt_restrict();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alterfunc_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext[] common_func_opt_item() {
			return GetRuleContexts<Common_func_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_func_opt_itemContext common_func_opt_item(int i) {
			return GetRuleContext<Common_func_opt_itemContext>(i);
		}
		public Alterfunc_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterfunc_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterfunc_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterfunc_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Alterfunc_opt_listContext alterfunc_opt_list() {
		Alterfunc_opt_listContext _localctx = new Alterfunc_opt_listContext(Context, State);
		EnterRule(_localctx, 672, RULE_alterfunc_opt_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5618;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5617;
					common_func_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5620;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,293,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_restrictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		public Opt_restrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_restrict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_restrict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_restrict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_restrictContext opt_restrict() {
		Opt_restrictContext _localctx = new Opt_restrictContext(Context, State);
		EnterRule(_localctx, 674, RULE_opt_restrict);
		try {
			State = 5624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5622;
				Match(RESTRICT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovefuncstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypes_listContext function_with_argtypes_list() {
			return GetRuleContext<Function_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		public RemovefuncstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removefuncstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemovefuncstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemovefuncstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemovefuncstmtContext removefuncstmt() {
		RemovefuncstmtContext _localctx = new RemovefuncstmtContext(Context, State);
		EnterRule(_localctx, 676, RULE_removefuncstmt);
		try {
			State = 5662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5626;
				Match(DROP);
				State = 5627;
				Match(FUNCTION);
				State = 5628;
				function_with_argtypes_list();
				State = 5629;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5631;
				Match(DROP);
				State = 5632;
				Match(FUNCTION);
				State = 5633;
				Match(IF_P);
				State = 5634;
				Match(EXISTS);
				State = 5635;
				function_with_argtypes_list();
				State = 5636;
				opt_drop_behavior();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5638;
				Match(DROP);
				State = 5639;
				Match(PROCEDURE);
				State = 5640;
				function_with_argtypes_list();
				State = 5641;
				opt_drop_behavior();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5643;
				Match(DROP);
				State = 5644;
				Match(PROCEDURE);
				State = 5645;
				Match(IF_P);
				State = 5646;
				Match(EXISTS);
				State = 5647;
				function_with_argtypes_list();
				State = 5648;
				opt_drop_behavior();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5650;
				Match(DROP);
				State = 5651;
				Match(ROUTINE);
				State = 5652;
				function_with_argtypes_list();
				State = 5653;
				opt_drop_behavior();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5655;
				Match(DROP);
				State = 5656;
				Match(ROUTINE);
				State = 5657;
				Match(IF_P);
				State = 5658;
				Match(EXISTS);
				State = 5659;
				function_with_argtypes_list();
				State = 5660;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveaggrstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypes_listContext aggregate_with_argtypes_list() {
			return GetRuleContext<Aggregate_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveaggrstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaggrstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveaggrstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveaggrstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveaggrstmtContext removeaggrstmt() {
		RemoveaggrstmtContext _localctx = new RemoveaggrstmtContext(Context, State);
		EnterRule(_localctx, 678, RULE_removeaggrstmt);
		try {
			State = 5676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5664;
				Match(DROP);
				State = 5665;
				Match(AGGREGATE);
				State = 5666;
				aggregate_with_argtypes_list();
				State = 5667;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5669;
				Match(DROP);
				State = 5670;
				Match(AGGREGATE);
				State = 5671;
				Match(IF_P);
				State = 5672;
				Match(EXISTS);
				State = 5673;
				aggregate_with_argtypes_list();
				State = 5674;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveoperstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypes_listContext operator_with_argtypes_list() {
			return GetRuleContext<Operator_with_argtypes_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public RemoveoperstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeoperstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRemoveoperstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRemoveoperstmt(this);
		}
	}

	[RuleVersion(0)]
	public RemoveoperstmtContext removeoperstmt() {
		RemoveoperstmtContext _localctx = new RemoveoperstmtContext(Context, State);
		EnterRule(_localctx, 680, RULE_removeoperstmt);
		try {
			State = 5690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5678;
				Match(DROP);
				State = 5679;
				Match(OPERATOR);
				State = 5680;
				operator_with_argtypes_list();
				State = 5681;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5683;
				Match(DROP);
				State = 5684;
				Match(OPERATOR);
				State = 5685;
				Match(IF_P);
				State = 5686;
				Match(EXISTS);
				State = 5687;
				operator_with_argtypes_list();
				State = 5688;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Oper_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		public Oper_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oper_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOper_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOper_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Oper_argtypesContext oper_argtypes() {
		Oper_argtypesContext _localctx = new Oper_argtypesContext(Context, State);
		EnterRule(_localctx, 682, RULE_oper_argtypes);
		try {
			State = 5714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5692;
				Match(OPEN_PAREN);
				State = 5693;
				typename();
				State = 5694;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5696;
				Match(OPEN_PAREN);
				State = 5697;
				typename();
				State = 5698;
				Match(COMMA);
				State = 5699;
				typename();
				State = 5700;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5702;
				Match(OPEN_PAREN);
				State = 5703;
				Match(NONE);
				State = 5704;
				Match(COMMA);
				State = 5705;
				typename();
				State = 5706;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5708;
				Match(OPEN_PAREN);
				State = 5709;
				typename();
				State = 5710;
				Match(COMMA);
				State = 5711;
				Match(NONE);
				State = 5712;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext[] colid() {
			return GetRuleContexts<ColidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid(int i) {
			return GetRuleContext<ColidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PostgreSQLParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PostgreSQLParser.DOT, i);
		}
		public Any_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_operator(this);
		}
	}

	[RuleVersion(0)]
	public Any_operatorContext any_operator() {
		Any_operatorContext _localctx = new Any_operatorContext(Context, State);
		EnterRule(_localctx, 684, RULE_any_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
				{
				{
				State = 5716;
				colid();
				State = 5717;
				Match(DOT);
				}
				}
				State = 5723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5724;
			all_op();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_argtypes_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext[] operator_with_argtypes() {
			return GetRuleContexts<Operator_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes(int i) {
			return GetRuleContext<Operator_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_with_argtypes_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypes_listContext operator_with_argtypes_list() {
		Operator_with_argtypes_listContext _localctx = new Operator_with_argtypes_listContext(Context, State);
		EnterRule(_localctx, 686, RULE_operator_with_argtypes_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5726;
			operator_with_argtypes();
			State = 5731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5727;
				Match(COMMA);
				State = 5728;
				operator_with_argtypes();
				}
				}
				State = 5733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_with_argtypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Oper_argtypesContext oper_argtypes() {
			return GetRuleContext<Oper_argtypesContext>(0);
		}
		public Operator_with_argtypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_with_argtypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_with_argtypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_with_argtypes(this);
		}
	}

	[RuleVersion(0)]
	public Operator_with_argtypesContext operator_with_argtypes() {
		Operator_with_argtypesContext _localctx = new Operator_with_argtypesContext(Context, State);
		EnterRule(_localctx, 688, RULE_operator_with_argtypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5734;
			any_operator();
			State = 5735;
			oper_argtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DostmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_listContext dostmt_opt_list() {
			return GetRuleContext<Dostmt_opt_listContext>(0);
		}
		public DostmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt(this);
		}
	}

	[RuleVersion(0)]
	public DostmtContext dostmt() {
		DostmtContext _localctx = new DostmtContext(Context, State);
		EnterRule(_localctx, 690, RULE_dostmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5737;
			Match(DO);
			State = 5738;
			dostmt_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dostmt_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_itemContext[] dostmt_opt_item() {
			return GetRuleContexts<Dostmt_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dostmt_opt_itemContext dostmt_opt_item(int i) {
			return GetRuleContext<Dostmt_opt_itemContext>(i);
		}
		public Dostmt_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_listContext dostmt_opt_list() {
		Dostmt_opt_listContext _localctx = new Dostmt_opt_listContext(Context, State);
		EnterRule(_localctx, 692, RULE_dostmt_opt_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5740;
				dostmt_opt_item();
				}
				}
				State = 5743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LANGUAGE || (((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & 67108885L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dostmt_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nonreservedword_or_sconstContext nonreservedword_or_sconst() {
			return GetRuleContext<Nonreservedword_or_sconstContext>(0);
		}
		public Dostmt_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dostmt_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDostmt_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDostmt_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Dostmt_opt_itemContext dostmt_opt_item() {
		Dostmt_opt_itemContext _localctx = new Dostmt_opt_itemContext(Context, State);
		EnterRule(_localctx, 694, RULE_dostmt_opt_item);
		try {
			State = 5748;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5745;
				sconst();
				}
				break;
			case LANGUAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5746;
				Match(LANGUAGE);
				State = 5747;
				nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatecaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_contextContext cast_context() {
			return GetRuleContext<Cast_contextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		public CreatecaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatecaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatecaststmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatecaststmtContext createcaststmt() {
		CreatecaststmtContext _localctx = new CreatecaststmtContext(Context, State);
		EnterRule(_localctx, 696, RULE_createcaststmt);
		try {
			State = 5784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5750;
				Match(CREATE);
				State = 5751;
				Match(CAST);
				State = 5752;
				Match(OPEN_PAREN);
				State = 5753;
				typename();
				State = 5754;
				Match(AS);
				State = 5755;
				typename();
				State = 5756;
				Match(CLOSE_PAREN);
				State = 5757;
				Match(WITH);
				State = 5758;
				Match(FUNCTION);
				State = 5759;
				function_with_argtypes();
				State = 5760;
				cast_context();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5762;
				Match(CREATE);
				State = 5763;
				Match(CAST);
				State = 5764;
				Match(OPEN_PAREN);
				State = 5765;
				typename();
				State = 5766;
				Match(AS);
				State = 5767;
				typename();
				State = 5768;
				Match(CLOSE_PAREN);
				State = 5769;
				Match(WITHOUT);
				State = 5770;
				Match(FUNCTION);
				State = 5771;
				cast_context();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5773;
				Match(CREATE);
				State = 5774;
				Match(CAST);
				State = 5775;
				Match(OPEN_PAREN);
				State = 5776;
				typename();
				State = 5777;
				Match(AS);
				State = 5778;
				typename();
				State = 5779;
				Match(CLOSE_PAREN);
				State = 5780;
				Match(WITH);
				State = 5781;
				Match(INOUT);
				State = 5782;
				cast_context();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_contextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public Cast_contextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_context; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCast_context(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCast_context(this);
		}
	}

	[RuleVersion(0)]
	public Cast_contextContext cast_context() {
		Cast_contextContext _localctx = new Cast_contextContext(Context, State);
		EnterRule(_localctx, 698, RULE_cast_context);
		try {
			State = 5791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5786;
				Match(AS);
				State = 5787;
				Match(IMPLICIT_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5788;
				Match(AS);
				State = 5789;
				Match(ASSIGNMENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropcaststmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_existsContext opt_if_exists() {
			return GetRuleContext<Opt_if_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DropcaststmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropcaststmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropcaststmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropcaststmt(this);
		}
	}

	[RuleVersion(0)]
	public DropcaststmtContext dropcaststmt() {
		DropcaststmtContext _localctx = new DropcaststmtContext(Context, State);
		EnterRule(_localctx, 700, RULE_dropcaststmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5793;
			Match(DROP);
			State = 5794;
			Match(CAST);
			State = 5795;
			opt_if_exists();
			State = 5796;
			Match(OPEN_PAREN);
			State = 5797;
			typename();
			State = 5798;
			Match(AS);
			State = 5799;
			typename();
			State = 5800;
			Match(CLOSE_PAREN);
			State = 5801;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_if_existsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public Opt_if_existsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_if_exists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_if_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_if_exists(this);
		}
	}

	[RuleVersion(0)]
	public Opt_if_existsContext opt_if_exists() {
		Opt_if_existsContext _localctx = new Opt_if_existsContext(Context, State);
		EnterRule(_localctx, 702, RULE_opt_if_exists);
		try {
			State = 5806;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5803;
				Match(IF_P);
				State = 5804;
				Match(EXISTS);
				}
				break;
			case OPEN_PAREN:
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatetransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_element_listContext transform_element_list() {
			return GetRuleContext<Transform_element_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CreatetransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createtransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatetransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatetransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatetransformstmtContext createtransformstmt() {
		CreatetransformstmtContext _localctx = new CreatetransformstmtContext(Context, State);
		EnterRule(_localctx, 704, RULE_createtransformstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5808;
			Match(CREATE);
			State = 5809;
			opt_or_replace();
			State = 5810;
			Match(TRANSFORM);
			State = 5811;
			Match(FOR);
			State = 5812;
			typename();
			State = 5813;
			Match(LANGUAGE);
			State = 5814;
			name();
			State = 5815;
			Match(OPEN_PAREN);
			State = 5816;
			transform_element_list();
			State = 5817;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_element_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQL_P() { return GetTokens(PostgreSQLParser.SQL_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P(int i) {
			return GetToken(PostgreSQLParser.SQL_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(PostgreSQLParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(PostgreSQLParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCTION() { return GetTokens(PostgreSQLParser.FUNCTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION(int i) {
			return GetToken(PostgreSQLParser.FUNCTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext[] function_with_argtypes() {
			return GetRuleContexts<Function_with_argtypesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes(int i) {
			return GetRuleContext<Function_with_argtypesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Transform_element_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_element_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransform_element_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransform_element_list(this);
		}
	}

	[RuleVersion(0)]
	public Transform_element_listContext transform_element_list() {
		Transform_element_listContext _localctx = new Transform_element_listContext(Context, State);
		EnterRule(_localctx, 706, RULE_transform_element_list);
		try {
			State = 5853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5819;
				Match(FROM);
				State = 5820;
				Match(SQL_P);
				State = 5821;
				Match(WITH);
				State = 5822;
				Match(FUNCTION);
				State = 5823;
				function_with_argtypes();
				State = 5824;
				Match(COMMA);
				State = 5825;
				Match(TO);
				State = 5826;
				Match(SQL_P);
				State = 5827;
				Match(WITH);
				State = 5828;
				Match(FUNCTION);
				State = 5829;
				function_with_argtypes();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5831;
				Match(TO);
				State = 5832;
				Match(SQL_P);
				State = 5833;
				Match(WITH);
				State = 5834;
				Match(FUNCTION);
				State = 5835;
				function_with_argtypes();
				State = 5836;
				Match(COMMA);
				State = 5837;
				Match(FROM);
				State = 5838;
				Match(SQL_P);
				State = 5839;
				Match(WITH);
				State = 5840;
				Match(FUNCTION);
				State = 5841;
				function_with_argtypes();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5843;
				Match(FROM);
				State = 5844;
				Match(SQL_P);
				State = 5845;
				Match(WITH);
				State = 5846;
				Match(FUNCTION);
				State = 5847;
				function_with_argtypes();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5848;
				Match(TO);
				State = 5849;
				Match(SQL_P);
				State = 5850;
				Match(WITH);
				State = 5851;
				Match(FUNCTION);
				State = 5852;
				function_with_argtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DroptransformstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_if_existsContext opt_if_exists() {
			return GetRuleContext<Opt_if_existsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public DroptransformstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_droptransformstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDroptransformstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDroptransformstmt(this);
		}
	}

	[RuleVersion(0)]
	public DroptransformstmtContext droptransformstmt() {
		DroptransformstmtContext _localctx = new DroptransformstmtContext(Context, State);
		EnterRule(_localctx, 708, RULE_droptransformstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5855;
			Match(DROP);
			State = 5856;
			Match(TRANSFORM);
			State = 5857;
			opt_if_exists();
			State = 5858;
			Match(FOR);
			State = 5859;
			typename();
			State = 5860;
			Match(LANGUAGE);
			State = 5861;
			name();
			State = 5862;
			opt_drop_behavior();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReindexstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_typeContext reindex_target_type() {
			return GetRuleContext<Reindex_target_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_concurrentlyContext opt_concurrently() {
			return GetRuleContext<Opt_concurrentlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_target_multitableContext reindex_target_multitable() {
			return GetRuleContext<Reindex_target_multitableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_listContext reindex_option_list() {
			return GetRuleContext<Reindex_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ReindexstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindexstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindexstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindexstmt(this);
		}
	}

	[RuleVersion(0)]
	public ReindexstmtContext reindexstmt() {
		ReindexstmtContext _localctx = new ReindexstmtContext(Context, State);
		EnterRule(_localctx, 710, RULE_reindexstmt);
		try {
			State = 5890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5864;
				Match(REINDEX);
				State = 5865;
				reindex_target_type();
				State = 5866;
				opt_concurrently();
				State = 5867;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5869;
				Match(REINDEX);
				State = 5870;
				reindex_target_multitable();
				State = 5871;
				opt_concurrently();
				State = 5872;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5874;
				Match(REINDEX);
				State = 5875;
				Match(OPEN_PAREN);
				State = 5876;
				reindex_option_list();
				State = 5877;
				Match(CLOSE_PAREN);
				State = 5878;
				reindex_target_type();
				State = 5879;
				opt_concurrently();
				State = 5880;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5882;
				Match(REINDEX);
				State = 5883;
				Match(OPEN_PAREN);
				State = 5884;
				reindex_option_list();
				State = 5885;
				Match(CLOSE_PAREN);
				State = 5886;
				reindex_target_multitable();
				State = 5887;
				opt_concurrently();
				State = 5888;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Reindex_target_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_type(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_typeContext reindex_target_type() {
		Reindex_target_typeContext _localctx = new Reindex_target_typeContext(Context, State);
		EnterRule(_localctx, 712, RULE_reindex_target_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5892;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==DATABASE || _la==INDEX || _la==SCHEMA || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_target_multitableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		public Reindex_target_multitableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_target_multitable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_target_multitable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_target_multitable(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_target_multitableContext reindex_target_multitable() {
		Reindex_target_multitableContext _localctx = new Reindex_target_multitableContext(Context, State);
		EnterRule(_localctx, 714, RULE_reindex_target_multitable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5894;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_elemContext[] reindex_option_elem() {
			return GetRuleContexts<Reindex_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reindex_option_elemContext reindex_option_elem(int i) {
			return GetRuleContext<Reindex_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Reindex_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_option_listContext reindex_option_list() {
		Reindex_option_listContext _localctx = new Reindex_option_listContext(Context, State);
		EnterRule(_localctx, 716, RULE_reindex_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5896;
			reindex_option_elem();
			State = 5901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5897;
				Match(COMMA);
				State = 5898;
				reindex_option_elem();
				}
				}
				State = 5903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reindex_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public Reindex_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reindex_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReindex_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReindex_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Reindex_option_elemContext reindex_option_elem() {
		Reindex_option_elemContext _localctx = new Reindex_option_elemContext(Context, State);
		EnterRule(_localctx, 718, RULE_reindex_option_elem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5904;
			_la = TokenStream.LA(1);
			if ( !(_la==CONCURRENTLY || _la==VERBOSE || _la==TABLESPACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertblspcstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReloptionsContext reloptions() {
			return GetRuleContext<ReloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		public AltertblspcstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertblspcstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertblspcstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertblspcstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertblspcstmtContext altertblspcstmt() {
		AltertblspcstmtContext _localctx = new AltertblspcstmtContext(Context, State);
		EnterRule(_localctx, 720, RULE_altertblspcstmt);
		try {
			State = 5918;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5906;
				Match(ALTER);
				State = 5907;
				Match(TABLESPACE);
				State = 5908;
				name();
				State = 5909;
				Match(SET);
				State = 5910;
				reloptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5912;
				Match(ALTER);
				State = 5913;
				Match(TABLESPACE);
				State = 5914;
				name();
				State = 5915;
				Match(RESET);
				State = 5916;
				reloptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext[] roleid() {
			return GetRuleContexts<RoleidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleidContext roleid(int i) {
			return GetRuleContext<RoleidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_columnContext opt_column() {
			return GetRuleContext<Opt_columnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		public RenamestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRenamestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRenamestmt(this);
		}
	}

	[RuleVersion(0)]
	public RenamestmtContext renamestmt() {
		RenamestmtContext _localctx = new RenamestmtContext(Context, State);
		EnterRule(_localctx, 722, RULE_renamestmt);
		try {
			State = 6388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5920;
				Match(ALTER);
				State = 5921;
				Match(AGGREGATE);
				State = 5922;
				aggregate_with_argtypes();
				State = 5923;
				Match(RENAME);
				State = 5924;
				Match(TO);
				State = 5925;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5927;
				Match(ALTER);
				State = 5928;
				Match(COLLATION);
				State = 5929;
				any_name();
				State = 5930;
				Match(RENAME);
				State = 5931;
				Match(TO);
				State = 5932;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5934;
				Match(ALTER);
				State = 5935;
				Match(CONVERSION_P);
				State = 5936;
				any_name();
				State = 5937;
				Match(RENAME);
				State = 5938;
				Match(TO);
				State = 5939;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5941;
				Match(ALTER);
				State = 5942;
				Match(DATABASE);
				State = 5943;
				name();
				State = 5944;
				Match(RENAME);
				State = 5945;
				Match(TO);
				State = 5946;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5948;
				Match(ALTER);
				State = 5949;
				Match(DOMAIN_P);
				State = 5950;
				any_name();
				State = 5951;
				Match(RENAME);
				State = 5952;
				Match(TO);
				State = 5953;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5955;
				Match(ALTER);
				State = 5956;
				Match(DOMAIN_P);
				State = 5957;
				any_name();
				State = 5958;
				Match(RENAME);
				State = 5959;
				Match(CONSTRAINT);
				State = 5960;
				name();
				State = 5961;
				Match(TO);
				State = 5962;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5964;
				Match(ALTER);
				State = 5965;
				Match(FOREIGN);
				State = 5966;
				Match(DATA_P);
				State = 5967;
				Match(WRAPPER);
				State = 5968;
				name();
				State = 5969;
				Match(RENAME);
				State = 5970;
				Match(TO);
				State = 5971;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5973;
				Match(ALTER);
				State = 5974;
				Match(FUNCTION);
				State = 5975;
				function_with_argtypes();
				State = 5976;
				Match(RENAME);
				State = 5977;
				Match(TO);
				State = 5978;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5980;
				Match(ALTER);
				State = 5981;
				Match(GROUP_P);
				State = 5982;
				roleid();
				State = 5983;
				Match(RENAME);
				State = 5984;
				Match(TO);
				State = 5985;
				roleid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5987;
				Match(ALTER);
				State = 5988;
				opt_procedural();
				State = 5989;
				Match(LANGUAGE);
				State = 5990;
				name();
				State = 5991;
				Match(RENAME);
				State = 5992;
				Match(TO);
				State = 5993;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5995;
				Match(ALTER);
				State = 5996;
				Match(OPERATOR);
				State = 5997;
				Match(CLASS);
				State = 5998;
				any_name();
				State = 5999;
				Match(USING);
				State = 6000;
				name();
				State = 6001;
				Match(RENAME);
				State = 6002;
				Match(TO);
				State = 6003;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6005;
				Match(ALTER);
				State = 6006;
				Match(OPERATOR);
				State = 6007;
				Match(FAMILY);
				State = 6008;
				any_name();
				State = 6009;
				Match(USING);
				State = 6010;
				name();
				State = 6011;
				Match(RENAME);
				State = 6012;
				Match(TO);
				State = 6013;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6015;
				Match(ALTER);
				State = 6016;
				Match(POLICY);
				State = 6017;
				name();
				State = 6018;
				Match(ON);
				State = 6019;
				qualified_name();
				State = 6020;
				Match(RENAME);
				State = 6021;
				Match(TO);
				State = 6022;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6024;
				Match(ALTER);
				State = 6025;
				Match(POLICY);
				State = 6026;
				Match(IF_P);
				State = 6027;
				Match(EXISTS);
				State = 6028;
				name();
				State = 6029;
				Match(ON);
				State = 6030;
				qualified_name();
				State = 6031;
				Match(RENAME);
				State = 6032;
				Match(TO);
				State = 6033;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6035;
				Match(ALTER);
				State = 6036;
				Match(PROCEDURE);
				State = 6037;
				function_with_argtypes();
				State = 6038;
				Match(RENAME);
				State = 6039;
				Match(TO);
				State = 6040;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6042;
				Match(ALTER);
				State = 6043;
				Match(PUBLICATION);
				State = 6044;
				name();
				State = 6045;
				Match(RENAME);
				State = 6046;
				Match(TO);
				State = 6047;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6049;
				Match(ALTER);
				State = 6050;
				Match(ROUTINE);
				State = 6051;
				function_with_argtypes();
				State = 6052;
				Match(RENAME);
				State = 6053;
				Match(TO);
				State = 6054;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6056;
				Match(ALTER);
				State = 6057;
				Match(SCHEMA);
				State = 6058;
				name();
				State = 6059;
				Match(RENAME);
				State = 6060;
				Match(TO);
				State = 6061;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6063;
				Match(ALTER);
				State = 6064;
				Match(SERVER);
				State = 6065;
				name();
				State = 6066;
				Match(RENAME);
				State = 6067;
				Match(TO);
				State = 6068;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6070;
				Match(ALTER);
				State = 6071;
				Match(SUBSCRIPTION);
				State = 6072;
				name();
				State = 6073;
				Match(RENAME);
				State = 6074;
				Match(TO);
				State = 6075;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6077;
				Match(ALTER);
				State = 6078;
				Match(TABLE);
				State = 6079;
				relation_expr();
				State = 6080;
				Match(RENAME);
				State = 6081;
				Match(TO);
				State = 6082;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6084;
				Match(ALTER);
				State = 6085;
				Match(TABLE);
				State = 6086;
				Match(IF_P);
				State = 6087;
				Match(EXISTS);
				State = 6088;
				relation_expr();
				State = 6089;
				Match(RENAME);
				State = 6090;
				Match(TO);
				State = 6091;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6093;
				Match(ALTER);
				State = 6094;
				Match(SEQUENCE);
				State = 6095;
				qualified_name();
				State = 6096;
				Match(RENAME);
				State = 6097;
				Match(TO);
				State = 6098;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6100;
				Match(ALTER);
				State = 6101;
				Match(SEQUENCE);
				State = 6102;
				Match(IF_P);
				State = 6103;
				Match(EXISTS);
				State = 6104;
				qualified_name();
				State = 6105;
				Match(RENAME);
				State = 6106;
				Match(TO);
				State = 6107;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6109;
				Match(ALTER);
				State = 6110;
				Match(VIEW);
				State = 6111;
				qualified_name();
				State = 6112;
				Match(RENAME);
				State = 6113;
				Match(TO);
				State = 6114;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6116;
				Match(ALTER);
				State = 6117;
				Match(VIEW);
				State = 6118;
				Match(IF_P);
				State = 6119;
				Match(EXISTS);
				State = 6120;
				qualified_name();
				State = 6121;
				Match(RENAME);
				State = 6122;
				Match(TO);
				State = 6123;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6125;
				Match(ALTER);
				State = 6126;
				Match(MATERIALIZED);
				State = 6127;
				Match(VIEW);
				State = 6128;
				qualified_name();
				State = 6129;
				Match(RENAME);
				State = 6130;
				Match(TO);
				State = 6131;
				name();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6133;
				Match(ALTER);
				State = 6134;
				Match(MATERIALIZED);
				State = 6135;
				Match(VIEW);
				State = 6136;
				Match(IF_P);
				State = 6137;
				Match(EXISTS);
				State = 6138;
				qualified_name();
				State = 6139;
				Match(RENAME);
				State = 6140;
				Match(TO);
				State = 6141;
				name();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6143;
				Match(ALTER);
				State = 6144;
				Match(INDEX);
				State = 6145;
				qualified_name();
				State = 6146;
				Match(RENAME);
				State = 6147;
				Match(TO);
				State = 6148;
				name();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6150;
				Match(ALTER);
				State = 6151;
				Match(INDEX);
				State = 6152;
				Match(IF_P);
				State = 6153;
				Match(EXISTS);
				State = 6154;
				qualified_name();
				State = 6155;
				Match(RENAME);
				State = 6156;
				Match(TO);
				State = 6157;
				name();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6159;
				Match(ALTER);
				State = 6160;
				Match(FOREIGN);
				State = 6161;
				Match(TABLE);
				State = 6162;
				relation_expr();
				State = 6163;
				Match(RENAME);
				State = 6164;
				Match(TO);
				State = 6165;
				name();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6167;
				Match(ALTER);
				State = 6168;
				Match(FOREIGN);
				State = 6169;
				Match(TABLE);
				State = 6170;
				Match(IF_P);
				State = 6171;
				Match(EXISTS);
				State = 6172;
				relation_expr();
				State = 6173;
				Match(RENAME);
				State = 6174;
				Match(TO);
				State = 6175;
				name();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6177;
				Match(ALTER);
				State = 6178;
				Match(TABLE);
				State = 6179;
				relation_expr();
				State = 6180;
				Match(RENAME);
				State = 6181;
				opt_column();
				State = 6182;
				name();
				State = 6183;
				Match(TO);
				State = 6184;
				name();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6186;
				Match(ALTER);
				State = 6187;
				Match(TABLE);
				State = 6188;
				Match(IF_P);
				State = 6189;
				Match(EXISTS);
				State = 6190;
				relation_expr();
				State = 6191;
				Match(RENAME);
				State = 6192;
				opt_column();
				State = 6193;
				name();
				State = 6194;
				Match(TO);
				State = 6195;
				name();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6197;
				Match(ALTER);
				State = 6198;
				Match(VIEW);
				State = 6199;
				qualified_name();
				State = 6200;
				Match(RENAME);
				State = 6201;
				opt_column();
				State = 6202;
				name();
				State = 6203;
				Match(TO);
				State = 6204;
				name();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6206;
				Match(ALTER);
				State = 6207;
				Match(VIEW);
				State = 6208;
				Match(IF_P);
				State = 6209;
				Match(EXISTS);
				State = 6210;
				qualified_name();
				State = 6211;
				Match(RENAME);
				State = 6212;
				opt_column();
				State = 6213;
				name();
				State = 6214;
				Match(TO);
				State = 6215;
				name();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6217;
				Match(ALTER);
				State = 6218;
				Match(MATERIALIZED);
				State = 6219;
				Match(VIEW);
				State = 6220;
				qualified_name();
				State = 6221;
				Match(RENAME);
				State = 6222;
				opt_column();
				State = 6223;
				name();
				State = 6224;
				Match(TO);
				State = 6225;
				name();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6227;
				Match(ALTER);
				State = 6228;
				Match(MATERIALIZED);
				State = 6229;
				Match(VIEW);
				State = 6230;
				Match(IF_P);
				State = 6231;
				Match(EXISTS);
				State = 6232;
				qualified_name();
				State = 6233;
				Match(RENAME);
				State = 6234;
				opt_column();
				State = 6235;
				name();
				State = 6236;
				Match(TO);
				State = 6237;
				name();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6239;
				Match(ALTER);
				State = 6240;
				Match(TABLE);
				State = 6241;
				relation_expr();
				State = 6242;
				Match(RENAME);
				State = 6243;
				Match(CONSTRAINT);
				State = 6244;
				name();
				State = 6245;
				Match(TO);
				State = 6246;
				name();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6248;
				Match(ALTER);
				State = 6249;
				Match(TABLE);
				State = 6250;
				Match(IF_P);
				State = 6251;
				Match(EXISTS);
				State = 6252;
				relation_expr();
				State = 6253;
				Match(RENAME);
				State = 6254;
				Match(CONSTRAINT);
				State = 6255;
				name();
				State = 6256;
				Match(TO);
				State = 6257;
				name();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6259;
				Match(ALTER);
				State = 6260;
				Match(FOREIGN);
				State = 6261;
				Match(TABLE);
				State = 6262;
				relation_expr();
				State = 6263;
				Match(RENAME);
				State = 6264;
				opt_column();
				State = 6265;
				name();
				State = 6266;
				Match(TO);
				State = 6267;
				name();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6269;
				Match(ALTER);
				State = 6270;
				Match(FOREIGN);
				State = 6271;
				Match(TABLE);
				State = 6272;
				Match(IF_P);
				State = 6273;
				Match(EXISTS);
				State = 6274;
				relation_expr();
				State = 6275;
				Match(RENAME);
				State = 6276;
				opt_column();
				State = 6277;
				name();
				State = 6278;
				Match(TO);
				State = 6279;
				name();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6281;
				Match(ALTER);
				State = 6282;
				Match(RULE);
				State = 6283;
				name();
				State = 6284;
				Match(ON);
				State = 6285;
				qualified_name();
				State = 6286;
				Match(RENAME);
				State = 6287;
				Match(TO);
				State = 6288;
				name();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6290;
				Match(ALTER);
				State = 6291;
				Match(TRIGGER);
				State = 6292;
				name();
				State = 6293;
				Match(ON);
				State = 6294;
				qualified_name();
				State = 6295;
				Match(RENAME);
				State = 6296;
				Match(TO);
				State = 6297;
				name();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6299;
				Match(ALTER);
				State = 6300;
				Match(EVENT);
				State = 6301;
				Match(TRIGGER);
				State = 6302;
				name();
				State = 6303;
				Match(RENAME);
				State = 6304;
				Match(TO);
				State = 6305;
				name();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6307;
				Match(ALTER);
				State = 6308;
				Match(ROLE);
				State = 6309;
				roleid();
				State = 6310;
				Match(RENAME);
				State = 6311;
				Match(TO);
				State = 6312;
				roleid();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6314;
				Match(ALTER);
				State = 6315;
				Match(USER);
				State = 6316;
				roleid();
				State = 6317;
				Match(RENAME);
				State = 6318;
				Match(TO);
				State = 6319;
				roleid();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6321;
				Match(ALTER);
				State = 6322;
				Match(TABLESPACE);
				State = 6323;
				name();
				State = 6324;
				Match(RENAME);
				State = 6325;
				Match(TO);
				State = 6326;
				name();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6328;
				Match(ALTER);
				State = 6329;
				Match(STATISTICS);
				State = 6330;
				any_name();
				State = 6331;
				Match(RENAME);
				State = 6332;
				Match(TO);
				State = 6333;
				name();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6335;
				Match(ALTER);
				State = 6336;
				Match(TEXT_P);
				State = 6337;
				Match(SEARCH);
				State = 6338;
				Match(PARSER);
				State = 6339;
				any_name();
				State = 6340;
				Match(RENAME);
				State = 6341;
				Match(TO);
				State = 6342;
				name();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6344;
				Match(ALTER);
				State = 6345;
				Match(TEXT_P);
				State = 6346;
				Match(SEARCH);
				State = 6347;
				Match(DICTIONARY);
				State = 6348;
				any_name();
				State = 6349;
				Match(RENAME);
				State = 6350;
				Match(TO);
				State = 6351;
				name();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6353;
				Match(ALTER);
				State = 6354;
				Match(TEXT_P);
				State = 6355;
				Match(SEARCH);
				State = 6356;
				Match(TEMPLATE);
				State = 6357;
				any_name();
				State = 6358;
				Match(RENAME);
				State = 6359;
				Match(TO);
				State = 6360;
				name();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6362;
				Match(ALTER);
				State = 6363;
				Match(TEXT_P);
				State = 6364;
				Match(SEARCH);
				State = 6365;
				Match(CONFIGURATION);
				State = 6366;
				any_name();
				State = 6367;
				Match(RENAME);
				State = 6368;
				Match(TO);
				State = 6369;
				name();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6371;
				Match(ALTER);
				State = 6372;
				Match(TYPE_P);
				State = 6373;
				any_name();
				State = 6374;
				Match(RENAME);
				State = 6375;
				Match(TO);
				State = 6376;
				name();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 6378;
				Match(ALTER);
				State = 6379;
				Match(TYPE_P);
				State = 6380;
				any_name();
				State = 6381;
				Match(RENAME);
				State = 6382;
				Match(ATTRIBUTE);
				State = 6383;
				name();
				State = 6384;
				Match(TO);
				State = 6385;
				name();
				State = 6386;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_columnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		public Opt_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_column(this);
		}
	}

	[RuleVersion(0)]
	public Opt_columnContext opt_column() {
		Opt_columnContext _localctx = new Opt_columnContext(Context, State);
		EnterRule(_localctx, 724, RULE_opt_column);
		try {
			State = 6392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6390;
				Match(COLUMN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_set_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		public Opt_set_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_set_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_set_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_set_data(this);
		}
	}

	[RuleVersion(0)]
	public Opt_set_dataContext opt_set_data() {
		Opt_set_dataContext _localctx = new Opt_set_dataContext(Context, State);
		EnterRule(_localctx, 726, RULE_opt_set_data);
		try {
			State = 6397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6394;
				Match(SET);
				State = 6395;
				Match(DATA_P);
				}
				break;
			case TYPE_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectdependsstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_noContext opt_no() {
			return GetRuleContext<Opt_noContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(PostgreSQLParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(PostgreSQLParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		public AlterobjectdependsstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectdependsstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectdependsstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectdependsstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectdependsstmtContext alterobjectdependsstmt() {
		AlterobjectdependsstmtContext _localctx = new AlterobjectdependsstmtContext(Context, State);
		EnterRule(_localctx, 728, RULE_alterobjectdependsstmt);
		try {
			State = 6456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6399;
				Match(ALTER);
				State = 6400;
				Match(FUNCTION);
				State = 6401;
				function_with_argtypes();
				State = 6402;
				opt_no();
				State = 6403;
				Match(DEPENDS);
				State = 6404;
				Match(ON);
				State = 6405;
				Match(EXTENSION);
				State = 6406;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6408;
				Match(ALTER);
				State = 6409;
				Match(PROCEDURE);
				State = 6410;
				function_with_argtypes();
				State = 6411;
				opt_no();
				State = 6412;
				Match(DEPENDS);
				State = 6413;
				Match(ON);
				State = 6414;
				Match(EXTENSION);
				State = 6415;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6417;
				Match(ALTER);
				State = 6418;
				Match(ROUTINE);
				State = 6419;
				function_with_argtypes();
				State = 6420;
				opt_no();
				State = 6421;
				Match(DEPENDS);
				State = 6422;
				Match(ON);
				State = 6423;
				Match(EXTENSION);
				State = 6424;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6426;
				Match(ALTER);
				State = 6427;
				Match(TRIGGER);
				State = 6428;
				name();
				State = 6429;
				Match(ON);
				State = 6430;
				qualified_name();
				State = 6431;
				opt_no();
				State = 6432;
				Match(DEPENDS);
				State = 6433;
				Match(ON);
				State = 6434;
				Match(EXTENSION);
				State = 6435;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6437;
				Match(ALTER);
				State = 6438;
				Match(MATERIALIZED);
				State = 6439;
				Match(VIEW);
				State = 6440;
				qualified_name();
				State = 6441;
				opt_no();
				State = 6442;
				Match(DEPENDS);
				State = 6443;
				Match(ON);
				State = 6444;
				Match(EXTENSION);
				State = 6445;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6447;
				Match(ALTER);
				State = 6448;
				Match(INDEX);
				State = 6449;
				qualified_name();
				State = 6450;
				opt_no();
				State = 6451;
				Match(DEPENDS);
				State = 6452;
				Match(ON);
				State = 6453;
				Match(EXTENSION);
				State = 6454;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_noContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_noContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_no; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_no(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_no(this);
		}
	}

	[RuleVersion(0)]
	public Opt_noContext opt_no() {
		Opt_noContext _localctx = new Opt_noContext(Context, State);
		EnterRule(_localctx, 730, RULE_opt_no);
		try {
			State = 6460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6458;
				Match(NO);
				}
				break;
			case DEPENDS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterobjectschemastmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public AlterobjectschemastmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterobjectschemastmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterobjectschemastmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterobjectschemastmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterobjectschemastmtContext alterobjectschemastmt() {
		AlterobjectschemastmtContext _localctx = new AlterobjectschemastmtContext(Context, State);
		EnterRule(_localctx, 732, RULE_alterobjectschemastmt);
		try {
			State = 6679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6462;
				Match(ALTER);
				State = 6463;
				Match(AGGREGATE);
				State = 6464;
				aggregate_with_argtypes();
				State = 6465;
				Match(SET);
				State = 6466;
				Match(SCHEMA);
				State = 6467;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6469;
				Match(ALTER);
				State = 6470;
				Match(COLLATION);
				State = 6471;
				any_name();
				State = 6472;
				Match(SET);
				State = 6473;
				Match(SCHEMA);
				State = 6474;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6476;
				Match(ALTER);
				State = 6477;
				Match(CONVERSION_P);
				State = 6478;
				any_name();
				State = 6479;
				Match(SET);
				State = 6480;
				Match(SCHEMA);
				State = 6481;
				name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6483;
				Match(ALTER);
				State = 6484;
				Match(DOMAIN_P);
				State = 6485;
				any_name();
				State = 6486;
				Match(SET);
				State = 6487;
				Match(SCHEMA);
				State = 6488;
				name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6490;
				Match(ALTER);
				State = 6491;
				Match(EXTENSION);
				State = 6492;
				name();
				State = 6493;
				Match(SET);
				State = 6494;
				Match(SCHEMA);
				State = 6495;
				name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6497;
				Match(ALTER);
				State = 6498;
				Match(FUNCTION);
				State = 6499;
				function_with_argtypes();
				State = 6500;
				Match(SET);
				State = 6501;
				Match(SCHEMA);
				State = 6502;
				name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6504;
				Match(ALTER);
				State = 6505;
				Match(OPERATOR);
				State = 6506;
				operator_with_argtypes();
				State = 6507;
				Match(SET);
				State = 6508;
				Match(SCHEMA);
				State = 6509;
				name();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6511;
				Match(ALTER);
				State = 6512;
				Match(OPERATOR);
				State = 6513;
				Match(CLASS);
				State = 6514;
				any_name();
				State = 6515;
				Match(USING);
				State = 6516;
				name();
				State = 6517;
				Match(SET);
				State = 6518;
				Match(SCHEMA);
				State = 6519;
				name();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6521;
				Match(ALTER);
				State = 6522;
				Match(OPERATOR);
				State = 6523;
				Match(FAMILY);
				State = 6524;
				any_name();
				State = 6525;
				Match(USING);
				State = 6526;
				name();
				State = 6527;
				Match(SET);
				State = 6528;
				Match(SCHEMA);
				State = 6529;
				name();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6531;
				Match(ALTER);
				State = 6532;
				Match(PROCEDURE);
				State = 6533;
				function_with_argtypes();
				State = 6534;
				Match(SET);
				State = 6535;
				Match(SCHEMA);
				State = 6536;
				name();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6538;
				Match(ALTER);
				State = 6539;
				Match(ROUTINE);
				State = 6540;
				function_with_argtypes();
				State = 6541;
				Match(SET);
				State = 6542;
				Match(SCHEMA);
				State = 6543;
				name();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6545;
				Match(ALTER);
				State = 6546;
				Match(TABLE);
				State = 6547;
				relation_expr();
				State = 6548;
				Match(SET);
				State = 6549;
				Match(SCHEMA);
				State = 6550;
				name();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6552;
				Match(ALTER);
				State = 6553;
				Match(TABLE);
				State = 6554;
				Match(IF_P);
				State = 6555;
				Match(EXISTS);
				State = 6556;
				relation_expr();
				State = 6557;
				Match(SET);
				State = 6558;
				Match(SCHEMA);
				State = 6559;
				name();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6561;
				Match(ALTER);
				State = 6562;
				Match(STATISTICS);
				State = 6563;
				any_name();
				State = 6564;
				Match(SET);
				State = 6565;
				Match(SCHEMA);
				State = 6566;
				name();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6568;
				Match(ALTER);
				State = 6569;
				Match(TEXT_P);
				State = 6570;
				Match(SEARCH);
				State = 6571;
				Match(PARSER);
				State = 6572;
				any_name();
				State = 6573;
				Match(SET);
				State = 6574;
				Match(SCHEMA);
				State = 6575;
				name();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6577;
				Match(ALTER);
				State = 6578;
				Match(TEXT_P);
				State = 6579;
				Match(SEARCH);
				State = 6580;
				Match(DICTIONARY);
				State = 6581;
				any_name();
				State = 6582;
				Match(SET);
				State = 6583;
				Match(SCHEMA);
				State = 6584;
				name();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6586;
				Match(ALTER);
				State = 6587;
				Match(TEXT_P);
				State = 6588;
				Match(SEARCH);
				State = 6589;
				Match(TEMPLATE);
				State = 6590;
				any_name();
				State = 6591;
				Match(SET);
				State = 6592;
				Match(SCHEMA);
				State = 6593;
				name();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6595;
				Match(ALTER);
				State = 6596;
				Match(TEXT_P);
				State = 6597;
				Match(SEARCH);
				State = 6598;
				Match(CONFIGURATION);
				State = 6599;
				any_name();
				State = 6600;
				Match(SET);
				State = 6601;
				Match(SCHEMA);
				State = 6602;
				name();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6604;
				Match(ALTER);
				State = 6605;
				Match(SEQUENCE);
				State = 6606;
				qualified_name();
				State = 6607;
				Match(SET);
				State = 6608;
				Match(SCHEMA);
				State = 6609;
				name();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6611;
				Match(ALTER);
				State = 6612;
				Match(SEQUENCE);
				State = 6613;
				Match(IF_P);
				State = 6614;
				Match(EXISTS);
				State = 6615;
				qualified_name();
				State = 6616;
				Match(SET);
				State = 6617;
				Match(SCHEMA);
				State = 6618;
				name();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6620;
				Match(ALTER);
				State = 6621;
				Match(VIEW);
				State = 6622;
				qualified_name();
				State = 6623;
				Match(SET);
				State = 6624;
				Match(SCHEMA);
				State = 6625;
				name();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6627;
				Match(ALTER);
				State = 6628;
				Match(VIEW);
				State = 6629;
				Match(IF_P);
				State = 6630;
				Match(EXISTS);
				State = 6631;
				qualified_name();
				State = 6632;
				Match(SET);
				State = 6633;
				Match(SCHEMA);
				State = 6634;
				name();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6636;
				Match(ALTER);
				State = 6637;
				Match(MATERIALIZED);
				State = 6638;
				Match(VIEW);
				State = 6639;
				qualified_name();
				State = 6640;
				Match(SET);
				State = 6641;
				Match(SCHEMA);
				State = 6642;
				name();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6644;
				Match(ALTER);
				State = 6645;
				Match(MATERIALIZED);
				State = 6646;
				Match(VIEW);
				State = 6647;
				Match(IF_P);
				State = 6648;
				Match(EXISTS);
				State = 6649;
				qualified_name();
				State = 6650;
				Match(SET);
				State = 6651;
				Match(SCHEMA);
				State = 6652;
				name();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6654;
				Match(ALTER);
				State = 6655;
				Match(FOREIGN);
				State = 6656;
				Match(TABLE);
				State = 6657;
				relation_expr();
				State = 6658;
				Match(SET);
				State = 6659;
				Match(SCHEMA);
				State = 6660;
				name();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6662;
				Match(ALTER);
				State = 6663;
				Match(FOREIGN);
				State = 6664;
				Match(TABLE);
				State = 6665;
				Match(IF_P);
				State = 6666;
				Match(EXISTS);
				State = 6667;
				relation_expr();
				State = 6668;
				Match(SET);
				State = 6669;
				Match(SCHEMA);
				State = 6670;
				name();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6672;
				Match(ALTER);
				State = 6673;
				Match(TYPE_P);
				State = 6674;
				any_name();
				State = 6675;
				Match(SET);
				State = 6676;
				Match(SCHEMA);
				State = 6677;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlteroperatorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AlteroperatorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alteroperatorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlteroperatorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlteroperatorstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlteroperatorstmtContext alteroperatorstmt() {
		AlteroperatorstmtContext _localctx = new AlteroperatorstmtContext(Context, State);
		EnterRule(_localctx, 734, RULE_alteroperatorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6681;
			Match(ALTER);
			State = 6682;
			Match(OPERATOR);
			State = 6683;
			operator_with_argtypes();
			State = 6684;
			Match(SET);
			State = 6685;
			Match(OPEN_PAREN);
			State = 6686;
			operator_def_list();
			State = 6687;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_elemContext[] operator_def_elem() {
			return GetRuleContexts<Operator_def_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_elemContext operator_def_elem(int i) {
			return GetRuleContext<Operator_def_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Operator_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_listContext operator_def_list() {
		Operator_def_listContext _localctx = new Operator_def_listContext(Context, State);
		EnterRule(_localctx, 736, RULE_operator_def_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6689;
			operator_def_elem();
			State = 6694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6690;
				Match(COMMA);
				State = 6691;
				operator_def_elem();
				}
				}
				State = 6696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_argContext operator_def_arg() {
			return GetRuleContext<Operator_def_argContext>(0);
		}
		public Operator_def_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_elem(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_elemContext operator_def_elem() {
		Operator_def_elemContext _localctx = new Operator_def_elemContext(Context, State);
		EnterRule(_localctx, 738, RULE_operator_def_elem);
		try {
			State = 6705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6697;
				collabel();
				State = 6698;
				Match(EQUAL);
				State = 6699;
				Match(NONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6701;
				collabel();
				State = 6702;
				Match(EQUAL);
				State = 6703;
				operator_def_arg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_def_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_typeContext func_type() {
			return GetRuleContext<Func_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Operator_def_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_def_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOperator_def_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOperator_def_arg(this);
		}
	}

	[RuleVersion(0)]
	public Operator_def_argContext operator_def_arg() {
		Operator_def_argContext _localctx = new Operator_def_argContext(Context, State);
		EnterRule(_localctx, 740, RULE_operator_def_arg);
		try {
			State = 6712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6707;
				func_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6708;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6709;
				qual_all_op();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6710;
				numericonly();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6711;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertypestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_def_listContext operator_def_list() {
			return GetRuleContext<Operator_def_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AltertypestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertypestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertypestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertypestmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertypestmtContext altertypestmt() {
		AltertypestmtContext _localctx = new AltertypestmtContext(Context, State);
		EnterRule(_localctx, 742, RULE_altertypestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6714;
			Match(ALTER);
			State = 6715;
			Match(TYPE_P);
			State = 6716;
			any_name();
			State = 6717;
			Match(SET);
			State = 6718;
			Match(OPEN_PAREN);
			State = 6719;
			operator_def_list();
			State = 6720;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterownerstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Aggregate_with_argtypesContext aggregate_with_argtypes() {
			return GetRuleContext<Aggregate_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_with_argtypesContext function_with_argtypes() {
			return GetRuleContext<Function_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_proceduralContext opt_procedural() {
			return GetRuleContext<Opt_proceduralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_with_argtypesContext operator_with_argtypes() {
			return GetRuleContext<Operator_with_argtypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public AlterownerstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterownerstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterownerstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterownerstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterownerstmtContext alterownerstmt() {
		AlterownerstmtContext _localctx = new AlterownerstmtContext(Context, State);
		EnterRule(_localctx, 744, RULE_alterownerstmt);
		try {
			State = 6905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,319,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6722;
				Match(ALTER);
				State = 6723;
				Match(AGGREGATE);
				State = 6724;
				aggregate_with_argtypes();
				State = 6725;
				Match(OWNER);
				State = 6726;
				Match(TO);
				State = 6727;
				rolespec();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6729;
				Match(ALTER);
				State = 6730;
				Match(COLLATION);
				State = 6731;
				any_name();
				State = 6732;
				Match(OWNER);
				State = 6733;
				Match(TO);
				State = 6734;
				rolespec();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6736;
				Match(ALTER);
				State = 6737;
				Match(CONVERSION_P);
				State = 6738;
				any_name();
				State = 6739;
				Match(OWNER);
				State = 6740;
				Match(TO);
				State = 6741;
				rolespec();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6743;
				Match(ALTER);
				State = 6744;
				Match(DATABASE);
				State = 6745;
				name();
				State = 6746;
				Match(OWNER);
				State = 6747;
				Match(TO);
				State = 6748;
				rolespec();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6750;
				Match(ALTER);
				State = 6751;
				Match(DOMAIN_P);
				State = 6752;
				any_name();
				State = 6753;
				Match(OWNER);
				State = 6754;
				Match(TO);
				State = 6755;
				rolespec();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6757;
				Match(ALTER);
				State = 6758;
				Match(FUNCTION);
				State = 6759;
				function_with_argtypes();
				State = 6760;
				Match(OWNER);
				State = 6761;
				Match(TO);
				State = 6762;
				rolespec();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6764;
				Match(ALTER);
				State = 6765;
				opt_procedural();
				State = 6766;
				Match(LANGUAGE);
				State = 6767;
				name();
				State = 6768;
				Match(OWNER);
				State = 6769;
				Match(TO);
				State = 6770;
				rolespec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6772;
				Match(ALTER);
				State = 6773;
				Match(LARGE_P);
				State = 6774;
				Match(OBJECT_P);
				State = 6775;
				numericonly();
				State = 6776;
				Match(OWNER);
				State = 6777;
				Match(TO);
				State = 6778;
				rolespec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6780;
				Match(ALTER);
				State = 6781;
				Match(OPERATOR);
				State = 6782;
				operator_with_argtypes();
				State = 6783;
				Match(OWNER);
				State = 6784;
				Match(TO);
				State = 6785;
				rolespec();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6787;
				Match(ALTER);
				State = 6788;
				Match(OPERATOR);
				State = 6789;
				Match(CLASS);
				State = 6790;
				any_name();
				State = 6791;
				Match(USING);
				State = 6792;
				name();
				State = 6793;
				Match(OWNER);
				State = 6794;
				Match(TO);
				State = 6795;
				rolespec();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6797;
				Match(ALTER);
				State = 6798;
				Match(OPERATOR);
				State = 6799;
				Match(FAMILY);
				State = 6800;
				any_name();
				State = 6801;
				Match(USING);
				State = 6802;
				name();
				State = 6803;
				Match(OWNER);
				State = 6804;
				Match(TO);
				State = 6805;
				rolespec();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6807;
				Match(ALTER);
				State = 6808;
				Match(PROCEDURE);
				State = 6809;
				function_with_argtypes();
				State = 6810;
				Match(OWNER);
				State = 6811;
				Match(TO);
				State = 6812;
				rolespec();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6814;
				Match(ALTER);
				State = 6815;
				Match(ROUTINE);
				State = 6816;
				function_with_argtypes();
				State = 6817;
				Match(OWNER);
				State = 6818;
				Match(TO);
				State = 6819;
				rolespec();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6821;
				Match(ALTER);
				State = 6822;
				Match(SCHEMA);
				State = 6823;
				name();
				State = 6824;
				Match(OWNER);
				State = 6825;
				Match(TO);
				State = 6826;
				rolespec();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6828;
				Match(ALTER);
				State = 6829;
				Match(TYPE_P);
				State = 6830;
				any_name();
				State = 6831;
				Match(OWNER);
				State = 6832;
				Match(TO);
				State = 6833;
				rolespec();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6835;
				Match(ALTER);
				State = 6836;
				Match(TABLESPACE);
				State = 6837;
				name();
				State = 6838;
				Match(OWNER);
				State = 6839;
				Match(TO);
				State = 6840;
				rolespec();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6842;
				Match(ALTER);
				State = 6843;
				Match(STATISTICS);
				State = 6844;
				any_name();
				State = 6845;
				Match(OWNER);
				State = 6846;
				Match(TO);
				State = 6847;
				rolespec();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6849;
				Match(ALTER);
				State = 6850;
				Match(TEXT_P);
				State = 6851;
				Match(SEARCH);
				State = 6852;
				Match(DICTIONARY);
				State = 6853;
				any_name();
				State = 6854;
				Match(OWNER);
				State = 6855;
				Match(TO);
				State = 6856;
				rolespec();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6858;
				Match(ALTER);
				State = 6859;
				Match(TEXT_P);
				State = 6860;
				Match(SEARCH);
				State = 6861;
				Match(CONFIGURATION);
				State = 6862;
				any_name();
				State = 6863;
				Match(OWNER);
				State = 6864;
				Match(TO);
				State = 6865;
				rolespec();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6867;
				Match(ALTER);
				State = 6868;
				Match(FOREIGN);
				State = 6869;
				Match(DATA_P);
				State = 6870;
				Match(WRAPPER);
				State = 6871;
				name();
				State = 6872;
				Match(OWNER);
				State = 6873;
				Match(TO);
				State = 6874;
				rolespec();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6876;
				Match(ALTER);
				State = 6877;
				Match(SERVER);
				State = 6878;
				name();
				State = 6879;
				Match(OWNER);
				State = 6880;
				Match(TO);
				State = 6881;
				rolespec();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6883;
				Match(ALTER);
				State = 6884;
				Match(EVENT);
				State = 6885;
				Match(TRIGGER);
				State = 6886;
				name();
				State = 6887;
				Match(OWNER);
				State = 6888;
				Match(TO);
				State = 6889;
				rolespec();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6891;
				Match(ALTER);
				State = 6892;
				Match(PUBLICATION);
				State = 6893;
				name();
				State = 6894;
				Match(OWNER);
				State = 6895;
				Match(TO);
				State = 6896;
				rolespec();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6898;
				Match(ALTER);
				State = 6899;
				Match(SUBSCRIPTION);
				State = 6900;
				name();
				State = 6901;
				Match(OWNER);
				State = 6902;
				Match(TO);
				State = 6903;
				rolespec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatepublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_publication_for_tablesContext opt_publication_for_tables() {
			return GetRuleContext<Opt_publication_for_tablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		public CreatepublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatepublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatepublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatepublicationstmtContext createpublicationstmt() {
		CreatepublicationstmtContext _localctx = new CreatepublicationstmtContext(Context, State);
		EnterRule(_localctx, 746, RULE_createpublicationstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6907;
			Match(CREATE);
			State = 6908;
			Match(PUBLICATION);
			State = 6909;
			name();
			State = 6910;
			opt_publication_for_tables();
			State = 6911;
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_publication_for_tablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_for_tablesContext publication_for_tables() {
			return GetRuleContext<Publication_for_tablesContext>(0);
		}
		public Opt_publication_for_tablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_publication_for_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_publication_for_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_publication_for_tables(this);
		}
	}

	[RuleVersion(0)]
	public Opt_publication_for_tablesContext opt_publication_for_tables() {
		Opt_publication_for_tablesContext _localctx = new Opt_publication_for_tablesContext(Context, State);
		EnterRule(_localctx, 748, RULE_opt_publication_for_tables);
		try {
			State = 6915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6913;
				publication_for_tables();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_for_tablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		public Publication_for_tablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_for_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_for_tables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_for_tables(this);
		}
	}

	[RuleVersion(0)]
	public Publication_for_tablesContext publication_for_tables() {
		Publication_for_tablesContext _localctx = new Publication_for_tablesContext(Context, State);
		EnterRule(_localctx, 750, RULE_publication_for_tables);
		try {
			State = 6923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6917;
				Match(FOR);
				State = 6918;
				Match(TABLE);
				State = 6919;
				relation_expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6920;
				Match(FOR);
				State = 6921;
				Match(ALL);
				State = 6922;
				Match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterpublicationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		public AlterpublicationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterpublicationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterpublicationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterpublicationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterpublicationstmtContext alterpublicationstmt() {
		AlterpublicationstmtContext _localctx = new AlterpublicationstmtContext(Context, State);
		EnterRule(_localctx, 752, RULE_alterpublicationstmt);
		try {
			State = 6952;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6925;
				Match(ALTER);
				State = 6926;
				Match(PUBLICATION);
				State = 6927;
				name();
				State = 6928;
				Match(SET);
				State = 6929;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6931;
				Match(ALTER);
				State = 6932;
				Match(PUBLICATION);
				State = 6933;
				name();
				State = 6934;
				Match(ADD_P);
				State = 6935;
				Match(TABLE);
				State = 6936;
				relation_expr_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6938;
				Match(ALTER);
				State = 6939;
				Match(PUBLICATION);
				State = 6940;
				name();
				State = 6941;
				Match(SET);
				State = 6942;
				Match(TABLE);
				State = 6943;
				relation_expr_list();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6945;
				Match(ALTER);
				State = 6946;
				Match(PUBLICATION);
				State = 6947;
				name();
				State = 6948;
				Match(DROP);
				State = 6949;
				Match(TABLE);
				State = 6950;
				relation_expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatesubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		public CreatesubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatesubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatesubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatesubscriptionstmtContext createsubscriptionstmt() {
		CreatesubscriptionstmtContext _localctx = new CreatesubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 754, RULE_createsubscriptionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6954;
			Match(CREATE);
			State = 6955;
			Match(SUBSCRIPTION);
			State = 6956;
			name();
			State = 6957;
			Match(CONNECTION);
			State = 6958;
			sconst();
			State = 6959;
			Match(PUBLICATION);
			State = 6960;
			publication_name_list();
			State = 6961;
			opt_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_itemContext[] publication_name_item() {
			return GetRuleContexts<Publication_name_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_itemContext publication_name_item(int i) {
			return GetRuleContext<Publication_name_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Publication_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_listContext publication_name_list() {
		Publication_name_listContext _localctx = new Publication_name_listContext(Context, State);
		EnterRule(_localctx, 756, RULE_publication_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6963;
			publication_name_item();
			State = 6968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6964;
				Match(COMMA);
				State = 6965;
				publication_name_item();
				}
				}
				State = 6970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Publication_name_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Publication_name_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_publication_name_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPublication_name_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPublication_name_item(this);
		}
	}

	[RuleVersion(0)]
	public Publication_name_itemContext publication_name_item() {
		Publication_name_itemContext _localctx = new Publication_name_itemContext(Context, State);
		EnterRule(_localctx, 758, RULE_publication_name_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6971;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_definitionContext opt_definition() {
			return GetRuleContext<Opt_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Publication_name_listContext publication_name_list() {
			return GetRuleContext<Publication_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		public AltersubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersubscriptionstmtContext altersubscriptionstmt() {
		AltersubscriptionstmtContext _localctx = new AltersubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 760, RULE_altersubscriptionstmt);
		try {
			State = 7010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,324,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6973;
				Match(ALTER);
				State = 6974;
				Match(SUBSCRIPTION);
				State = 6975;
				name();
				State = 6976;
				Match(SET);
				State = 6977;
				definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6979;
				Match(ALTER);
				State = 6980;
				Match(SUBSCRIPTION);
				State = 6981;
				name();
				State = 6982;
				Match(CONNECTION);
				State = 6983;
				sconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6985;
				Match(ALTER);
				State = 6986;
				Match(SUBSCRIPTION);
				State = 6987;
				name();
				State = 6988;
				Match(REFRESH);
				State = 6989;
				Match(PUBLICATION);
				State = 6990;
				opt_definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6992;
				Match(ALTER);
				State = 6993;
				Match(SUBSCRIPTION);
				State = 6994;
				name();
				State = 6995;
				Match(SET);
				State = 6996;
				Match(PUBLICATION);
				State = 6997;
				publication_name_list();
				State = 6998;
				opt_definition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7000;
				Match(ALTER);
				State = 7001;
				Match(SUBSCRIPTION);
				State = 7002;
				name();
				State = 7003;
				Match(ENABLE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7005;
				Match(ALTER);
				State = 7006;
				Match(SUBSCRIPTION);
				State = 7007;
				name();
				State = 7008;
				Match(DISABLE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropsubscriptionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public DropsubscriptionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropsubscriptionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropsubscriptionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropsubscriptionstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropsubscriptionstmtContext dropsubscriptionstmt() {
		DropsubscriptionstmtContext _localctx = new DropsubscriptionstmtContext(Context, State);
		EnterRule(_localctx, 762, RULE_dropsubscriptionstmt);
		try {
			State = 7024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7012;
				Match(DROP);
				State = 7013;
				Match(SUBSCRIPTION);
				State = 7014;
				name();
				State = 7015;
				opt_drop_behavior();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7017;
				Match(DROP);
				State = 7018;
				Match(SUBSCRIPTION);
				State = 7019;
				Match(IF_P);
				State = 7020;
				Match(EXISTS);
				State = 7021;
				name();
				State = 7022;
				opt_drop_behavior();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_or_replaceContext opt_or_replace() {
			return GetRuleContext<Opt_or_replaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_insteadContext opt_instead() {
			return GetRuleContext<Opt_insteadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionlistContext ruleactionlist() {
			return GetRuleContext<RuleactionlistContext>(0);
		}
		public RulestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rulestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRulestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRulestmt(this);
		}
	}

	[RuleVersion(0)]
	public RulestmtContext rulestmt() {
		RulestmtContext _localctx = new RulestmtContext(Context, State);
		EnterRule(_localctx, 764, RULE_rulestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7026;
			Match(CREATE);
			State = 7027;
			opt_or_replace();
			State = 7028;
			Match(RULE);
			State = 7029;
			name();
			State = 7030;
			Match(AS);
			State = 7031;
			Match(ON);
			State = 7032;
			@event();
			State = 7033;
			Match(TO);
			State = 7034;
			qualified_name();
			State = 7035;
			where_clause();
			State = 7036;
			Match(DO);
			State = 7037;
			opt_instead();
			State = 7038;
			ruleactionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionmultiContext ruleactionmulti() {
			return GetRuleContext<RuleactionmultiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public RuleactionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionlist(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionlistContext ruleactionlist() {
		RuleactionlistContext _localctx = new RuleactionlistContext(Context, State);
		EnterRule(_localctx, 766, RULE_ruleactionlist);
		try {
			State = 7046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7040;
				Match(NOTHING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7041;
				ruleactionstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7042;
				Match(OPEN_PAREN);
				State = 7043;
				ruleactionmulti();
				State = 7044;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionmultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtOrEmptyContext[] ruleactionstmtOrEmpty() {
			return GetRuleContexts<RuleactionstmtOrEmptyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty(int i) {
			return GetRuleContext<RuleactionstmtOrEmptyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PostgreSQLParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PostgreSQLParser.SEMI, i);
		}
		public RuleactionmultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionmulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionmulti(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionmulti(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionmultiContext ruleactionmulti() {
		RuleactionmultiContext _localctx = new RuleactionmultiContext(Context, State);
		EnterRule(_localctx, 768, RULE_ruleactionmulti);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7048;
			ruleactionstmtOrEmpty();
			State = 7053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 7049;
				Match(SEMI);
				State = 7050;
				ruleactionstmtOrEmpty();
				}
				}
				State = 7055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotifystmtContext notifystmt() {
			return GetRuleContext<NotifystmtContext>(0);
		}
		public RuleactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtContext ruleactionstmt() {
		RuleactionstmtContext _localctx = new RuleactionstmtContext(Context, State);
		EnterRule(_localctx, 770, RULE_ruleactionstmt);
		try {
			State = 7061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7056;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7057;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7058;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7059;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7060;
				notifystmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleactionstmtOrEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuleactionstmtContext ruleactionstmt() {
			return GetRuleContext<RuleactionstmtContext>(0);
		}
		public RuleactionstmtOrEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleactionstmtOrEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRuleactionstmtOrEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRuleactionstmtOrEmpty(this);
		}
	}

	[RuleVersion(0)]
	public RuleactionstmtOrEmptyContext ruleactionstmtOrEmpty() {
		RuleactionstmtOrEmptyContext _localctx = new RuleactionstmtOrEmptyContext(Context, State);
		EnterRule(_localctx, 772, RULE_ruleactionstmtOrEmpty);
		try {
			State = 7065;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7063;
				ruleactionstmt();
				}
				break;
			case CLOSE_PAREN:
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEvent(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 774, RULE_event);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7067;
			_la = TokenStream.LA(1);
			if ( !(_la==SELECT || _la==DELETE_P || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_insteadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		public Opt_insteadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_instead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_instead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_instead(this);
		}
	}

	[RuleVersion(0)]
	public Opt_insteadContext opt_instead() {
		Opt_insteadContext _localctx = new Opt_insteadContext(Context, State);
		EnterRule(_localctx, 776, RULE_opt_instead);
		try {
			State = 7072;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INSTEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7069;
				Match(INSTEAD);
				}
				break;
			case ALSO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7070;
				Match(ALSO);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case WITH:
			case DELETE_P:
			case INSERT:
			case NOTHING:
			case NOTIFY:
			case UPDATE:
			case VALUES:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotifystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Notify_payloadContext notify_payload() {
			return GetRuleContext<Notify_payloadContext>(0);
		}
		public NotifystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notifystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotifystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotifystmt(this);
		}
	}

	[RuleVersion(0)]
	public NotifystmtContext notifystmt() {
		NotifystmtContext _localctx = new NotifystmtContext(Context, State);
		EnterRule(_localctx, 778, RULE_notifystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7074;
			Match(NOTIFY);
			State = 7075;
			colid();
			State = 7076;
			notify_payload();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notify_payloadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Notify_payloadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notify_payload; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNotify_payload(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNotify_payload(this);
		}
	}

	[RuleVersion(0)]
	public Notify_payloadContext notify_payload() {
		Notify_payloadContext _localctx = new Notify_payloadContext(Context, State);
		EnterRule(_localctx, 780, RULE_notify_payload);
		try {
			State = 7081;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7078;
				Match(COMMA);
				State = 7079;
				sconst();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public ListenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterListenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitListenstmt(this);
		}
	}

	[RuleVersion(0)]
	public ListenstmtContext listenstmt() {
		ListenstmtContext _localctx = new ListenstmtContext(Context, State);
		EnterRule(_localctx, 782, RULE_listenstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7083;
			Match(LISTEN);
			State = 7084;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlistenstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public UnlistenstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlistenstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnlistenstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnlistenstmt(this);
		}
	}

	[RuleVersion(0)]
	public UnlistenstmtContext unlistenstmt() {
		UnlistenstmtContext _localctx = new UnlistenstmtContext(Context, State);
		EnterRule(_localctx, 784, RULE_unlistenstmt);
		try {
			State = 7090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7086;
				Match(UNLISTEN);
				State = 7087;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7088;
				Match(UNLISTEN);
				State = 7089;
				Match(STAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_transactionContext opt_transaction() {
			return GetRuleContext<Opt_transactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_transaction_chainContext opt_transaction_chain() {
			return GetRuleContext<Opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
			return GetRuleContext<Transaction_mode_list_or_emptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		public TransactionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransactionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransactionstmt(this);
		}
	}

	[RuleVersion(0)]
	public TransactionstmtContext transactionstmt() {
		TransactionstmtContext _localctx = new TransactionstmtContext(Context, State);
		EnterRule(_localctx, 786, RULE_transactionstmt);
		try {
			State = 7142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7092;
				Match(ABORT_P);
				State = 7093;
				opt_transaction();
				State = 7094;
				opt_transaction_chain();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7096;
				Match(BEGIN_P);
				State = 7097;
				opt_transaction();
				State = 7098;
				transaction_mode_list_or_empty();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7100;
				Match(START);
				State = 7101;
				Match(TRANSACTION);
				State = 7102;
				transaction_mode_list_or_empty();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7103;
				Match(COMMIT);
				State = 7104;
				opt_transaction();
				State = 7105;
				opt_transaction_chain();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7107;
				Match(END_P);
				State = 7108;
				opt_transaction();
				State = 7109;
				opt_transaction_chain();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7111;
				Match(ROLLBACK);
				State = 7112;
				opt_transaction();
				State = 7113;
				opt_transaction_chain();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7115;
				Match(SAVEPOINT);
				State = 7116;
				colid();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7117;
				Match(RELEASE);
				State = 7118;
				Match(SAVEPOINT);
				State = 7119;
				colid();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7120;
				Match(RELEASE);
				State = 7121;
				colid();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7122;
				Match(ROLLBACK);
				State = 7123;
				opt_transaction();
				State = 7124;
				Match(TO);
				State = 7125;
				Match(SAVEPOINT);
				State = 7126;
				colid();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7128;
				Match(ROLLBACK);
				State = 7129;
				opt_transaction();
				State = 7130;
				Match(TO);
				State = 7131;
				colid();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7133;
				Match(PREPARE);
				State = 7134;
				Match(TRANSACTION);
				State = 7135;
				sconst();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7136;
				Match(COMMIT);
				State = 7137;
				Match(PREPARED);
				State = 7138;
				sconst();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7139;
				Match(ROLLBACK);
				State = 7140;
				Match(PREPARED);
				State = 7141;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_transactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOMIC() { return GetToken(PostgreSQLParser.ATOMIC, 0); }
		public Opt_transactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_transaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_transaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_transaction(this);
		}
	}

	[RuleVersion(0)]
	public Opt_transactionContext opt_transaction() {
		Opt_transactionContext _localctx = new Opt_transactionContext(Context, State);
		EnterRule(_localctx, 788, RULE_opt_transaction);
		try {
			State = 7148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WORK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7144;
				Match(WORK);
				}
				break;
			case TRANSACTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7145;
				Match(TRANSACTION);
				}
				break;
			case ATOMIC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7146;
				Match(ATOMIC);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case CREATE:
			case DEFERRABLE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case NOT:
			case SELECT:
			case TABLE:
			case TO:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case ISOLATION:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case READ:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Iso_levelContext iso_level() {
			return GetRuleContext<Iso_levelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Transaction_mode_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_item(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_itemContext transaction_mode_item() {
		Transaction_mode_itemContext _localctx = new Transaction_mode_itemContext(Context, State);
		EnterRule(_localctx, 790, RULE_transaction_mode_item);
		try {
			State = 7160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7150;
				Match(ISOLATION);
				State = 7151;
				Match(LEVEL);
				State = 7152;
				iso_level();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7153;
				Match(READ);
				State = 7154;
				Match(ONLY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7155;
				Match(READ);
				State = 7156;
				Match(WRITE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7157;
				Match(DEFERRABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7158;
				Match(NOT);
				State = 7159;
				Match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_itemContext[] transaction_mode_item() {
			return GetRuleContexts<Transaction_mode_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_itemContext transaction_mode_item(int i) {
			return GetRuleContext<Transaction_mode_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_listContext transaction_mode_list() {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(Context, State);
		EnterRule(_localctx, 792, RULE_transaction_mode_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7162;
			transaction_mode_item();
			State = 7169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA || _la==DEFERRABLE || _la==NOT || _la==ISOLATION || _la==READ) {
				{
				{
				State = 7164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7163;
					Match(COMMA);
					}
				}

				State = 7166;
				transaction_mode_item();
				}
				}
				State = 7171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_mode_list_or_emptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Transaction_mode_listContext transaction_mode_list() {
			return GetRuleContext<Transaction_mode_listContext>(0);
		}
		public Transaction_mode_list_or_emptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_mode_list_or_empty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTransaction_mode_list_or_empty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTransaction_mode_list_or_empty(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_mode_list_or_emptyContext transaction_mode_list_or_empty() {
		Transaction_mode_list_or_emptyContext _localctx = new Transaction_mode_list_or_emptyContext(Context, State);
		EnterRule(_localctx, 794, RULE_transaction_mode_list_or_empty);
		try {
			State = 7174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFERRABLE:
			case NOT:
			case ISOLATION:
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7172;
				transaction_mode_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_transaction_chainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_transaction_chainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_transaction_chain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_transaction_chain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_transaction_chain(this);
		}
	}

	[RuleVersion(0)]
	public Opt_transaction_chainContext opt_transaction_chain() {
		Opt_transaction_chainContext _localctx = new Opt_transaction_chainContext(Context, State);
		EnterRule(_localctx, 796, RULE_opt_transaction_chain);
		int _la;
		try {
			State = 7182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7176;
				Match(AND);
				State = 7178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 7177;
					Match(NO);
					}
				}

				State = 7180;
				Match(CHAIN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_check_optionContext opt_check_option() {
			return GetRuleContext<Opt_check_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_column_listContext opt_column_list() {
			return GetRuleContext<Opt_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reloptionsContext opt_reloptions() {
			return GetRuleContext<Opt_reloptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnlistContext columnlist() {
			return GetRuleContext<ColumnlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		public ViewstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterViewstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitViewstmt(this);
		}
	}

	[RuleVersion(0)]
	public ViewstmtContext viewstmt() {
		ViewstmtContext _localctx = new ViewstmtContext(Context, State);
		EnterRule(_localctx, 798, RULE_viewstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7184;
			Match(CREATE);
			State = 7187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 7185;
				Match(OR);
				State = 7186;
				Match(REPLACE);
				}
			}

			State = 7189;
			opttemp();
			State = 7203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VIEW:
				{
				State = 7190;
				Match(VIEW);
				State = 7191;
				qualified_name();
				State = 7192;
				opt_column_list();
				State = 7193;
				opt_reloptions();
				}
				break;
			case RECURSIVE:
				{
				State = 7195;
				Match(RECURSIVE);
				State = 7196;
				Match(VIEW);
				State = 7197;
				qualified_name();
				State = 7198;
				Match(OPEN_PAREN);
				State = 7199;
				columnlist();
				State = 7200;
				Match(CLOSE_PAREN);
				State = 7201;
				opt_reloptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7205;
			Match(AS);
			State = 7206;
			selectstmt();
			State = 7207;
			opt_check_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_check_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		public Opt_check_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_check_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_check_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_check_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_check_optionContext opt_check_option() {
		Opt_check_optionContext _localctx = new Opt_check_optionContext(Context, State);
		EnterRule(_localctx, 800, RULE_opt_check_option);
		int _la;
		try {
			State = 7216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7209;
				Match(WITH);
				State = 7211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 7210;
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 7213;
				Match(CHECK);
				State = 7214;
				Match(OPTION);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_nameContext file_name() {
			return GetRuleContext<File_nameContext>(0);
		}
		public LoadstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLoadstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLoadstmt(this);
		}
	}

	[RuleVersion(0)]
	public LoadstmtContext loadstmt() {
		LoadstmtContext _localctx = new LoadstmtContext(Context, State);
		EnterRule(_localctx, 802, RULE_loadstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7218;
			Match(LOAD);
			State = 7219;
			file_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		public CreatedbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedbstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedbstmtContext createdbstmt() {
		CreatedbstmtContext _localctx = new CreatedbstmtContext(Context, State);
		EnterRule(_localctx, 804, RULE_createdbstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7221;
			Match(CREATE);
			State = 7222;
			Match(DATABASE);
			State = 7223;
			name();
			State = 7224;
			opt_with();
			State = 7225;
			createdb_opt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemsContext createdb_opt_items() {
			return GetRuleContext<Createdb_opt_itemsContext>(0);
		}
		public Createdb_opt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_list(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_listContext createdb_opt_list() {
		Createdb_opt_listContext _localctx = new Createdb_opt_listContext(Context, State);
		EnterRule(_localctx, 806, RULE_createdb_opt_list);
		try {
			State = 7229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7227;
				createdb_opt_items();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemContext[] createdb_opt_item() {
			return GetRuleContexts<Createdb_opt_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_itemContext createdb_opt_item(int i) {
			return GetRuleContext<Createdb_opt_itemContext>(i);
		}
		public Createdb_opt_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_items(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemsContext createdb_opt_items() {
		Createdb_opt_itemsContext _localctx = new Createdb_opt_itemsContext(Context, State);
		EnterRule(_localctx, 808, RULE_createdb_opt_items);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7232;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7231;
					createdb_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,346,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_nameContext createdb_opt_name() {
			return GetRuleContext<Createdb_opt_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_equalContext opt_equal() {
			return GetRuleContext<Opt_equalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignediconstContext signediconst() {
			return GetRuleContext<SignediconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Createdb_opt_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_item(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_itemContext createdb_opt_item() {
		Createdb_opt_itemContext _localctx = new Createdb_opt_itemContext(Context, State);
		EnterRule(_localctx, 810, RULE_createdb_opt_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7236;
			createdb_opt_name();
			State = 7237;
			opt_equal();
			State = 7241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
			case 1:
				{
				State = 7238;
				signediconst();
				}
				break;
			case 2:
				{
				State = 7239;
				opt_boolean_or_string();
				}
				break;
			case 3:
				{
				State = 7240;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Createdb_opt_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		public Createdb_opt_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdb_opt_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedb_opt_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedb_opt_name(this);
		}
	}

	[RuleVersion(0)]
	public Createdb_opt_nameContext createdb_opt_name() {
		Createdb_opt_nameContext _localctx = new Createdb_opt_nameContext(Context, State);
		EnterRule(_localctx, 812, RULE_createdb_opt_name);
		try {
			State = 7251;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7243;
				identifier();
				}
				break;
			case CONNECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7244;
				Match(CONNECTION);
				State = 7245;
				Match(LIMIT);
				}
				break;
			case ENCODING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7246;
				Match(ENCODING);
				}
				break;
			case LOCATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7247;
				Match(LOCATION);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7248;
				Match(OWNER);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7249;
				Match(TABLESPACE);
				}
				break;
			case TEMPLATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7250;
				Match(TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_equalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		public Opt_equalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_equal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_equal(this);
		}
	}

	[RuleVersion(0)]
	public Opt_equalContext opt_equal() {
		Opt_equalContext _localctx = new Opt_equalContext(Context, State);
		EnterRule(_localctx, 814, RULE_opt_equal);
		try {
			State = 7255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7253;
				Match(EQUAL);
				}
				break;
			case PLUS:
			case MINUS:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case Integral:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Createdb_opt_listContext createdb_opt_list() {
			return GetRuleContext<Createdb_opt_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		public AlterdatabasestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasestmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasestmtContext alterdatabasestmt() {
		AlterdatabasestmtContext _localctx = new AlterdatabasestmtContext(Context, State);
		EnterRule(_localctx, 816, RULE_alterdatabasestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7257;
			Match(ALTER);
			State = 7258;
			Match(DATABASE);
			State = 7259;
			name();
			State = 7266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 7260;
				Match(WITH);
				State = 7261;
				createdb_opt_list();
				}
				break;
			case 2:
				{
				State = 7262;
				createdb_opt_list();
				}
				break;
			case 3:
				{
				State = 7263;
				Match(SET);
				State = 7264;
				Match(TABLESPACE);
				State = 7265;
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdatabasesetstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetresetclauseContext setresetclause() {
			return GetRuleContext<SetresetclauseContext>(0);
		}
		public AlterdatabasesetstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdatabasesetstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdatabasesetstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdatabasesetstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdatabasesetstmtContext alterdatabasesetstmt() {
		AlterdatabasesetstmtContext _localctx = new AlterdatabasesetstmtContext(Context, State);
		EnterRule(_localctx, 818, RULE_alterdatabasesetstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7268;
			Match(ALTER);
			State = 7269;
			Match(DATABASE);
			State = 7270;
			name();
			State = 7271;
			setresetclause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropdbstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_withContext opt_with() {
			return GetRuleContext<Opt_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Drop_option_listContext drop_option_list() {
			return GetRuleContext<Drop_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public DropdbstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropdbstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDropdbstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDropdbstmt(this);
		}
	}

	[RuleVersion(0)]
	public DropdbstmtContext dropdbstmt() {
		DropdbstmtContext _localctx = new DropdbstmtContext(Context, State);
		EnterRule(_localctx, 820, RULE_dropdbstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7273;
			Match(DROP);
			State = 7274;
			Match(DATABASE);
			State = 7277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				{
				State = 7275;
				Match(IF_P);
				State = 7276;
				Match(EXISTS);
				}
				break;
			}
			State = 7279;
			name();
			State = 7285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				{
				State = 7280;
				opt_with();
				State = 7281;
				Match(OPEN_PAREN);
				State = 7282;
				drop_option_list();
				State = 7283;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Drop_optionContext[] drop_option() {
			return GetRuleContexts<Drop_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_optionContext drop_option(int i) {
			return GetRuleContext<Drop_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Drop_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Drop_option_listContext drop_option_list() {
		Drop_option_listContext _localctx = new Drop_option_listContext(Context, State);
		EnterRule(_localctx, 822, RULE_drop_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7287;
			drop_option();
			State = 7292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7288;
				Match(COMMA);
				State = 7289;
				drop_option();
				}
				}
				State = 7294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		public Drop_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDrop_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDrop_option(this);
		}
	}

	[RuleVersion(0)]
	public Drop_optionContext drop_option() {
		Drop_optionContext _localctx = new Drop_optionContext(Context, State);
		EnterRule(_localctx, 824, RULE_drop_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7295;
			Match(FORCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltercollationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		public AltercollationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altercollationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltercollationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltercollationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltercollationstmtContext altercollationstmt() {
		AltercollationstmtContext _localctx = new AltercollationstmtContext(Context, State);
		EnterRule(_localctx, 826, RULE_altercollationstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7297;
			Match(ALTER);
			State = 7298;
			Match(COLLATION);
			State = 7299;
			any_name();
			State = 7300;
			Match(REFRESH);
			State = 7301;
			Match(VERSION_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltersystemstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_setContext generic_set() {
			return GetRuleContext<Generic_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		public AltersystemstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altersystemstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltersystemstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltersystemstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltersystemstmtContext altersystemstmt() {
		AltersystemstmtContext _localctx = new AltersystemstmtContext(Context, State);
		EnterRule(_localctx, 828, RULE_altersystemstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7303;
			Match(ALTER);
			State = 7304;
			Match(SYSTEM_P);
			State = 7305;
			_la = TokenStream.LA(1);
			if ( !(_la==RESET || _la==SET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7306;
			generic_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asContext opt_as() {
			return GetRuleContext<Opt_asContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColquallistContext colquallist() {
			return GetRuleContext<ColquallistContext>(0);
		}
		public CreatedomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreatedomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreatedomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreatedomainstmtContext createdomainstmt() {
		CreatedomainstmtContext _localctx = new CreatedomainstmtContext(Context, State);
		EnterRule(_localctx, 830, RULE_createdomainstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7308;
			Match(CREATE);
			State = 7309;
			Match(DOMAIN_P);
			State = 7310;
			any_name();
			State = 7311;
			opt_as();
			State = 7312;
			typename();
			State = 7313;
			colquallist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterdomainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_column_defaultContext alter_column_default() {
			return GetRuleContext<Alter_column_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableconstraintContext tableconstraint() {
			return GetRuleContext<TableconstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_drop_behaviorContext opt_drop_behavior() {
			return GetRuleContext<Opt_drop_behaviorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AlterdomainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterdomainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlterdomainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlterdomainstmt(this);
		}
	}

	[RuleVersion(0)]
	public AlterdomainstmtContext alterdomainstmt() {
		AlterdomainstmtContext _localctx = new AlterdomainstmtContext(Context, State);
		EnterRule(_localctx, 832, RULE_alterdomainstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7315;
			Match(ALTER);
			State = 7316;
			Match(DOMAIN_P);
			State = 7317;
			any_name();
			State = 7339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
			case 1:
				{
				State = 7318;
				alter_column_default();
				}
				break;
			case 2:
				{
				State = 7319;
				Match(DROP);
				State = 7320;
				Match(NOT);
				State = 7321;
				Match(NULL_P);
				}
				break;
			case 3:
				{
				State = 7322;
				Match(SET);
				State = 7323;
				Match(NOT);
				State = 7324;
				Match(NULL_P);
				}
				break;
			case 4:
				{
				State = 7325;
				Match(ADD_P);
				State = 7326;
				tableconstraint();
				}
				break;
			case 5:
				{
				State = 7327;
				Match(DROP);
				State = 7328;
				Match(CONSTRAINT);
				State = 7331;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,354,Context) ) {
				case 1:
					{
					State = 7329;
					Match(IF_P);
					State = 7330;
					Match(EXISTS);
					}
					break;
				}
				State = 7333;
				name();
				State = 7334;
				opt_drop_behavior();
				}
				break;
			case 6:
				{
				State = 7336;
				Match(VALIDATE);
				State = 7337;
				Match(CONSTRAINT);
				State = 7338;
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_asContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public Opt_asContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_as; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_as(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_as(this);
		}
	}

	[RuleVersion(0)]
	public Opt_asContext opt_as() {
		Opt_asContext _localctx = new Opt_asContext(Context, State);
		EnterRule(_localctx, 834, RULE_opt_as);
		try {
			State = 7343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7341;
				Match(AS);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsdictionarystmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AltertsdictionarystmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsdictionarystmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsdictionarystmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsdictionarystmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsdictionarystmtContext altertsdictionarystmt() {
		AltertsdictionarystmtContext _localctx = new AltertsdictionarystmtContext(Context, State);
		EnterRule(_localctx, 836, RULE_altertsdictionarystmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7345;
			Match(ALTER);
			State = 7346;
			Match(TEXT_P);
			State = 7347;
			Match(SEARCH);
			State = 7348;
			Match(DICTIONARY);
			State = 7349;
			any_name();
			State = 7350;
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AltertsconfigurationstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER() { return GetTokens(PostgreSQLParser.ALTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER(int i) {
			return GetToken(PostgreSQLParser.ALTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_withContext any_with() {
			return GetRuleContext<Any_withContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public AltertsconfigurationstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_altertsconfigurationstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAltertsconfigurationstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAltertsconfigurationstmt(this);
		}
	}

	[RuleVersion(0)]
	public AltertsconfigurationstmtContext altertsconfigurationstmt() {
		AltertsconfigurationstmtContext _localctx = new AltertsconfigurationstmtContext(Context, State);
		EnterRule(_localctx, 838, RULE_altertsconfigurationstmt);
		try {
			State = 7424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7352;
				Match(ALTER);
				State = 7353;
				Match(TEXT_P);
				State = 7354;
				Match(SEARCH);
				State = 7355;
				Match(CONFIGURATION);
				State = 7356;
				any_name();
				State = 7357;
				Match(ADD_P);
				State = 7358;
				Match(MAPPING);
				State = 7359;
				Match(FOR);
				State = 7360;
				name_list();
				State = 7361;
				any_with();
				State = 7362;
				any_name_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7364;
				Match(ALTER);
				State = 7365;
				Match(TEXT_P);
				State = 7366;
				Match(SEARCH);
				State = 7367;
				Match(CONFIGURATION);
				State = 7368;
				any_name();
				State = 7369;
				Match(ALTER);
				State = 7370;
				Match(MAPPING);
				State = 7371;
				Match(FOR);
				State = 7372;
				name_list();
				State = 7373;
				any_with();
				State = 7374;
				any_name_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7376;
				Match(ALTER);
				State = 7377;
				Match(TEXT_P);
				State = 7378;
				Match(SEARCH);
				State = 7379;
				Match(CONFIGURATION);
				State = 7380;
				any_name();
				State = 7381;
				Match(ALTER);
				State = 7382;
				Match(MAPPING);
				State = 7383;
				Match(REPLACE);
				State = 7384;
				any_name();
				State = 7385;
				any_with();
				State = 7386;
				any_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7388;
				Match(ALTER);
				State = 7389;
				Match(TEXT_P);
				State = 7390;
				Match(SEARCH);
				State = 7391;
				Match(CONFIGURATION);
				State = 7392;
				any_name();
				State = 7393;
				Match(ALTER);
				State = 7394;
				Match(MAPPING);
				State = 7395;
				Match(FOR);
				State = 7396;
				name_list();
				State = 7397;
				Match(REPLACE);
				State = 7398;
				any_name();
				State = 7399;
				any_with();
				State = 7400;
				any_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7402;
				Match(ALTER);
				State = 7403;
				Match(TEXT_P);
				State = 7404;
				Match(SEARCH);
				State = 7405;
				Match(CONFIGURATION);
				State = 7406;
				any_name();
				State = 7407;
				Match(DROP);
				State = 7408;
				Match(MAPPING);
				State = 7409;
				Match(FOR);
				State = 7410;
				name_list();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7412;
				Match(ALTER);
				State = 7413;
				Match(TEXT_P);
				State = 7414;
				Match(SEARCH);
				State = 7415;
				Match(CONFIGURATION);
				State = 7416;
				any_name();
				State = 7417;
				Match(DROP);
				State = 7418;
				Match(MAPPING);
				State = 7419;
				Match(IF_P);
				State = 7420;
				Match(EXISTS);
				State = 7421;
				Match(FOR);
				State = 7422;
				name_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_withContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Any_withContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_with(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_with(this);
		}
	}

	[RuleVersion(0)]
	public Any_withContext any_with() {
		Any_withContext _localctx = new Any_withContext(Context, State);
		EnterRule(_localctx, 840, RULE_any_with);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7426;
			Match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateconversionstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_defaultContext opt_default() {
			return GetRuleContext<Opt_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext[] any_name() {
			return GetRuleContexts<Any_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name(int i) {
			return GetRuleContext<Any_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext[] sconst() {
			return GetRuleContexts<SconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst(int i) {
			return GetRuleContext<SconstContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		public CreateconversionstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createconversionstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCreateconversionstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCreateconversionstmt(this);
		}
	}

	[RuleVersion(0)]
	public CreateconversionstmtContext createconversionstmt() {
		CreateconversionstmtContext _localctx = new CreateconversionstmtContext(Context, State);
		EnterRule(_localctx, 842, RULE_createconversionstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7428;
			Match(CREATE);
			State = 7429;
			opt_default();
			State = 7430;
			Match(CONVERSION_P);
			State = 7431;
			any_name();
			State = 7432;
			Match(FOR);
			State = 7433;
			sconst();
			State = 7434;
			Match(TO);
			State = 7435;
			sconst();
			State = 7436;
			Match(FROM);
			State = 7437;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cluster_index_specificationContext cluster_index_specification() {
			return GetRuleContext<Cluster_index_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		public ClusterstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterClusterstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitClusterstmt(this);
		}
	}

	[RuleVersion(0)]
	public ClusterstmtContext clusterstmt() {
		ClusterstmtContext _localctx = new ClusterstmtContext(Context, State);
		EnterRule(_localctx, 844, RULE_clusterstmt);
		try {
			State = 7452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,358,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7439;
				Match(CLUSTER);
				State = 7440;
				opt_verbose();
				State = 7441;
				qualified_name();
				State = 7442;
				cluster_index_specification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7444;
				Match(CLUSTER);
				State = 7445;
				opt_verbose();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7446;
				Match(CLUSTER);
				State = 7447;
				opt_verbose();
				State = 7448;
				name();
				State = 7449;
				Match(ON);
				State = 7450;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cluster_index_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cluster_index_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cluster_index_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCluster_index_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCluster_index_specification(this);
		}
	}

	[RuleVersion(0)]
	public Cluster_index_specificationContext cluster_index_specification() {
		Cluster_index_specificationContext _localctx = new Cluster_index_specificationContext(Context, State);
		EnterRule(_localctx, 846, RULE_cluster_index_specification);
		try {
			State = 7457;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7454;
				Match(USING);
				State = 7455;
				name();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VacuumstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fullContext opt_full() {
			return GetRuleContext<Opt_fullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_freezeContext opt_freeze() {
			return GetRuleContext<Opt_freezeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_analyzeContext opt_analyze() {
			return GetRuleContext<Opt_analyzeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return GetRuleContext<Opt_vacuum_relation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public VacuumstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuumstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuumstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuumstmt(this);
		}
	}

	[RuleVersion(0)]
	public VacuumstmtContext vacuumstmt() {
		VacuumstmtContext _localctx = new VacuumstmtContext(Context, State);
		EnterRule(_localctx, 848, RULE_vacuumstmt);
		try {
			State = 7472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7459;
				Match(VACUUM);
				State = 7460;
				opt_full();
				State = 7461;
				opt_freeze();
				State = 7462;
				opt_verbose();
				State = 7463;
				opt_analyze();
				State = 7464;
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7466;
				Match(VACUUM);
				State = 7467;
				Match(OPEN_PAREN);
				State = 7468;
				vac_analyze_option_list();
				State = 7469;
				Match(CLOSE_PAREN);
				State = 7470;
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
			return GetRuleContext<Opt_vacuum_relation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_listContext vac_analyze_option_list() {
			return GetRuleContext<Vac_analyze_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public AnalyzestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyzestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyzestmt(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzestmtContext analyzestmt() {
		AnalyzestmtContext _localctx = new AnalyzestmtContext(Context, State);
		EnterRule(_localctx, 850, RULE_analyzestmt);
		try {
			State = 7484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7474;
				analyze_keyword();
				State = 7475;
				opt_verbose();
				State = 7476;
				opt_vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7478;
				analyze_keyword();
				State = 7479;
				Match(OPEN_PAREN);
				State = 7480;
				vac_analyze_option_list();
				State = 7481;
				Match(CLOSE_PAREN);
				State = 7482;
				opt_vacuum_relation_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_elemContext[] vac_analyze_option_elem() {
			return GetRuleContexts<Vac_analyze_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_elemContext vac_analyze_option_elem(int i) {
			return GetRuleContext<Vac_analyze_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Vac_analyze_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_listContext vac_analyze_option_list() {
		Vac_analyze_option_listContext _localctx = new Vac_analyze_option_listContext(Context, State);
		EnterRule(_localctx, 852, RULE_vac_analyze_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7486;
			vac_analyze_option_elem();
			State = 7491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7487;
				Match(COMMA);
				State = 7488;
				vac_analyze_option_elem();
				}
				}
				State = 7493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Analyze_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		public Analyze_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnalyze_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnalyze_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Analyze_keywordContext analyze_keyword() {
		Analyze_keywordContext _localctx = new Analyze_keywordContext(Context, State);
		EnterRule(_localctx, 854, RULE_analyze_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7494;
			_la = TokenStream.LA(1);
			if ( !(_la==ANALYSE || _la==ANALYZE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_nameContext vac_analyze_option_name() {
			return GetRuleContext<Vac_analyze_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vac_analyze_option_argContext vac_analyze_option_arg() {
			return GetRuleContext<Vac_analyze_option_argContext>(0);
		}
		public Vac_analyze_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_elemContext vac_analyze_option_elem() {
		Vac_analyze_option_elemContext _localctx = new Vac_analyze_option_elemContext(Context, State);
		EnterRule(_localctx, 856, RULE_vac_analyze_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7496;
			vac_analyze_option_name();
			State = 7497;
			vac_analyze_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Vac_analyze_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_nameContext vac_analyze_option_name() {
		Vac_analyze_option_nameContext _localctx = new Vac_analyze_option_nameContext(Context, State);
		EnterRule(_localctx, 858, RULE_vac_analyze_option_name);
		try {
			State = 7501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7499;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7500;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vac_analyze_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Vac_analyze_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vac_analyze_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVac_analyze_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVac_analyze_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Vac_analyze_option_argContext vac_analyze_option_arg() {
		Vac_analyze_option_argContext _localctx = new Vac_analyze_option_argContext(Context, State);
		EnterRule(_localctx, 860, RULE_vac_analyze_option_arg);
		try {
			State = 7506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7503;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7504;
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_analyzeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Opt_analyzeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_analyze; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_analyze(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_analyze(this);
		}
	}

	[RuleVersion(0)]
	public Opt_analyzeContext opt_analyze() {
		Opt_analyzeContext _localctx = new Opt_analyzeContext(Context, State);
		EnterRule(_localctx, 862, RULE_opt_analyze);
		try {
			State = 7510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7508;
				analyze_keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_verboseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Opt_verboseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_verbose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_verbose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_verbose(this);
		}
	}

	[RuleVersion(0)]
	public Opt_verboseContext opt_verbose() {
		Opt_verboseContext _localctx = new Opt_verboseContext(Context, State);
		EnterRule(_localctx, 864, RULE_opt_verbose);
		try {
			State = 7514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERBOSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7512;
				Match(VERBOSE);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		public Opt_fullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_full; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_full(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_full(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fullContext opt_full() {
		Opt_fullContext _localctx = new Opt_fullContext(Context, State);
		EnterRule(_localctx, 866, RULE_opt_full);
		try {
			State = 7518;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7516;
				Match(FULL);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case FREEZE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_freezeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		public Opt_freezeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_freeze; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_freeze(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_freeze(this);
		}
	}

	[RuleVersion(0)]
	public Opt_freezeContext opt_freeze() {
		Opt_freezeContext _localctx = new Opt_freezeContext(Context, State);
		EnterRule(_localctx, 868, RULE_opt_freeze);
		try {
			State = 7522;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FREEZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7520;
				Match(FREEZE);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case DEFAULT:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_name_listContext opt_name_list() {
		Opt_name_listContext _localctx = new Opt_name_listContext(Context, State);
		EnterRule(_localctx, 870, RULE_opt_name_list);
		try {
			State = 7529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7524;
				Match(OPEN_PAREN);
				State = 7525;
				name_list();
				State = 7526;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		public Vacuum_relationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relationContext vacuum_relation() {
		Vacuum_relationContext _localctx = new Vacuum_relationContext(Context, State);
		EnterRule(_localctx, 872, RULE_vacuum_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7531;
			qualified_name();
			State = 7532;
			opt_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vacuum_relation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relationContext[] vacuum_relation() {
			return GetRuleContexts<Vacuum_relationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relationContext vacuum_relation(int i) {
			return GetRuleContext<Vacuum_relationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vacuum_relation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterVacuum_relation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitVacuum_relation_list(this);
		}
	}

	[RuleVersion(0)]
	public Vacuum_relation_listContext vacuum_relation_list() {
		Vacuum_relation_listContext _localctx = new Vacuum_relation_listContext(Context, State);
		EnterRule(_localctx, 874, RULE_vacuum_relation_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7534;
			vacuum_relation();
			State = 7539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7535;
				Match(COMMA);
				State = 7536;
				vacuum_relation();
				}
				}
				State = 7541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_vacuum_relation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Vacuum_relation_listContext vacuum_relation_list() {
			return GetRuleContext<Vacuum_relation_listContext>(0);
		}
		public Opt_vacuum_relation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_vacuum_relation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_vacuum_relation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_vacuum_relation_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_vacuum_relation_listContext opt_vacuum_relation_list() {
		Opt_vacuum_relation_listContext _localctx = new Opt_vacuum_relation_listContext(Context, State);
		EnterRule(_localctx, 876, RULE_opt_vacuum_relation_list);
		try {
			State = 7544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7542;
				vacuum_relation_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplainablestmtContext explainablestmt() {
			return GetRuleContext<ExplainablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_verboseContext opt_verbose() {
			return GetRuleContext<Opt_verboseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_listContext explain_option_list() {
			return GetRuleContext<Explain_option_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ExplainstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainstmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainstmtContext explainstmt() {
		ExplainstmtContext _localctx = new ExplainstmtContext(Context, State);
		EnterRule(_localctx, 878, RULE_explainstmt);
		try {
			State = 7562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7546;
				Match(EXPLAIN);
				State = 7547;
				explainablestmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7548;
				Match(EXPLAIN);
				State = 7549;
				analyze_keyword();
				State = 7550;
				opt_verbose();
				State = 7551;
				explainablestmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7553;
				Match(EXPLAIN);
				State = 7554;
				Match(VERBOSE);
				State = 7555;
				explainablestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7556;
				Match(EXPLAIN);
				State = 7557;
				Match(OPEN_PAREN);
				State = 7558;
				explain_option_list();
				State = 7559;
				Match(CLOSE_PAREN);
				State = 7560;
				explainablestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarecursorstmtContext declarecursorstmt() {
			return GetRuleContext<DeclarecursorstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateasstmtContext createasstmt() {
			return GetRuleContext<CreateasstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatematviewstmtContext creatematviewstmt() {
			return GetRuleContext<CreatematviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefreshmatviewstmtContext refreshmatviewstmt() {
			return GetRuleContext<RefreshmatviewstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecutestmtContext executestmt() {
			return GetRuleContext<ExecutestmtContext>(0);
		}
		public ExplainablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplainablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplainablestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExplainablestmtContext explainablestmt() {
		ExplainablestmtContext _localctx = new ExplainablestmtContext(Context, State);
		EnterRule(_localctx, 880, RULE_explainablestmt);
		try {
			State = 7573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7564;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7565;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7566;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7567;
				deletestmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7568;
				declarecursorstmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7569;
				createasstmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7570;
				creatematviewstmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7571;
				refreshmatviewstmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7572;
				executestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_elemContext[] explain_option_elem() {
			return GetRuleContexts<Explain_option_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_elemContext explain_option_elem(int i) {
			return GetRuleContext<Explain_option_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_listContext explain_option_list() {
		Explain_option_listContext _localctx = new Explain_option_listContext(Context, State);
		EnterRule(_localctx, 882, RULE_explain_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7575;
			explain_option_elem();
			State = 7580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7576;
				Match(COMMA);
				State = 7577;
				explain_option_elem();
				}
				}
				State = 7582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_nameContext explain_option_name() {
			return GetRuleContext<Explain_option_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explain_option_argContext explain_option_arg() {
			return GetRuleContext<Explain_option_argContext>(0);
		}
		public Explain_option_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_elem(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_elemContext explain_option_elem() {
		Explain_option_elemContext _localctx = new Explain_option_elemContext(Context, State);
		EnterRule(_localctx, 884, RULE_explain_option_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7583;
			explain_option_name();
			State = 7584;
			explain_option_arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Analyze_keywordContext analyze_keyword() {
			return GetRuleContext<Analyze_keywordContext>(0);
		}
		public Explain_option_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_name(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_nameContext explain_option_name() {
		Explain_option_nameContext _localctx = new Explain_option_nameContext(Context, State);
		EnterRule(_localctx, 886, RULE_explain_option_name);
		try {
			State = 7588;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7586;
				nonreservedword();
				}
				break;
			case ANALYSE:
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7587;
				analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_option_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_boolean_or_stringContext opt_boolean_or_string() {
			return GetRuleContext<Opt_boolean_or_stringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericonlyContext numericonly() {
			return GetRuleContext<NumericonlyContext>(0);
		}
		public Explain_option_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_option_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplain_option_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplain_option_arg(this);
		}
	}

	[RuleVersion(0)]
	public Explain_option_argContext explain_option_arg() {
		Explain_option_argContext _localctx = new Explain_option_argContext(Context, State);
		EnterRule(_localctx, 888, RULE_explain_option_arg);
		try {
			State = 7593;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case ON:
			case TABLE:
			case TRUE_P:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7590;
				opt_boolean_or_string();
				}
				break;
			case PLUS:
			case MINUS:
			case Integral:
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7591;
				numericonly();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prep_type_clauseContext prep_type_clause() {
			return GetRuleContext<Prep_type_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		public PreparestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparestmtContext preparestmt() {
		PreparestmtContext _localctx = new PreparestmtContext(Context, State);
		EnterRule(_localctx, 890, RULE_preparestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7595;
			Match(PREPARE);
			State = 7596;
			name();
			State = 7597;
			prep_type_clause();
			State = 7598;
			Match(AS);
			State = 7599;
			preparablestmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prep_type_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prep_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prep_type_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPrep_type_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPrep_type_clause(this);
		}
	}

	[RuleVersion(0)]
	public Prep_type_clauseContext prep_type_clause() {
		Prep_type_clauseContext _localctx = new Prep_type_clauseContext(Context, State);
		EnterRule(_localctx, 892, RULE_prep_type_clause);
		try {
			State = 7606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7601;
				Match(OPEN_PAREN);
				State = 7602;
				type_list();
				State = 7603;
				Match(CLOSE_PAREN);
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparablestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertstmtContext insertstmt() {
			return GetRuleContext<InsertstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatestmtContext updatestmt() {
			return GetRuleContext<UpdatestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeletestmtContext deletestmt() {
			return GetRuleContext<DeletestmtContext>(0);
		}
		public PreparablestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparablestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPreparablestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPreparablestmt(this);
		}
	}

	[RuleVersion(0)]
	public PreparablestmtContext preparablestmt() {
		PreparablestmtContext _localctx = new PreparablestmtContext(Context, State);
		EnterRule(_localctx, 894, RULE_preparablestmt);
		try {
			State = 7612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7608;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7609;
				insertstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7610;
				updatestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7611;
				deletestmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecutestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Execute_param_clauseContext execute_param_clause() {
			return GetRuleContext<Execute_param_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OpttempContext opttemp() {
			return GetRuleContext<OpttempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Create_as_targetContext create_as_target() {
			return GetRuleContext<Create_as_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_dataContext opt_with_data() {
			return GetRuleContext<Opt_with_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		public ExecutestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecutestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecutestmt(this);
		}
	}

	[RuleVersion(0)]
	public ExecutestmtContext executestmt() {
		ExecutestmtContext _localctx = new ExecutestmtContext(Context, State);
		EnterRule(_localctx, 896, RULE_executestmt);
		try {
			State = 7641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7614;
				Match(EXECUTE);
				State = 7615;
				name();
				State = 7616;
				execute_param_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7618;
				Match(CREATE);
				State = 7619;
				opttemp();
				State = 7620;
				Match(TABLE);
				State = 7621;
				create_as_target();
				State = 7622;
				Match(AS);
				State = 7623;
				Match(EXECUTE);
				State = 7624;
				name();
				State = 7625;
				execute_param_clause();
				State = 7626;
				opt_with_data();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7628;
				Match(CREATE);
				State = 7629;
				opttemp();
				State = 7630;
				Match(TABLE);
				State = 7631;
				Match(IF_P);
				State = 7632;
				Match(NOT);
				State = 7633;
				Match(EXISTS);
				State = 7634;
				create_as_target();
				State = 7635;
				Match(AS);
				State = 7636;
				Match(EXECUTE);
				State = 7637;
				name();
				State = 7638;
				execute_param_clause();
				State = 7639;
				opt_with_data();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_param_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Execute_param_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_param_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExecute_param_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExecute_param_clause(this);
		}
	}

	[RuleVersion(0)]
	public Execute_param_clauseContext execute_param_clause() {
		Execute_param_clauseContext _localctx = new Execute_param_clauseContext(Context, State);
		EnterRule(_localctx, 898, RULE_execute_param_clause);
		try {
			State = 7648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7643;
				Match(OPEN_PAREN);
				State = 7644;
				expr_list();
				State = 7645;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public DeallocatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeallocatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeallocatestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatestmtContext deallocatestmt() {
		DeallocatestmtContext _localctx = new DeallocatestmtContext(Context, State);
		EnterRule(_localctx, 900, RULE_deallocatestmt);
		try {
			State = 7660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7650;
				Match(DEALLOCATE);
				State = 7651;
				name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7652;
				Match(DEALLOCATE);
				State = 7653;
				Match(PREPARE);
				State = 7654;
				name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7655;
				Match(DEALLOCATE);
				State = 7656;
				Match(ALL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7657;
				Match(DEALLOCATE);
				State = 7658;
				Match(PREPARE);
				State = 7659;
				Match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_targetContext insert_target() {
			return GetRuleContext<Insert_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_restContext insert_rest() {
			return GetRuleContext<Insert_restContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_on_conflictContext opt_on_conflict() {
			return GetRuleContext<Opt_on_conflictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public InsertstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsertstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsertstmt(this);
		}
	}

	[RuleVersion(0)]
	public InsertstmtContext insertstmt() {
		InsertstmtContext _localctx = new InsertstmtContext(Context, State);
		EnterRule(_localctx, 902, RULE_insertstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7662;
			opt_with_clause();
			State = 7663;
			Match(INSERT);
			State = 7664;
			Match(INTO);
			State = 7665;
			insert_target();
			State = 7666;
			insert_rest();
			State = 7667;
			opt_on_conflict();
			State = 7668;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Insert_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_target(this);
		}
	}

	[RuleVersion(0)]
	public Insert_targetContext insert_target() {
		Insert_targetContext _localctx = new Insert_targetContext(Context, State);
		EnterRule(_localctx, 904, RULE_insert_target);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7670;
			qualified_name();
			State = 7673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 7671;
				Match(AS);
				State = 7672;
				colid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_restContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Override_kindContext override_kind() {
			return GetRuleContext<Override_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		public Insert_restContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_rest; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_rest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_rest(this);
		}
	}

	[RuleVersion(0)]
	public Insert_restContext insert_rest() {
		Insert_restContext _localctx = new Insert_restContext(Context, State);
		EnterRule(_localctx, 906, RULE_insert_rest);
		int _la;
		try {
			State = 7694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7675;
				selectstmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7676;
				Match(OVERRIDING);
				State = 7677;
				override_kind();
				State = 7678;
				Match(VALUE_P);
				State = 7679;
				selectstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7681;
				Match(OPEN_PAREN);
				State = 7682;
				insert_column_list();
				State = 7683;
				Match(CLOSE_PAREN);
				State = 7688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OVERRIDING) {
					{
					State = 7684;
					Match(OVERRIDING);
					State = 7685;
					override_kind();
					State = 7686;
					Match(VALUE_P);
					}
				}

				State = 7690;
				selectstmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7692;
				Match(DEFAULT);
				State = 7693;
				Match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Override_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		public Override_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_override_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverride_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverride_kind(this);
		}
	}

	[RuleVersion(0)]
	public Override_kindContext override_kind() {
		Override_kindContext _localctx = new Override_kindContext(Context, State);
		EnterRule(_localctx, 908, RULE_override_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7696;
			_la = TokenStream.LA(1);
			if ( !(_la==USER || _la==SYSTEM_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_listContext : ParserRuleContext {
		public Insert_column_itemContext _insert_column_item;
		public IList<Insert_column_itemContext> _insert_columns = new List<Insert_column_itemContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_itemContext[] insert_column_item() {
			return GetRuleContexts<Insert_column_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_itemContext insert_column_item(int i) {
			return GetRuleContext<Insert_column_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Insert_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_listContext insert_column_list() {
		Insert_column_listContext _localctx = new Insert_column_listContext(Context, State);
		EnterRule(_localctx, 910, RULE_insert_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7698;
			_localctx._insert_column_item = insert_column_item();
			_localctx._insert_columns.Add(_localctx._insert_column_item);
			State = 7703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7699;
				Match(COMMA);
				State = 7700;
				_localctx._insert_column_item = insert_column_item();
				_localctx._insert_columns.Add(_localctx._insert_column_item);
				}
				}
				State = 7705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_column_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Insert_column_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_column_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInsert_column_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInsert_column_item(this);
		}
	}

	[RuleVersion(0)]
	public Insert_column_itemContext insert_column_item() {
		Insert_column_itemContext _localctx = new Insert_column_itemContext(Context, State);
		EnterRule(_localctx, 912, RULE_insert_column_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7706;
			colid();
			State = 7707;
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_on_conflictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_conf_exprContext opt_conf_expr() {
			return GetRuleContext<Opt_conf_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		public Opt_on_conflictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_on_conflict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_on_conflict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_on_conflict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_on_conflictContext opt_on_conflict() {
		Opt_on_conflictContext _localctx = new Opt_on_conflictContext(Context, State);
		EnterRule(_localctx, 914, RULE_opt_on_conflict);
		try {
			State = 7722;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7709;
				Match(ON);
				State = 7710;
				Match(CONFLICT);
				State = 7711;
				opt_conf_expr();
				State = 7712;
				Match(DO);
				State = 7719;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UPDATE:
					{
					State = 7713;
					Match(UPDATE);
					State = 7714;
					Match(SET);
					State = 7715;
					set_clause_list();
					State = 7716;
					where_clause();
					}
					break;
				case NOTHING:
					{
					State = 7718;
					Match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_conf_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_paramsContext index_params() {
			return GetRuleContext<Index_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Opt_conf_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_conf_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_conf_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_conf_expr(this);
		}
	}

	[RuleVersion(0)]
	public Opt_conf_exprContext opt_conf_expr() {
		Opt_conf_exprContext _localctx = new Opt_conf_exprContext(Context, State);
		EnterRule(_localctx, 916, RULE_opt_conf_expr);
		try {
			State = 7733;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7724;
				Match(OPEN_PAREN);
				State = 7725;
				index_params();
				State = 7726;
				Match(CLOSE_PAREN);
				State = 7727;
				where_clause();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7729;
				Match(ON);
				State = 7730;
				Match(CONSTRAINT);
				State = 7731;
				name();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returning_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returning_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReturning_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReturning_clause(this);
		}
	}

	[RuleVersion(0)]
	public Returning_clauseContext returning_clause() {
		Returning_clauseContext _localctx = new Returning_clauseContext(Context, State);
		EnterRule(_localctx, 918, RULE_returning_clause);
		try {
			State = 7738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RETURNING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7735;
				Match(RETURNING);
				State = 7736;
				target_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(PostgreSQLParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext[] alias_clause() {
			return GetRuleContexts<Alias_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause(int i) {
			return GetRuleContext<Alias_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Merge_delete_clauseContext merge_delete_clause() {
			return GetRuleContext<Merge_delete_clauseContext>(0);
		}
		public MergestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMergestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMergestmt(this);
		}
	}

	[RuleVersion(0)]
	public MergestmtContext mergestmt() {
		MergestmtContext _localctx = new MergestmtContext(Context, State);
		EnterRule(_localctx, 920, RULE_mergestmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7740;
			Match(MERGE);
			State = 7742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 7741;
				Match(INTO);
				}
			}

			State = 7744;
			qualified_name();
			State = 7746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027080864595968L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
				{
				State = 7745;
				alias_clause();
				}
			}

			State = 7748;
			Match(USING);
			State = 7751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				{
				State = 7749;
				select_with_parens();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 7750;
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027080864595968L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
				{
				State = 7753;
				alias_clause();
				}
			}

			State = 7756;
			Match(ON);
			State = 7757;
			a_expr();
			State = 7766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,396,Context) ) {
			case 1:
				{
				State = 7758;
				merge_insert_clause();
				State = 7760;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
				case 1:
					{
					State = 7759;
					merge_update_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 7762;
				merge_update_clause();
				State = 7764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
				case 1:
					{
					State = 7763;
					merge_insert_clause();
					}
					break;
				}
				}
				break;
			}
			State = 7769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 7768;
				merge_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Insert_column_listContext insert_column_list() {
			return GetRuleContext<Insert_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_insert_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_insert_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 922, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7771;
			Match(WHEN);
			State = 7772;
			Match(NOT);
			State = 7773;
			Match(MATCHED);
			State = 7776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 7774;
				Match(AND);
				State = 7775;
				a_expr();
				}
			}

			State = 7779;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7778;
				Match(THEN);
				}
			}

			State = 7781;
			Match(INSERT);
			State = 7786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 7782;
				Match(OPEN_PAREN);
				State = 7783;
				insert_column_list();
				State = 7784;
				Match(CLOSE_PAREN);
				}
			}

			State = 7788;
			values_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_update_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_update_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 924, RULE_merge_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7790;
			Match(WHEN);
			State = 7791;
			Match(MATCHED);
			State = 7794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 7792;
				Match(AND);
				State = 7793;
				a_expr();
				}
			}

			State = 7797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7796;
				Match(THEN);
				}
			}

			State = 7799;
			Match(UPDATE);
			State = 7800;
			Match(SET);
			State = 7801;
			set_clause_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_delete_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCHED() { return GetToken(PostgreSQLParser.MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public Merge_delete_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_delete_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMerge_delete_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMerge_delete_clause(this);
		}
	}

	[RuleVersion(0)]
	public Merge_delete_clauseContext merge_delete_clause() {
		Merge_delete_clauseContext _localctx = new Merge_delete_clauseContext(Context, State);
		EnterRule(_localctx, 926, RULE_merge_delete_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7803;
			Match(WHEN);
			State = 7804;
			Match(MATCHED);
			State = 7806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THEN) {
				{
				State = 7805;
				Match(THEN);
				}
			}

			State = 7808;
			Match(DELETE_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeletestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public DeletestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deletestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeletestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeletestmt(this);
		}
	}

	[RuleVersion(0)]
	public DeletestmtContext deletestmt() {
		DeletestmtContext _localctx = new DeletestmtContext(Context, State);
		EnterRule(_localctx, 928, RULE_deletestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7810;
			opt_with_clause();
			State = 7811;
			Match(DELETE_P);
			State = 7812;
			Match(FROM);
			State = 7813;
			relation_expr_opt_alias();
			State = 7814;
			using_clause();
			State = 7815;
			where_or_current_clause();
			State = 7816;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUsing_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUsing_clause(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 930, RULE_using_clause);
		try {
			State = 7821;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7818;
				Match(USING);
				State = 7819;
				from_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WHERE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_listContext relation_expr_list() {
			return GetRuleContext<Relation_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_lockContext opt_lock() {
			return GetRuleContext<Opt_lockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowaitContext opt_nowait() {
			return GetRuleContext<Opt_nowaitContext>(0);
		}
		public LockstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLockstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLockstmt(this);
		}
	}

	[RuleVersion(0)]
	public LockstmtContext lockstmt() {
		LockstmtContext _localctx = new LockstmtContext(Context, State);
		EnterRule(_localctx, 932, RULE_lockstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7823;
			Match(LOCK_P);
			State = 7824;
			opt_table();
			State = 7825;
			relation_expr_list();
			State = 7826;
			opt_lock();
			State = 7827;
			opt_nowait();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_lockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lock_typeContext lock_type() {
			return GetRuleContext<Lock_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		public Opt_lockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_lock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_lock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_lock(this);
		}
	}

	[RuleVersion(0)]
	public Opt_lockContext opt_lock() {
		Opt_lockContext _localctx = new Opt_lockContext(Context, State);
		EnterRule(_localctx, 934, RULE_opt_lock);
		try {
			State = 7834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7829;
				Match(IN_P);
				State = 7830;
				lock_type();
				State = 7831;
				Match(MODE);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLock_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLock_type(this);
		}
	}

	[RuleVersion(0)]
	public Lock_typeContext lock_type() {
		Lock_typeContext _localctx = new Lock_typeContext(Context, State);
		EnterRule(_localctx, 936, RULE_lock_type);
		int _la;
		try {
			State = 7848;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7836;
				Match(ACCESS);
				State = 7837;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7838;
				Match(ROW);
				State = 7839;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHARE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7840;
				Match(SHARE);
				State = 7845;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UPDATE:
					{
					State = 7841;
					Match(UPDATE);
					State = 7842;
					Match(EXCLUSIVE);
					}
					break;
				case ROW:
					{
					State = 7843;
					Match(ROW);
					State = 7844;
					Match(EXCLUSIVE);
					}
					break;
				case MODE:
					break;
				default:
					break;
				}
				}
				break;
			case EXCLUSIVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7847;
				Match(EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nowaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		public Opt_nowaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nowait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nowait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nowait(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nowaitContext opt_nowait() {
		Opt_nowaitContext _localctx = new Opt_nowaitContext(Context, State);
		EnterRule(_localctx, 938, RULE_opt_nowait);
		try {
			State = 7852;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7850;
				Match(NOWAIT);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_nowait_or_skipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		public Opt_nowait_or_skipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_nowait_or_skip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_nowait_or_skip(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_nowait_or_skip(this);
		}
	}

	[RuleVersion(0)]
	public Opt_nowait_or_skipContext opt_nowait_or_skip() {
		Opt_nowait_or_skipContext _localctx = new Opt_nowait_or_skipContext(Context, State);
		EnterRule(_localctx, 940, RULE_opt_nowait_or_skip);
		try {
			State = 7858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7854;
				Match(NOWAIT);
				}
				break;
			case SKIP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7855;
				Match(SKIP_P);
				State = 7856;
				Match(LOCKED);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatestmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_with_clauseContext opt_with_clause() {
			return GetRuleContext<Opt_with_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
			return GetRuleContext<Relation_expr_opt_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_clause_listContext set_clause_list() {
			return GetRuleContext<Set_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_or_current_clauseContext where_or_current_clause() {
			return GetRuleContext<Where_or_current_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returning_clauseContext returning_clause() {
			return GetRuleContext<Returning_clauseContext>(0);
		}
		public UpdatestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUpdatestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUpdatestmt(this);
		}
	}

	[RuleVersion(0)]
	public UpdatestmtContext updatestmt() {
		UpdatestmtContext _localctx = new UpdatestmtContext(Context, State);
		EnterRule(_localctx, 942, RULE_updatestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7860;
			opt_with_clause();
			State = 7861;
			Match(UPDATE);
			State = 7862;
			relation_expr_opt_alias();
			State = 7863;
			Match(SET);
			State = 7864;
			set_clause_list();
			State = 7865;
			from_clause();
			State = 7866;
			where_or_current_clause();
			State = 7867;
			returning_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext[] set_clause() {
			return GetRuleContexts<Set_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_clauseContext set_clause(int i) {
			return GetRuleContext<Set_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Set_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_clause_listContext set_clause_list() {
		Set_clause_listContext _localctx = new Set_clause_listContext(Context, State);
		EnterRule(_localctx, 944, RULE_set_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7869;
			set_clause();
			State = 7874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7870;
				Match(COMMA);
				State = 7871;
				set_clause();
				}
				}
				State = 7876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target() {
			return GetRuleContext<Set_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Set_target_listContext set_target_list() {
			return GetRuleContext<Set_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_clause(this);
		}
	}

	[RuleVersion(0)]
	public Set_clauseContext set_clause() {
		Set_clauseContext _localctx = new Set_clauseContext(Context, State);
		EnterRule(_localctx, 946, RULE_set_clause);
		try {
			State = 7887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7877;
				set_target();
				State = 7878;
				Match(EQUAL);
				State = 7879;
				a_expr();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7881;
				Match(OPEN_PAREN);
				State = 7882;
				set_target_list();
				State = 7883;
				Match(CLOSE_PAREN);
				State = 7884;
				Match(EQUAL);
				State = 7885;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		public Set_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target(this);
		}
	}

	[RuleVersion(0)]
	public Set_targetContext set_target() {
		Set_targetContext _localctx = new Set_targetContext(Context, State);
		EnterRule(_localctx, 948, RULE_set_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7889;
			colid();
			State = 7890;
			opt_indirection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext[] set_target() {
			return GetRuleContexts<Set_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_targetContext set_target(int i) {
			return GetRuleContext<Set_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Set_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSet_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSet_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Set_target_listContext set_target_list() {
		Set_target_listContext _localctx = new Set_target_listContext(Context, State);
		EnterRule(_localctx, 950, RULE_set_target_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7892;
			set_target();
			State = 7897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7893;
				Match(COMMA);
				State = 7894;
				set_target();
				}
				}
				State = 7899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarecursorstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_optionsContext cursor_options() {
			return GetRuleContext<Cursor_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_holdContext opt_hold() {
			return GetRuleContext<Opt_holdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public DeclarecursorstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarecursorstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDeclarecursorstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDeclarecursorstmt(this);
		}
	}

	[RuleVersion(0)]
	public DeclarecursorstmtContext declarecursorstmt() {
		DeclarecursorstmtContext _localctx = new DeclarecursorstmtContext(Context, State);
		EnterRule(_localctx, 952, RULE_declarecursorstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7900;
			Match(DECLARE);
			State = 7901;
			cursor_name();
			State = 7902;
			cursor_options();
			State = 7903;
			Match(CURSOR);
			State = 7904;
			opt_hold();
			State = 7905;
			Match(FOR);
			State = 7906;
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_name(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 954, RULE_cursor_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7908;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(PostgreSQLParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(PostgreSQLParser.NO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCROLL() { return GetTokens(PostgreSQLParser.SCROLL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL(int i) {
			return GetToken(PostgreSQLParser.SCROLL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(PostgreSQLParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(PostgreSQLParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSENSITIVE() { return GetTokens(PostgreSQLParser.INSENSITIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE(int i) {
			return GetToken(PostgreSQLParser.INSENSITIVE, i);
		}
		public Cursor_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_options(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_optionsContext cursor_options() {
		Cursor_optionsContext _localctx = new Cursor_optionsContext(Context, State);
		EnterRule(_localctx, 956, RULE_cursor_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BINARY || _la==INSENSITIVE || _la==NO || _la==SCROLL) {
				{
				State = 7915;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NO:
					{
					State = 7910;
					Match(NO);
					State = 7911;
					Match(SCROLL);
					}
					break;
				case SCROLL:
					{
					State = 7912;
					Match(SCROLL);
					}
					break;
				case BINARY:
					{
					State = 7913;
					Match(BINARY);
					}
					break;
				case INSENSITIVE:
					{
					State = 7914;
					Match(INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 7919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_holdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_holdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_hold; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_hold(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_hold(this);
		}
	}

	[RuleVersion(0)]
	public Opt_holdContext opt_hold() {
		Opt_holdContext _localctx = new Opt_holdContext(Context, State);
		EnterRule(_localctx, 958, RULE_opt_hold);
		try {
			State = 7925;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7921;
				Match(WITH);
				State = 7922;
				Match(HOLD);
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7923;
				Match(WITHOUT);
				State = 7924;
				Match(HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public SelectstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelectstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelectstmt(this);
		}
	}

	[RuleVersion(0)]
	public SelectstmtContext selectstmt() {
		SelectstmtContext _localctx = new SelectstmtContext(Context, State);
		EnterRule(_localctx, 960, RULE_selectstmt);
		try {
			State = 7929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,416,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7927;
				select_no_parens();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7928;
				select_with_parens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_with_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_no_parensContext select_no_parens() {
			return GetRuleContext<Select_no_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Select_with_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_with_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_with_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_with_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_with_parensContext select_with_parens() {
		Select_with_parensContext _localctx = new Select_with_parensContext(Context, State);
		EnterRule(_localctx, 962, RULE_select_with_parens);
		try {
			State = 7939;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,417,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7931;
				Match(OPEN_PAREN);
				State = 7932;
				select_no_parens();
				State = 7933;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7935;
				Match(OPEN_PAREN);
				State = 7936;
				select_with_parens();
				State = 7937;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_no_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_select_limitContext opt_select_limit() {
			return GetRuleContext<Opt_select_limitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_locking_clauseContext opt_for_locking_clause() {
			return GetRuleContext<Opt_for_locking_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Select_no_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_no_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_no_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_no_parens(this);
		}
	}

	[RuleVersion(0)]
	public Select_no_parensContext select_no_parens() {
		Select_no_parensContext _localctx = new Select_no_parensContext(Context, State);
		EnterRule(_localctx, 964, RULE_select_no_parens);
		try {
			State = 7962;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7941;
				select_clause();
				State = 7942;
				opt_sort_clause();
				State = 7949;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
				case 1:
					{
					State = 7943;
					for_locking_clause();
					State = 7944;
					opt_select_limit();
					}
					break;
				case 2:
					{
					State = 7946;
					select_limit();
					State = 7947;
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7951;
				with_clause();
				State = 7952;
				select_clause();
				State = 7953;
				opt_sort_clause();
				State = 7960;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
				case 1:
					{
					State = 7954;
					for_locking_clause();
					State = 7955;
					opt_select_limit();
					}
					break;
				case 2:
					{
					State = 7957;
					select_limit();
					State = 7958;
					opt_for_locking_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public Simple_select_intersectContext first_intersect;
		public IToken union;
		public IToken except;
		public Simple_select_intersectContext second_intersect;
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_intersectContext[] simple_select_intersect() {
			return GetRuleContexts<Simple_select_intersectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_intersectContext simple_select_intersect(int i) {
			return GetRuleContext<Simple_select_intersectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext[] all_or_distinct() {
			return GetRuleContexts<All_or_distinctContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext all_or_distinct(int i) {
			return GetRuleContext<All_or_distinctContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(PostgreSQLParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(PostgreSQLParser.UNION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT() { return GetTokens(PostgreSQLParser.EXCEPT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT(int i) {
			return GetToken(PostgreSQLParser.EXCEPT, i);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 966, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7964;
			_localctx.first_intersect = simple_select_intersect();
			State = 7974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXCEPT || _la==UNION) {
				{
				{
				State = 7967;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNION:
					{
					State = 7965;
					_localctx.union = Match(UNION);
					}
					break;
				case EXCEPT:
					{
					State = 7966;
					_localctx.except = Match(EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7969;
				all_or_distinct();
				State = 7970;
				_localctx.second_intersect = simple_select_intersect();
				}
				}
				State = 7976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_intersectContext : ParserRuleContext {
		public Simple_select_pramaryContext first_pramary;
		public IToken intersect;
		public Simple_select_pramaryContext second_pramary;
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_pramaryContext[] simple_select_pramary() {
			return GetRuleContexts<Simple_select_pramaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_select_pramaryContext simple_select_pramary(int i) {
			return GetRuleContext<Simple_select_pramaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext[] all_or_distinct() {
			return GetRuleContexts<All_or_distinctContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public All_or_distinctContext all_or_distinct(int i) {
			return GetRuleContext<All_or_distinctContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT() { return GetTokens(PostgreSQLParser.INTERSECT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT(int i) {
			return GetToken(PostgreSQLParser.INTERSECT, i);
		}
		public Simple_select_intersectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_intersect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_intersect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_intersect(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_intersectContext simple_select_intersect() {
		Simple_select_intersectContext _localctx = new Simple_select_intersectContext(Context, State);
		EnterRule(_localctx, 968, RULE_simple_select_intersect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7977;
			_localctx.first_pramary = simple_select_pramary();
			State = 7984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTERSECT) {
				{
				{
				State = 7978;
				_localctx.intersect = Match(INTERSECT);
				State = 7979;
				all_or_distinct();
				State = 7980;
				_localctx.second_pramary = simple_select_pramary();
				}
				}
				State = 7986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_select_pramaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext[] into_clause() {
			return GetRuleContexts<Into_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext into_clause(int i) {
			return GetRuleContext<Into_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_all_clauseContext opt_all_clause() {
			return GetRuleContext<Opt_all_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_target_listContext opt_target_list() {
			return GetRuleContext<Opt_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Distinct_clauseContext distinct_clause() {
			return GetRuleContext<Distinct_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public Simple_select_pramaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_select_pramary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimple_select_pramary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimple_select_pramary(this);
		}
	}

	[RuleVersion(0)]
	public Simple_select_pramaryContext simple_select_pramary() {
		Simple_select_pramaryContext _localctx = new Simple_select_pramaryContext(Context, State);
		EnterRule(_localctx, 970, RULE_simple_select_pramary);
		try {
			State = 8008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 7987;
				Match(SELECT);
				State = 7995;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Eof:
				case OPEN_PAREN:
				case CLOSE_PAREN:
				case SEMI:
				case STAR:
				case PLUS:
				case MINUS:
				case PARAM:
				case Operator:
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ARRAY:
				case CASE:
				case CAST:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DO:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case INTERSECT:
				case INTO:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case TABLE:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MERGE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case LOOP:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case BinaryStringConstant:
				case HexadecimalStringConstant:
				case Integral:
				case Numeric:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
				case MetaCommand:
				case EscapeStringConstant:
					{
					State = 7988;
					opt_all_clause();
					State = 7989;
					into_clause();
					State = 7990;
					opt_target_list();
					}
					break;
				case DISTINCT:
					{
					State = 7992;
					distinct_clause();
					State = 7993;
					target_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7997;
				into_clause();
				State = 7998;
				from_clause();
				State = 7999;
				where_clause();
				State = 8000;
				group_clause();
				State = 8001;
				having_clause();
				State = 8002;
				window_clause();
				}
				}
				break;
			case VALUES:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8004;
				values_clause();
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8005;
				Match(TABLE);
				State = 8006;
				relation_expr();
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8007;
				select_with_parens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cte_listContext cte_list() {
			return GetRuleContext<Cte_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		public With_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWith_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWith_clause(this);
		}
	}

	[RuleVersion(0)]
	public With_clauseContext with_clause() {
		With_clauseContext _localctx = new With_clauseContext(Context, State);
		EnterRule(_localctx, 972, RULE_with_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8010;
			Match(WITH);
			State = 8012;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				{
				State = 8011;
				Match(RECURSIVE);
				}
				break;
			}
			State = 8014;
			cte_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cte_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_exprContext[] common_table_expr() {
			return GetRuleContexts<Common_table_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Common_table_exprContext common_table_expr(int i) {
			return GetRuleContext<Common_table_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Cte_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cte_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCte_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCte_list(this);
		}
	}

	[RuleVersion(0)]
	public Cte_listContext cte_list() {
		Cte_listContext _localctx = new Cte_listContext(Context, State);
		EnterRule(_localctx, 974, RULE_cte_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8016;
			common_table_expr();
			State = 8021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8017;
				Match(COMMA);
				State = 8018;
				common_table_expr();
				}
				}
				State = 8023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_table_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_name_listContext opt_name_list() {
			return GetRuleContext<Opt_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_materializedContext opt_materialized() {
			return GetRuleContext<Opt_materializedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreparablestmtContext preparablestmt() {
			return GetRuleContext<PreparablestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Common_table_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_table_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCommon_table_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCommon_table_expr(this);
		}
	}

	[RuleVersion(0)]
	public Common_table_exprContext common_table_expr() {
		Common_table_exprContext _localctx = new Common_table_exprContext(Context, State);
		EnterRule(_localctx, 976, RULE_common_table_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8024;
			name();
			State = 8025;
			opt_name_list();
			State = 8026;
			Match(AS);
			State = 8027;
			opt_materialized();
			State = 8028;
			Match(OPEN_PAREN);
			State = 8029;
			preparablestmt();
			State = 8030;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_materializedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public Opt_materializedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_materialized; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_materialized(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_materialized(this);
		}
	}

	[RuleVersion(0)]
	public Opt_materializedContext opt_materialized() {
		Opt_materializedContext _localctx = new Opt_materializedContext(Context, State);
		EnterRule(_localctx, 978, RULE_opt_materialized);
		try {
			State = 8036;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATERIALIZED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8032;
				Match(MATERIALIZED);
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8033;
				Match(NOT);
				State = 8034;
				Match(MATERIALIZED);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_with_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public With_clauseContext with_clause() {
			return GetRuleContext<With_clauseContext>(0);
		}
		public Opt_with_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_with_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_with_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_with_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_with_clauseContext opt_with_clause() {
		Opt_with_clauseContext _localctx = new Opt_with_clauseContext(Context, State);
		EnterRule(_localctx, 980, RULE_opt_with_clause);
		try {
			State = 8040;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8038;
				with_clause();
				}
				break;
			case DELETE_P:
			case INSERT:
			case UPDATE:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_strictContext opt_strict() {
			return GetRuleContext<Opt_strictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpttempTableNameContext opttempTableName() {
			return GetRuleContext<OpttempTableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInto_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInto_clause(this);
		}
	}

	[RuleVersion(0)]
	public Into_clauseContext into_clause() {
		Into_clauseContext _localctx = new Into_clauseContext(Context, State);
		EnterRule(_localctx, 982, RULE_into_clause);
		try {
			State = 8050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8042;
				Match(INTO);
				State = 8047;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
				case 1:
					{
					State = 8043;
					opt_strict();
					State = 8044;
					opttempTableName();
					}
					break;
				case 2:
					{
					State = 8046;
					into_target();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_strictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_strictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_strict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_strict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_strict(this);
		}
	}

	[RuleVersion(0)]
	public Opt_strictContext opt_strict() {
		Opt_strictContext _localctx = new Opt_strictContext(Context, State);
		EnterRule(_localctx, 984, RULE_opt_strict);
		try {
			State = 8054;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8053;
				Match(STRICT_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttempTableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_tableContext opt_table() {
			return GetRuleContext<Opt_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public OpttempTableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttempTableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttempTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttempTableName(this);
		}
	}

	[RuleVersion(0)]
	public OpttempTableNameContext opttempTableName() {
		OpttempTableNameContext _localctx = new OpttempTableNameContext(Context, State);
		EnterRule(_localctx, 986, RULE_opttempTableName);
		int _la;
		try {
			State = 8070;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					State = 8056;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 8059;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8060;
				opt_table();
				State = 8061;
				qualified_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8063;
				Match(UNLOGGED);
				State = 8064;
				opt_table();
				State = 8065;
				qualified_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8067;
				Match(TABLE);
				State = 8068;
				qualified_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8069;
				qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		public Opt_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_table(this);
		}
	}

	[RuleVersion(0)]
	public Opt_tableContext opt_table() {
		Opt_tableContext _localctx = new Opt_tableContext(Context, State);
		EnterRule(_localctx, 988, RULE_opt_table);
		try {
			State = 8074;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8072;
				Match(TABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_or_distinctContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		public All_or_distinctContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_or_distinct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_or_distinct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_or_distinct(this);
		}
	}

	[RuleVersion(0)]
	public All_or_distinctContext all_or_distinct() {
		All_or_distinctContext _localctx = new All_or_distinctContext(Context, State);
		EnterRule(_localctx, 990, RULE_all_or_distinct);
		try {
			State = 8079;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8076;
				Match(ALL);
				}
				break;
			case DISTINCT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8077;
				Match(DISTINCT);
				}
				break;
			case OPEN_PAREN:
			case SELECT:
			case TABLE:
			case VALUES:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Distinct_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Distinct_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distinct_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDistinct_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDistinct_clause(this);
		}
	}

	[RuleVersion(0)]
	public Distinct_clauseContext distinct_clause() {
		Distinct_clauseContext _localctx = new Distinct_clauseContext(Context, State);
		EnterRule(_localctx, 992, RULE_distinct_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8081;
			Match(DISTINCT);
			State = 8087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 8082;
				Match(ON);
				State = 8083;
				Match(OPEN_PAREN);
				State = 8084;
				expr_list();
				State = 8085;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_all_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Opt_all_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_all_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_all_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_all_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_all_clauseContext opt_all_clause() {
		Opt_all_clauseContext _localctx = new Opt_all_clauseContext(Context, State);
		EnterRule(_localctx, 994, RULE_opt_all_clause);
		try {
			State = 8091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8089;
				Match(ALL);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case STAR:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case EXCEPT:
			case FALSE_P:
			case FETCH:
			case FOR:
			case FROM:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNION:
			case UNIQUE:
			case USER:
			case WHERE:
			case WINDOW:
			case WITH:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MERGE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case END_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case LOOP:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case MetaCommand:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_sort_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		public Opt_sort_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_sort_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_sort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_sort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_sort_clauseContext opt_sort_clause() {
		Opt_sort_clauseContext _localctx = new Opt_sort_clauseContext(Context, State);
		EnterRule(_localctx, 996, RULE_opt_sort_clause);
		try {
			State = 8095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ORDER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8093;
				sort_clause();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sortby_listContext sortby_list() {
			return GetRuleContext<Sortby_listContext>(0);
		}
		public Sort_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSort_clause(this);
		}
	}

	[RuleVersion(0)]
	public Sort_clauseContext sort_clause() {
		Sort_clauseContext _localctx = new Sort_clauseContext(Context, State);
		EnterRule(_localctx, 998, RULE_sort_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8097;
			Match(ORDER);
			State = 8098;
			Match(BY);
			State = 8099;
			sortby_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sortby_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext[] sortby() {
			return GetRuleContexts<SortbyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortbyContext sortby(int i) {
			return GetRuleContext<SortbyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Sortby_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby_list(this);
		}
	}

	[RuleVersion(0)]
	public Sortby_listContext sortby_list() {
		Sortby_listContext _localctx = new Sortby_listContext(Context, State);
		EnterRule(_localctx, 1000, RULE_sortby_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8101;
			sortby();
			State = 8106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8102;
				Match(COMMA);
				State = 8103;
				sortby();
				}
				}
				State = 8108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nulls_orderContext opt_nulls_order() {
			return GetRuleContext<Opt_nulls_orderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_all_opContext qual_all_op() {
			return GetRuleContext<Qual_all_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_asc_descContext opt_asc_desc() {
			return GetRuleContext<Opt_asc_descContext>(0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSortby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSortby(this);
		}
	}

	[RuleVersion(0)]
	public SortbyContext sortby() {
		SortbyContext _localctx = new SortbyContext(Context, State);
		EnterRule(_localctx, 1002, RULE_sortby);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8109;
			a_expr();
			State = 8113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				{
				State = 8110;
				Match(USING);
				State = 8111;
				qual_all_op();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case ASC:
			case CREATE:
			case DESC:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NULLS_P:
			case PREPARE:
			case RANGE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case ROWS:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case GROUPS:
			case LOOP:
			case MetaCommand:
				{
				State = 8112;
				opt_asc_desc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8115;
			opt_nulls_order();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Limit_clauseContext limit_clause() {
			return GetRuleContext<Limit_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Offset_clauseContext offset_clause() {
			return GetRuleContext<Offset_clauseContext>(0);
		}
		public Select_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit(this);
		}
	}

	[RuleVersion(0)]
	public Select_limitContext select_limit() {
		Select_limitContext _localctx = new Select_limitContext(Context, State);
		EnterRule(_localctx, 1004, RULE_select_limit);
		int _la;
		try {
			State = 8125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FETCH:
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8117;
				limit_clause();
				State = 8119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 8118;
					offset_clause();
					}
				}

				}
				break;
			case OFFSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8121;
				offset_clause();
				State = 8123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
				case 1:
					{
					State = 8122;
					limit_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_select_limitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_limitContext select_limit() {
			return GetRuleContext<Select_limitContext>(0);
		}
		public Opt_select_limitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_select_limit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_select_limit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_select_limit(this);
		}
	}

	[RuleVersion(0)]
	public Opt_select_limitContext opt_select_limit() {
		Opt_select_limitContext _localctx = new Opt_select_limitContext(Context, State);
		EnterRule(_localctx, 1006, RULE_opt_select_limit);
		try {
			State = 8129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,445,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8127;
				select_limit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Limit_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_limit_valueContext select_limit_value() {
			return GetRuleContext<Select_limit_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public First_or_nextContext first_or_next() {
			return GetRuleContext<First_or_nextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limit_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLimit_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLimit_clause(this);
		}
	}

	[RuleVersion(0)]
	public Limit_clauseContext limit_clause() {
		Limit_clauseContext _localctx = new Limit_clauseContext(Context, State);
		EnterRule(_localctx, 1008, RULE_limit_clause);
		int _la;
		try {
			State = 8154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8131;
				Match(LIMIT);
				State = 8132;
				select_limit_value();
				State = 8135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 8133;
					Match(COMMA);
					State = 8134;
					select_offset_value();
					}
				}

				}
				break;
			case FETCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8137;
				Match(FETCH);
				State = 8138;
				first_or_next();
				State = 8152;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
				case 1:
					{
					State = 8139;
					select_fetch_first_value();
					State = 8140;
					row_or_rows();
					State = 8144;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ONLY:
						{
						State = 8141;
						Match(ONLY);
						}
						break;
					case WITH:
						{
						State = 8142;
						Match(WITH);
						State = 8143;
						Match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					State = 8146;
					row_or_rows();
					State = 8150;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ONLY:
						{
						State = 8147;
						Match(ONLY);
						}
						break;
					case WITH:
						{
						State = 8148;
						Match(WITH);
						State = 8149;
						Match(TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Offset_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_offset_valueContext select_offset_value() {
			return GetRuleContext<Select_offset_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_fetch_first_valueContext select_fetch_first_value() {
			return GetRuleContext<Select_fetch_first_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Row_or_rowsContext row_or_rows() {
			return GetRuleContext<Row_or_rowsContext>(0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_offset_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOffset_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOffset_clause(this);
		}
	}

	[RuleVersion(0)]
	public Offset_clauseContext offset_clause() {
		Offset_clauseContext _localctx = new Offset_clauseContext(Context, State);
		EnterRule(_localctx, 1010, RULE_offset_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8156;
			Match(OFFSET);
			State = 8161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
			case 1:
				{
				State = 8157;
				select_offset_value();
				}
				break;
			case 2:
				{
				State = 8158;
				select_fetch_first_value();
				State = 8159;
				row_or_rows();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_limit_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Select_limit_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_limit_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_limit_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_limit_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_limit_valueContext select_limit_value() {
		Select_limit_valueContext _localctx = new Select_limit_valueContext(Context, State);
		EnterRule(_localctx, 1012, RULE_select_limit_value);
		try {
			State = 8165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8163;
				a_expr();
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8164;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_offset_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Select_offset_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_offset_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_offset_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_offset_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_offset_valueContext select_offset_value() {
		Select_offset_valueContext _localctx = new Select_offset_valueContext(Context, State);
		EnterRule(_localctx, 1014, RULE_select_offset_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8167;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_fetch_first_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public I_or_f_constContext i_or_f_const() {
			return GetRuleContext<I_or_f_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public Select_fetch_first_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_fetch_first_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSelect_fetch_first_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSelect_fetch_first_value(this);
		}
	}

	[RuleVersion(0)]
	public Select_fetch_first_valueContext select_fetch_first_value() {
		Select_fetch_first_valueContext _localctx = new Select_fetch_first_valueContext(Context, State);
		EnterRule(_localctx, 1016, RULE_select_fetch_first_value);
		try {
			State = 8174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PARAM:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8169;
				c_expr();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8170;
				Match(PLUS);
				State = 8171;
				i_or_f_const();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8172;
				Match(MINUS);
				State = 8173;
				i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class I_or_f_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		public I_or_f_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_i_or_f_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterI_or_f_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitI_or_f_const(this);
		}
	}

	[RuleVersion(0)]
	public I_or_f_constContext i_or_f_const() {
		I_or_f_constContext _localctx = new I_or_f_constContext(Context, State);
		EnterRule(_localctx, 1018, RULE_i_or_f_const);
		try {
			State = 8178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8176;
				iconst();
				}
				break;
			case Numeric:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8177;
				fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_or_rowsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		public Row_or_rowsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_or_rows; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow_or_rows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow_or_rows(this);
		}
	}

	[RuleVersion(0)]
	public Row_or_rowsContext row_or_rows() {
		Row_or_rowsContext _localctx = new Row_or_rowsContext(Context, State);
		EnterRule(_localctx, 1020, RULE_row_or_rows);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8180;
			_la = TokenStream.LA(1);
			if ( !(_la==ROWS || _la==ROW) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class First_or_nextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		public First_or_nextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_first_or_next; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFirst_or_next(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFirst_or_next(this);
		}
	}

	[RuleVersion(0)]
	public First_or_nextContext first_or_next() {
		First_or_nextContext _localctx = new First_or_nextContext(Context, State);
		EnterRule(_localctx, 1022, RULE_first_or_next);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8182;
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST_P || _la==NEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(Context, State);
		EnterRule(_localctx, 1024, RULE_group_clause);
		try {
			State = 8188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8184;
				Match(GROUP_P);
				State = 8185;
				Match(BY);
				State = 8186;
				group_by_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_listContext : ParserRuleContext {
		public Group_by_itemContext _group_by_item;
		public IList<Group_by_itemContext> _grouping_term = new List<Group_by_itemContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext[] group_by_item() {
			return GetRuleContexts<Group_by_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_itemContext group_by_item(int i) {
			return GetRuleContext<Group_by_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_list(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_listContext group_by_list() {
		Group_by_listContext _localctx = new Group_by_listContext(Context, State);
		EnterRule(_localctx, 1026, RULE_group_by_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8190;
			_localctx._group_by_item = group_by_item();
			_localctx._grouping_term.Add(_localctx._group_by_item);
			State = 8195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,456,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8191;
					Match(COMMA);
					State = 8192;
					_localctx._group_by_item = group_by_item();
					_localctx._grouping_term.Add(_localctx._group_by_item);
					}
					} 
				}
				State = 8197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,456,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_grouping_setContext empty_grouping_set() {
			return GetRuleContext<Empty_grouping_setContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cube_clauseContext cube_clause() {
			return GetRuleContext<Cube_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollup_clauseContext rollup_clause() {
			return GetRuleContext<Rollup_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grouping_sets_clauseContext grouping_sets_clause() {
			return GetRuleContext<Grouping_sets_clauseContext>(0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_item(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_itemContext group_by_item() {
		Group_by_itemContext _localctx = new Group_by_itemContext(Context, State);
		EnterRule(_localctx, 1028, RULE_group_by_item);
		try {
			State = 8203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8198;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8199;
				empty_grouping_set();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8200;
				cube_clause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8201;
				rollup_clause();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8202;
				grouping_sets_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_grouping_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_grouping_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterEmpty_grouping_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitEmpty_grouping_set(this);
		}
	}

	[RuleVersion(0)]
	public Empty_grouping_setContext empty_grouping_set() {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(Context, State);
		EnterRule(_localctx, 1030, RULE_empty_grouping_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8205;
			Match(OPEN_PAREN);
			State = 8206;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Rollup_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRollup_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRollup_clause(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_clauseContext rollup_clause() {
		Rollup_clauseContext _localctx = new Rollup_clauseContext(Context, State);
		EnterRule(_localctx, 1032, RULE_rollup_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8208;
			Match(ROLLUP);
			State = 8209;
			Match(OPEN_PAREN);
			State = 8210;
			expr_list();
			State = 8211;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cube_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Cube_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cube_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCube_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCube_clause(this);
		}
	}

	[RuleVersion(0)]
	public Cube_clauseContext cube_clause() {
		Cube_clauseContext _localctx = new Cube_clauseContext(Context, State);
		EnterRule(_localctx, 1034, RULE_cube_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8213;
			Match(CUBE);
			State = 8214;
			Match(OPEN_PAREN);
			State = 8215;
			expr_list();
			State = 8216;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_listContext group_by_list() {
			return GetRuleContext<Group_by_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGrouping_sets_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGrouping_sets_clause(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_clauseContext grouping_sets_clause() {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(Context, State);
		EnterRule(_localctx, 1036, RULE_grouping_sets_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8218;
			Match(GROUPING);
			State = 8219;
			Match(SETS);
			State = 8220;
			Match(OPEN_PAREN);
			State = 8221;
			group_by_list();
			State = 8222;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 1038, RULE_having_clause);
		try {
			State = 8227;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HAVING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8224;
				Match(HAVING);
				State = 8225;
				a_expr();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemsContext for_locking_items() {
			return GetRuleContext<For_locking_itemsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		public For_locking_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_clause(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_clauseContext for_locking_clause() {
		For_locking_clauseContext _localctx = new For_locking_clauseContext(Context, State);
		EnterRule(_localctx, 1040, RULE_for_locking_clause);
		try {
			State = 8233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8229;
				for_locking_items();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8230;
				Match(FOR);
				State = 8231;
				Match(READ);
				State = 8232;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_for_locking_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_clauseContext for_locking_clause() {
			return GetRuleContext<For_locking_clauseContext>(0);
		}
		public Opt_for_locking_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_for_locking_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_for_locking_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_for_locking_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_for_locking_clauseContext opt_for_locking_clause() {
		Opt_for_locking_clauseContext _localctx = new Opt_for_locking_clauseContext(Context, State);
		EnterRule(_localctx, 1042, RULE_opt_for_locking_clause);
		try {
			State = 8237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8235;
				for_locking_clause();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_itemsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemContext[] for_locking_item() {
			return GetRuleContexts<For_locking_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_itemContext for_locking_item(int i) {
			return GetRuleContext<For_locking_itemContext>(i);
		}
		public For_locking_itemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_items; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_items(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_items(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemsContext for_locking_items() {
		For_locking_itemsContext _localctx = new For_locking_itemsContext(Context, State);
		EnterRule(_localctx, 1044, RULE_for_locking_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8239;
				for_locking_item();
				}
				}
				State = 8242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_locking_strengthContext for_locking_strength() {
			return GetRuleContext<For_locking_strengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Locked_rels_listContext locked_rels_list() {
			return GetRuleContext<Locked_rels_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_nowait_or_skipContext opt_nowait_or_skip() {
			return GetRuleContext<Opt_nowait_or_skipContext>(0);
		}
		public For_locking_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_item(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_itemContext for_locking_item() {
		For_locking_itemContext _localctx = new For_locking_itemContext(Context, State);
		EnterRule(_localctx, 1046, RULE_for_locking_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8244;
			for_locking_strength();
			State = 8245;
			locked_rels_list();
			State = 8246;
			opt_nowait_or_skip();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_locking_strengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		public For_locking_strengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_locking_strength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_locking_strength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_locking_strength(this);
		}
	}

	[RuleVersion(0)]
	public For_locking_strengthContext for_locking_strength() {
		For_locking_strengthContext _localctx = new For_locking_strengthContext(Context, State);
		EnterRule(_localctx, 1048, RULE_for_locking_strength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8248;
			Match(FOR);
			State = 8258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
			case UPDATE:
				{
				State = 8251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 8249;
					Match(NO);
					State = 8250;
					Match(KEY);
					}
				}

				State = 8253;
				Match(UPDATE);
				}
				break;
			case KEY:
			case SHARE:
				{
				State = 8255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEY) {
					{
					State = 8254;
					Match(KEY);
					}
				}

				State = 8257;
				Match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Locked_rels_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_listContext qualified_name_list() {
			return GetRuleContext<Qualified_name_listContext>(0);
		}
		public Locked_rels_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locked_rels_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLocked_rels_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLocked_rels_list(this);
		}
	}

	[RuleVersion(0)]
	public Locked_rels_listContext locked_rels_list() {
		Locked_rels_listContext _localctx = new Locked_rels_listContext(Context, State);
		EnterRule(_localctx, 1050, RULE_locked_rels_list);
		try {
			State = 8263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8260;
				Match(OF);
				State = 8261;
				qualified_name_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case FOR:
			case GRANT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case NOWAIT:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case SKIP_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext[] expr_list() {
			return GetRuleContexts<Expr_listContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list(int i) {
			return GetRuleContext<Expr_listContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterValues_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitValues_clause(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 1052, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8265;
			Match(VALUES);
			State = 8266;
			Match(OPEN_PAREN);
			State = 8267;
			expr_list();
			State = 8268;
			Match(CLOSE_PAREN);
			State = 8276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8269;
				Match(COMMA);
				State = 8270;
				Match(OPEN_PAREN);
				State = 8271;
				expr_list();
				State = 8272;
				Match(CLOSE_PAREN);
				}
				}
				State = 8278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public From_listContext from_list() {
			return GetRuleContext<From_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 1054, RULE_from_clause);
		try {
			State = 8282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8279;
				Match(FROM);
				State = 8280;
				from_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_listContext : ParserRuleContext {
		public Table_refContext _table_ref;
		public IList<Table_refContext> _tables = new List<Table_refContext>();
		public IToken _COMMA;
		public IList<IToken> _from_commas = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public Non_ansi_joinContext non_ansi_join() {
			return GetRuleContext<Non_ansi_joinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public From_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrom_list(this);
		}
	}

	[RuleVersion(0)]
	public From_listContext from_list() {
		From_listContext _localctx = new From_listContext(Context, State);
		EnterRule(_localctx, 1056, RULE_from_list);
		try {
			int _alt;
			State = 8293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8284;
				non_ansi_join();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8285;
				_localctx._table_ref = table_ref();
				_localctx._tables.Add(_localctx._table_ref);
				State = 8290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,468,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 8286;
						_localctx._COMMA = Match(COMMA);
						_localctx._from_commas.Add(_localctx._COMMA);
						State = 8287;
						_localctx._table_ref = table_ref();
						_localctx._tables.Add(_localctx._table_ref);
						}
						} 
					}
					State = 8292;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,468,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_ansi_joinContext : ParserRuleContext {
		public Table_refContext _table_ref;
		public IList<Table_refContext> _tables = new List<Table_refContext>();
		public IToken _COMMA;
		public IList<IToken> _from_commas = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Non_ansi_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_ansi_join; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNon_ansi_join(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNon_ansi_join(this);
		}
	}

	[RuleVersion(0)]
	public Non_ansi_joinContext non_ansi_join() {
		Non_ansi_joinContext _localctx = new Non_ansi_joinContext(Context, State);
		EnterRule(_localctx, 1058, RULE_non_ansi_join);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8295;
			_localctx._table_ref = table_ref();
			_localctx._tables.Add(_localctx._table_ref);
			State = 8298;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8296;
					_localctx._COMMA = Match(COMMA);
					_localctx._from_commas.Add(_localctx._COMMA);
					State = 8297;
					_localctx._table_ref = table_ref();
					_localctx._tables.Add(_localctx._table_ref);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,470,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		public Table_refContext _table_ref;
		public IList<Table_refContext> _tables = new List<Table_refContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_alias_clauseContext opt_alias_clause() {
			return GetRuleContext<Opt_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_tableContext func_table() {
			return GetRuleContext<Func_tableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_alias_clauseContext func_alias_clause() {
			return GetRuleContext<Func_alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmltableContext xmltable() {
			return GetRuleContext<XmltableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CROSS() { return GetTokens(PostgreSQLParser.CROSS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS(int i) {
			return GetToken(PostgreSQLParser.CROSS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] JOIN() { return GetTokens(PostgreSQLParser.JOIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN(int i) {
			return GetToken(PostgreSQLParser.JOIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NATURAL() { return GetTokens(PostgreSQLParser.NATURAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL(int i) {
			return GetToken(PostgreSQLParser.NATURAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_qualContext[] join_qual() {
			return GetRuleContexts<Join_qualContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_qualContext join_qual(int i) {
			return GetRuleContext<Join_qualContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tablesample_clauseContext tablesample_clause() {
			return GetRuleContext<Tablesample_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext[] join_type() {
			return GetRuleContexts<Join_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_typeContext join_type(int i) {
			return GetRuleContext<Join_typeContext>(i);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_ref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_ref(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 1060, RULE_table_ref);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
			case 1:
				{
				State = 8302;
				relation_expr();
				State = 8303;
				opt_alias_clause();
				State = 8305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESAMPLE) {
					{
					State = 8304;
					tablesample_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 8307;
				func_table();
				State = 8308;
				func_alias_clause();
				}
				break;
			case 3:
				{
				State = 8310;
				xmltable();
				State = 8311;
				opt_alias_clause();
				}
				break;
			case 4:
				{
				State = 8313;
				select_with_parens();
				State = 8314;
				opt_alias_clause();
				}
				break;
			case 5:
				{
				State = 8316;
				Match(LATERAL_P);
				State = 8326;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
				case 1:
					{
					State = 8317;
					xmltable();
					State = 8318;
					opt_alias_clause();
					}
					break;
				case 2:
					{
					State = 8320;
					func_table();
					State = 8321;
					func_alias_clause();
					}
					break;
				case 3:
					{
					State = 8323;
					select_with_parens();
					State = 8324;
					opt_alias_clause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 8328;
				Match(OPEN_PAREN);
				State = 8329;
				_localctx._table_ref = table_ref();
				_localctx._tables.Add(_localctx._table_ref);
				State = 8346;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CROSS:
					{
					State = 8330;
					Match(CROSS);
					State = 8331;
					Match(JOIN);
					State = 8332;
					_localctx._table_ref = table_ref();
					_localctx._tables.Add(_localctx._table_ref);
					}
					break;
				case NATURAL:
					{
					State = 8333;
					Match(NATURAL);
					State = 8335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
						{
						State = 8334;
						join_type();
						}
					}

					State = 8337;
					Match(JOIN);
					State = 8338;
					_localctx._table_ref = table_ref();
					_localctx._tables.Add(_localctx._table_ref);
					}
					break;
				case FULL:
				case INNER_P:
				case JOIN:
				case LEFT:
				case RIGHT:
					{
					State = 8340;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
						{
						State = 8339;
						join_type();
						}
					}

					State = 8342;
					Match(JOIN);
					State = 8343;
					_localctx._table_ref = table_ref();
					_localctx._tables.Add(_localctx._table_ref);
					State = 8344;
					join_qual();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				State = 8348;
				Match(CLOSE_PAREN);
				State = 8349;
				opt_alias_clause();
				}
				break;
			}
			State = 8371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,480,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 8369;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CROSS:
						{
						State = 8353;
						Match(CROSS);
						State = 8354;
						Match(JOIN);
						State = 8355;
						_localctx._table_ref = table_ref();
						_localctx._tables.Add(_localctx._table_ref);
						}
						break;
					case NATURAL:
						{
						State = 8356;
						Match(NATURAL);
						State = 8358;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
							{
							State = 8357;
							join_type();
							}
						}

						State = 8360;
						Match(JOIN);
						State = 8361;
						_localctx._table_ref = table_ref();
						_localctx._tables.Add(_localctx._table_ref);
						}
						break;
					case FULL:
					case INNER_P:
					case JOIN:
					case LEFT:
					case RIGHT:
						{
						State = 8363;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) {
							{
							State = 8362;
							join_type();
							}
						}

						State = 8365;
						Match(JOIN);
						State = 8366;
						_localctx._table_ref = table_ref();
						_localctx._tables.Add(_localctx._table_ref);
						State = 8367;
						join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 8373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,480,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAlias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAlias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Alias_clauseContext alias_clause() {
		Alias_clauseContext _localctx = new Alias_clauseContext(Context, State);
		EnterRule(_localctx, 1062, RULE_alias_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 8374;
				Match(AS);
				}
			}

			State = 8377;
			colid();
			State = 8382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
			case 1:
				{
				State = 8378;
				Match(OPEN_PAREN);
				State = 8379;
				name_list();
				State = 8380;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_alias_clauseContext table_alias_clause() {
			return GetRuleContext<Table_alias_clauseContext>(0);
		}
		public Opt_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_alias_clauseContext opt_alias_clause() {
		Opt_alias_clauseContext _localctx = new Opt_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1064, RULE_opt_alias_clause);
		try {
			State = 8386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8384;
				table_alias_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Table_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Table_alias_clauseContext table_alias_clause() {
		Table_alias_clauseContext _localctx = new Table_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1066, RULE_table_alias_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 8388;
				Match(AS);
				}
			}

			State = 8391;
			table_alias();
			State = 8396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,485,Context) ) {
			case 1:
				{
				State = 8392;
				Match(OPEN_PAREN);
				State = 8393;
				name_list();
				State = 8394;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_alias_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_clauseContext alias_clause() {
			return GetRuleContext<Alias_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Func_alias_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_alias_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_alias_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_alias_clause(this);
		}
	}

	[RuleVersion(0)]
	public Func_alias_clauseContext func_alias_clause() {
		Func_alias_clauseContext _localctx = new Func_alias_clauseContext(Context, State);
		EnterRule(_localctx, 1068, RULE_func_alias_clause);
		int _la;
		try {
			State = 8411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8398;
				alias_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8404;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AS:
					{
					State = 8399;
					Match(AS);
					State = 8401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -2251913479323647L) != 0 || (((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0 || (((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -19327352833L) != 0 || (((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -1L) != 0 || (((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0 || (((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -2305851805306716161L) != 0 || (((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -17593528221697L) != 0 || (((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -1L) != 0 || (((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & 864691437692780543L) != 0) {
						{
						State = 8400;
						colid();
						}
					}

					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 8403;
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8406;
				Match(OPEN_PAREN);
				State = 8407;
				tablefuncelementlist();
				State = 8408;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_type(this);
		}
	}

	[RuleVersion(0)]
	public Join_typeContext join_type() {
		Join_typeContext _localctx = new Join_typeContext(Context, State);
		EnterRule(_localctx, 1070, RULE_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8413;
			_la = TokenStream.LA(1);
			if ( !((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 8261L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_P) {
				{
				State = 8414;
				Match(OUTER_P);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_qualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_listContext name_list() {
			return GetRuleContext<Name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Join_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterJoin_qual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitJoin_qual(this);
		}
	}

	[RuleVersion(0)]
	public Join_qualContext join_qual() {
		Join_qualContext _localctx = new Join_qualContext(Context, State);
		EnterRule(_localctx, 1072, RULE_join_qual);
		try {
			State = 8424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8417;
				Match(USING);
				State = 8418;
				Match(OPEN_PAREN);
				State = 8419;
				name_list();
				State = 8420;
				Match(CLOSE_PAREN);
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8422;
				Match(ON);
				State = 8423;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Relation_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr(this);
		}
	}

	[RuleVersion(0)]
	public Relation_exprContext relation_expr() {
		Relation_exprContext _localctx = new Relation_exprContext(Context, State);
		EnterRule(_localctx, 1074, RULE_relation_expr);
		int _la;
		try {
			State = 8438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8426;
				qualified_name();
				State = 8428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR) {
					{
					State = 8427;
					Match(STAR);
					}
				}

				}
				break;
			case ONLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8430;
				Match(ONLY);
				State = 8436;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 8431;
					qualified_name();
					}
					break;
				case OPEN_PAREN:
					{
					State = 8432;
					Match(OPEN_PAREN);
					State = 8433;
					qualified_name();
					State = 8434;
					Match(CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext[] relation_expr() {
			return GetRuleContexts<Relation_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr(int i) {
			return GetRuleContext<Relation_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Relation_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_listContext relation_expr_list() {
		Relation_expr_listContext _localctx = new Relation_expr_listContext(Context, State);
		EnterRule(_localctx, 1076, RULE_relation_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8440;
			relation_expr();
			State = 8445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8441;
				Match(COMMA);
				State = 8442;
				relation_expr();
				}
				}
				State = 8447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relation_expr_opt_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relation_exprContext relation_expr() {
			return GetRuleContext<Relation_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		public Relation_expr_opt_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation_expr_opt_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRelation_expr_opt_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRelation_expr_opt_alias(this);
		}
	}

	[RuleVersion(0)]
	public Relation_expr_opt_aliasContext relation_expr_opt_alias() {
		Relation_expr_opt_aliasContext _localctx = new Relation_expr_opt_aliasContext(Context, State);
		EnterRule(_localctx, 1078, RULE_relation_expr_opt_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8448;
			relation_expr();
			State = 8453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 8450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 8449;
					Match(AS);
					}
				}

				State = 8452;
				colid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablesample_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_repeatable_clauseContext opt_repeatable_clause() {
			return GetRuleContext<Opt_repeatable_clauseContext>(0);
		}
		public Tablesample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesample_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablesample_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablesample_clause(this);
		}
	}

	[RuleVersion(0)]
	public Tablesample_clauseContext tablesample_clause() {
		Tablesample_clauseContext _localctx = new Tablesample_clauseContext(Context, State);
		EnterRule(_localctx, 1080, RULE_tablesample_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8455;
			Match(TABLESAMPLE);
			State = 8456;
			func_name();
			State = 8457;
			Match(OPEN_PAREN);
			State = 8458;
			expr_list();
			State = 8459;
			Match(CLOSE_PAREN);
			State = 8460;
			opt_repeatable_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_repeatable_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_repeatable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_repeatable_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_repeatable_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_repeatable_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_repeatable_clauseContext opt_repeatable_clause() {
		Opt_repeatable_clauseContext _localctx = new Opt_repeatable_clauseContext(Context, State);
		EnterRule(_localctx, 1082, RULE_opt_repeatable_clause);
		try {
			State = 8468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8462;
				Match(REPEATABLE);
				State = 8463;
				Match(OPEN_PAREN);
				State = 8464;
				a_expr();
				State = 8465;
				Match(CLOSE_PAREN);
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
			case CROSS:
			case FULL:
			case INNER_P:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_tableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_ordinalityContext opt_ordinality() {
			return GetRuleContext<Opt_ordinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_listContext rowsfrom_list() {
			return GetRuleContext<Rowsfrom_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_table; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_table(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_table(this);
		}
	}

	[RuleVersion(0)]
	public Func_tableContext func_table() {
		Func_tableContext _localctx = new Func_tableContext(Context, State);
		EnterRule(_localctx, 1084, RULE_func_table);
		try {
			State = 8480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8470;
				func_expr_windowless();
				State = 8471;
				opt_ordinality();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8473;
				Match(ROWS);
				State = 8474;
				Match(FROM);
				State = 8475;
				Match(OPEN_PAREN);
				State = 8476;
				rowsfrom_list();
				State = 8477;
				Match(CLOSE_PAREN);
				State = 8478;
				opt_ordinality();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_windowlessContext func_expr_windowless() {
			return GetRuleContext<Func_expr_windowlessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_col_def_listContext opt_col_def_list() {
			return GetRuleContext<Opt_col_def_listContext>(0);
		}
		public Rowsfrom_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_item(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_itemContext rowsfrom_item() {
		Rowsfrom_itemContext _localctx = new Rowsfrom_itemContext(Context, State);
		EnterRule(_localctx, 1086, RULE_rowsfrom_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8482;
			func_expr_windowless();
			State = 8483;
			opt_col_def_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rowsfrom_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_itemContext[] rowsfrom_item() {
			return GetRuleContexts<Rowsfrom_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rowsfrom_itemContext rowsfrom_item(int i) {
			return GetRuleContext<Rowsfrom_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Rowsfrom_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowsfrom_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRowsfrom_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRowsfrom_list(this);
		}
	}

	[RuleVersion(0)]
	public Rowsfrom_listContext rowsfrom_list() {
		Rowsfrom_listContext _localctx = new Rowsfrom_listContext(Context, State);
		EnterRule(_localctx, 1088, RULE_rowsfrom_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8485;
			rowsfrom_item();
			State = 8490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8486;
				Match(COMMA);
				State = 8487;
				rowsfrom_item();
				}
				}
				State = 8492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_col_def_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_col_def_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_col_def_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_col_def_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_col_def_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_col_def_listContext opt_col_def_list() {
		Opt_col_def_listContext _localctx = new Opt_col_def_listContext(Context, State);
		EnterRule(_localctx, 1090, RULE_opt_col_def_list);
		try {
			State = 8499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8493;
				Match(AS);
				State = 8494;
				Match(OPEN_PAREN);
				State = 8495;
				tablefuncelementlist();
				State = 8496;
				Match(CLOSE_PAREN);
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_ordinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		public Opt_ordinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_ordinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_ordinality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_ordinality(this);
		}
	}

	[RuleVersion(0)]
	public Opt_ordinalityContext opt_ordinality() {
		Opt_ordinalityContext _localctx = new Opt_ordinalityContext(Context, State);
		EnterRule(_localctx, 1092, RULE_opt_ordinality);
		try {
			State = 8504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8501;
				Match(WITH);
				State = 8502;
				Match(ORDINALITY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 1094, RULE_where_clause);
		try {
			State = 8509;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8506;
				Match(WHERE);
				State = 8507;
				a_expr();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case GROUP_P:
			case HAVING:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WINDOW:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_or_current_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Where_or_current_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_or_current_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhere_or_current_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhere_or_current_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_or_current_clauseContext where_or_current_clause() {
		Where_or_current_clauseContext _localctx = new Where_or_current_clauseContext(Context, State);
		EnterRule(_localctx, 1096, RULE_where_or_current_clause);
		try {
			State = 8519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHERE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8511;
				Match(WHERE);
				State = 8516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,503,Context) ) {
				case 1:
					{
					State = 8512;
					Match(CURRENT_P);
					State = 8513;
					Match(OF);
					State = 8514;
					cursor_name();
					}
					break;
				case 2:
					{
					State = 8515;
					a_expr();
					}
					break;
				}
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case FETCH:
			case GRANT:
			case INTO:
			case RETURNING:
			case SELECT:
			case TABLE:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpttablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementlistContext tablefuncelementlist() {
			return GetRuleContext<TablefuncelementlistContext>(0);
		}
		public OpttablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opttablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpttablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpttablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public OpttablefuncelementlistContext opttablefuncelementlist() {
		OpttablefuncelementlistContext _localctx = new OpttablefuncelementlistContext(Context, State);
		EnterRule(_localctx, 1098, RULE_opttablefuncelementlist);
		try {
			State = 8523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8521;
				tablefuncelementlist();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablefuncelementlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext[] tablefuncelement() {
			return GetRuleContexts<TablefuncelementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablefuncelementContext tablefuncelement(int i) {
			return GetRuleContext<TablefuncelementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public TablefuncelementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelementlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelementlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelementlist(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementlistContext tablefuncelementlist() {
		TablefuncelementlistContext _localctx = new TablefuncelementlistContext(Context, State);
		EnterRule(_localctx, 1100, RULE_tablefuncelementlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8525;
			tablefuncelement();
			State = 8530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8526;
				Match(COMMA);
				State = 8527;
				tablefuncelement();
				}
				}
				State = 8532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablefuncelementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_collate_clauseContext opt_collate_clause() {
			return GetRuleContext<Opt_collate_clauseContext>(0);
		}
		public TablefuncelementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablefuncelement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTablefuncelement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTablefuncelement(this);
		}
	}

	[RuleVersion(0)]
	public TablefuncelementContext tablefuncelement() {
		TablefuncelementContext _localctx = new TablefuncelementContext(Context, State);
		EnterRule(_localctx, 1102, RULE_tablefuncelement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8533;
			colid();
			State = 8534;
			typename();
			State = 8535;
			opt_collate_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmltableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAREN() { return GetTokens(PostgreSQLParser.OPEN_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN(int i) {
			return GetToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAREN() { return GetTokens(PostgreSQLParser.CLOSE_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN(int i) {
			return GetToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_listContext xmltable_column_list() {
			return GetRuleContext<Xmltable_column_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_listContext xml_namespace_list() {
			return GetRuleContext<Xml_namespace_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public XmltableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable(this);
		}
	}

	[RuleVersion(0)]
	public XmltableContext xmltable() {
		XmltableContext _localctx = new XmltableContext(Context, State);
		EnterRule(_localctx, 1104, RULE_xmltable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8537;
			Match(XMLTABLE);
			State = 8538;
			Match(OPEN_PAREN);
			State = 8554;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				{
				State = 8539;
				c_expr();
				State = 8540;
				xmlexists_argument();
				State = 8541;
				Match(COLUMNS);
				State = 8542;
				xmltable_column_list();
				}
				break;
			case 2:
				{
				State = 8544;
				Match(XMLNAMESPACES);
				State = 8545;
				Match(OPEN_PAREN);
				State = 8546;
				xml_namespace_list();
				State = 8547;
				Match(CLOSE_PAREN);
				State = 8548;
				Match(COMMA);
				State = 8549;
				c_expr();
				State = 8550;
				xmlexists_argument();
				State = 8551;
				Match(COLUMNS);
				State = 8552;
				xmltable_column_list();
				}
				break;
			}
			State = 8556;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_elContext[] xmltable_column_el() {
			return GetRuleContexts<Xmltable_column_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_elContext xmltable_column_el(int i) {
			return GetRuleContext<Xmltable_column_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xmltable_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_listContext xmltable_column_list() {
		Xmltable_column_listContext _localctx = new Xmltable_column_listContext(Context, State);
		EnterRule(_localctx, 1106, RULE_xmltable_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8558;
			xmltable_column_el();
			State = 8563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8559;
				Match(COMMA);
				State = 8560;
				xmltable_column_el();
				}
				}
				State = 8565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_listContext xmltable_column_option_list() {
			return GetRuleContext<Xmltable_column_option_listContext>(0);
		}
		public Xmltable_column_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_elContext xmltable_column_el() {
		Xmltable_column_elContext _localctx = new Xmltable_column_elContext(Context, State);
		EnterRule(_localctx, 1108, RULE_xmltable_column_el);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8566;
			colid();
			State = 8573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 8567;
				typename();
				State = 8569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576513529147825157L) != 0 || (((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 148693829908709505L) != 0 || (((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & 56295003965620233L) != 0 || (((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & 18068292027564033L) != 0 || _la==TYPE_P || (((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & -144097595889811453L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 12516927L) != 0 || (((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & 100663331L) != 0) {
					{
					State = 8568;
					xmltable_column_option_list();
					}
				}

				}
				break;
			case FOR:
				{
				State = 8571;
				Match(FOR);
				State = 8572;
				Match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_elContext[] xmltable_column_option_el() {
			return GetRuleContexts<Xmltable_column_option_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmltable_column_option_elContext xmltable_column_option_el(int i) {
			return GetRuleContext<Xmltable_column_option_elContext>(i);
		}
		public Xmltable_column_option_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_list(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_listContext xmltable_column_option_list() {
		Xmltable_column_option_listContext _localctx = new Xmltable_column_option_listContext(Context, State);
		EnterRule(_localctx, 1110, RULE_xmltable_column_option_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8575;
				xmltable_column_option_el();
				}
				}
				State = 8578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 576513529147825157L) != 0 || (((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 148693829908709505L) != 0 || (((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & 56295003965620233L) != 0 || (((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & 18068292027564033L) != 0 || _la==TYPE_P || (((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & -144097595889811453L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 12516927L) != 0 || (((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & 100663331L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_column_option_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Xmltable_column_option_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_column_option_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmltable_column_option_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmltable_column_option_el(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_column_option_elContext xmltable_column_option_el() {
		Xmltable_column_option_elContext _localctx = new Xmltable_column_option_elContext(Context, State);
		EnterRule(_localctx, 1112, RULE_xmltable_column_option_el);
		try {
			State = 8588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,512,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8580;
				Match(DEFAULT);
				State = 8581;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8582;
				identifier();
				State = 8583;
				a_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8585;
				Match(NOT);
				State = 8586;
				Match(NULL_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8587;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespace_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_elContext[] xml_namespace_el() {
			return GetRuleContexts<Xml_namespace_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_namespace_elContext xml_namespace_el(int i) {
			return GetRuleContext<Xml_namespace_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_namespace_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_listContext xml_namespace_list() {
		Xml_namespace_listContext _localctx = new Xml_namespace_listContext(Context, State);
		EnterRule(_localctx, 1114, RULE_xml_namespace_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8590;
			xml_namespace_el();
			State = 8595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 8591;
				Match(COMMA);
				State = 8592;
				xml_namespace_el();
				}
				}
				State = 8597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespace_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Xml_namespace_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespace_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_namespace_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_namespace_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespace_elContext xml_namespace_el() {
		Xml_namespace_elContext _localctx = new Xml_namespace_elContext(Context, State);
		EnterRule(_localctx, 1116, RULE_xml_namespace_el);
		try {
			State = 8604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,514,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8598;
				b_expr(0);
				State = 8599;
				Match(AS);
				State = 8600;
				collabel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8602;
				Match(DEFAULT);
				State = 8603;
				b_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_array_boundsContext opt_array_bounds() {
			return GetRuleContext<Opt_array_boundsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWTYPE() { return GetToken(PostgreSQLParser.ROWTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTypename(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 1118, RULE_typename);
		int _la;
		try {
			State = 8624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,518,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SETOF) {
					{
					State = 8606;
					Match(SETOF);
					}
				}

				State = 8609;
				simpletypename();
				State = 8618;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
				case 1:
					{
					State = 8610;
					opt_array_bounds();
					}
					break;
				case 2:
					{
					State = 8611;
					Match(ARRAY);
					State = 8616;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
					case 1:
						{
						State = 8612;
						Match(OPEN_BRACKET);
						State = 8613;
						iconst();
						State = 8614;
						Match(CLOSE_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8620;
				qualified_name();
				State = 8621;
				Match(PERCENT);
				State = 8622;
				_la = TokenStream.LA(1);
				if ( !(_la==TYPE_P || _la==ROWTYPE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_array_boundsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(PostgreSQLParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(PostgreSQLParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext[] iconst() {
			return GetRuleContexts<IconstContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst(int i) {
			return GetRuleContext<IconstContext>(i);
		}
		public Opt_array_boundsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_array_bounds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_array_bounds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_array_bounds(this);
		}
	}

	[RuleVersion(0)]
	public Opt_array_boundsContext opt_array_bounds() {
		Opt_array_boundsContext _localctx = new Opt_array_boundsContext(Context, State);
		EnterRule(_localctx, 1120, RULE_opt_array_bounds);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8633;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,520,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8626;
					Match(OPEN_BRACKET);
					State = 8628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Integral) {
						{
						State = 8627;
						iconst();
						}
					}

					State = 8630;
					Match(CLOSE_BRACKET);
					}
					} 
				}
				State = 8635;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,520,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpletypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenerictypeContext generictype() {
			return GetRuleContext<GenerictypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitContext bit() {
			return GetRuleContext<BitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public SimpletypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpletypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSimpletypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSimpletypename(this);
		}
	}

	[RuleVersion(0)]
	public SimpletypenameContext simpletypename() {
		SimpletypenameContext _localctx = new SimpletypenameContext(Context, State);
		EnterRule(_localctx, 1122, RULE_simpletypename);
		try {
			State = 8649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8636;
				generictype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8637;
				numeric();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8638;
				bit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8639;
				character();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8640;
				constdatetime();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8641;
				constinterval();
				State = 8647;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
				case 1:
					{
					State = 8642;
					opt_interval();
					}
					break;
				case 2:
					{
					State = 8643;
					Match(OPEN_PAREN);
					State = 8644;
					iconst();
					State = 8645;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsttypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstbitContext constbit() {
			return GetRuleContext<ConstbitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstcharacterContext constcharacter() {
			return GetRuleContext<ConstcharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstdatetimeContext constdatetime() {
			return GetRuleContext<ConstdatetimeContext>(0);
		}
		public ConsttypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consttypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConsttypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConsttypename(this);
		}
	}

	[RuleVersion(0)]
	public ConsttypenameContext consttypename() {
		ConsttypenameContext _localctx = new ConsttypenameContext(Context, State);
		EnterRule(_localctx, 1124, RULE_consttypename);
		try {
			State = 8655;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE_P:
			case BIGINT:
			case BOOLEAN_P:
			case DEC:
			case DECIMAL_P:
			case FLOAT_P:
			case INT_P:
			case INTEGER:
			case NUMERIC:
			case REAL:
			case SMALLINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8651;
				numeric();
				}
				break;
			case BIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8652;
				constbit();
				}
				break;
			case CHAR_P:
			case CHARACTER:
			case NATIONAL:
			case NCHAR:
			case VARCHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8653;
				constcharacter();
				}
				break;
			case TIME:
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8654;
				constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenerictypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_type_modifiersContext opt_type_modifiers() {
			return GetRuleContext<Opt_type_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrsContext attrs() {
			return GetRuleContext<AttrsContext>(0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generictype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGenerictype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGenerictype(this);
		}
	}

	[RuleVersion(0)]
	public GenerictypeContext generictype() {
		GenerictypeContext _localctx = new GenerictypeContext(Context, State);
		EnterRule(_localctx, 1126, RULE_generictype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLACE:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case REVERSE:
			case LOG:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
				{
				State = 8657;
				builtin_function_name();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case COLUMNS:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 8658;
				type_function_name();
				}
				break;
			case LEFT:
				{
				State = 8659;
				Match(LEFT);
				}
				break;
			case RIGHT:
				{
				State = 8660;
				Match(RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
			case 1:
				{
				State = 8663;
				attrs();
				}
				break;
			}
			State = 8666;
			opt_type_modifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_type_modifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_type_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_type_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_type_modifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_type_modifiers(this);
		}
	}

	[RuleVersion(0)]
	public Opt_type_modifiersContext opt_type_modifiers() {
		Opt_type_modifiersContext _localctx = new Opt_type_modifiersContext(Context, State);
		EnterRule(_localctx, 1128, RULE_opt_type_modifiers);
		try {
			State = 8673;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8668;
				Match(OPEN_PAREN);
				State = 8669;
				expr_list();
				State = 8670;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_floatContext opt_float() {
			return GetRuleContext<Opt_floatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_type_modifiersContext opt_type_modifiers() {
			return GetRuleContext<Opt_type_modifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(PostgreSQLParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNumeric(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNumeric(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 1130, RULE_numeric);
		try {
			State = 8691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_P:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8675;
				Match(INT_P);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8676;
				Match(INTEGER);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8677;
				Match(SMALLINT);
				}
				break;
			case BIGINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8678;
				Match(BIGINT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8679;
				Match(REAL);
				}
				break;
			case FLOAT_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8680;
				Match(FLOAT_P);
				State = 8681;
				opt_float();
				}
				break;
			case DOUBLE_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8682;
				Match(DOUBLE_P);
				State = 8683;
				Match(PRECISION);
				}
				break;
			case DECIMAL_P:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8684;
				Match(DECIMAL_P);
				State = 8685;
				opt_type_modifiers();
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8686;
				Match(DEC);
				State = 8687;
				opt_type_modifiers();
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8688;
				Match(NUMERIC);
				State = 8689;
				opt_type_modifiers();
				}
				break;
			case BOOLEAN_P:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8690;
				Match(BOOLEAN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_floatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Opt_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_float(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_float(this);
		}
	}

	[RuleVersion(0)]
	public Opt_floatContext opt_float() {
		Opt_floatContext _localctx = new Opt_floatContext(Context, State);
		EnterRule(_localctx, 1132, RULE_opt_float);
		try {
			State = 8698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8693;
				Match(OPEN_PAREN);
				State = 8694;
				iconst();
				State = 8695;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public BitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBit(this);
		}
	}

	[RuleVersion(0)]
	public BitContext bit() {
		BitContext _localctx = new BitContext(Context, State);
		EnterRule(_localctx, 1134, RULE_bit);
		try {
			State = 8702;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8700;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8701;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstbitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitwithlengthContext bitwithlength() {
			return GetRuleContext<BitwithlengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitwithoutlengthContext bitwithoutlength() {
			return GetRuleContext<BitwithoutlengthContext>(0);
		}
		public ConstbitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constbit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstbit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstbit(this);
		}
	}

	[RuleVersion(0)]
	public ConstbitContext constbit() {
		ConstbitContext _localctx = new ConstbitContext(Context, State);
		EnterRule(_localctx, 1136, RULE_constbit);
		try {
			State = 8706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8704;
				bitwithlength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8705;
				bitwithoutlength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public BitwithlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithlengthContext bitwithlength() {
		BitwithlengthContext _localctx = new BitwithlengthContext(Context, State);
		EnterRule(_localctx, 1138, RULE_bitwithlength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8708;
			Match(BIT);
			State = 8709;
			opt_varying();
			State = 8710;
			Match(OPEN_PAREN);
			State = 8711;
			expr_list();
			State = 8712;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwithoutlengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(PostgreSQLParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		public BitwithoutlengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwithoutlength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBitwithoutlength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBitwithoutlength(this);
		}
	}

	[RuleVersion(0)]
	public BitwithoutlengthContext bitwithoutlength() {
		BitwithoutlengthContext _localctx = new BitwithoutlengthContext(Context, State);
		EnterRule(_localctx, 1140, RULE_bitwithoutlength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8714;
			Match(BIT);
			State = 8715;
			opt_varying();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 1142, RULE_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8717;
			character_c();
			State = 8722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				{
				State = 8718;
				Match(OPEN_PAREN);
				State = 8719;
				iconst();
				State = 8720;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstcharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Character_cContext character_c() {
			return GetRuleContext<Character_cContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstcharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constcharacter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstcharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstcharacter(this);
		}
	}

	[RuleVersion(0)]
	public ConstcharacterContext constcharacter() {
		ConstcharacterContext _localctx = new ConstcharacterContext(Context, State);
		EnterRule(_localctx, 1144, RULE_constcharacter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8724;
			character_c();
			State = 8729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 8725;
				Match(OPEN_PAREN);
				State = 8726;
				iconst();
				State = 8727;
				Match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Character_cContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_varyingContext opt_varying() {
			return GetRuleContext<Opt_varyingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(PostgreSQLParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		public Character_cContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character_c; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCharacter_c(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCharacter_c(this);
		}
	}

	[RuleVersion(0)]
	public Character_cContext character_c() {
		Character_cContext _localctx = new Character_cContext(Context, State);
		EnterRule(_localctx, 1146, RULE_character_c);
		int _la;
		try {
			State = 8737;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_P:
			case CHARACTER:
			case NCHAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8731;
				_la = TokenStream.LA(1);
				if ( !((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & 32771L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8732;
				opt_varying();
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8733;
				Match(VARCHAR);
				}
				break;
			case NATIONAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8734;
				Match(NATIONAL);
				State = 8735;
				_la = TokenStream.LA(1);
				if ( !(_la==CHAR_P || _la==CHARACTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8736;
				opt_varying();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_varyingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		public Opt_varyingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_varying; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_varying(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_varying(this);
		}
	}

	[RuleVersion(0)]
	public Opt_varyingContext opt_varying() {
		Opt_varyingContext _localctx = new Opt_varyingContext(Context, State);
		EnterRule(_localctx, 1148, RULE_opt_varying);
		try {
			State = 8741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8739;
				Match(VARYING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstdatetimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_timezoneContext opt_timezone() {
			return GetRuleContext<Opt_timezoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public ConstdatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constdatetime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstdatetime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstdatetime(this);
		}
	}

	[RuleVersion(0)]
	public ConstdatetimeContext constdatetime() {
		ConstdatetimeContext _localctx = new ConstdatetimeContext(Context, State);
		EnterRule(_localctx, 1150, RULE_constdatetime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8743;
			_la = TokenStream.LA(1);
			if ( !(_la==TIME || _la==TIMESTAMP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
			case 1:
				{
				State = 8744;
				Match(OPEN_PAREN);
				State = 8745;
				iconst();
				State = 8746;
				Match(CLOSE_PAREN);
				}
				break;
			}
			State = 8750;
			opt_timezone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstintervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		public ConstintervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constinterval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterConstinterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitConstinterval(this);
		}
	}

	[RuleVersion(0)]
	public ConstintervalContext constinterval() {
		ConstintervalContext _localctx = new ConstintervalContext(Context, State);
		EnterRule(_localctx, 1152, RULE_constinterval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8752;
			Match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_timezoneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		public Opt_timezoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_timezone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_timezone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_timezone(this);
		}
	}

	[RuleVersion(0)]
	public Opt_timezoneContext opt_timezone() {
		Opt_timezoneContext _localctx = new Opt_timezoneContext(Context, State);
		EnterRule(_localctx, 1154, RULE_opt_timezone);
		try {
			State = 8761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8754;
				Match(WITH);
				State = 8755;
				Match(TIME);
				State = 8756;
				Match(ZONE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8757;
				Match(WITHOUT);
				State = 8758;
				Match(TIME);
				State = 8759;
				Match(ZONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_intervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interval_secondContext interval_second() {
			return GetRuleContext<Interval_secondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		public Opt_intervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_interval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_interval(this);
		}
	}

	[RuleVersion(0)]
	public Opt_intervalContext opt_interval() {
		Opt_intervalContext _localctx = new Opt_intervalContext(Context, State);
		EnterRule(_localctx, 1156, RULE_opt_interval);
		try {
			State = 8789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8763;
				Match(YEAR_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8764;
				Match(MONTH_P);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8765;
				Match(DAY_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8766;
				Match(HOUR_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8767;
				Match(MINUTE_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8768;
				interval_second();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8769;
				Match(YEAR_P);
				State = 8770;
				Match(TO);
				State = 8771;
				Match(MONTH_P);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8772;
				Match(DAY_P);
				State = 8773;
				Match(TO);
				State = 8777;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HOUR_P:
					{
					State = 8774;
					Match(HOUR_P);
					}
					break;
				case MINUTE_P:
					{
					State = 8775;
					Match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					State = 8776;
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8779;
				Match(HOUR_P);
				State = 8780;
				Match(TO);
				State = 8783;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINUTE_P:
					{
					State = 8781;
					Match(MINUTE_P);
					}
					break;
				case SECOND_P:
					{
					State = 8782;
					interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8785;
				Match(MINUTE_P);
				State = 8786;
				Match(TO);
				State = 8787;
				interval_second();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_secondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Interval_secondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_second; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInterval_second(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInterval_second(this);
		}
	}

	[RuleVersion(0)]
	public Interval_secondContext interval_second() {
		Interval_secondContext _localctx = new Interval_secondContext(Context, State);
		EnterRule(_localctx, 1158, RULE_interval_second);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8791;
			Match(SECOND_P);
			State = 8796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
			case 1:
				{
				State = 8792;
				Match(OPEN_PAREN);
				State = 8793;
				iconst();
				State = 8794;
				Match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_escapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_escapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_escape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_escape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_escape(this);
		}
	}

	[RuleVersion(0)]
	public Opt_escapeContext opt_escape() {
		Opt_escapeContext _localctx = new Opt_escapeContext(Context, State);
		EnterRule(_localctx, 1160, RULE_opt_escape);
		try {
			State = 8801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8798;
				Match(ESCAPE);
				State = 8799;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qualContext a_expr_qual() {
			return GetRuleContext<A_expr_qualContext>(0);
		}
		public A_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr(this);
		}
	}

	[RuleVersion(0)]
	public A_exprContext a_expr() {
		A_exprContext _localctx = new A_exprContext(Context, State);
		EnterRule(_localctx, 1162, RULE_a_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8803;
			a_expr_qual();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_qualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_lesslessContext a_expr_lessless() {
			return GetRuleContext<A_expr_lesslessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		public A_expr_qualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_qual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_qual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_qual(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_qualContext a_expr_qual() {
		A_expr_qualContext _localctx = new A_expr_qualContext(Context, State);
		EnterRule(_localctx, 1164, RULE_a_expr_qual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8805;
			a_expr_lessless();
			State = 8807;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
			case 1:
				{
				State = 8806;
				qual_op();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_lesslessContext : ParserRuleContext {
		public A_expr_orContext lhs;
		public IToken _LESS_LESS;
		public IList<IToken> _operands = new List<IToken>();
		public IToken _GREATER_GREATER;
		public IToken _tset16833;
		public A_expr_orContext _a_expr_or;
		public IList<A_expr_orContext> _rhs = new List<A_expr_orContext>();
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_orContext[] a_expr_or() {
			return GetRuleContexts<A_expr_orContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_orContext a_expr_or(int i) {
			return GetRuleContext<A_expr_orContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_LESS() { return GetTokens(PostgreSQLParser.LESS_LESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS(int i) {
			return GetToken(PostgreSQLParser.LESS_LESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_GREATER() { return GetTokens(PostgreSQLParser.GREATER_GREATER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER(int i) {
			return GetToken(PostgreSQLParser.GREATER_GREATER, i);
		}
		public A_expr_lesslessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_lessless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_lessless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_lessless(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_lesslessContext a_expr_lessless() {
		A_expr_lesslessContext _localctx = new A_expr_lesslessContext(Context, State);
		EnterRule(_localctx, 1166, RULE_a_expr_lessless);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8809;
			_localctx.lhs = a_expr_or();
			State = 8814;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,543,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8810;
					_localctx._tset16833 = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
						_localctx._tset16833 = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					_localctx._operands.Add(_localctx._tset16833);
					State = 8811;
					_localctx._a_expr_or = a_expr_or();
					_localctx._rhs.Add(_localctx._a_expr_or);
					}
					} 
				}
				State = 8816;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,543,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_orContext : ParserRuleContext {
		public A_expr_andContext lhs;
		public IToken _OR;
		public IList<IToken> _operands = new List<IToken>();
		public A_expr_andContext _a_expr_and;
		public IList<A_expr_andContext> _rhs = new List<A_expr_andContext>();
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_andContext[] a_expr_and() {
			return GetRuleContexts<A_expr_andContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_andContext a_expr_and(int i) {
			return GetRuleContext<A_expr_andContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public A_expr_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_or(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_orContext a_expr_or() {
		A_expr_orContext _localctx = new A_expr_orContext(Context, State);
		EnterRule(_localctx, 1168, RULE_a_expr_or);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8817;
			_localctx.lhs = a_expr_and();
			State = 8822;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8818;
					_localctx._OR = Match(OR);
					_localctx._operands.Add(_localctx._OR);
					State = 8819;
					_localctx._a_expr_and = a_expr_and();
					_localctx._rhs.Add(_localctx._a_expr_and);
					}
					} 
				}
				State = 8824;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_andContext : ParserRuleContext {
		public A_expr_betweenContext lhs;
		public IToken _AND;
		public IList<IToken> _operands = new List<IToken>();
		public A_expr_betweenContext _a_expr_between;
		public IList<A_expr_betweenContext> _rhs = new List<A_expr_betweenContext>();
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_betweenContext[] a_expr_between() {
			return GetRuleContexts<A_expr_betweenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_betweenContext a_expr_between(int i) {
			return GetRuleContext<A_expr_betweenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PostgreSQLParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PostgreSQLParser.AND, i);
		}
		public A_expr_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_and(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_andContext a_expr_and() {
		A_expr_andContext _localctx = new A_expr_andContext(Context, State);
		EnterRule(_localctx, 1170, RULE_a_expr_and);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8825;
			_localctx.lhs = a_expr_between();
			State = 8830;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,545,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8826;
					_localctx._AND = Match(AND);
					_localctx._operands.Add(_localctx._AND);
					State = 8827;
					_localctx._a_expr_between = a_expr_between();
					_localctx._rhs.Add(_localctx._a_expr_between);
					}
					} 
				}
				State = 8832;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,545,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_betweenContext : ParserRuleContext {
		public A_expr_inContext lhs;
		public IToken _BETWEEN;
		public IList<IToken> _operands = new List<IToken>();
		public A_expr_inContext rhs;
		public A_expr_inContext between_r_h_s;
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_inContext[] a_expr_in() {
			return GetRuleContexts<A_expr_inContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_inContext a_expr_in(int i) {
			return GetRuleContext<A_expr_inContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		public A_expr_betweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_between; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_between(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_between(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_betweenContext a_expr_between() {
		A_expr_betweenContext _localctx = new A_expr_betweenContext(Context, State);
		EnterRule(_localctx, 1172, RULE_a_expr_between);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8833;
			_localctx.lhs = a_expr_in();
			State = 8845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
			case 1:
				{
				State = 8835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8834;
					Match(NOT);
					}
				}

				State = 8837;
				_localctx._BETWEEN = Match(BETWEEN);
				_localctx._operands.Add(_localctx._BETWEEN);
				State = 8839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SYMMETRIC) {
					{
					State = 8838;
					Match(SYMMETRIC);
					}
				}

				State = 8841;
				_localctx.rhs = a_expr_in();
				State = 8842;
				Match(AND);
				State = 8843;
				_localctx.between_r_h_s = a_expr_in();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_inContext : ParserRuleContext {
		public A_expr_unary_notContext lhs;
		public IToken _IN_P;
		public IList<IToken> _operands = new List<IToken>();
		public In_exprContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_notContext a_expr_unary_not() {
			return GetRuleContext<A_expr_unary_notContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public In_exprContext in_expr() {
			return GetRuleContext<In_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_in; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_in(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_in(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_inContext a_expr_in() {
		A_expr_inContext _localctx = new A_expr_inContext(Context, State);
		EnterRule(_localctx, 1174, RULE_a_expr_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8847;
			_localctx.lhs = a_expr_unary_not();
			State = 8853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
			case 1:
				{
				State = 8849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8848;
					Match(NOT);
					}
				}

				State = 8851;
				_localctx._IN_P = Match(IN_P);
				_localctx._operands.Add(_localctx._IN_P);
				State = 8852;
				_localctx.rhs = in_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_notContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_isnullContext a_expr_isnull() {
			return GetRuleContext<A_expr_isnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_unary_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_not(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_notContext a_expr_unary_not() {
		A_expr_unary_notContext _localctx = new A_expr_unary_notContext(Context, State);
		EnterRule(_localctx, 1176, RULE_a_expr_unary_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 8855;
				Match(NOT);
				}
			}

			State = 8858;
			a_expr_isnull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_isnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_is_notContext a_expr_is_not() {
			return GetRuleContext<A_expr_is_notContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public A_expr_isnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_isnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_isnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_isnull(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_isnullContext a_expr_isnull() {
		A_expr_isnullContext _localctx = new A_expr_isnullContext(Context, State);
		EnterRule(_localctx, 1178, RULE_a_expr_isnull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8860;
			a_expr_is_not();
			State = 8868;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,552,Context) ) {
			case 1:
				{
				State = 8861;
				Match(ISNULL);
				}
				break;
			case 2:
				{
				State = 8862;
				Match(NOTNULL);
				}
				break;
			case 3:
				{
				{
				State = 8863;
				Match(IS);
				State = 8864;
				Match(NULL_P);
				}
				}
				break;
			case 4:
				{
				{
				State = 8865;
				Match(IS);
				State = 8866;
				Match(NOT);
				State = 8867;
				Match(NULL_P);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_is_notContext : ParserRuleContext {
		public A_expr_compareContext lhs;
		public IToken _NULL_P;
		public IList<IToken> _operands = new List<IToken>();
		public IToken _TRUE_P;
		public IToken _FALSE_P;
		public IToken _UNKNOWN;
		public IToken _DISTINCT;
		public IToken _tset17029;
		public A_exprContext rhs1;
		public IToken _OF;
		public Type_listContext rhs2;
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_compareContext a_expr_compare() {
			return GetRuleContext<A_expr_compareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		public A_expr_is_notContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_is_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_is_not(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_is_not(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_is_notContext a_expr_is_not() {
		A_expr_is_notContext _localctx = new A_expr_is_notContext(Context, State);
		EnterRule(_localctx, 1180, RULE_a_expr_is_not);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8870;
			_localctx.lhs = a_expr_compare();
			State = 8890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,556,Context) ) {
			case 1:
				{
				State = 8871;
				Match(IS);
				State = 8873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8872;
					Match(NOT);
					}
				}

				State = 8888;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DISTINCT:
				case FALSE_P:
				case NULL_P:
				case TRUE_P:
				case UNKNOWN:
					{
					State = 8875;
					_localctx._tset17029 = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 1099515822097L) != 0 || _la==UNKNOWN) ) {
						_localctx._tset17029 = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					_localctx._operands.Add(_localctx._tset17029);
					State = 8876;
					Match(FROM);
					State = 8877;
					_localctx.rhs1 = a_expr();
					}
					break;
				case OF:
					{
					State = 8878;
					_localctx._OF = Match(OF);
					_localctx._operands.Add(_localctx._OF);
					State = 8879;
					Match(OPEN_PAREN);
					State = 8880;
					_localctx.rhs2 = type_list();
					State = 8881;
					Match(CLOSE_PAREN);
					}
					break;
				case DOCUMENT_P:
					{
					State = 8883;
					Match(DOCUMENT_P);
					}
					break;
				case NORMALIZED:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
					{
					State = 8885;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & 15L) != 0) {
						{
						State = 8884;
						unicode_normal_form();
						}
					}

					State = 8887;
					Match(NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_compareContext : ParserRuleContext {
		public A_expr_likeContext lhs;
		public IToken _LT;
		public IList<IToken> _operands = new List<IToken>();
		public IToken _GT;
		public IToken _EQUAL;
		public IToken _LESS_EQUALS;
		public IToken _GREATER_EQUALS;
		public IToken _NOT_EQUALS;
		public IToken _tset17098;
		public A_expr_likeContext rhs1;
		public Sub_typeContext _sub_type;
		public IList<Sub_typeContext> _operands1 = new List<Sub_typeContext>();
		public Select_with_parensContext rhs2;
		public A_exprContext rhs3;
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_likeContext[] a_expr_like() {
			return GetRuleContexts<A_expr_likeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_likeContext a_expr_like(int i) {
			return GetRuleContext<A_expr_likeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subquery_OpContext subquery_Op() {
			return GetRuleContext<Subquery_OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sub_typeContext sub_type() {
			return GetRuleContext<Sub_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public A_expr_compareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_compare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_compare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_compare(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_compareContext a_expr_compare() {
		A_expr_compareContext _localctx = new A_expr_compareContext(Context, State);
		EnterRule(_localctx, 1182, RULE_a_expr_compare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8892;
			_localctx.lhs = a_expr_like();
			State = 8904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,558,Context) ) {
			case 1:
				{
				State = 8893;
				_localctx._tset17098 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0) ) {
					_localctx._tset17098 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				_localctx._operands.Add(_localctx._tset17098);
				State = 8894;
				_localctx.rhs1 = a_expr_like();
				}
				break;
			case 2:
				{
				State = 8895;
				subquery_Op();
				State = 8896;
				_localctx._sub_type = sub_type();
				_localctx._operands1.Add(_localctx._sub_type);
				State = 8902;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
				case 1:
					{
					State = 8897;
					_localctx.rhs2 = select_with_parens();
					}
					break;
				case 2:
					{
					State = 8898;
					Match(OPEN_PAREN);
					State = 8899;
					_localctx.rhs3 = a_expr();
					State = 8900;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_likeContext : ParserRuleContext {
		public A_expr_qual_opContext lhs;
		public IToken _LIKE;
		public IList<IToken> _operands = new List<IToken>();
		public IToken _ILIKE;
		public IToken _SIMILAR;
		public A_expr_qual_opContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qual_opContext[] a_expr_qual_op() {
			return GetRuleContexts<A_expr_qual_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_qual_opContext a_expr_qual_op(int i) {
			return GetRuleContext<A_expr_qual_opContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_escapeContext opt_escape() {
			return GetRuleContext<Opt_escapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		public A_expr_likeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_like; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_like(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_like(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_likeContext a_expr_like() {
		A_expr_likeContext _localctx = new A_expr_likeContext(Context, State);
		EnterRule(_localctx, 1184, RULE_a_expr_like);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8906;
			_localctx.lhs = a_expr_qual_op();
			State = 8919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,561,Context) ) {
			case 1:
				{
				State = 8908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 8907;
					Match(NOT);
					}
				}

				State = 8914;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 8910;
					_localctx._LIKE = Match(LIKE);
					_localctx._operands.Add(_localctx._LIKE);
					}
					break;
				case ILIKE:
					{
					State = 8911;
					_localctx._ILIKE = Match(ILIKE);
					_localctx._operands.Add(_localctx._ILIKE);
					}
					break;
				case SIMILAR:
					{
					State = 8912;
					_localctx._SIMILAR = Match(SIMILAR);
					_localctx._operands.Add(_localctx._SIMILAR);
					State = 8913;
					Match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8916;
				_localctx.rhs = a_expr_qual_op();
				State = 8917;
				opt_escape();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_qual_opContext : ParserRuleContext {
		public A_expr_unary_qualopContext lhs;
		public Qual_opContext _qual_op;
		public IList<Qual_opContext> _operands = new List<Qual_opContext>();
		public A_expr_unary_qualopContext _a_expr_unary_qualop;
		public IList<A_expr_unary_qualopContext> _rhs = new List<A_expr_unary_qualopContext>();
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_qualopContext[] a_expr_unary_qualop() {
			return GetRuleContexts<A_expr_unary_qualopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_qualopContext a_expr_unary_qualop(int i) {
			return GetRuleContext<A_expr_unary_qualopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext[] qual_op() {
			return GetRuleContexts<Qual_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op(int i) {
			return GetRuleContext<Qual_opContext>(i);
		}
		public A_expr_qual_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_qual_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_qual_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_qual_op(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_qual_opContext a_expr_qual_op() {
		A_expr_qual_opContext _localctx = new A_expr_qual_opContext(Context, State);
		EnterRule(_localctx, 1186, RULE_a_expr_qual_op);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8921;
			_localctx.lhs = a_expr_unary_qualop();
			State = 8927;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,562,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8922;
					_localctx._qual_op = qual_op();
					_localctx._operands.Add(_localctx._qual_op);
					State = 8923;
					_localctx._a_expr_unary_qualop = a_expr_unary_qualop();
					_localctx._rhs.Add(_localctx._a_expr_unary_qualop);
					}
					} 
				}
				State = 8929;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,562,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_qualopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_addContext a_expr_add() {
			return GetRuleContext<A_expr_addContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		public A_expr_unary_qualopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_qualop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_qualop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_qualop(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_qualopContext a_expr_unary_qualop() {
		A_expr_unary_qualopContext _localctx = new A_expr_unary_qualopContext(Context, State);
		EnterRule(_localctx, 1188, RULE_a_expr_unary_qualop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8931;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,563,Context) ) {
			case 1:
				{
				State = 8930;
				qual_op();
				}
				break;
			}
			State = 8933;
			a_expr_add();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_addContext : ParserRuleContext {
		public A_expr_mulContext lhs;
		public IToken _MINUS;
		public IList<IToken> _operands = new List<IToken>();
		public IToken _PLUS;
		public IToken _tset17248;
		public A_expr_mulContext _a_expr_mul;
		public IList<A_expr_mulContext> _rhs = new List<A_expr_mulContext>();
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_mulContext[] a_expr_mul() {
			return GetRuleContexts<A_expr_mulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_mulContext a_expr_mul(int i) {
			return GetRuleContext<A_expr_mulContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(PostgreSQLParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(PostgreSQLParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(PostgreSQLParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(PostgreSQLParser.PLUS, i);
		}
		public A_expr_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_add(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_add(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_addContext a_expr_add() {
		A_expr_addContext _localctx = new A_expr_addContext(Context, State);
		EnterRule(_localctx, 1190, RULE_a_expr_add);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8935;
			_localctx.lhs = a_expr_mul();
			State = 8940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8936;
					_localctx._tset17248 = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						_localctx._tset17248 = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					_localctx._operands.Add(_localctx._tset17248);
					State = 8937;
					_localctx._a_expr_mul = a_expr_mul();
					_localctx._rhs.Add(_localctx._a_expr_mul);
					}
					} 
				}
				State = 8942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_mulContext : ParserRuleContext {
		public A_expr_caretContext lhs;
		public IToken _STAR;
		public IList<IToken> _operands = new List<IToken>();
		public IToken _SLASH;
		public IToken _PERCENT;
		public IToken _tset17277;
		public A_expr_caretContext _a_expr_caret;
		public IList<A_expr_caretContext> _rhs = new List<A_expr_caretContext>();
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_caretContext[] a_expr_caret() {
			return GetRuleContexts<A_expr_caretContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_caretContext a_expr_caret(int i) {
			return GetRuleContext<A_expr_caretContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(PostgreSQLParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(PostgreSQLParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(PostgreSQLParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(PostgreSQLParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERCENT() { return GetTokens(PostgreSQLParser.PERCENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT(int i) {
			return GetToken(PostgreSQLParser.PERCENT, i);
		}
		public A_expr_mulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_mul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_mul(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_mulContext a_expr_mul() {
		A_expr_mulContext _localctx = new A_expr_mulContext(Context, State);
		EnterRule(_localctx, 1192, RULE_a_expr_mul);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8943;
			_localctx.lhs = a_expr_caret();
			State = 8948;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,565,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8944;
					_localctx._tset17277 = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0) ) {
						_localctx._tset17277 = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					_localctx._operands.Add(_localctx._tset17277);
					State = 8945;
					_localctx._a_expr_caret = a_expr_caret();
					_localctx._rhs.Add(_localctx._a_expr_caret);
					}
					} 
				}
				State = 8950;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,565,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_caretContext : ParserRuleContext {
		public A_expr_unary_signContext lhs;
		public IToken _CARET;
		public IList<IToken> _operands = new List<IToken>();
		public A_exprContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_unary_signContext a_expr_unary_sign() {
			return GetRuleContext<A_expr_unary_signContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public A_expr_caretContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_caret; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_caret(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_caret(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_caretContext a_expr_caret() {
		A_expr_caretContext _localctx = new A_expr_caretContext(Context, State);
		EnterRule(_localctx, 1194, RULE_a_expr_caret);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8951;
			_localctx.lhs = a_expr_unary_sign();
			State = 8954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,566,Context) ) {
			case 1:
				{
				State = 8952;
				_localctx._CARET = Match(CARET);
				_localctx._operands.Add(_localctx._CARET);
				State = 8953;
				_localctx.rhs = a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_unary_signContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_at_time_zoneContext a_expr_at_time_zone() {
			return GetRuleContext<A_expr_at_time_zoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		public A_expr_unary_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_unary_sign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_unary_sign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_unary_sign(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_unary_signContext a_expr_unary_sign() {
		A_expr_unary_signContext _localctx = new A_expr_unary_signContext(Context, State);
		EnterRule(_localctx, 1196, RULE_a_expr_unary_sign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 8956;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 8959;
			a_expr_at_time_zone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_at_time_zoneContext : ParserRuleContext {
		public A_expr_collateContext lhs;
		public IToken _TIME;
		public IList<IToken> _operands = new List<IToken>();
		public A_exprContext rhs;
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_collateContext a_expr_collate() {
			return GetRuleContext<A_expr_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public A_expr_at_time_zoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_at_time_zone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_at_time_zone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_at_time_zone(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_at_time_zoneContext a_expr_at_time_zone() {
		A_expr_at_time_zoneContext _localctx = new A_expr_at_time_zoneContext(Context, State);
		EnterRule(_localctx, 1198, RULE_a_expr_at_time_zone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8961;
			_localctx.lhs = a_expr_collate();
			State = 8966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				{
				State = 8962;
				Match(AT);
				State = 8963;
				_localctx._TIME = Match(TIME);
				_localctx._operands.Add(_localctx._TIME);
				State = 8964;
				Match(ZONE);
				State = 8965;
				_localctx.rhs = a_expr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_expr_typecastContext a_expr_typecast() {
			return GetRuleContext<A_expr_typecastContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public A_expr_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_collate(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_collateContext a_expr_collate() {
		A_expr_collateContext _localctx = new A_expr_collateContext(Context, State);
		EnterRule(_localctx, 1200, RULE_a_expr_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8968;
			a_expr_typecast();
			State = 8971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,569,Context) ) {
			case 1:
				{
				State = 8969;
				Match(COLLATE);
				State = 8970;
				any_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_expr_typecastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPECAST() { return GetTokens(PostgreSQLParser.TYPECAST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST(int i) {
			return GetToken(PostgreSQLParser.TYPECAST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public A_expr_typecastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr_typecast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterA_expr_typecast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitA_expr_typecast(this);
		}
	}

	[RuleVersion(0)]
	public A_expr_typecastContext a_expr_typecast() {
		A_expr_typecastContext _localctx = new A_expr_typecastContext(Context, State);
		EnterRule(_localctx, 1202, RULE_a_expr_typecast);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8973;
			c_expr();
			State = 8978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TYPECAST) {
				{
				{
				State = 8974;
				Match(TYPECAST);
				State = 8975;
				typename();
				}
				}
				State = 8980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_exprContext : ParserRuleContext {
		public IToken _PLUS;
		public IList<IToken> _operands = new List<IToken>();
		public IToken _MINUS;
		public IToken _tset19;
		public IToken _CARET;
		public IToken _STAR;
		public IToken _SLASH;
		public IToken _PERCENT;
		public IToken _tset110;
		public IToken _tset159;
		public IToken _LT;
		public IToken _GT;
		public IToken _EQUAL;
		public IToken _LESS_EQUALS;
		public IToken _GREATER_EQUALS;
		public IToken _NOT_EQUALS;
		public IToken _tset226;
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qual_opContext qual_op() {
			return GetRuleContext<Qual_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(PostgreSQLParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_listContext type_list() {
			return GetRuleContext<Type_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		public B_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterB_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitB_expr(this);
		}
	}

	[RuleVersion(0)]
	public B_exprContext b_expr() {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		B_exprContext _localctx = new B_exprContext(Context, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 1204;
		EnterRecursionRule(_localctx, 1204, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,571,Context) ) {
			case 1:
				{
				State = 8982;
				c_expr();
				}
				break;
			case 2:
				{
				State = 8983;
				_localctx._tset19 = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx._tset19 = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				_localctx._operands.Add(_localctx._tset19);
				State = 8984;
				b_expr(9);
				}
				break;
			case 3:
				{
				State = 8985;
				qual_op();
				State = 8986;
				b_expr(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 9029;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,575,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 9027;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8990;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 8991;
						_localctx._CARET = Match(CARET);
						_localctx._operands.Add(_localctx._CARET);
						State = 8992;
						b_expr(9);
						}
						break;
					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8993;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 8994;
						_localctx._tset110 = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 134234624L) != 0) ) {
							_localctx._tset110 = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						_localctx._operands.Add(_localctx._tset110);
						State = 8995;
						b_expr(8);
						}
						break;
					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8996;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 8997;
						_localctx._tset159 = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx._tset159 = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						_localctx._operands.Add(_localctx._tset159);
						State = 8998;
						b_expr(7);
						}
						break;
					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 8999;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 9000;
						qual_op();
						State = 9001;
						b_expr(6);
						}
						break;
					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9003;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 9004;
						_localctx._tset226 = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 44237824L) != 0) ) {
							_localctx._tset226 = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						_localctx._operands.Add(_localctx._tset226);
						State = 9005;
						b_expr(5);
						}
						break;
					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9006;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 9007;
						Match(TYPECAST);
						State = 9008;
						typename();
						}
						break;
					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9009;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 9010;
						qual_op();
						}
						break;
					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
						State = 9011;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 9012;
						Match(IS);
						State = 9014;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 9013;
							Match(NOT);
							}
						}

						State = 9025;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case DISTINCT:
							{
							State = 9016;
							Match(DISTINCT);
							State = 9017;
							Match(FROM);
							State = 9018;
							b_expr(0);
							}
							break;
						case OF:
							{
							State = 9019;
							Match(OF);
							State = 9020;
							Match(OPEN_PAREN);
							State = 9021;
							type_list();
							State = 9022;
							Match(CLOSE_PAREN);
							}
							break;
						case DOCUMENT_P:
							{
							State = 9024;
							Match(DOCUMENT_P);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				State = 9031;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,575,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class C_exprContext : ParserRuleContext {
		public C_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_expr; } }
	 
		public C_exprContext() { }
		public virtual void CopyFrom(C_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class C_expr_existsContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public C_expr_existsContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_exists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_exists(this);
		}
	}
	public partial class C_expr_caseContext : C_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_exprContext case_expr() {
			return GetRuleContext<Case_exprContext>(0);
		}
		public C_expr_caseContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_case(this);
		}
	}
	public partial class C_expr_exprContext : C_exprContext {
		public A_exprContext a_expr_in_parens;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_indirectionContext opt_indirection() {
			return GetRuleContext<Opt_indirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnrefContext columnref() {
			return GetRuleContext<ColumnrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AexprconstContext aexprconst() {
			return GetRuleContext<AexprconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlvariablenameContext plsqlvariablename() {
			return GetRuleContext<PlsqlvariablenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_exprContext func_expr() {
			return GetRuleContext<Func_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rowContext explicit_row() {
			return GetRuleContext<Explicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implicit_rowContext implicit_row() {
			return GetRuleContext<Implicit_rowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext[] row() {
			return GetRuleContexts<RowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		public C_expr_exprContext(C_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterC_expr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitC_expr_expr(this);
		}
	}

	[RuleVersion(0)]
	public C_exprContext c_expr() {
		C_exprContext _localctx = new C_exprContext(Context, State);
		EnterRule(_localctx, 1206, RULE_c_expr);
		try {
			State = 9068;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9032;
				Match(EXISTS);
				State = 9033;
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9034;
				Match(ARRAY);
				State = 9037;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 9035;
					select_with_parens();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 9036;
					array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 9039;
				Match(PARAM);
				State = 9040;
				opt_indirection();
				}
				break;
			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 9041;
				Match(GROUPING);
				State = 9042;
				Match(OPEN_PAREN);
				State = 9043;
				expr_list();
				State = 9044;
				Match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 9046;
				Match(UNIQUE);
				State = 9047;
				select_with_parens();
				}
				break;
			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 9048;
				columnref();
				}
				break;
			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 9049;
				aexprconst();
				}
				break;
			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 9050;
				plsqlvariablename();
				}
				break;
			case 9:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 9051;
				Match(OPEN_PAREN);
				State = 9052;
				((C_expr_exprContext)_localctx).a_expr_in_parens = a_expr();
				State = 9053;
				Match(CLOSE_PAREN);
				State = 9054;
				opt_indirection();
				}
				break;
			case 10:
				_localctx = new C_expr_caseContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 9056;
				case_expr();
				}
				break;
			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 9057;
				func_expr();
				}
				break;
			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 9058;
				select_with_parens();
				State = 9060;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,577,Context) ) {
				case 1:
					{
					State = 9059;
					indirection();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 9062;
				explicit_row();
				}
				break;
			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 9063;
				implicit_row();
				}
				break;
			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 9064;
				row();
				State = 9065;
				Match(OVERLAPS);
				State = 9066;
				row();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlvariablenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLVARIABLENAME() { return GetToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
		public PlsqlvariablenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlvariablename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlvariablename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlvariablename(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlvariablenameContext plsqlvariablename() {
		PlsqlvariablenameContext _localctx = new PlsqlvariablenameContext(Context, State);
		EnterRule(_localctx, 1208, RULE_plsqlvariablename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9070;
			Match(PLSQLVARIABLENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_applicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr() {
			return GetRuleContext<Func_arg_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		public Func_applicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_application; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_application(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_application(this);
		}
	}

	[RuleVersion(0)]
	public Func_applicationContext func_application() {
		Func_applicationContext _localctx = new Func_applicationContext(Context, State);
		EnterRule(_localctx, 1210, RULE_func_application);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9072;
			func_name();
			State = 9073;
			Match(OPEN_PAREN);
			State = 9092;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				State = 9074;
				func_arg_list();
				State = 9078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9075;
					Match(COMMA);
					State = 9076;
					Match(VARIADIC);
					State = 9077;
					func_arg_expr();
					}
				}

				State = 9080;
				opt_sort_clause();
				}
				break;
			case VARIADIC:
				{
				State = 9082;
				Match(VARIADIC);
				State = 9083;
				func_arg_expr();
				State = 9084;
				opt_sort_clause();
				}
				break;
			case ALL:
			case DISTINCT:
				{
				State = 9086;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9087;
				func_arg_list();
				State = 9088;
				opt_sort_clause();
				}
				break;
			case STAR:
				{
				State = 9090;
				Match(STAR);
				}
				break;
			case CLOSE_PAREN:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 9094;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Within_group_clauseContext within_group_clause() {
			return GetRuleContext<Within_group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Filter_clauseContext filter_clause() {
			return GetRuleContext<Filter_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_exprContext func_expr() {
		Func_exprContext _localctx = new Func_exprContext(Context, State);
		EnterRule(_localctx, 1212, RULE_func_expr);
		try {
			State = 9102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,581,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9096;
				func_application();
				State = 9097;
				within_group_clause();
				State = 9098;
				filter_clause();
				State = 9099;
				over_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9101;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_windowlessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_applicationContext func_application() {
			return GetRuleContext<Func_applicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_expr_common_subexprContext func_expr_common_subexpr() {
			return GetRuleContext<Func_expr_common_subexprContext>(0);
		}
		public Func_expr_windowlessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_windowless; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_windowless(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_windowless(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_windowlessContext func_expr_windowless() {
		Func_expr_windowlessContext _localctx = new Func_expr_windowlessContext(Context, State);
		EnterRule(_localctx, 1214, RULE_func_expr_windowless);
		try {
			State = 9106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9104;
				func_application();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9105;
				func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_expr_common_subexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Extract_listContext extract_list() {
			return GetRuleContext<Extract_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unicode_normal_formContext unicode_normal_form() {
			return GetRuleContext<Unicode_normal_formContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Overlay_listContext overlay_list() {
			return GetRuleContext<Overlay_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Position_listContext position_list() {
			return GetRuleContext<Position_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Substr_listContext substr_list() {
			return GetRuleContext<Substr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Trim_listContext trim_list() {
			return GetRuleContext<Trim_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attributesContext xml_attributes() {
			return GetRuleContext<Xml_attributesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xmlexists_argumentContext xmlexists_argument() {
			return GetRuleContext<Xmlexists_argumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Document_or_contentContext document_or_content() {
			return GetRuleContext<Document_or_contentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_whitespace_optionContext xml_whitespace_option() {
			return GetRuleContext<Xml_whitespace_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_root_versionContext xml_root_version() {
			return GetRuleContext<Xml_root_versionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
			return GetRuleContext<Opt_xml_root_standaloneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpletypenameContext simpletypename() {
			return GetRuleContext<SimpletypenameContext>(0);
		}
		public Func_expr_common_subexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_expr_common_subexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_expr_common_subexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_expr_common_subexpr(this);
		}
	}

	[RuleVersion(0)]
	public Func_expr_common_subexprContext func_expr_common_subexpr() {
		Func_expr_common_subexprContext _localctx = new Func_expr_common_subexprContext(Context, State);
		EnterRule(_localctx, 1216, RULE_func_expr_common_subexpr);
		int _la;
		try {
			State = 9285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9108;
				Match(COLLATION);
				State = 9109;
				Match(FOR);
				State = 9110;
				Match(OPEN_PAREN);
				State = 9111;
				a_expr();
				State = 9112;
				Match(CLOSE_PAREN);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9114;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9115;
				Match(CURRENT_TIME);
				State = 9120;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
				case 1:
					{
					State = 9116;
					Match(OPEN_PAREN);
					State = 9117;
					iconst();
					State = 9118;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9122;
				Match(CURRENT_TIMESTAMP);
				State = 9127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
				case 1:
					{
					State = 9123;
					Match(OPEN_PAREN);
					State = 9124;
					iconst();
					State = 9125;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9129;
				Match(LOCALTIME);
				State = 9134;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,585,Context) ) {
				case 1:
					{
					State = 9130;
					Match(OPEN_PAREN);
					State = 9131;
					iconst();
					State = 9132;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9136;
				Match(LOCALTIMESTAMP);
				State = 9141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,586,Context) ) {
				case 1:
					{
					State = 9137;
					Match(OPEN_PAREN);
					State = 9138;
					iconst();
					State = 9139;
					Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CURRENT_ROLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9143;
				Match(CURRENT_ROLE);
				}
				break;
			case CURRENT_USER:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9144;
				Match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9145;
				Match(SESSION_USER);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9146;
				Match(USER);
				}
				break;
			case CURRENT_CATALOG:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9147;
				Match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9148;
				Match(CURRENT_SCHEMA);
				}
				break;
			case CAST:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9149;
				Match(CAST);
				State = 9150;
				Match(OPEN_PAREN);
				State = 9151;
				a_expr();
				State = 9152;
				Match(AS);
				State = 9153;
				typename();
				State = 9154;
				Match(CLOSE_PAREN);
				}
				break;
			case EXTRACT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9156;
				Match(EXTRACT);
				State = 9157;
				Match(OPEN_PAREN);
				State = 9158;
				extract_list();
				State = 9159;
				Match(CLOSE_PAREN);
				}
				break;
			case NORMALIZE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9161;
				Match(NORMALIZE);
				State = 9162;
				Match(OPEN_PAREN);
				State = 9163;
				a_expr();
				State = 9166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9164;
					Match(COMMA);
					State = 9165;
					unicode_normal_form();
					}
				}

				State = 9168;
				Match(CLOSE_PAREN);
				}
				break;
			case OVERLAY:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9170;
				Match(OVERLAY);
				State = 9171;
				Match(OPEN_PAREN);
				State = 9172;
				overlay_list();
				State = 9173;
				Match(CLOSE_PAREN);
				}
				break;
			case POSITION:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9175;
				Match(POSITION);
				State = 9176;
				Match(OPEN_PAREN);
				State = 9177;
				position_list();
				State = 9178;
				Match(CLOSE_PAREN);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9180;
				Match(SUBSTRING);
				State = 9181;
				Match(OPEN_PAREN);
				State = 9182;
				substr_list();
				State = 9183;
				Match(CLOSE_PAREN);
				}
				break;
			case TREAT:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9185;
				Match(TREAT);
				State = 9186;
				Match(OPEN_PAREN);
				State = 9187;
				a_expr();
				State = 9188;
				Match(AS);
				State = 9189;
				typename();
				State = 9190;
				Match(CLOSE_PAREN);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9192;
				Match(TRIM);
				State = 9193;
				Match(OPEN_PAREN);
				State = 9195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 72057611217797121L) != 0) {
					{
					State = 9194;
					_la = TokenStream.LA(1);
					if ( !((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 72057611217797121L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 9197;
				trim_list();
				State = 9198;
				Match(CLOSE_PAREN);
				}
				break;
			case NULLIF:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9200;
				Match(NULLIF);
				State = 9201;
				Match(OPEN_PAREN);
				State = 9202;
				a_expr();
				State = 9203;
				Match(COMMA);
				State = 9204;
				a_expr();
				State = 9205;
				Match(CLOSE_PAREN);
				}
				break;
			case COALESCE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9207;
				Match(COALESCE);
				State = 9208;
				Match(OPEN_PAREN);
				State = 9209;
				expr_list();
				State = 9210;
				Match(CLOSE_PAREN);
				}
				break;
			case GREATEST:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9212;
				Match(GREATEST);
				State = 9213;
				Match(OPEN_PAREN);
				State = 9214;
				expr_list();
				State = 9215;
				Match(CLOSE_PAREN);
				}
				break;
			case LEAST:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9217;
				Match(LEAST);
				State = 9218;
				Match(OPEN_PAREN);
				State = 9219;
				expr_list();
				State = 9220;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLCONCAT:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9222;
				Match(XMLCONCAT);
				State = 9223;
				Match(OPEN_PAREN);
				State = 9224;
				expr_list();
				State = 9225;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLELEMENT:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9227;
				Match(XMLELEMENT);
				State = 9228;
				Match(OPEN_PAREN);
				State = 9229;
				Match(NAME_P);
				State = 9230;
				collabel();
				State = 9236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9231;
					Match(COMMA);
					State = 9234;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,589,Context) ) {
					case 1:
						{
						State = 9232;
						xml_attributes();
						}
						break;
					case 2:
						{
						State = 9233;
						expr_list();
						}
						break;
					}
					}
				}

				State = 9238;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLEXISTS:
				EnterOuterAlt(_localctx, 27);
				{
				State = 9240;
				Match(XMLEXISTS);
				State = 9241;
				Match(OPEN_PAREN);
				State = 9242;
				c_expr();
				State = 9243;
				xmlexists_argument();
				State = 9244;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLFOREST:
				EnterOuterAlt(_localctx, 28);
				{
				State = 9246;
				Match(XMLFOREST);
				State = 9247;
				Match(OPEN_PAREN);
				State = 9248;
				xml_attribute_list();
				State = 9249;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLPARSE:
				EnterOuterAlt(_localctx, 29);
				{
				State = 9251;
				Match(XMLPARSE);
				State = 9252;
				Match(OPEN_PAREN);
				State = 9253;
				document_or_content();
				State = 9254;
				a_expr();
				State = 9255;
				xml_whitespace_option();
				State = 9256;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLPI:
				EnterOuterAlt(_localctx, 30);
				{
				State = 9258;
				Match(XMLPI);
				State = 9259;
				Match(OPEN_PAREN);
				State = 9260;
				Match(NAME_P);
				State = 9261;
				collabel();
				State = 9264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 9262;
					Match(COMMA);
					State = 9263;
					a_expr();
					}
				}

				State = 9266;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLROOT:
				EnterOuterAlt(_localctx, 31);
				{
				State = 9268;
				Match(XMLROOT);
				State = 9269;
				Match(OPEN_PAREN);
				State = 9270;
				Match(XML_P);
				State = 9271;
				a_expr();
				State = 9272;
				Match(COMMA);
				State = 9273;
				xml_root_version();
				State = 9274;
				opt_xml_root_standalone();
				State = 9275;
				Match(CLOSE_PAREN);
				}
				break;
			case XMLSERIALIZE:
				EnterOuterAlt(_localctx, 32);
				{
				State = 9277;
				Match(XMLSERIALIZE);
				State = 9278;
				Match(OPEN_PAREN);
				State = 9279;
				document_or_content();
				State = 9280;
				a_expr();
				State = 9281;
				Match(AS);
				State = 9282;
				simpletypename();
				State = 9283;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_root_versionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_root_versionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_root_version; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_root_version(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_root_version(this);
		}
	}

	[RuleVersion(0)]
	public Xml_root_versionContext xml_root_version() {
		Xml_root_versionContext _localctx = new Xml_root_versionContext(Context, State);
		EnterRule(_localctx, 1218, RULE_xml_root_version);
		try {
			State = 9292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9287;
				Match(VERSION_P);
				State = 9288;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9289;
				Match(VERSION_P);
				State = 9290;
				Match(NO);
				State = 9291;
				Match(VALUE_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_xml_root_standaloneContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Opt_xml_root_standaloneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_xml_root_standalone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_xml_root_standalone(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_xml_root_standalone(this);
		}
	}

	[RuleVersion(0)]
	public Opt_xml_root_standaloneContext opt_xml_root_standalone() {
		Opt_xml_root_standaloneContext _localctx = new Opt_xml_root_standaloneContext(Context, State);
		EnterRule(_localctx, 1220, RULE_opt_xml_root_standalone);
		try {
			State = 9305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,594,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9294;
				Match(COMMA);
				State = 9295;
				Match(STANDALONE_P);
				State = 9296;
				Match(YES_P);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9297;
				Match(COMMA);
				State = 9298;
				Match(STANDALONE_P);
				State = 9299;
				Match(NO);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9300;
				Match(COMMA);
				State = 9301;
				Match(STANDALONE_P);
				State = 9302;
				Match(NO);
				State = 9303;
				Match(VALUE_P);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_listContext xml_attribute_list() {
			return GetRuleContext<Xml_attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Xml_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attributes(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attributesContext xml_attributes() {
		Xml_attributesContext _localctx = new Xml_attributesContext(Context, State);
		EnterRule(_localctx, 1222, RULE_xml_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9307;
			Match(XMLATTRIBUTES);
			State = 9308;
			Match(OPEN_PAREN);
			State = 9309;
			xml_attribute_list();
			State = 9310;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_elContext[] xml_attribute_el() {
			return GetRuleContexts<Xml_attribute_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_attribute_elContext xml_attribute_el(int i) {
			return GetRuleContext<Xml_attribute_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Xml_attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_list(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_listContext xml_attribute_list() {
		Xml_attribute_listContext _localctx = new Xml_attribute_listContext(Context, State);
		EnterRule(_localctx, 1224, RULE_xml_attribute_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9312;
			xml_attribute_el();
			State = 9317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9313;
				Match(COMMA);
				State = 9314;
				xml_attribute_el();
				}
				}
				State = 9319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attribute_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Xml_attribute_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attribute_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_attribute_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_attribute_el(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attribute_elContext xml_attribute_el() {
		Xml_attribute_elContext _localctx = new Xml_attribute_elContext(Context, State);
		EnterRule(_localctx, 1226, RULE_xml_attribute_el);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9320;
			a_expr();
			State = 9323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 9321;
				Match(AS);
				State = 9322;
				collabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Document_or_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		public Document_or_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document_or_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDocument_or_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDocument_or_content(this);
		}
	}

	[RuleVersion(0)]
	public Document_or_contentContext document_or_content() {
		Document_or_contentContext _localctx = new Document_or_contentContext(Context, State);
		EnterRule(_localctx, 1228, RULE_document_or_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9325;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTENT_P || _la==DOCUMENT_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_whitespace_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		public Xml_whitespace_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_whitespace_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_whitespace_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_whitespace_option(this);
		}
	}

	[RuleVersion(0)]
	public Xml_whitespace_optionContext xml_whitespace_option() {
		Xml_whitespace_optionContext _localctx = new Xml_whitespace_optionContext(Context, State);
		EnterRule(_localctx, 1230, RULE_xml_whitespace_option);
		try {
			State = 9332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRESERVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9327;
				Match(PRESERVE);
				State = 9328;
				Match(WHITESPACE_P);
				}
				break;
			case STRIP_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9329;
				Match(STRIP_P);
				State = 9330;
				Match(WHITESPACE_P);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlexists_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public C_exprContext c_expr() {
			return GetRuleContext<C_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext[] xml_passing_mech() {
			return GetRuleContexts<Xml_passing_mechContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xml_passing_mechContext xml_passing_mech(int i) {
			return GetRuleContext<Xml_passing_mechContext>(i);
		}
		public Xmlexists_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlexists_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXmlexists_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXmlexists_argument(this);
		}
	}

	[RuleVersion(0)]
	public Xmlexists_argumentContext xmlexists_argument() {
		Xmlexists_argumentContext _localctx = new Xmlexists_argumentContext(Context, State);
		EnterRule(_localctx, 1232, RULE_xmlexists_argument);
		try {
			State = 9349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9334;
				Match(PASSING);
				State = 9335;
				c_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9336;
				Match(PASSING);
				State = 9337;
				c_expr();
				State = 9338;
				xml_passing_mech();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9340;
				Match(PASSING);
				State = 9341;
				xml_passing_mech();
				State = 9342;
				c_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9344;
				Match(PASSING);
				State = 9345;
				xml_passing_mech();
				State = 9346;
				c_expr();
				State = 9347;
				xml_passing_mech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_passing_mechContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		public Xml_passing_mechContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_passing_mech; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXml_passing_mech(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXml_passing_mech(this);
		}
	}

	[RuleVersion(0)]
	public Xml_passing_mechContext xml_passing_mech() {
		Xml_passing_mechContext _localctx = new Xml_passing_mechContext(Context, State);
		EnterRule(_localctx, 1234, RULE_xml_passing_mech);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9351;
			Match(BY);
			State = 9352;
			_la = TokenStream.LA(1);
			if ( !(_la==REF || _la==VALUE_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_group_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_clauseContext sort_clause() {
			return GetRuleContext<Sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Within_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_group_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWithin_group_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWithin_group_clause(this);
		}
	}

	[RuleVersion(0)]
	public Within_group_clauseContext within_group_clause() {
		Within_group_clauseContext _localctx = new Within_group_clauseContext(Context, State);
		EnterRule(_localctx, 1236, RULE_within_group_clause);
		try {
			State = 9361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,599,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9354;
				Match(WITHIN);
				State = 9355;
				Match(GROUP_P);
				State = 9356;
				Match(OPEN_PAREN);
				State = 9357;
				sort_clause();
				State = 9358;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Filter_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFilter_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFilter_clause(this);
		}
	}

	[RuleVersion(0)]
	public Filter_clauseContext filter_clause() {
		Filter_clauseContext _localctx = new Filter_clauseContext(Context, State);
		EnterRule(_localctx, 1238, RULE_filter_clause);
		try {
			State = 9370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,600,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9363;
				Match(FILTER);
				State = 9364;
				Match(OPEN_PAREN);
				State = 9365;
				Match(WHERE);
				State = 9366;
				a_expr();
				State = 9367;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_definition_listContext window_definition_list() {
			return GetRuleContext<Window_definition_listContext>(0);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 1240, RULE_window_clause);
		try {
			State = 9375;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WINDOW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9372;
				Match(WINDOW);
				State = 9373;
				window_definition_list();
				}
				break;
			case Eof:
			case OPEN_PAREN:
			case CLOSE_PAREN:
			case COMMA:
			case SEMI:
			case ANALYSE:
			case ANALYZE:
			case CREATE:
			case DO:
			case EXCEPT:
			case FETCH:
			case FOR:
			case GRANT:
			case INTERSECT:
			case INTO:
			case LIMIT:
			case OFFSET:
			case ON:
			case ORDER:
			case RETURNING:
			case SELECT:
			case TABLE:
			case THEN:
			case UNION:
			case USING:
			case WHEN:
			case WITH:
			case ABORT_P:
			case ALTER:
			case BEGIN_P:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DELETE_P:
			case DISCARD:
			case DROP:
			case EXECUTE:
			case EXPLAIN:
			case INSERT:
			case LISTEN:
			case LOAD:
			case LOCK_P:
			case MERGE:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SAVEPOINT:
			case SECURITY:
			case SET:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case UPDATE:
			case VACUUM:
			case VALUES:
			case CALL:
			case IMPORT_P:
			case END_P:
			case LOOP:
			case MetaCommand:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext[] window_definition() {
			return GetRuleContexts<Window_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_definitionContext window_definition(int i) {
			return GetRuleContext<Window_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Window_definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition_list(this);
		}
	}

	[RuleVersion(0)]
	public Window_definition_listContext window_definition_list() {
		Window_definition_listContext _localctx = new Window_definition_listContext(Context, State);
		EnterRule(_localctx, 1242, RULE_window_definition_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9377;
			window_definition();
			State = 9382;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,602,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9378;
					Match(COMMA);
					State = 9379;
					window_definition();
					}
					} 
				}
				State = 9384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,602,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_definition(this);
		}
	}

	[RuleVersion(0)]
	public Window_definitionContext window_definition() {
		Window_definitionContext _localctx = new Window_definitionContext(Context, State);
		EnterRule(_localctx, 1244, RULE_window_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9385;
			colid();
			State = 9386;
			Match(AS);
			State = 9387;
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOver_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOver_clause(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 1246, RULE_over_clause);
		try {
			State = 9395;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,604,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9389;
				Match(OVER);
				State = 9392;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
					{
					State = 9390;
					window_specification();
					}
					break;
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 9391;
					colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_existing_window_nameContext opt_existing_window_name() {
			return GetRuleContext<Opt_existing_window_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_partition_clauseContext opt_partition_clause() {
			return GetRuleContext<Opt_partition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_frame_clauseContext opt_frame_clause() {
			return GetRuleContext<Opt_frame_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 1248, RULE_window_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9397;
			Match(OPEN_PAREN);
			State = 9398;
			opt_existing_window_name();
			State = 9399;
			opt_partition_clause();
			State = 9400;
			opt_sort_clause();
			State = 9401;
			opt_frame_clause();
			State = 9402;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_existing_window_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Opt_existing_window_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_existing_window_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_existing_window_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_existing_window_name(this);
		}
	}

	[RuleVersion(0)]
	public Opt_existing_window_nameContext opt_existing_window_name() {
		Opt_existing_window_nameContext _localctx = new Opt_existing_window_nameContext(Context, State);
		EnterRule(_localctx, 1250, RULE_opt_existing_window_name);
		try {
			State = 9406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,605,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9404;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_partition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_partition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_partition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_partition_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_partition_clauseContext opt_partition_clause() {
		Opt_partition_clauseContext _localctx = new Opt_partition_clauseContext(Context, State);
		EnterRule(_localctx, 1252, RULE_opt_partition_clause);
		try {
			State = 9412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9408;
				Match(PARTITION);
				State = 9409;
				Match(BY);
				State = 9410;
				expr_list();
				}
				break;
			case CLOSE_PAREN:
			case ORDER:
			case RANGE:
			case ROWS:
			case GROUPS:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_frame_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Frame_extentContext frame_extent() {
			return GetRuleContext<Frame_extentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
			return GetRuleContext<Opt_window_exclusion_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		public Opt_frame_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_frame_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_frame_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_frame_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_frame_clauseContext opt_frame_clause() {
		Opt_frame_clauseContext _localctx = new Opt_frame_clauseContext(Context, State);
		EnterRule(_localctx, 1254, RULE_opt_frame_clause);
		try {
			State = 9427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9414;
				Match(RANGE);
				State = 9415;
				frame_extent();
				State = 9416;
				opt_window_exclusion_clause();
				}
				break;
			case ROWS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9418;
				Match(ROWS);
				State = 9419;
				frame_extent();
				State = 9420;
				opt_window_exclusion_clause();
				}
				break;
			case GROUPS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9422;
				Match(GROUPS);
				State = 9423;
				frame_extent();
				State = 9424;
				opt_window_exclusion_clause();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 4);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_extentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext[] frame_bound() {
			return GetRuleContexts<Frame_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Frame_boundContext frame_bound(int i) {
			return GetRuleContext<Frame_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		public Frame_extentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_extent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_extent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_extent(this);
		}
	}

	[RuleVersion(0)]
	public Frame_extentContext frame_extent() {
		Frame_extentContext _localctx = new Frame_extentContext(Context, State);
		EnterRule(_localctx, 1256, RULE_frame_extent);
		try {
			State = 9435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9429;
				frame_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9430;
				Match(BETWEEN);
				State = 9431;
				frame_bound();
				State = 9432;
				Match(AND);
				State = 9433;
				frame_bound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Frame_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Frame_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frame_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFrame_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFrame_bound(this);
		}
	}

	[RuleVersion(0)]
	public Frame_boundContext frame_bound() {
		Frame_boundContext _localctx = new Frame_boundContext(Context, State);
		EnterRule(_localctx, 1258, RULE_frame_bound);
		int _la;
		try {
			State = 9444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,609,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9437;
				Match(UNBOUNDED);
				State = 9438;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9439;
				Match(CURRENT_P);
				State = 9440;
				Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9441;
				a_expr();
				State = 9442;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_window_exclusion_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		public Opt_window_exclusion_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_window_exclusion_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_window_exclusion_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_window_exclusion_clause(this);
		}
	}

	[RuleVersion(0)]
	public Opt_window_exclusion_clauseContext opt_window_exclusion_clause() {
		Opt_window_exclusion_clauseContext _localctx = new Opt_window_exclusion_clauseContext(Context, State);
		EnterRule(_localctx, 1260, RULE_opt_window_exclusion_clause);
		try {
			State = 9456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCLUDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9446;
				Match(EXCLUDE);
				State = 9453;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CURRENT_P:
					{
					State = 9447;
					Match(CURRENT_P);
					State = 9448;
					Match(ROW);
					}
					break;
				case GROUP_P:
					{
					State = 9449;
					Match(GROUP_P);
					}
					break;
				case TIES:
					{
					State = 9450;
					Match(TIES);
					}
					break;
				case NO:
					{
					State = 9451;
					Match(NO);
					State = 9452;
					Match(OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(Context, State);
		EnterRule(_localctx, 1262, RULE_row);
		int _la;
		try {
			State = 9470;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9458;
				Match(ROW);
				State = 9459;
				Match(OPEN_PAREN);
				State = 9461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3620818277858553860L) != 0 || (((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & -2120073201L) != 0 || (((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -17L) != 0 || (((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -2533274790395905L) != 0 || (((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0 || (((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -1L) != 0 || (((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & -1152921504606846977L) != 0 || (((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & -2306018931074138113L) != 0 || (((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & -1L) != 0 || (((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & -6300535878691323905L) != 0 || (((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & 2104593L) != 0) {
					{
					State = 9460;
					expr_list();
					}
				}

				State = 9463;
				Match(CLOSE_PAREN);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9464;
				Match(OPEN_PAREN);
				State = 9465;
				expr_list();
				State = 9466;
				Match(COMMA);
				State = 9467;
				a_expr();
				State = 9468;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Explicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_rowContext explicit_row() {
		Explicit_rowContext _localctx = new Explicit_rowContext(Context, State);
		EnterRule(_localctx, 1264, RULE_explicit_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9472;
			Match(ROW);
			State = 9473;
			Match(OPEN_PAREN);
			State = 9475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3620818277858553860L) != 0 || (((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & -2120073201L) != 0 || (((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & -17L) != 0 || (((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & -2533274790395905L) != 0 || (((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & -1L) != 0 || (((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & -1L) != 0 || (((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & -1152921504606846977L) != 0 || (((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & -2306018931074138113L) != 0 || (((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & -1L) != 0 || (((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & -6300535878691323905L) != 0 || (((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & 2104593L) != 0) {
				{
				State = 9474;
				expr_list();
				}
			}

			State = 9477;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_rowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Implicit_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_row; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterImplicit_row(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitImplicit_row(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_rowContext implicit_row() {
		Implicit_rowContext _localctx = new Implicit_rowContext(Context, State);
		EnterRule(_localctx, 1266, RULE_implicit_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9479;
			Match(OPEN_PAREN);
			State = 9480;
			expr_list();
			State = 9481;
			Match(COMMA);
			State = 9482;
			a_expr();
			State = 9483;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Sub_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSub_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSub_type(this);
		}
	}

	[RuleVersion(0)]
	public Sub_typeContext sub_type() {
		Sub_typeContext _localctx = new Sub_typeContext(Context, State);
		EnterRule(_localctx, 1268, RULE_sub_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9485;
			_la = TokenStream.LA(1);
			if ( !((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 1152921504606846993L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MathopContext mathop() {
			return GetRuleContext<MathopContext>(0);
		}
		public All_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAll_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAll_op(this);
		}
	}

	[RuleVersion(0)]
	public All_opContext all_op() {
		All_opContext _localctx = new All_opContext(Context, State);
		EnterRule(_localctx, 1270, RULE_all_op);
		try {
			State = 9489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9487;
				Match(Operator);
				}
				break;
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9488;
				mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PostgreSQLParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PostgreSQLParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(PostgreSQLParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(PostgreSQLParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(PostgreSQLParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUALS() { return GetToken(PostgreSQLParser.LESS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUALS() { return GetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(PostgreSQLParser.NOT_EQUALS, 0); }
		public MathopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMathop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMathop(this);
		}
	}

	[RuleVersion(0)]
	public MathopContext mathop() {
		MathopContext _localctx = new MathopContext(Context, State);
		EnterRule(_localctx, 1272, RULE_mathop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9491;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 178517504L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_opContext qual_op() {
		Qual_opContext _localctx = new Qual_opContext(Context, State);
		EnterRule(_localctx, 1274, RULE_qual_op);
		try {
			State = 9499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9493;
				Match(Operator);
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9494;
				Match(OPERATOR);
				State = 9495;
				Match(OPEN_PAREN);
				State = 9496;
				any_operator();
				State = 9497;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_all_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Qual_all_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_all_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQual_all_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQual_all_op(this);
		}
	}

	[RuleVersion(0)]
	public Qual_all_opContext qual_all_op() {
		Qual_all_opContext _localctx = new Qual_all_opContext(Context, State);
		EnterRule(_localctx, 1276, RULE_qual_all_op);
		try {
			State = 9507;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
			case EQUAL:
			case PLUS:
			case MINUS:
			case SLASH:
			case CARET:
			case LT:
			case GT:
			case LESS_EQUALS:
			case GREATER_EQUALS:
			case NOT_EQUALS:
			case PERCENT:
			case Operator:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9501;
				all_op();
				}
				break;
			case OPERATOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9502;
				Match(OPERATOR);
				State = 9503;
				Match(OPEN_PAREN);
				State = 9504;
				any_operator();
				State = 9505;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_OpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public All_opContext all_op() {
			return GetRuleContext<All_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_operatorContext any_operator() {
			return GetRuleContext<Any_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		public Subquery_OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_Op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubquery_Op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubquery_Op(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_OpContext subquery_Op() {
		Subquery_OpContext _localctx = new Subquery_OpContext(Context, State);
		EnterRule(_localctx, 1278, RULE_subquery_Op);
		try {
			State = 9521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,618,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9509;
				all_op();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9510;
				Match(OPERATOR);
				State = 9511;
				Match(OPEN_PAREN);
				State = 9512;
				any_operator();
				State = 9513;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9515;
				Match(LIKE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9516;
				Match(NOT);
				State = 9517;
				Match(LIKE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9518;
				Match(ILIKE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9519;
				Match(NOT);
				State = 9520;
				Match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_list(this);
		}
	}

	[RuleVersion(0)]
	public Expr_listContext expr_list() {
		Expr_listContext _localctx = new Expr_listContext(Context, State);
		EnterRule(_localctx, 1280, RULE_expr_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9523;
			a_expr();
			State = 9528;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,619,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9524;
					Match(COMMA);
					State = 9525;
					a_expr();
					}
					} 
				}
				State = 9530;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,619,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext[] func_arg_expr() {
			return GetRuleContexts<Func_arg_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_exprContext func_arg_expr(int i) {
			return GetRuleContext<Func_arg_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Func_arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_list(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_listContext func_arg_list() {
		Func_arg_listContext _localctx = new Func_arg_listContext(Context, State);
		EnterRule(_localctx, 1282, RULE_func_arg_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9531;
			func_arg_expr();
			State = 9536;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,620,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9532;
					Match(COMMA);
					State = 9533;
					func_arg_expr();
					}
					} 
				}
				State = 9538;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,620,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_arg_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS_GREATER() { return GetToken(PostgreSQLParser.EQUALS_GREATER, 0); }
		public Func_arg_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_arg_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_arg_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_arg_expr(this);
		}
	}

	[RuleVersion(0)]
	public Func_arg_exprContext func_arg_expr() {
		Func_arg_exprContext _localctx = new Func_arg_exprContext(Context, State);
		EnterRule(_localctx, 1284, RULE_func_arg_expr);
		int _la;
		try {
			State = 9544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,621,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9539;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9540;
				param_name();
				State = 9541;
				_la = TokenStream.LA(1);
				if ( !(_la==COLON_EQUALS || _la==EQUALS_GREATER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 9542;
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_listContext type_list() {
		Type_listContext _localctx = new Type_listContext(Context, State);
		EnterRule(_localctx, 1286, RULE_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9546;
			typename();
			State = 9551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9547;
				Match(COMMA);
				State = 9548;
				typename();
				}
				}
				State = 9553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_expr_listContext array_expr_list() {
			return GetRuleContext<Array_expr_listContext>(0);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr(this);
		}
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 1288, RULE_array_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9554;
			Match(OPEN_BRACKET);
			State = 9557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				{
				State = 9555;
				expr_list();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 9556;
				array_expr_list();
				}
				break;
			case CLOSE_BRACKET:
				break;
			default:
				break;
			}
			State = 9559;
			Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext[] array_expr() {
			return GetRuleContexts<Array_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr(int i) {
			return GetRuleContext<Array_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Array_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterArray_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitArray_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Array_expr_listContext array_expr_list() {
		Array_expr_listContext _localctx = new Array_expr_listContext(Context, State);
		EnterRule(_localctx, 1290, RULE_array_expr_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9561;
			array_expr();
			State = 9566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9562;
				Match(COMMA);
				State = 9563;
				array_expr();
				}
				}
				State = 9568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Extract_argContext extract_arg() {
			return GetRuleContext<Extract_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Extract_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_list(this);
		}
	}

	[RuleVersion(0)]
	public Extract_listContext extract_list() {
		Extract_listContext _localctx = new Extract_listContext(Context, State);
		EnterRule(_localctx, 1292, RULE_extract_list);
		try {
			State = 9574;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case DAY_P:
			case FIRST_P:
			case FORWARD:
			case HOUR_P:
			case INSERT:
			case LAST_P:
			case MINUTE_P:
			case MONTH_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SECOND_P:
			case SET:
			case TYPE_P:
			case YEAR_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9569;
				extract_arg();
				State = 9570;
				Match(FROM);
				State = 9571;
				a_expr();
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extract_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Extract_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extract_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExtract_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExtract_arg(this);
		}
	}

	[RuleVersion(0)]
	public Extract_argContext extract_arg() {
		Extract_argContext _localctx = new Extract_argContext(Context, State);
		EnterRule(_localctx, 1294, RULE_extract_arg);
		try {
			State = 9584;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9576;
				identifier();
				}
				break;
			case YEAR_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9577;
				Match(YEAR_P);
				}
				break;
			case MONTH_P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9578;
				Match(MONTH_P);
				}
				break;
			case DAY_P:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9579;
				Match(DAY_P);
				}
				break;
			case HOUR_P:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9580;
				Match(HOUR_P);
				}
				break;
			case MINUTE_P:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9581;
				Match(MINUTE_P);
				}
				break;
			case SECOND_P:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9582;
				Match(SECOND_P);
				}
				break;
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9583;
				sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unicode_normal_formContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		public Unicode_normal_formContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode_normal_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnicode_normal_form(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnicode_normal_form(this);
		}
	}

	[RuleVersion(0)]
	public Unicode_normal_formContext unicode_normal_form() {
		Unicode_normal_formContext _localctx = new Unicode_normal_formContext(Context, State);
		EnterRule(_localctx, 1296, RULE_unicode_normal_form);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9586;
			_la = TokenStream.LA(1);
			if ( !((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & 15L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overlay_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public Overlay_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overlay_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOverlay_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOverlay_list(this);
		}
	}

	[RuleVersion(0)]
	public Overlay_listContext overlay_list() {
		Overlay_listContext _localctx = new Overlay_listContext(Context, State);
		EnterRule(_localctx, 1298, RULE_overlay_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9588;
			a_expr();
			State = 9589;
			Match(PLACING);
			State = 9590;
			a_expr();
			State = 9591;
			Match(FROM);
			State = 9592;
			a_expr();
			State = 9595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 9593;
				Match(FOR);
				State = 9594;
				a_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Position_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public Position_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_position_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPosition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPosition_list(this);
		}
	}

	[RuleVersion(0)]
	public Position_listContext position_list() {
		Position_listContext _localctx = new Position_listContext(Context, State);
		EnterRule(_localctx, 1300, RULE_position_list);
		try {
			State = 9602;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9597;
				b_expr(0);
				State = 9598;
				Match(IN_P);
				State = 9599;
				b_expr(0);
				}
				break;
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Substr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Substr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSubstr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSubstr_list(this);
		}
	}

	[RuleVersion(0)]
	public Substr_listContext substr_list() {
		Substr_listContext _localctx = new Substr_listContext(Context, State);
		EnterRule(_localctx, 1302, RULE_substr_list);
		try {
			State = 9631;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,629,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9604;
				a_expr();
				State = 9605;
				Match(FROM);
				State = 9606;
				a_expr();
				State = 9607;
				Match(FOR);
				State = 9608;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9610;
				a_expr();
				State = 9611;
				Match(FOR);
				State = 9612;
				a_expr();
				State = 9613;
				Match(FROM);
				State = 9614;
				a_expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9616;
				a_expr();
				State = 9617;
				Match(FROM);
				State = 9618;
				a_expr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9620;
				a_expr();
				State = 9621;
				Match(FOR);
				State = 9622;
				a_expr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9624;
				a_expr();
				State = 9625;
				Match(SIMILAR);
				State = 9626;
				a_expr();
				State = 9627;
				Match(ESCAPE);
				State = 9628;
				a_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9630;
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trim_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Trim_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trim_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTrim_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTrim_list(this);
		}
	}

	[RuleVersion(0)]
	public Trim_listContext trim_list() {
		Trim_listContext _localctx = new Trim_listContext(Context, State);
		EnterRule(_localctx, 1304, RULE_trim_list);
		try {
			State = 9640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,630,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9633;
				a_expr();
				State = 9634;
				Match(FROM);
				State = 9635;
				expr_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9637;
				Match(FROM);
				State = 9638;
				expr_list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9639;
				expr_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_exprContext : ParserRuleContext {
		public In_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expr; } }
	 
		public In_exprContext() { }
		public virtual void CopyFrom(In_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class In_expr_listContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public In_expr_listContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_list(this);
		}
	}
	public partial class In_expr_selectContext : In_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Select_with_parensContext select_with_parens() {
			return GetRuleContext<Select_with_parensContext>(0);
		}
		public In_expr_selectContext(In_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIn_expr_select(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIn_expr_select(this);
		}
	}

	[RuleVersion(0)]
	public In_exprContext in_expr() {
		In_exprContext _localctx = new In_exprContext(Context, State);
		EnterRule(_localctx, 1306, RULE_in_expr);
		try {
			State = 9647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,631,Context) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9642;
				select_with_parens();
				}
				break;
			case 2:
				_localctx = new In_expr_listContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9643;
				Match(OPEN_PAREN);
				State = 9644;
				expr_list();
				State = 9645;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_argContext case_arg() {
			return GetRuleContext<Case_argContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clause_listContext when_clause_list() {
			return GetRuleContext<When_clause_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_defaultContext case_default() {
			return GetRuleContext<Case_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		public Case_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_expr(this);
		}
	}

	[RuleVersion(0)]
	public Case_exprContext case_expr() {
		Case_exprContext _localctx = new Case_exprContext(Context, State);
		EnterRule(_localctx, 1308, RULE_case_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9649;
			Match(CASE);
			State = 9650;
			case_arg();
			State = 9651;
			when_clause_list();
			State = 9652;
			case_default();
			State = 9653;
			Match(END_P);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clause_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext[] when_clause() {
			return GetRuleContexts<When_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_clauseContext when_clause(int i) {
			return GetRuleContext<When_clauseContext>(i);
		}
		public When_clause_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause_list(this);
		}
	}

	[RuleVersion(0)]
	public When_clause_listContext when_clause_list() {
		When_clause_listContext _localctx = new When_clause_listContext(Context, State);
		EnterRule(_localctx, 1310, RULE_when_clause_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 9655;
				when_clause();
				}
				}
				State = 9658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		public When_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterWhen_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitWhen_clause(this);
		}
	}

	[RuleVersion(0)]
	public When_clauseContext when_clause() {
		When_clauseContext _localctx = new When_clauseContext(Context, State);
		EnterRule(_localctx, 1312, RULE_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9660;
			Match(WHEN);
			State = 9661;
			a_expr();
			State = 9662;
			Match(THEN);
			State = 9663;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_default(this);
		}
	}

	[RuleVersion(0)]
	public Case_defaultContext case_default() {
		Case_defaultContext _localctx = new Case_defaultContext(Context, State);
		EnterRule(_localctx, 1314, RULE_case_default);
		try {
			State = 9668;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9665;
				Match(ELSE);
				State = 9666;
				a_expr();
				}
				break;
			case END_P:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Case_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_arg(this);
		}
	}

	[RuleVersion(0)]
	public Case_argContext case_arg() {
		Case_argContext _localctx = new Case_argContext(Context, State);
		EnterRule(_localctx, 1316, RULE_case_arg);
		try {
			State = 9672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9670;
				a_expr();
				}
				break;
			case WHEN:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColumnref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColumnref(this);
		}
	}

	[RuleVersion(0)]
	public ColumnrefContext columnref() {
		ColumnrefContext _localctx = new ColumnrefContext(Context, State);
		EnterRule(_localctx, 1318, RULE_columnref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9674;
			colid();
			State = 9676;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,635,Context) ) {
			case 1:
				{
				State = 9675;
				indirection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirection_elContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PostgreSQLParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attr_nameContext attr_name() {
			return GetRuleContext<Attr_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_slice_boundContext[] opt_slice_bound() {
			return GetRuleContexts<Opt_slice_boundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_slice_boundContext opt_slice_bound(int i) {
			return GetRuleContext<Opt_slice_boundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PostgreSQLParser.COLON, 0); }
		public Indirection_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection_el; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection_el(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection_el(this);
		}
	}

	[RuleVersion(0)]
	public Indirection_elContext indirection_el() {
		Indirection_elContext _localctx = new Indirection_elContext(Context, State);
		EnterRule(_localctx, 1320, RULE_indirection_el);
		try {
			State = 9693;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9678;
				Match(DOT);
				State = 9681;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
				case ANALYSE:
				case ANALYZE:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASYMMETRIC:
				case BOTH:
				case CASE:
				case CAST:
				case CHECK:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case CREATE:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_ROLE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DEFERRABLE:
				case DESC:
				case DISTINCT:
				case DO:
				case ELSE:
				case EXCEPT:
				case FALSE_P:
				case FETCH:
				case FOR:
				case FOREIGN:
				case FROM:
				case GRANT:
				case GROUP_P:
				case HAVING:
				case IN_P:
				case INITIALLY:
				case INTERSECT:
				case LATERAL_P:
				case LEADING:
				case LIMIT:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL_P:
				case OFFSET:
				case ON:
				case ONLY:
				case OR:
				case ORDER:
				case PLACING:
				case PRIMARY:
				case REFERENCES:
				case RETURNING:
				case SELECT:
				case SESSION_USER:
				case SOME:
				case SYMMETRIC:
				case TABLE:
				case THEN:
				case TO:
				case TRAILING:
				case TRUE_P:
				case UNION:
				case UNIQUE:
				case USER:
				case USING:
				case VARIADIC:
				case WHEN:
				case WHERE:
				case WINDOW:
				case WITH:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER_P:
				case IS:
				case ISNULL:
				case JOIN:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER_P:
				case OVER:
				case OVERLAPS:
				case SIMILAR:
				case VERBOSE:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case END_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case TABLESAMPLE:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 9679;
					attr_name();
					}
					break;
				case STAR:
					{
					State = 9680;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9683;
				Match(OPEN_BRACKET);
				State = 9689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,637,Context) ) {
				case 1:
					{
					State = 9684;
					a_expr();
					}
					break;
				case 2:
					{
					State = 9685;
					opt_slice_bound();
					State = 9686;
					Match(COLON);
					State = 9687;
					opt_slice_bound();
					}
					break;
				}
				State = 9691;
				Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_slice_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_slice_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_slice_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_slice_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_slice_bound(this);
		}
	}

	[RuleVersion(0)]
	public Opt_slice_boundContext opt_slice_bound() {
		Opt_slice_boundContext _localctx = new Opt_slice_boundContext(Context, State);
		EnterRule(_localctx, 1322, RULE_opt_slice_bound);
		try {
			State = 9697;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9695;
				a_expr();
				}
				break;
			case CLOSE_BRACKET:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext[] indirection_el() {
			return GetRuleContexts<Indirection_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el(int i) {
			return GetRuleContext<Indirection_elContext>(i);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIndirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIndirection(this);
		}
	}

	[RuleVersion(0)]
	public IndirectionContext indirection() {
		IndirectionContext _localctx = new IndirectionContext(Context, State);
		EnterRule(_localctx, 1324, RULE_indirection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9700;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 9699;
					indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9702;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,640,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_indirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext[] indirection_el() {
			return GetRuleContexts<Indirection_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Indirection_elContext indirection_el(int i) {
			return GetRuleContext<Indirection_elContext>(i);
		}
		public Opt_indirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_indirection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_indirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_indirection(this);
		}
	}

	[RuleVersion(0)]
	public Opt_indirectionContext opt_indirection() {
		Opt_indirectionContext _localctx = new Opt_indirectionContext(Context, State);
		EnterRule(_localctx, 1326, RULE_opt_indirection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9707;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,641,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9704;
					indirection_el();
					}
					} 
				}
				State = 9709;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,641,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_listContext target_list() {
			return GetRuleContext<Target_listContext>(0);
		}
		public Opt_target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_target_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_target_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_target_listContext opt_target_list() {
		Opt_target_listContext _localctx = new Opt_target_listContext(Context, State);
		EnterRule(_localctx, 1328, RULE_opt_target_list);
		try {
			State = 9712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,642,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9710;
				target_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext[] target_el() {
			return GetRuleContexts<Target_elContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_elContext target_el(int i) {
			return GetRuleContext<Target_elContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Target_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_list(this);
		}
	}

	[RuleVersion(0)]
	public Target_listContext target_list() {
		Target_listContext _localctx = new Target_listContext(Context, State);
		EnterRule(_localctx, 1330, RULE_target_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9714;
			target_el();
			State = 9719;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,643,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9715;
					Match(COMMA);
					State = 9716;
					target_el();
					}
					} 
				}
				State = 9721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,643,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_elContext : ParserRuleContext {
		public Target_elContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_el; } }
	 
		public Target_elContext() { }
		public virtual void CopyFrom(Target_elContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Target_labelContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Target_labelContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_label(this);
		}
	}
	public partial class Target_starContext : Target_elContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PostgreSQLParser.STAR, 0); }
		public Target_starContext(Target_elContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTarget_star(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTarget_star(this);
		}
	}

	[RuleVersion(0)]
	public Target_elContext target_el() {
		Target_elContext _localctx = new Target_elContext(Context, State);
		EnterRule(_localctx, 1332, RULE_target_el);
		try {
			State = 9730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 9722;
				a_expr();
				State = 9727;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,644,Context) ) {
				case 1:
					{
					State = 9723;
					Match(AS);
					State = 9724;
					collabel();
					}
					break;
				case 2:
					{
					State = 9725;
					identifier();
					}
					break;
				case 3:
					{
					}
					break;
				}
				}
				break;
			case STAR:
				_localctx = new Target_starContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 9729;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Qualified_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name_list(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_name_listContext qualified_name_list() {
		Qualified_name_listContext _localctx = new Qualified_name_listContext(Context, State);
		EnterRule(_localctx, 1334, RULE_qualified_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9732;
			qualified_name();
			State = 9737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9733;
				Match(COMMA);
				State = 9734;
				qualified_name();
				}
				}
				State = 9739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterQualified_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitQualified_name(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 1336, RULE_qualified_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9740;
			colid();
			State = 9742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET || _la==DOT) {
				{
				State = 9741;
				indirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName_list(this);
		}
	}

	[RuleVersion(0)]
	public Name_listContext name_list() {
		Name_listContext _localctx = new Name_listContext(Context, State);
		EnterRule(_localctx, 1338, RULE_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9744;
			name();
			State = 9749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9745;
				Match(COMMA);
				State = 9746;
				name();
				}
				}
				State = 9751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 1340, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9752;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CollabelContext collabel() {
			return GetRuleContext<CollabelContext>(0);
		}
		public Attr_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAttr_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAttr_name(this);
		}
	}

	[RuleVersion(0)]
	public Attr_nameContext attr_name() {
		Attr_nameContext _localctx = new Attr_nameContext(Context, State);
		EnterRule(_localctx, 1342, RULE_attr_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9754;
			collabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public File_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFile_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFile_name(this);
		}
	}

	[RuleVersion(0)]
	public File_nameContext file_name() {
		File_nameContext _localctx = new File_nameContext(Context, State);
		EnterRule(_localctx, 1344, RULE_file_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9756;
			sconst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_function_nameContext type_function_name() {
			return GetRuleContext<Type_function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectionContext indirection() {
			return GetRuleContext<IndirectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		public Func_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFunc_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFunc_name(this);
		}
	}

	[RuleVersion(0)]
	public Func_nameContext func_name() {
		Func_nameContext _localctx = new Func_nameContext(Context, State);
		EnterRule(_localctx, 1346, RULE_func_name);
		try {
			State = 9765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,649,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9758;
				builtin_function_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9759;
				type_function_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9760;
				colid();
				State = 9761;
				indirection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9763;
				Match(LEFT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9764;
				Match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AexprconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FconstContext fconst() {
			return GetRuleContext<FconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BconstContext bconst() {
			return GetRuleContext<BconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XconstContext xconst() {
			return GetRuleContext<XconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_nameContext func_name() {
			return GetRuleContext<Func_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_arg_listContext func_arg_list() {
			return GetRuleContext<Func_arg_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_sort_clauseContext opt_sort_clause() {
			return GetRuleContext<Opt_sort_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConsttypenameContext consttypename() {
			return GetRuleContext<ConsttypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstintervalContext constinterval() {
			return GetRuleContext<ConstintervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_intervalContext opt_interval() {
			return GetRuleContext<Opt_intervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public AexprconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aexprconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAexprconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAexprconst(this);
		}
	}

	[RuleVersion(0)]
	public AexprconstContext aexprconst() {
		AexprconstContext _localctx = new AexprconstContext(Context, State);
		EnterRule(_localctx, 1348, RULE_aexprconst);
		try {
			State = 9799;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,652,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9767;
				iconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9768;
				fconst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9769;
				sconst();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9770;
				bconst();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9771;
				xconst();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9772;
				func_name();
				State = 9780;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 9773;
					sconst();
					}
					break;
				case OPEN_PAREN:
					{
					State = 9774;
					Match(OPEN_PAREN);
					State = 9775;
					func_arg_list();
					State = 9776;
					opt_sort_clause();
					State = 9777;
					Match(CLOSE_PAREN);
					State = 9778;
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9782;
				consttypename();
				State = 9783;
				sconst();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9785;
				constinterval();
				State = 9794;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case StringConstant:
				case UnicodeEscapeStringConstant:
				case BeginDollarStringConstant:
				case EscapeStringConstant:
					{
					State = 9786;
					sconst();
					State = 9787;
					opt_interval();
					}
					break;
				case OPEN_PAREN:
					{
					State = 9789;
					Match(OPEN_PAREN);
					State = 9790;
					iconst();
					State = 9791;
					Match(CLOSE_PAREN);
					State = 9792;
					sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9796;
				Match(TRUE_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9797;
				Match(FALSE_P);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9798;
				Match(NULL_P);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexadecimalStringConstant() { return GetToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
		public XconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterXconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitXconst(this);
		}
	}

	[RuleVersion(0)]
	public XconstContext xconst() {
		XconstContext _localctx = new XconstContext(Context, State);
		EnterRule(_localctx, 1350, RULE_xconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9801;
			Match(HexadecimalStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BinaryStringConstant() { return GetToken(PostgreSQLParser.BinaryStringConstant, 0); }
		public BconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBconst(this);
		}
	}

	[RuleVersion(0)]
	public BconstContext bconst() {
		BconstContext _localctx = new BconstContext(Context, State);
		EnterRule(_localctx, 1352, RULE_bconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9803;
			Match(BinaryStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeric() { return GetToken(PostgreSQLParser.Numeric, 0); }
		public FconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFconst(this);
		}
	}

	[RuleVersion(0)]
	public FconstContext fconst() {
		FconstContext _localctx = new FconstContext(Context, State);
		EnterRule(_localctx, 1354, RULE_fconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9805;
			Match(Numeric);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integral() { return GetToken(PostgreSQLParser.Integral, 0); }
		public IconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIconst(this);
		}
	}

	[RuleVersion(0)]
	public IconstContext iconst() {
		IconstContext _localctx = new IconstContext(Context, State);
		EnterRule(_localctx, 1356, RULE_iconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9807;
			Match(Integral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uescapeContext opt_uescape() {
			return GetRuleContext<Opt_uescapeContext>(0);
		}
		public SconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSconst(this);
		}
	}

	[RuleVersion(0)]
	public SconstContext sconst() {
		SconstContext _localctx = new SconstContext(Context, State);
		EnterRule(_localctx, 1358, RULE_sconst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9809;
			anysconst();
			State = 9810;
			opt_uescape();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnysconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConstant() { return GetToken(PostgreSQLParser.StringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeEscapeStringConstant() { return GetToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BeginDollarStringConstant() { return GetToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndDollarStringConstant() { return GetToken(PostgreSQLParser.EndDollarStringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DollarText() { return GetTokens(PostgreSQLParser.DollarText); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DollarText(int i) {
			return GetToken(PostgreSQLParser.DollarText, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapeStringConstant() { return GetToken(PostgreSQLParser.EscapeStringConstant, 0); }
		public AnysconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anysconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAnysconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAnysconst(this);
		}
	}

	[RuleVersion(0)]
	public AnysconstContext anysconst() {
		AnysconstContext _localctx = new AnysconstContext(Context, State);
		EnterRule(_localctx, 1360, RULE_anysconst);
		int _la;
		try {
			State = 9823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringConstant:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9812;
				Match(StringConstant);
				}
				break;
			case UnicodeEscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9813;
				Match(UnicodeEscapeStringConstant);
				}
				break;
			case BeginDollarStringConstant:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9814;
				Match(BeginDollarStringConstant);
				State = 9818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DollarText) {
					{
					{
					State = 9815;
					Match(DollarText);
					}
					}
					State = 9820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 9821;
				Match(EndDollarStringConstant);
				}
				break;
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9822;
				Match(EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_uescapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnysconstContext anysconst() {
			return GetRuleContext<AnysconstContext>(0);
		}
		public Opt_uescapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_uescape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_uescape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_uescape(this);
		}
	}

	[RuleVersion(0)]
	public Opt_uescapeContext opt_uescape() {
		Opt_uescapeContext _localctx = new Opt_uescapeContext(Context, State);
		EnterRule(_localctx, 1362, RULE_opt_uescape);
		try {
			State = 9828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,655,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9825;
				Match(UESCAPE);
				State = 9826;
				anysconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignediconstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PostgreSQLParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PostgreSQLParser.MINUS, 0); }
		public SignediconstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signediconst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSignediconst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSignediconst(this);
		}
	}

	[RuleVersion(0)]
	public SignediconstContext signediconst() {
		SignediconstContext _localctx = new SignediconstContext(Context, State);
		EnterRule(_localctx, 1364, RULE_signediconst);
		try {
			State = 9835;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9830;
				iconst();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9831;
				Match(PLUS);
				State = 9832;
				iconst();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9833;
				Match(MINUS);
				State = 9834;
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec() {
			return GetRuleContext<RolespecContext>(0);
		}
		public RoleidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRoleid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRoleid(this);
		}
	}

	[RuleVersion(0)]
	public RoleidContext roleid() {
		RoleidContext _localctx = new RoleidContext(Context, State);
		EnterRule(_localctx, 1366, RULE_roleid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9837;
			rolespec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RolespecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonreservedwordContext nonreservedword() {
			return GetRuleContext<NonreservedwordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		public RolespecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rolespec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRolespec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRolespec(this);
		}
	}

	[RuleVersion(0)]
	public RolespecContext rolespec() {
		RolespecContext _localctx = new RolespecContext(Context, State);
		EnterRule(_localctx, 1368, RULE_rolespec);
		try {
			State = 9842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9839;
				nonreservedword();
				}
				break;
			case CURRENT_USER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9840;
				Match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9841;
				Match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext[] rolespec() {
			return GetRuleContexts<RolespecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RolespecContext rolespec(int i) {
			return GetRuleContext<RolespecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Role_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterRole_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitRole_list(this);
		}
	}

	[RuleVersion(0)]
	public Role_listContext role_list() {
		Role_listContext _localctx = new Role_listContext(Context, State);
		EnterRule(_localctx, 1370, RULE_role_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9844;
			rolespec();
			State = 9849;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 9845;
				Match(COMMA);
				State = 9846;
				rolespec();
				}
				}
				State = 9851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(PostgreSQLParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(PostgreSQLParser.RIGHT, 0); }
		public ColidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterColid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitColid(this);
		}
	}

	[RuleVersion(0)]
	public ColidContext colid() {
		ColidContext _localctx = new ColidContext(Context, State);
		EnterRule(_localctx, 1372, RULE_colid);
		try {
			State = 9858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,659,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9852;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9853;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9854;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9855;
				plsql_unreserved_keyword();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9856;
				Match(LEFT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9857;
				Match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 1374, RULE_table_alias);
		try {
			State = 9864;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,660,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9860;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9861;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9862;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9863;
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public Type_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_function_nameContext type_function_name() {
		Type_function_nameContext _localctx = new Type_function_nameContext(Context, State);
		EnterRule(_localctx, 1376, RULE_type_function_name);
		try {
			State = 9870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,661,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9866;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9867;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9868;
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9869;
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonreservedwordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		public NonreservedwordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonreservedword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterNonreservedword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitNonreservedword(this);
		}
	}

	[RuleVersion(0)]
	public NonreservedwordContext nonreservedword() {
		NonreservedwordContext _localctx = new NonreservedwordContext(Context, State);
		EnterRule(_localctx, 1378, RULE_nonreservedword);
		try {
			State = 9876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,662,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9872;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9873;
				unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9874;
				col_name_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9875;
				type_func_name_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Col_name_keywordContext col_name_keyword() {
			return GetRuleContext<Col_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_func_name_keywordContext type_func_name_keyword() {
			return GetRuleContext<Type_func_name_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		public CollabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCollabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCollabel(this);
		}
	}

	[RuleVersion(0)]
	public CollabelContext collabel() {
		CollabelContext _localctx = new CollabelContext(Context, State);
		EnterRule(_localctx, 1380, RULE_collabel);
		try {
			State = 9884;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,663,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9878;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9879;
				plsql_unreserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9880;
				unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9881;
				col_name_keyword();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9882;
				type_func_name_keyword();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9883;
				reserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PostgreSQLParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_uescapeContext opt_uescape() {
			return GetRuleContext<Opt_uescapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedIdentifier() { return GetToken(PostgreSQLParser.QuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeQuotedIdentifier() { return GetToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlvariablenameContext plsqlvariablename() {
			return GetRuleContext<PlsqlvariablenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlsqlidentifierContext plsqlidentifier() {
			return GetRuleContext<PlsqlidentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1382, RULE_identifier);
		try {
			State = 9893;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9886;
				Match(Identifier);
				State = 9887;
				opt_uescape();
				}
				break;
			case QuotedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9888;
				Match(QuotedIdentifier);
				}
				break;
			case UnicodeQuotedIdentifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9889;
				Match(UnicodeQuotedIdentifier);
				}
				break;
			case PLSQLVARIABLENAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9890;
				plsqlvariablename();
				}
				break;
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9891;
				plsqlidentifier();
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case OUTER_P:
			case ABSOLUTE_P:
			case BACKWARD:
			case CHAIN:
			case CLOSE:
			case COMMIT:
			case CONTINUE_P:
			case CURSOR:
			case FIRST_P:
			case FORWARD:
			case INSERT:
			case LAST_P:
			case MOVE:
			case NEXT:
			case NO:
			case OPTION:
			case PRIOR:
			case RELATIVE_P:
			case RESET:
			case ROLLBACK:
			case SCHEMA:
			case SCROLL:
			case SET:
			case TYPE_P:
			case CALL:
			case CURRENT_P:
			case ROWTYPE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9892;
				plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlsqlidentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLSQLIDENTIFIER() { return GetToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
		public PlsqlidentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsqlidentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsqlidentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsqlidentifier(this);
		}
	}

	[RuleVersion(0)]
	public PlsqlidentifierContext plsqlidentifier() {
		PlsqlidentifierContext _localctx = new PlsqlidentifierContext(Context, State);
		EnterRule(_localctx, 1384, RULE_plsqlidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9895;
			Match(PLSQLIDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unreserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABORT_P() { return GetToken(PostgreSQLParser.ABORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(PostgreSQLParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(PostgreSQLParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_P() { return GetToken(PostgreSQLParser.ADD_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(PostgreSQLParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(PostgreSQLParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(PostgreSQLParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALSO() { return GetToken(PostgreSQLParser.ALSO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(PostgreSQLParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(PostgreSQLParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERTION() { return GetToken(PostgreSQLParser.ASSERTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(PostgreSQLParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PostgreSQLParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTACH() { return GetToken(PostgreSQLParser.ATTACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(PostgreSQLParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(PostgreSQLParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(PostgreSQLParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(PostgreSQLParser.CALLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(PostgreSQLParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(PostgreSQLParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG() { return GetToken(PostgreSQLParser.CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTERISTICS() { return GetToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKPOINT() { return GetToken(PostgreSQLParser.CHECKPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PostgreSQLParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTER() { return GetToken(PostgreSQLParser.CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(PostgreSQLParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PostgreSQLParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENTS() { return GetToken(PostgreSQLParser.COMMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(PostgreSQLParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(PostgreSQLParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFLICT() { return GetToken(PostgreSQLParser.CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(PostgreSQLParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINTS() { return GetToken(PostgreSQLParser.CONSTRAINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTENT_P() { return GetToken(PostgreSQLParser.CONTENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERSION_P() { return GetToken(PostgreSQLParser.CONVERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(PostgreSQLParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COST() { return GetToken(PostgreSQLParser.COST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(PostgreSQLParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE() { return GetToken(PostgreSQLParser.CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(PostgreSQLParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_P() { return GetToken(PostgreSQLParser.DATA_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(PostgreSQLParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_P() { return GetToken(PostgreSQLParser.DAY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(PostgreSQLParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTS() { return GetToken(PostgreSQLParser.DEFAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRED() { return GetToken(PostgreSQLParser.DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(PostgreSQLParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_P() { return GetToken(PostgreSQLParser.DELETE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITER() { return GetToken(PostgreSQLParser.DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELIMITERS() { return GetToken(PostgreSQLParser.DELIMITERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPENDS() { return GetToken(PostgreSQLParser.DEPENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETACH() { return GetToken(PostgreSQLParser.DETACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DICTIONARY() { return GetToken(PostgreSQLParser.DICTIONARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_P() { return GetToken(PostgreSQLParser.DISABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(PostgreSQLParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOCUMENT_P() { return GetToken(PostgreSQLParser.DOCUMENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOMAIN_P() { return GetToken(PostgreSQLParser.DOMAIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_P() { return GetToken(PostgreSQLParser.DOUBLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(PostgreSQLParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(PostgreSQLParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_P() { return GetToken(PostgreSQLParser.ENABLE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODING() { return GetToken(PostgreSQLParser.ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(PostgreSQLParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_P() { return GetToken(PostgreSQLParser.ENUM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(PostgreSQLParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(PostgreSQLParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE() { return GetToken(PostgreSQLParser.EXCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDING() { return GetToken(PostgreSQLParser.EXCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(PostgreSQLParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(PostgreSQLParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(PostgreSQLParser.EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSION() { return GetToken(PostgreSQLParser.EXTENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(PostgreSQLParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAMILY() { return GetToken(PostgreSQLParser.FAMILY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(PostgreSQLParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(PostgreSQLParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(PostgreSQLParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(PostgreSQLParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTIONS() { return GetToken(PostgreSQLParser.FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(PostgreSQLParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PostgreSQLParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTED() { return GetToken(PostgreSQLParser.GRANTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS() { return GetToken(PostgreSQLParser.GROUPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(PostgreSQLParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_P() { return GetToken(PostgreSQLParser.HEADER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOLD() { return GetToken(PostgreSQLParser.HOLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_P() { return GetToken(PostgreSQLParser.HOUR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTITY_P() { return GetToken(PostgreSQLParser.IDENTITY_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P() { return GetToken(PostgreSQLParser.IF_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMEDIATE() { return GetToken(PostgreSQLParser.IMMEDIATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMMUTABLE() { return GetToken(PostgreSQLParser.IMMUTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPLICIT_P() { return GetToken(PostgreSQLParser.IMPLICIT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_P() { return GetToken(PostgreSQLParser.IMPORT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDE() { return GetToken(PostgreSQLParser.INCLUDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDING() { return GetToken(PostgreSQLParser.INCLUDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(PostgreSQLParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(PostgreSQLParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(PostgreSQLParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERIT() { return GetToken(PostgreSQLParser.INHERIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INHERITS() { return GetToken(PostgreSQLParser.INHERITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INLINE_P() { return GetToken(PostgreSQLParser.INLINE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUT_P() { return GetToken(PostgreSQLParser.INPUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSENSITIVE() { return GetToken(PostgreSQLParser.INSENSITIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTEAD() { return GetToken(PostgreSQLParser.INSTEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(PostgreSQLParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(PostgreSQLParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(PostgreSQLParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(PostgreSQLParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(PostgreSQLParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_P() { return GetToken(PostgreSQLParser.LARGE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAKPROOF() { return GetToken(PostgreSQLParser.LEAKPROOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(PostgreSQLParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTEN() { return GetToken(PostgreSQLParser.LISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(PostgreSQLParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(PostgreSQLParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION() { return GetToken(PostgreSQLParser.LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_P() { return GetToken(PostgreSQLParser.LOCK_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(PostgreSQLParser.LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGGED() { return GetToken(PostgreSQLParser.LOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAPPING() { return GetToken(PostgreSQLParser.MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(PostgreSQLParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATERIALIZED() { return GetToken(PostgreSQLParser.MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(PostgreSQLParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD() { return GetToken(PostgreSQLParser.METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_P() { return GetToken(PostgreSQLParser.MINUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(PostgreSQLParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(PostgreSQLParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_P() { return GetToken(PostgreSQLParser.MONTH_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_P() { return GetToken(PostgreSQLParser.NAME_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(PostgreSQLParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(PostgreSQLParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFC() { return GetToken(PostgreSQLParser.NFC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFD() { return GetToken(PostgreSQLParser.NFD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKC() { return GetToken(PostgreSQLParser.NFKC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NFKD() { return GetToken(PostgreSQLParser.NFKD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZED() { return GetToken(PostgreSQLParser.NORMALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTHING() { return GetToken(PostgreSQLParser.NOTHING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTIFY() { return GetToken(PostgreSQLParser.NOTIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(PostgreSQLParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_P() { return GetToken(PostgreSQLParser.NULLS_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_P() { return GetToken(PostgreSQLParser.OBJECT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(PostgreSQLParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF() { return GetToken(PostgreSQLParser.OFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OIDS() { return GetToken(PostgreSQLParser.OIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD() { return GetToken(PostgreSQLParser.OLD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(PostgreSQLParser.OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(PostgreSQLParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(PostgreSQLParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(PostgreSQLParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(PostgreSQLParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERRIDING() { return GetToken(PostgreSQLParser.OVERRIDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNED() { return GetToken(PostgreSQLParser.OWNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(PostgreSQLParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(PostgreSQLParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(PostgreSQLParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(PostgreSQLParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(PostgreSQLParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSING() { return GetToken(PostgreSQLParser.PASSING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(PostgreSQLParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLANS() { return GetToken(PostgreSQLParser.PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLICY() { return GetToken(PostgreSQLParser.POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(PostgreSQLParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(PostgreSQLParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARED() { return GetToken(PostgreSQLParser.PREPARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(PostgreSQLParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(PostgreSQLParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL() { return GetToken(PostgreSQLParser.PROCEDURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(PostgreSQLParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURES() { return GetToken(PostgreSQLParser.PROCEDURES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(PostgreSQLParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICATION() { return GetToken(PostgreSQLParser.PUBLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(PostgreSQLParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(PostgreSQLParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(PostgreSQLParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REASSIGN() { return GetToken(PostgreSQLParser.REASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECHECK() { return GetToken(PostgreSQLParser.RECHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(PostgreSQLParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(PostgreSQLParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCING() { return GetToken(PostgreSQLParser.REFERENCING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFRESH() { return GetToken(PostgreSQLParser.REFRESH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REINDEX() { return GetToken(PostgreSQLParser.REINDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(PostgreSQLParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(PostgreSQLParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(PostgreSQLParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(PostgreSQLParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(PostgreSQLParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(PostgreSQLParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(PostgreSQLParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(PostgreSQLParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(PostgreSQLParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(PostgreSQLParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(PostgreSQLParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINES() { return GetToken(PostgreSQLParser.ROUTINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(PostgreSQLParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RULE() { return GetToken(PostgreSQLParser.RULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(PostgreSQLParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(PostgreSQLParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEARCH() { return GetToken(PostgreSQLParser.SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_P() { return GetToken(PostgreSQLParser.SECOND_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(PostgreSQLParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(PostgreSQLParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCES() { return GetToken(PostgreSQLParser.SEQUENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(PostgreSQLParser.SERIALIZABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(PostgreSQLParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(PostgreSQLParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETS() { return GetToken(PostgreSQLParser.SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(PostgreSQLParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(PostgreSQLParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(PostgreSQLParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_P() { return GetToken(PostgreSQLParser.SKIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(PostgreSQLParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_P() { return GetToken(PostgreSQLParser.SQL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STABLE() { return GetToken(PostgreSQLParser.STABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STANDALONE_P() { return GetToken(PostgreSQLParser.STANDALONE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(PostgreSQLParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(PostgreSQLParser.STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATISTICS() { return GetToken(PostgreSQLParser.STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDIN() { return GetToken(PostgreSQLParser.STDIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDOUT() { return GetToken(PostgreSQLParser.STDOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(PostgreSQLParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(PostgreSQLParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRIP_P() { return GetToken(PostgreSQLParser.STRIP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSCRIPTION() { return GetToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORT() { return GetToken(PostgreSQLParser.SUPPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSID() { return GetToken(PostgreSQLParser.SYSID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_P() { return GetToken(PostgreSQLParser.SYSTEM_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(PostgreSQLParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(PostgreSQLParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(PostgreSQLParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE() { return GetToken(PostgreSQLParser.TEMPLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(PostgreSQLParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_P() { return GetToken(PostgreSQLParser.TEXT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES() { return GetToken(PostgreSQLParser.TIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(PostgreSQLParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(PostgreSQLParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(PostgreSQLParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(PostgreSQLParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUSTED() { return GetToken(PostgreSQLParser.TRUSTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_P() { return GetToken(PostgreSQLParser.TYPES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UESCAPE() { return GetToken(PostgreSQLParser.UESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(PostgreSQLParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(PostgreSQLParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNENCRYPTED() { return GetToken(PostgreSQLParser.UNENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(PostgreSQLParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLISTEN() { return GetToken(PostgreSQLParser.UNLISTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOGGED() { return GetToken(PostgreSQLParser.UNLOGGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(PostgreSQLParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(PostgreSQLParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VACUUM() { return GetToken(PostgreSQLParser.VACUUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALID() { return GetToken(PostgreSQLParser.VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE() { return GetToken(PostgreSQLParser.VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATOR() { return GetToken(PostgreSQLParser.VALIDATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_P() { return GetToken(PostgreSQLParser.VALUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(PostgreSQLParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_P() { return GetToken(PostgreSQLParser.VERSION_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(PostgreSQLParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEWS() { return GetToken(PostgreSQLParser.VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOLATILE() { return GetToken(PostgreSQLParser.VOLATILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHITESPACE_P() { return GetToken(PostgreSQLParser.WHITESPACE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(PostgreSQLParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(PostgreSQLParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(PostgreSQLParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(PostgreSQLParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(PostgreSQLParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_P() { return GetToken(PostgreSQLParser.XML_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_P() { return GetToken(PostgreSQLParser.YEAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES_P() { return GetToken(PostgreSQLParser.YES_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(PostgreSQLParser.ZONE, 0); }
		public Unreserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unreserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterUnreserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitUnreserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Unreserved_keywordContext unreserved_keyword() {
		Unreserved_keywordContext _localctx = new Unreserved_keywordContext(Context, State);
		EnterRule(_localctx, 1386, RULE_unreserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9897;
			_la = TokenStream.LA(1);
			if ( !((((_la - 124)) & ~0x3f) == 0 && ((1L << (_la - 124)) & -524319L) != 0 || (((_la - 188)) & ~0x3f) == 0 && ((1L << (_la - 188)) & 9223372036854775807L) != 0 || (((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & -9007199254740997L) != 0 || (((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & -1L) != 0 || (((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & -18014398509481983L) != 0 || (((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & 70340155798527L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Col_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(PostgreSQLParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(PostgreSQLParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitContext bit() {
			return GetRuleContext<BitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_P() { return GetToken(PostgreSQLParser.BOOLEAN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_P() { return GetToken(PostgreSQLParser.CHAR_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(PostgreSQLParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(PostgreSQLParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_P() { return GetToken(PostgreSQLParser.DECIMAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(PostgreSQLParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(PostgreSQLParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_P() { return GetToken(PostgreSQLParser.FLOAT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(PostgreSQLParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING() { return GetToken(PostgreSQLParser.GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(PostgreSQLParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_P() { return GetToken(PostgreSQLParser.INT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(PostgreSQLParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(PostgreSQLParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(PostgreSQLParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(PostgreSQLParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(PostgreSQLParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PostgreSQLParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALIZE() { return GetToken(PostgreSQLParser.NORMALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(PostgreSQLParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_P() { return GetToken(PostgreSQLParser.OUT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAY() { return GetToken(PostgreSQLParser.OVERLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(PostgreSQLParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(PostgreSQLParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(PostgreSQLParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(PostgreSQLParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETOF() { return GetToken(PostgreSQLParser.SETOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(PostgreSQLParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(PostgreSQLParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(PostgreSQLParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(PostgreSQLParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TREAT() { return GetToken(PostgreSQLParser.TREAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(PostgreSQLParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(PostgreSQLParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(PostgreSQLParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLATTRIBUTES() { return GetToken(PostgreSQLParser.XMLATTRIBUTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCONCAT() { return GetToken(PostgreSQLParser.XMLCONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLELEMENT() { return GetToken(PostgreSQLParser.XMLELEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLEXISTS() { return GetToken(PostgreSQLParser.XMLEXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLFOREST() { return GetToken(PostgreSQLParser.XMLFOREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLNAMESPACES() { return GetToken(PostgreSQLParser.XMLNAMESPACES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPARSE() { return GetToken(PostgreSQLParser.XMLPARSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLPI() { return GetToken(PostgreSQLParser.XMLPI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLROOT() { return GetToken(PostgreSQLParser.XMLROOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLSERIALIZE() { return GetToken(PostgreSQLParser.XMLSERIALIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLTABLE() { return GetToken(PostgreSQLParser.XMLTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Builtin_function_nameContext builtin_function_name() {
			return GetRuleContext<Builtin_function_nameContext>(0);
		}
		public Col_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_col_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCol_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCol_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Col_name_keywordContext col_name_keyword() {
		Col_name_keywordContext _localctx = new Col_name_keywordContext(Context, State);
		EnterRule(_localctx, 1388, RULE_col_name_keyword);
		try {
			State = 9951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,665,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9899;
				Match(BETWEEN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9900;
				Match(BIGINT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9901;
				bit();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9902;
				Match(BOOLEAN_P);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9903;
				Match(CHAR_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9904;
				character();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 9905;
				Match(COALESCE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 9906;
				Match(DEC);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 9907;
				Match(DECIMAL_P);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 9908;
				Match(EXISTS);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 9909;
				Match(EXTRACT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 9910;
				Match(FLOAT_P);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 9911;
				Match(GREATEST);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 9912;
				Match(GROUPING);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 9913;
				Match(INOUT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 9914;
				Match(INT_P);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 9915;
				Match(INTEGER);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 9916;
				Match(INTERVAL);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 9917;
				Match(LEAST);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 9918;
				Match(NATIONAL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 9919;
				Match(NCHAR);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 9920;
				Match(NONE);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 9921;
				Match(NORMALIZE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 9922;
				Match(NULLIF);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 9923;
				numeric();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 9924;
				Match(OUT_P);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 9925;
				Match(OVERLAY);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 9926;
				Match(POSITION);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 9927;
				Match(PRECISION);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 9928;
				Match(REAL);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 9929;
				Match(ROW);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 9930;
				Match(SETOF);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 9931;
				Match(SMALLINT);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 9932;
				Match(SUBSTRING);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 9933;
				Match(TIME);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 9934;
				Match(TIMESTAMP);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 9935;
				Match(TREAT);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 9936;
				Match(TRIM);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 9937;
				Match(VALUES);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 9938;
				Match(VARCHAR);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 9939;
				Match(XMLATTRIBUTES);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 9940;
				Match(XMLCONCAT);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 9941;
				Match(XMLELEMENT);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 9942;
				Match(XMLEXISTS);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 9943;
				Match(XMLFOREST);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 9944;
				Match(XMLNAMESPACES);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 9945;
				Match(XMLPARSE);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 9946;
				Match(XMLPI);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 9947;
				Match(XMLROOT);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 9948;
				Match(XMLSERIALIZE);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 9949;
				Match(XMLTABLE);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 9950;
				builtin_function_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_func_name_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORIZATION() { return GetToken(PostgreSQLParser.AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(PostgreSQLParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(PostgreSQLParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENTLY() { return GetToken(PostgreSQLParser.CONCURRENTLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(PostgreSQLParser.CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SCHEMA() { return GetToken(PostgreSQLParser.CURRENT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FREEZE() { return GetToken(PostgreSQLParser.FREEZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(PostgreSQLParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ILIKE() { return GetToken(PostgreSQLParser.ILIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_P() { return GetToken(PostgreSQLParser.INNER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(PostgreSQLParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(PostgreSQLParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(PostgreSQLParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(PostgreSQLParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTNULL() { return GetToken(PostgreSQLParser.NOTNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(PostgreSQLParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(PostgreSQLParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE() { return GetToken(PostgreSQLParser.TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBOSE() { return GetToken(PostgreSQLParser.VERBOSE, 0); }
		public Type_func_name_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_func_name_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterType_func_name_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitType_func_name_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Type_func_name_keywordContext type_func_name_keyword() {
		Type_func_name_keywordContext _localctx = new Type_func_name_keywordContext(Context, State);
		EnterRule(_localctx, 1390, RULE_type_func_name_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9953;
			_la = TokenStream.LA(1);
			if ( !((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 7069695L) != 0 || _la==TABLESAMPLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYSE() { return GetToken(PostgreSQLParser.ANALYSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(PostgreSQLParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(PostgreSQLParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PostgreSQLParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(PostgreSQLParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC() { return GetToken(PostgreSQLParser.ASYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(PostgreSQLParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(PostgreSQLParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(PostgreSQLParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(PostgreSQLParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(PostgreSQLParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_CATALOG() { return GetToken(PostgreSQLParser.CURRENT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(PostgreSQLParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(PostgreSQLParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(PostgreSQLParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFERRABLE() { return GetToken(PostgreSQLParser.DEFERRABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(PostgreSQLParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(PostgreSQLParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PostgreSQLParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_P() { return GetToken(PostgreSQLParser.FALSE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(PostgreSQLParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(PostgreSQLParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_P() { return GetToken(PostgreSQLParser.GROUP_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(PostgreSQLParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIALLY() { return GetToken(PostgreSQLParser.INITIALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(PostgreSQLParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_P() { return GetToken(PostgreSQLParser.LATERAL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(PostgreSQLParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(PostgreSQLParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(PostgreSQLParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(PostgreSQLParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(PostgreSQLParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(PostgreSQLParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(PostgreSQLParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(PostgreSQLParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(PostgreSQLParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLACING() { return GetToken(PostgreSQLParser.PLACING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(PostgreSQLParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(PostgreSQLParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(PostgreSQLParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(PostgreSQLParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(PostgreSQLParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(PostgreSQLParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMMETRIC() { return GetToken(PostgreSQLParser.SYMMETRIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(PostgreSQLParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_P() { return GetToken(PostgreSQLParser.TRUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(PostgreSQLParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(PostgreSQLParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(PostgreSQLParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIADIC() { return GetToken(PostgreSQLParser.VARIADIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(PostgreSQLParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(PostgreSQLParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PostgreSQLParser.WITH, 0); }
		public Reserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterReserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitReserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Reserved_keywordContext reserved_keyword() {
		Reserved_keywordContext _localctx = new Reserved_keywordContext(Context, State);
		EnterRule(_localctx, 1392, RULE_reserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9955;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & -9007200328482816L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046510975L) != 0 || _la==END_P) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Builtin_function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLCOMMENT() { return GetToken(PostgreSQLParser.XMLCOMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_IS_WELL_FORMED() { return GetToken(PostgreSQLParser.XML_IS_WELL_FORMED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_IS_WELL_FORMED_DOCUMENT() { return GetToken(PostgreSQLParser.XML_IS_WELL_FORMED_DOCUMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_IS_WELL_FORMED_CONTENT() { return GetToken(PostgreSQLParser.XML_IS_WELL_FORMED_CONTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XMLAGG() { return GetToken(PostgreSQLParser.XMLAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XPATH() { return GetToken(PostgreSQLParser.XPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XPATH_EXISTS() { return GetToken(PostgreSQLParser.XPATH_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(PostgreSQLParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRT() { return GetToken(PostgreSQLParser.CBRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(PostgreSQLParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(PostgreSQLParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEGREES() { return GetToken(PostgreSQLParser.DEGREES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(PostgreSQLParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(PostgreSQLParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTORIAL() { return GetToken(PostgreSQLParser.FACTORIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(PostgreSQLParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GCD() { return GetToken(PostgreSQLParser.GCD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCM() { return GetToken(PostgreSQLParser.LCM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(PostgreSQLParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(PostgreSQLParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(PostgreSQLParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_SCALE() { return GetToken(PostgreSQLParser.MIN_SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(PostgreSQLParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(PostgreSQLParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(PostgreSQLParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RADIANS() { return GetToken(PostgreSQLParser.RADIANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(PostgreSQLParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALE() { return GetToken(PostgreSQLParser.SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(PostgreSQLParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(PostgreSQLParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM_SCALE() { return GetToken(PostgreSQLParser.TRIM_SCALE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNC() { return GetToken(PostgreSQLParser.TRUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WIDTH_BUCKET() { return GetToken(PostgreSQLParser.WIDTH_BUCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM() { return GetToken(PostgreSQLParser.RANDOM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETSEED() { return GetToken(PostgreSQLParser.SETSEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(PostgreSQLParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOSD() { return GetToken(PostgreSQLParser.ACOSD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOSH() { return GetToken(PostgreSQLParser.ACOSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(PostgreSQLParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIND() { return GetToken(PostgreSQLParser.ASIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASINH() { return GetToken(PostgreSQLParser.ASINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(PostgreSQLParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAND() { return GetToken(PostgreSQLParser.ATAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATANH() { return GetToken(PostgreSQLParser.ATANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(PostgreSQLParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2D() { return GetToken(PostgreSQLParser.ATAN2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(PostgreSQLParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COSD() { return GetToken(PostgreSQLParser.COSD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COSH() { return GetToken(PostgreSQLParser.COSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(PostgreSQLParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COTD() { return GetToken(PostgreSQLParser.COTD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(PostgreSQLParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIND() { return GetToken(PostgreSQLParser.SIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINH() { return GetToken(PostgreSQLParser.SINH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(PostgreSQLParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAND() { return GetToken(PostgreSQLParser.TAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TANH() { return GetToken(PostgreSQLParser.TANH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_LENGTH() { return GetToken(PostgreSQLParser.BIT_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LENGTH() { return GetToken(PostgreSQLParser.CHAR_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LENGTH() { return GetToken(PostgreSQLParser.CHARACTER_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(PostgreSQLParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTET_LENGTH() { return GetToken(PostgreSQLParser.OCTET_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPER() { return GetToken(PostgreSQLParser.UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(PostgreSQLParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTRIM() { return GetToken(PostgreSQLParser.BTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(PostgreSQLParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(PostgreSQLParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_WS() { return GetToken(PostgreSQLParser.CONCAT_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(PostgreSQLParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITCAP() { return GetToken(PostgreSQLParser.INITCAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(PostgreSQLParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAD() { return GetToken(PostgreSQLParser.LPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTRIM() { return GetToken(PostgreSQLParser.LTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(PostgreSQLParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE_IDENT() { return GetToken(PostgreSQLParser.PARSE_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PG_CLIENT_ENCODING() { return GetToken(PostgreSQLParser.PG_CLIENT_ENCODING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_IDENT() { return GetToken(PostgreSQLParser.QUOTE_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_LITERAL() { return GetToken(PostgreSQLParser.QUOTE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE_NULLABLE() { return GetToken(PostgreSQLParser.QUOTE_NULLABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_COUNT() { return GetToken(PostgreSQLParser.REGEXP_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_INSTR() { return GetToken(PostgreSQLParser.REGEXP_INSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_LIKE() { return GetToken(PostgreSQLParser.REGEXP_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_MATCH() { return GetToken(PostgreSQLParser.REGEXP_MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_MATCHES() { return GetToken(PostgreSQLParser.REGEXP_MATCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_REPLACE() { return GetToken(PostgreSQLParser.REGEXP_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SPLIT_TO_ARRAY() { return GetToken(PostgreSQLParser.REGEXP_SPLIT_TO_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SPLIT_TO_TABLE() { return GetToken(PostgreSQLParser.REGEXP_SPLIT_TO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SUBSTR() { return GetToken(PostgreSQLParser.REGEXP_SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(PostgreSQLParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(PostgreSQLParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(PostgreSQLParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAD() { return GetToken(PostgreSQLParser.RPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTRIM() { return GetToken(PostgreSQLParser.RTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPLIT_PART() { return GetToken(PostgreSQLParser.SPLIT_PART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_WITH() { return GetToken(PostgreSQLParser.STARTS_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TO_ARRAY() { return GetToken(PostgreSQLParser.STRING_TO_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TO_TABLE() { return GetToken(PostgreSQLParser.STRING_TO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRPOS() { return GetToken(PostgreSQLParser.STRPOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(PostgreSQLParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_ASCII() { return GetToken(PostgreSQLParser.TO_ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_HEX() { return GetToken(PostgreSQLParser.TO_HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSLATE() { return GetToken(PostgreSQLParser.TRANSLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNISTR() { return GetToken(PostgreSQLParser.UNISTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGE() { return GetToken(PostgreSQLParser.AGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_BIN() { return GetToken(PostgreSQLParser.DATE_BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_PART() { return GetToken(PostgreSQLParser.DATE_PART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_TRUNC() { return GetToken(PostgreSQLParser.DATE_TRUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISFINITE() { return GetToken(PostgreSQLParser.ISFINITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUSTIFY_DAYS() { return GetToken(PostgreSQLParser.JUSTIFY_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUSTIFY_HOURS() { return GetToken(PostgreSQLParser.JUSTIFY_HOURS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JUSTIFY_INTERVAL() { return GetToken(PostgreSQLParser.JUSTIFY_INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_DATE() { return GetToken(PostgreSQLParser.MAKE_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_INTERVAL() { return GetToken(PostgreSQLParser.MAKE_INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_TIME() { return GetToken(PostgreSQLParser.MAKE_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_TIMESTAMP() { return GetToken(PostgreSQLParser.MAKE_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_TIMESTAMPTZ() { return GetToken(PostgreSQLParser.MAKE_TIMESTAMPTZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOCK_TIMESTAMP() { return GetToken(PostgreSQLParser.CLOCK_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(PostgreSQLParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT_TIMESTAMP() { return GetToken(PostgreSQLParser.STATEMENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEOFDAY() { return GetToken(PostgreSQLParser.TIMEOFDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_TIMESTAMP() { return GetToken(PostgreSQLParser.TRANSACTION_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_TIMESTAMP() { return GetToken(PostgreSQLParser.TO_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_CHAR() { return GetToken(PostgreSQLParser.TO_CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_DATE() { return GetToken(PostgreSQLParser.TO_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_NUMBER() { return GetToken(PostgreSQLParser.TO_NUMBER, 0); }
		public Builtin_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtin_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterBuiltin_function_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitBuiltin_function_name(this);
		}
	}

	[RuleVersion(0)]
	public Builtin_function_nameContext builtin_function_name() {
		Builtin_function_nameContext _localctx = new Builtin_function_nameContext(Context, State);
		EnterRule(_localctx, 1394, RULE_builtin_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9957;
			_la = TokenStream.LA(1);
			if ( !(_la==REPLACE || (((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & 127L) != 0 || (((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & -130559L) != 0 || (((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & -1L) != 0 || (((_la - 633)) & ~0x3f) == 0 && ((1L << (_la - 633)) & 15L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pl_functionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionsContext comp_options() {
			return GetRuleContext<Comp_optionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pl_blockContext pl_block() {
			return GetRuleContext<Pl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_semiContext opt_semi() {
			return GetRuleContext<Opt_semiContext>(0);
		}
		public Pl_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pl_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPl_function(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPl_function(this);
		}
	}

	[RuleVersion(0)]
	public Pl_functionContext pl_function() {
		Pl_functionContext _localctx = new Pl_functionContext(Context, State);
		EnterRule(_localctx, 1396, RULE_pl_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9959;
			comp_options();
			State = 9960;
			pl_block();
			State = 9961;
			opt_semi();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_optionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionContext[] comp_option() {
			return GetRuleContexts<Comp_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_optionContext comp_option(int i) {
			return GetRuleContext<Comp_optionContext>(i);
		}
		public Comp_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_options; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComp_options(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComp_options(this);
		}
	}

	[RuleVersion(0)]
	public Comp_optionsContext comp_options() {
		Comp_optionsContext _localctx = new Comp_optionsContext(Context, State);
		EnterRule(_localctx, 1398, RULE_comp_options);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Operator) {
				{
				{
				State = 9963;
				comp_option();
				}
				}
				State = 9968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SharpContext sharp() {
			return GetRuleContext<SharpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMP() { return GetToken(PostgreSQLParser.DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT_STRICT_PARAMS() { return GetToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Option_valueContext option_value() {
			return GetRuleContext<Option_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_CONFLICT() { return GetToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_VARIABLE() { return GetToken(PostgreSQLParser.USE_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_COLUMN() { return GetToken(PostgreSQLParser.USE_COLUMN, 0); }
		public Comp_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterComp_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitComp_option(this);
		}
	}

	[RuleVersion(0)]
	public Comp_optionContext comp_option() {
		Comp_optionContext _localctx = new Comp_optionContext(Context, State);
		EnterRule(_localctx, 1400, RULE_comp_option);
		try {
			State = 9989;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,667,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9969;
				sharp();
				State = 9970;
				Match(OPTION);
				State = 9971;
				Match(DUMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9973;
				sharp();
				State = 9974;
				Match(PRINT_STRICT_PARAMS);
				State = 9975;
				option_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9977;
				sharp();
				State = 9978;
				Match(VARIABLE_CONFLICT);
				State = 9979;
				Match(ERROR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9981;
				sharp();
				State = 9982;
				Match(VARIABLE_CONFLICT);
				State = 9983;
				Match(USE_VARIABLE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9985;
				sharp();
				State = 9986;
				Match(VARIABLE_CONFLICT);
				State = 9987;
				Match(USE_COLUMN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SharpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Operator() { return GetToken(PostgreSQLParser.Operator, 0); }
		public SharpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sharp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSharp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSharp(this);
		}
	}

	[RuleVersion(0)]
	public SharpContext sharp() {
		SharpContext _localctx = new SharpContext(Context, State);
		EnterRule(_localctx, 1402, RULE_sharp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9991;
			Match(Operator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reserved_keywordContext reserved_keyword() {
			return GetRuleContext<Reserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unreserved_keywordContext unreserved_keyword() {
			return GetRuleContext<Unreserved_keywordContext>(0);
		}
		public Option_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOption_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOption_value(this);
		}
	}

	[RuleVersion(0)]
	public Option_valueContext option_value() {
		Option_valueContext _localctx = new Option_valueContext(Context, State);
		EnterRule(_localctx, 1404, RULE_option_value);
		try {
			State = 9997;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,668,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9993;
				sconst();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9994;
				reserved_keyword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9995;
				plsql_unreserved_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9996;
				unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_semiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Opt_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_semi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_semi(this);
		}
	}

	[RuleVersion(0)]
	public Opt_semiContext opt_semi() {
		Opt_semiContext _localctx = new Opt_semiContext(Context, State);
		EnterRule(_localctx, 1406, RULE_opt_semi);
		try {
			State = 10001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10000;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pl_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_sectContext decl_sect() {
			return GetRuleContext<Decl_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_P() { return GetToken(PostgreSQLParser.BEGIN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exception_sectContext exception_sect() {
			return GetRuleContext<Exception_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		public Pl_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pl_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPl_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPl_block(this);
		}
	}

	[RuleVersion(0)]
	public Pl_blockContext pl_block() {
		Pl_blockContext _localctx = new Pl_blockContext(Context, State);
		EnterRule(_localctx, 1408, RULE_pl_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10003;
			decl_sect();
			State = 10004;
			Match(BEGIN_P);
			State = 10005;
			proc_sect();
			State = 10006;
			exception_sect();
			State = 10007;
			Match(END_P);
			State = 10008;
			opt_label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_block_labelContext opt_block_label() {
			return GetRuleContext<Opt_block_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_startContext decl_start() {
			return GetRuleContext<Decl_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtsContext decl_stmts() {
			return GetRuleContext<Decl_stmtsContext>(0);
		}
		public Decl_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_sect(this);
		}
	}

	[RuleVersion(0)]
	public Decl_sectContext decl_sect() {
		Decl_sectContext _localctx = new Decl_sectContext(Context, State);
		EnterRule(_localctx, 1410, RULE_decl_sect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10010;
			opt_block_label();
			State = 10015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 10011;
				decl_start();
				State = 10013;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,670,Context) ) {
				case 1:
					{
					State = 10012;
					decl_stmts();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		public Decl_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_start(this);
		}
	}

	[RuleVersion(0)]
	public Decl_startContext decl_start() {
		Decl_startContext _localctx = new Decl_startContext(Context, State);
		EnterRule(_localctx, 1412, RULE_decl_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10017;
			Match(DECLARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_stmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtContext[] decl_stmt() {
			return GetRuleContexts<Decl_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_stmtContext decl_stmt(int i) {
			return GetRuleContext<Decl_stmtContext>(i);
		}
		public Decl_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_stmts(this);
		}
	}

	[RuleVersion(0)]
	public Decl_stmtsContext decl_stmts() {
		Decl_stmtsContext _localctx = new Decl_stmtsContext(Context, State);
		EnterRule(_localctx, 1414, RULE_decl_stmts);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10020;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 10019;
					decl_stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10022;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,672,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(PostgreSQLParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(PostgreSQLParser.GREATER_GREATER, 0); }
		public Label_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLabel_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLabel_decl(this);
		}
	}

	[RuleVersion(0)]
	public Label_declContext label_decl() {
		Label_declContext _localctx = new Label_declContext(Context, State);
		EnterRule(_localctx, 1416, RULE_label_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10024;
			Match(LESS_LESS);
			State = 10025;
			any_identifier();
			State = 10026;
			Match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_statementContext decl_statement() {
			return GetRuleContext<Decl_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(PostgreSQLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Decl_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Decl_stmtContext decl_stmt() {
		Decl_stmtContext _localctx = new Decl_stmtContext(Context, State);
		EnterRule(_localctx, 1418, RULE_decl_stmt);
		try {
			State = 10031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10028;
				decl_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10029;
				Match(DECLARE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10030;
				label_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_varnameContext decl_varname() {
			return GetRuleContext<Decl_varnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(PostgreSQLParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_aliasitemContext decl_aliasitem() {
			return GetRuleContext<Decl_aliasitemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_constContext decl_const() {
			return GetRuleContext<Decl_constContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_datatypeContext decl_datatype() {
			return GetRuleContext<Decl_datatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_collateContext decl_collate() {
			return GetRuleContext<Decl_collateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_notnullContext decl_notnull() {
			return GetRuleContext<Decl_notnullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_defvalContext decl_defval() {
			return GetRuleContext<Decl_defvalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scrollableContext opt_scrollable() {
			return GetRuleContext<Opt_scrollableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argsContext decl_cursor_args() {
			return GetRuleContext<Decl_cursor_argsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_is_forContext decl_is_for() {
			return GetRuleContext<Decl_is_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_queryContext decl_cursor_query() {
			return GetRuleContext<Decl_cursor_queryContext>(0);
		}
		public Decl_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_statement(this);
		}
	}

	[RuleVersion(0)]
	public Decl_statementContext decl_statement() {
		Decl_statementContext _localctx = new Decl_statementContext(Context, State);
		EnterRule(_localctx, 1420, RULE_decl_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10033;
			decl_varname();
			State = 10049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,674,Context) ) {
			case 1:
				{
				State = 10034;
				Match(ALIAS);
				State = 10035;
				Match(FOR);
				State = 10036;
				decl_aliasitem();
				}
				break;
			case 2:
				{
				State = 10037;
				decl_const();
				State = 10038;
				decl_datatype();
				State = 10039;
				decl_collate();
				State = 10040;
				decl_notnull();
				State = 10041;
				decl_defval();
				}
				break;
			case 3:
				{
				State = 10043;
				opt_scrollable();
				State = 10044;
				Match(CURSOR);
				State = 10045;
				decl_cursor_args();
				State = 10046;
				decl_is_for();
				State = 10047;
				decl_cursor_query();
				}
				break;
			}
			State = 10051;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scrollableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scrollableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scrollable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scrollable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scrollable(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scrollableContext opt_scrollable() {
		Opt_scrollableContext _localctx = new Opt_scrollableContext(Context, State);
		EnterRule(_localctx, 1422, RULE_opt_scrollable);
		try {
			State = 10057;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURSOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10054;
				Match(NO);
				State = 10055;
				Match(SCROLL);
				}
				break;
			case SCROLL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10056;
				Match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_queryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public Decl_cursor_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_query(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_query(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_queryContext decl_cursor_query() {
		Decl_cursor_queryContext _localctx = new Decl_cursor_queryContext(Context, State);
		EnterRule(_localctx, 1424, RULE_decl_cursor_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10059;
			selectstmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_argsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_arglistContext decl_cursor_arglist() {
			return GetRuleContext<Decl_cursor_arglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Decl_cursor_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_args(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_args(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_argsContext decl_cursor_args() {
		Decl_cursor_argsContext _localctx = new Decl_cursor_argsContext(Context, State);
		EnterRule(_localctx, 1426, RULE_decl_cursor_args);
		try {
			State = 10066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case IS:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10062;
				Match(OPEN_PAREN);
				State = 10063;
				decl_cursor_arglist();
				State = 10064;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_arglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argContext[] decl_cursor_arg() {
			return GetRuleContexts<Decl_cursor_argContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_cursor_argContext decl_cursor_arg(int i) {
			return GetRuleContext<Decl_cursor_argContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Decl_cursor_arglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_arglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_arglist(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_arglistContext decl_cursor_arglist() {
		Decl_cursor_arglistContext _localctx = new Decl_cursor_arglistContext(Context, State);
		EnterRule(_localctx, 1428, RULE_decl_cursor_arglist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10068;
			decl_cursor_arg();
			State = 10073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10069;
				Match(COMMA);
				State = 10070;
				decl_cursor_arg();
				}
				}
				State = 10075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_cursor_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_varnameContext decl_varname() {
			return GetRuleContext<Decl_varnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Decl_datatypeContext decl_datatype() {
			return GetRuleContext<Decl_datatypeContext>(0);
		}
		public Decl_cursor_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_cursor_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_cursor_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_cursor_arg(this);
		}
	}

	[RuleVersion(0)]
	public Decl_cursor_argContext decl_cursor_arg() {
		Decl_cursor_argContext _localctx = new Decl_cursor_argContext(Context, State);
		EnterRule(_localctx, 1430, RULE_decl_cursor_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10076;
			decl_varname();
			State = 10077;
			decl_datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_is_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		public Decl_is_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_is_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_is_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_is_for(this);
		}
	}

	[RuleVersion(0)]
	public Decl_is_forContext decl_is_for() {
		Decl_is_forContext _localctx = new Decl_is_forContext(Context, State);
		EnterRule(_localctx, 1432, RULE_decl_is_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10079;
			_la = TokenStream.LA(1);
			if ( !(_la==FOR || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_aliasitemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Decl_aliasitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_aliasitem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_aliasitem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_aliasitem(this);
		}
	}

	[RuleVersion(0)]
	public Decl_aliasitemContext decl_aliasitem() {
		Decl_aliasitemContext _localctx = new Decl_aliasitemContext(Context, State);
		EnterRule(_localctx, 1434, RULE_decl_aliasitem);
		try {
			State = 10083;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10081;
				Match(PARAM);
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10082;
				colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_varnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		public Decl_varnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_varname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_varname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_varname(this);
		}
	}

	[RuleVersion(0)]
	public Decl_varnameContext decl_varname() {
		Decl_varnameContext _localctx = new Decl_varnameContext(Context, State);
		EnterRule(_localctx, 1436, RULE_decl_varname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10085;
			any_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_constContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(PostgreSQLParser.CONSTANT, 0); }
		public Decl_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_const(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_const(this);
		}
	}

	[RuleVersion(0)]
	public Decl_constContext decl_const() {
		Decl_constContext _localctx = new Decl_constContext(Context, State);
		EnterRule(_localctx, 1438, RULE_decl_const);
		try {
			State = 10089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,679,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10088;
				Match(CONSTANT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_datatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public Decl_datatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_datatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_datatype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_datatype(this);
		}
	}

	[RuleVersion(0)]
	public Decl_datatypeContext decl_datatype() {
		Decl_datatypeContext _localctx = new Decl_datatypeContext(Context, State);
		EnterRule(_localctx, 1440, RULE_decl_datatype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10091;
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_collateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Decl_collateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_collate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_collate(this);
		}
	}

	[RuleVersion(0)]
	public Decl_collateContext decl_collate() {
		Decl_collateContext _localctx = new Decl_collateContext(Context, State);
		EnterRule(_localctx, 1442, RULE_decl_collate);
		try {
			State = 10096;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COLLATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10094;
				Match(COLLATE);
				State = 10095;
				any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_notnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PostgreSQLParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		public Decl_notnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_notnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_notnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_notnull(this);
		}
	}

	[RuleVersion(0)]
	public Decl_notnullContext decl_notnull() {
		Decl_notnullContext _localctx = new Decl_notnullContext(Context, State);
		EnterRule(_localctx, 1444, RULE_decl_notnull);
		try {
			State = 10101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10099;
				Match(NOT);
				State = 10100;
				Match(NULL_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_defvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Decl_defkeyContext decl_defkey() {
			return GetRuleContext<Decl_defkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Decl_defvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_defval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_defval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_defval(this);
		}
	}

	[RuleVersion(0)]
	public Decl_defvalContext decl_defval() {
		Decl_defvalContext _localctx = new Decl_defvalContext(Context, State);
		EnterRule(_localctx, 1446, RULE_decl_defval);
		try {
			State = 10107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EQUAL:
			case COLON_EQUALS:
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10104;
				decl_defkey();
				State = 10105;
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decl_defkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		public Decl_defkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl_defkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterDecl_defkey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitDecl_defkey(this);
		}
	}

	[RuleVersion(0)]
	public Decl_defkeyContext decl_defkey() {
		Decl_defkeyContext _localctx = new Decl_defkeyContext(Context, State);
		EnterRule(_localctx, 1448, RULE_decl_defkey);
		try {
			State = 10111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
			case COLON_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10109;
				assign_operator();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10110;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		public Assign_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAssign_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAssign_operator(this);
		}
	}

	[RuleVersion(0)]
	public Assign_operatorContext assign_operator() {
		Assign_operatorContext _localctx = new Assign_operatorContext(Context, State);
		EnterRule(_localctx, 1450, RULE_assign_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10113;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUALS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_stmtContext[] proc_stmt() {
			return GetRuleContexts<Proc_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_stmtContext proc_stmt(int i) {
			return GetRuleContext<Proc_stmtContext>(i);
		}
		public Proc_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_sect(this);
		}
	}

	[RuleVersion(0)]
	public Proc_sectContext proc_sect() {
		Proc_sectContext _localctx = new Proc_sectContext(Context, State);
		EnterRule(_localctx, 1452, RULE_proc_sect);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,684,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10115;
					proc_stmt();
					}
					} 
				}
				State = 10120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,684,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pl_blockContext pl_block() {
			return GetRuleContext<Pl_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_returnContext stmt_return() {
			return GetRuleContext<Stmt_returnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_raiseContext stmt_raise() {
			return GetRuleContext<Stmt_raiseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_assignContext stmt_assign() {
			return GetRuleContext<Stmt_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_ifContext stmt_if() {
			return GetRuleContext<Stmt_ifContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_caseContext stmt_case() {
			return GetRuleContext<Stmt_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_loopContext stmt_loop() {
			return GetRuleContext<Stmt_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_whileContext stmt_while() {
			return GetRuleContext<Stmt_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_forContext stmt_for() {
			return GetRuleContext<Stmt_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_foreach_aContext stmt_foreach_a() {
			return GetRuleContext<Stmt_foreach_aContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_exitContext stmt_exit() {
			return GetRuleContext<Stmt_exitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_assertContext stmt_assert() {
			return GetRuleContext<Stmt_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_execsqlContext stmt_execsql() {
			return GetRuleContext<Stmt_execsqlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_dynexecuteContext stmt_dynexecute() {
			return GetRuleContext<Stmt_dynexecuteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_performContext stmt_perform() {
			return GetRuleContext<Stmt_performContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_callContext stmt_call() {
			return GetRuleContext<Stmt_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_getdiagContext stmt_getdiag() {
			return GetRuleContext<Stmt_getdiagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_openContext stmt_open() {
			return GetRuleContext<Stmt_openContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_fetchContext stmt_fetch() {
			return GetRuleContext<Stmt_fetchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_moveContext stmt_move() {
			return GetRuleContext<Stmt_moveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_closeContext stmt_close() {
			return GetRuleContext<Stmt_closeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_nullContext stmt_null() {
			return GetRuleContext<Stmt_nullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_commitContext stmt_commit() {
			return GetRuleContext<Stmt_commitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_rollbackContext stmt_rollback() {
			return GetRuleContext<Stmt_rollbackContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_setContext stmt_set() {
			return GetRuleContext<Stmt_setContext>(0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Proc_stmtContext proc_stmt() {
		Proc_stmtContext _localctx = new Proc_stmtContext(Context, State);
		EnterRule(_localctx, 1454, RULE_proc_stmt);
		try {
			State = 10148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,685,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10121;
				pl_block();
				State = 10122;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10124;
				stmt_return();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10125;
				stmt_raise();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10126;
				stmt_assign();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10127;
				stmt_if();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10128;
				stmt_case();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10129;
				stmt_loop();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10130;
				stmt_while();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10131;
				stmt_for();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10132;
				stmt_foreach_a();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10133;
				stmt_exit();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 10134;
				stmt_assert();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 10135;
				stmt_execsql();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 10136;
				stmt_dynexecute();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 10137;
				stmt_perform();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 10138;
				stmt_call();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 10139;
				stmt_getdiag();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 10140;
				stmt_open();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 10141;
				stmt_fetch();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 10142;
				stmt_move();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 10143;
				stmt_close();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 10144;
				stmt_null();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 10145;
				stmt_commit();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 10146;
				stmt_rollback();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 10147;
				stmt_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_performContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(PostgreSQLParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_semiContext expr_until_semi() {
			return GetRuleContext<Expr_until_semiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_performContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_perform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_perform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_perform(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_performContext stmt_perform() {
		Stmt_performContext _localctx = new Stmt_performContext(Context, State);
		EnterRule(_localctx, 1456, RULE_stmt_perform);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10150;
			Match(PERFORM);
			State = 10151;
			expr_until_semi();
			State = 10152;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_expr_listContext opt_expr_list() {
			return GetRuleContext<Opt_expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		public Stmt_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_call(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_callContext stmt_call() {
		Stmt_callContext _localctx = new Stmt_callContext(Context, State);
		EnterRule(_localctx, 1458, RULE_stmt_call);
		try {
			State = 10168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10154;
				Match(CALL);
				State = 10155;
				any_identifier();
				State = 10156;
				Match(OPEN_PAREN);
				State = 10157;
				opt_expr_list();
				State = 10158;
				Match(CLOSE_PAREN);
				State = 10159;
				Match(SEMI);
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10161;
				Match(DO);
				State = 10162;
				any_identifier();
				State = 10163;
				Match(OPEN_PAREN);
				State = 10164;
				opt_expr_list();
				State = 10165;
				Match(CLOSE_PAREN);
				State = 10166;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_expr_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_expr_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_expr_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_expr_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_expr_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_expr_listContext opt_expr_list() {
		Opt_expr_listContext _localctx = new Opt_expr_listContext(Context, State);
		EnterRule(_localctx, 1460, RULE_opt_expr_list);
		try {
			State = 10172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
			case PLUS:
			case MINUS:
			case PARAM:
			case Operator:
			case AND:
			case ARRAY:
			case CASE:
			case CAST:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DO:
			case FALSE_P:
			case FETCH:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL_P:
			case SESSION_USER:
			case TABLE:
			case TRUE_P:
			case UNIQUE:
			case USER:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER_P:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER_P:
			case OVER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case VERBOSE:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case TABLESAMPLE:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case StringConstant:
			case UnicodeEscapeStringConstant:
			case BeginDollarStringConstant:
			case BinaryStringConstant:
			case HexadecimalStringConstant:
			case Integral:
			case Numeric:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
			case EscapeStringConstant:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10171;
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_varContext assign_var() {
			return GetRuleContext<Assign_varContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_assign(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_assignContext stmt_assign() {
		Stmt_assignContext _localctx = new Stmt_assignContext(Context, State);
		EnterRule(_localctx, 1462, RULE_stmt_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10174;
			assign_var();
			State = 10175;
			assign_operator();
			State = 10176;
			sql_expression();
			State = 10177;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_getdiagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(PostgreSQLParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_area_optContext getdiag_area_opt() {
			return GetRuleContext<Getdiag_area_optContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_listContext getdiag_list() {
			return GetRuleContext<Getdiag_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_getdiagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_getdiag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_getdiag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_getdiag(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_getdiagContext stmt_getdiag() {
		Stmt_getdiagContext _localctx = new Stmt_getdiagContext(Context, State);
		EnterRule(_localctx, 1464, RULE_stmt_getdiag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10179;
			Match(GET);
			State = 10180;
			getdiag_area_opt();
			State = 10181;
			Match(DIAGNOSTICS);
			State = 10182;
			getdiag_list();
			State = 10183;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_area_optContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(PostgreSQLParser.STACKED, 0); }
		public Getdiag_area_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_area_opt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_area_opt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_area_opt(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_area_optContext getdiag_area_opt() {
		Getdiag_area_optContext _localctx = new Getdiag_area_optContext(Context, State);
		EnterRule(_localctx, 1466, RULE_getdiag_area_opt);
		try {
			State = 10188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIAGNOSTICS:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case CURRENT_P:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10186;
				Match(CURRENT_P);
				}
				break;
			case STACKED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10187;
				Match(STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_list_itemContext[] getdiag_list_item() {
			return GetRuleContexts<Getdiag_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_list_itemContext getdiag_list_item(int i) {
			return GetRuleContext<Getdiag_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Getdiag_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_list(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_listContext getdiag_list() {
		Getdiag_listContext _localctx = new Getdiag_listContext(Context, State);
		EnterRule(_localctx, 1468, RULE_getdiag_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10190;
			getdiag_list_item();
			State = 10195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10191;
				Match(COMMA);
				State = 10192;
				getdiag_list_item();
				}
				}
				State = 10197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_targetContext getdiag_target() {
			return GetRuleContext<Getdiag_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_operatorContext assign_operator() {
			return GetRuleContext<Assign_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Getdiag_itemContext getdiag_item() {
			return GetRuleContext<Getdiag_itemContext>(0);
		}
		public Getdiag_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_list_itemContext getdiag_list_item() {
		Getdiag_list_itemContext _localctx = new Getdiag_list_itemContext(Context, State);
		EnterRule(_localctx, 1470, RULE_getdiag_list_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10198;
			getdiag_target();
			State = 10199;
			assign_operator();
			State = 10200;
			getdiag_item();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		public Getdiag_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_item(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_itemContext getdiag_item() {
		Getdiag_itemContext _localctx = new Getdiag_itemContext(Context, State);
		EnterRule(_localctx, 1472, RULE_getdiag_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10202;
			colid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Getdiag_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_varContext assign_var() {
			return GetRuleContext<Assign_varContext>(0);
		}
		public Getdiag_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getdiag_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterGetdiag_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitGetdiag_target(this);
		}
	}

	[RuleVersion(0)]
	public Getdiag_targetContext getdiag_target() {
		Getdiag_targetContext _localctx = new Getdiag_targetContext(Context, State);
		EnterRule(_localctx, 1474, RULE_getdiag_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10204;
			assign_var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_BRACKET() { return GetTokens(PostgreSQLParser.OPEN_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_rightbracketContext[] expr_until_rightbracket() {
			return GetRuleContexts<Expr_until_rightbracketContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_rightbracketContext expr_until_rightbracket(int i) {
			return GetRuleContext<Expr_until_rightbracketContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(PostgreSQLParser.CLOSE_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public Assign_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAssign_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAssign_var(this);
		}
	}

	[RuleVersion(0)]
	public Assign_varContext assign_var() {
		Assign_varContext _localctx = new Assign_varContext(Context, State);
		EnterRule(_localctx, 1476, RULE_assign_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				{
				State = 10206;
				any_name();
				}
				break;
			case PARAM:
				{
				State = 10207;
				Match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 10216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 10210;
				Match(OPEN_BRACKET);
				State = 10211;
				expr_until_rightbracket();
				State = 10212;
				Match(CLOSE_BRACKET);
				}
				}
				State = 10218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_P() { return GetTokens(PostgreSQLParser.IF_P); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_P(int i) {
			return GetToken(PostgreSQLParser.IF_P, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_thenContext expr_until_then() {
			return GetRuleContext<Expr_until_thenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_elsifsContext stmt_elsifs() {
			return GetRuleContext<Stmt_elsifsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Stmt_elseContext stmt_else() {
			return GetRuleContext<Stmt_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_if(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_ifContext stmt_if() {
		Stmt_ifContext _localctx = new Stmt_ifContext(Context, State);
		EnterRule(_localctx, 1478, RULE_stmt_if);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10219;
			Match(IF_P);
			State = 10220;
			expr_until_then();
			State = 10221;
			Match(THEN);
			State = 10222;
			proc_sect();
			State = 10223;
			stmt_elsifs();
			State = 10224;
			stmt_else();
			State = 10225;
			Match(END_P);
			State = 10226;
			Match(IF_P);
			State = 10227;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_elsifsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(PostgreSQLParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(PostgreSQLParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(PostgreSQLParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(PostgreSQLParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext[] proc_sect() {
			return GetRuleContexts<Proc_sectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect(int i) {
			return GetRuleContext<Proc_sectContext>(i);
		}
		public Stmt_elsifsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_elsifs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_elsifs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_elsifs(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_elsifsContext stmt_elsifs() {
		Stmt_elsifsContext _localctx = new Stmt_elsifsContext(Context, State);
		EnterRule(_localctx, 1480, RULE_stmt_elsifs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 10229;
				Match(ELSIF);
				State = 10230;
				a_expr();
				State = 10231;
				Match(THEN);
				State = 10232;
				proc_sect();
				}
				}
				State = 10238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Stmt_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_else(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_elseContext stmt_else() {
		Stmt_elseContext _localctx = new Stmt_elseContext(Context, State);
		EnterRule(_localctx, 1482, RULE_stmt_else);
		try {
			State = 10242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10240;
				Match(ELSE);
				State = 10241;
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(PostgreSQLParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(PostgreSQLParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_expr_until_whenContext opt_expr_until_when() {
			return GetRuleContext<Opt_expr_until_whenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_when_listContext case_when_list() {
			return GetRuleContext<Case_when_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_case_elseContext opt_case_else() {
			return GetRuleContext<Opt_case_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_case(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_caseContext stmt_case() {
		Stmt_caseContext _localctx = new Stmt_caseContext(Context, State);
		EnterRule(_localctx, 1484, RULE_stmt_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10244;
			Match(CASE);
			State = 10245;
			opt_expr_until_when();
			State = 10246;
			case_when_list();
			State = 10247;
			opt_case_else();
			State = 10248;
			Match(END_P);
			State = 10249;
			Match(CASE);
			State = 10250;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_expr_until_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_expr_until_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_expr_until_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_expr_until_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_expr_until_when(this);
		}
	}

	[RuleVersion(0)]
	public Opt_expr_until_whenContext opt_expr_until_when() {
		Opt_expr_until_whenContext _localctx = new Opt_expr_until_whenContext(Context, State);
		EnterRule(_localctx, 1486, RULE_opt_expr_until_when);
		try {
			State = 10254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,694,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10253;
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_when_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Case_whenContext[] case_when() {
			return GetRuleContexts<Case_whenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_whenContext case_when(int i) {
			return GetRuleContext<Case_whenContext>(i);
		}
		public Case_when_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_when_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_when_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_when_list(this);
		}
	}

	[RuleVersion(0)]
	public Case_when_listContext case_when_list() {
		Case_when_listContext _localctx = new Case_when_listContext(Context, State);
		EnterRule(_localctx, 1488, RULE_case_when_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10256;
				case_when();
				}
				}
				State = 10259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_whenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Case_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCase_when(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCase_when(this);
		}
	}

	[RuleVersion(0)]
	public Case_whenContext case_when() {
		Case_whenContext _localctx = new Case_whenContext(Context, State);
		EnterRule(_localctx, 1490, RULE_case_when);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10261;
			Match(WHEN);
			State = 10262;
			expr_list();
			State = 10263;
			Match(THEN);
			State = 10264;
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_case_elseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PostgreSQLParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Opt_case_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_case_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_case_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_case_else(this);
		}
	}

	[RuleVersion(0)]
	public Opt_case_elseContext opt_case_else() {
		Opt_case_elseContext _localctx = new Opt_case_elseContext(Context, State);
		EnterRule(_localctx, 1492, RULE_opt_case_else);
		try {
			State = 10269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ELSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10267;
				Match(ELSE);
				State = 10268;
				proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_loop(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_loopContext stmt_loop() {
		Stmt_loopContext _localctx = new Stmt_loopContext(Context, State);
		EnterRule(_localctx, 1494, RULE_stmt_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10271;
			opt_loop_label();
			State = 10272;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PostgreSQLParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_loopContext expr_until_loop() {
			return GetRuleContext<Expr_until_loopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_while(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_while(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_whileContext stmt_while() {
		Stmt_whileContext _localctx = new Stmt_whileContext(Context, State);
		EnterRule(_localctx, 1496, RULE_stmt_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10274;
			opt_loop_label();
			State = 10275;
			Match(WHILE);
			State = 10276;
			expr_until_loop();
			State = 10277;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_controlContext for_control() {
			return GetRuleContext<For_controlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_for(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_forContext stmt_for() {
		Stmt_forContext _localctx = new Stmt_forContext(Context, State);
		EnterRule(_localctx, 1498, RULE_stmt_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10279;
			opt_loop_label();
			State = 10280;
			Match(FOR);
			State = 10281;
			for_control();
			State = 10282;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_controlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_variableContext for_variable() {
			return GetRuleContext<For_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_cursor_parametersContext opt_cursor_parameters() {
			return GetRuleContext<Opt_cursor_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainstmtContext explainstmt() {
			return GetRuleContext<ExplainstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_using_expressionContext opt_for_using_expression() {
			return GetRuleContext<Opt_for_using_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_reverseContext opt_reverse() {
			return GetRuleContext<Opt_reverseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_DOT() { return GetToken(PostgreSQLParser.DOT_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_by_expressionContext opt_by_expression() {
			return GetRuleContext<Opt_by_expressionContext>(0);
		}
		public For_controlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_control(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_control(this);
		}
	}

	[RuleVersion(0)]
	public For_controlContext for_control() {
		For_controlContext _localctx = new For_controlContext(Context, State);
		EnterRule(_localctx, 1500, RULE_for_control);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10284;
			for_variable();
			State = 10285;
			Match(IN_P);
			State = 10301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
			case 1:
				{
				State = 10286;
				cursor_name();
				State = 10287;
				opt_cursor_parameters();
				}
				break;
			case 2:
				{
				State = 10289;
				selectstmt();
				}
				break;
			case 3:
				{
				State = 10290;
				explainstmt();
				}
				break;
			case 4:
				{
				State = 10291;
				Match(EXECUTE);
				State = 10292;
				a_expr();
				State = 10293;
				opt_for_using_expression();
				}
				break;
			case 5:
				{
				State = 10295;
				opt_reverse();
				State = 10296;
				a_expr();
				State = 10297;
				Match(DOT_DOT);
				State = 10298;
				a_expr();
				State = 10299;
				opt_by_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_for_using_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_for_using_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_for_using_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_for_using_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_for_using_expression(this);
		}
	}

	[RuleVersion(0)]
	public Opt_for_using_expressionContext opt_for_using_expression() {
		Opt_for_using_expressionContext _localctx = new Opt_for_using_expressionContext(Context, State);
		EnterRule(_localctx, 1502, RULE_opt_for_using_expression);
		try {
			State = 10306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10304;
				Match(USING);
				State = 10305;
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_cursor_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_cursor_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_cursor_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_cursor_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_cursor_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Opt_cursor_parametersContext opt_cursor_parameters() {
		Opt_cursor_parametersContext _localctx = new Opt_cursor_parametersContext(Context, State);
		EnterRule(_localctx, 1504, RULE_opt_cursor_parameters);
		int _la;
		try {
			State = 10320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10309;
				Match(OPEN_PAREN);
				State = 10310;
				a_expr();
				State = 10315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 10311;
					Match(COMMA);
					State = 10312;
					a_expr();
					}
					}
					State = 10317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 10318;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_reverseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(PostgreSQLParser.REVERSE, 0); }
		public Opt_reverseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_reverse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_reverse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_reverse(this);
		}
	}

	[RuleVersion(0)]
	public Opt_reverseContext opt_reverse() {
		Opt_reverseContext _localctx = new Opt_reverseContext(Context, State);
		EnterRule(_localctx, 1506, RULE_opt_reverse);
		try {
			State = 10324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,701,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10323;
				Match(REVERSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_by_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(PostgreSQLParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_by_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_by_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_by_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_by_expression(this);
		}
	}

	[RuleVersion(0)]
	public Opt_by_expressionContext opt_by_expression() {
		Opt_by_expressionContext _localctx = new Opt_by_expressionContext(Context, State);
		EnterRule(_localctx, 1508, RULE_opt_by_expression);
		try {
			State = 10329;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case BY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10327;
				Match(BY);
				State = 10328;
				a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_name_listContext any_name_list() {
			return GetRuleContext<Any_name_listContext>(0);
		}
		public For_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterFor_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitFor_variable(this);
		}
	}

	[RuleVersion(0)]
	public For_variableContext for_variable() {
		For_variableContext _localctx = new For_variableContext(Context, State);
		EnterRule(_localctx, 1510, RULE_for_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10331;
			any_name_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_foreach_aContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_loop_labelContext opt_loop_label() {
			return GetRuleContext<Opt_loop_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH() { return GetToken(PostgreSQLParser.FOREACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_variableContext for_variable() {
			return GetRuleContext<For_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreach_sliceContext foreach_slice() {
			return GetRuleContext<Foreach_sliceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_bodyContext loop_body() {
			return GetRuleContext<Loop_bodyContext>(0);
		}
		public Stmt_foreach_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_foreach_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_foreach_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_foreach_a(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_foreach_aContext stmt_foreach_a() {
		Stmt_foreach_aContext _localctx = new Stmt_foreach_aContext(Context, State);
		EnterRule(_localctx, 1512, RULE_stmt_foreach_a);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10333;
			opt_loop_label();
			State = 10334;
			Match(FOREACH);
			State = 10335;
			for_variable();
			State = 10336;
			foreach_slice();
			State = 10337;
			Match(IN_P);
			State = 10338;
			Match(ARRAY);
			State = 10339;
			a_expr();
			State = 10340;
			loop_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_sliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICE() { return GetToken(PostgreSQLParser.SLICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IconstContext iconst() {
			return GetRuleContext<IconstContext>(0);
		}
		public Foreach_sliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_slice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterForeach_slice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitForeach_slice(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_sliceContext foreach_slice() {
		Foreach_sliceContext _localctx = new Foreach_sliceContext(Context, State);
		EnterRule(_localctx, 1514, RULE_foreach_slice);
		try {
			State = 10345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case SLICE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10343;
				Match(SLICE);
				State = 10344;
				iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_exitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exit_typeContext exit_type() {
			return GetRuleContext<Exit_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_exitcondContext opt_exitcond() {
			return GetRuleContext<Opt_exitcondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_exitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_exit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_exit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_exit(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_exitContext stmt_exit() {
		Stmt_exitContext _localctx = new Stmt_exitContext(Context, State);
		EnterRule(_localctx, 1516, RULE_stmt_exit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10347;
			exit_type();
			State = 10348;
			opt_label();
			State = 10349;
			opt_exitcond();
			State = 10350;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(PostgreSQLParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		public Exit_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExit_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExit_type(this);
		}
	}

	[RuleVersion(0)]
	public Exit_typeContext exit_type() {
		Exit_typeContext _localctx = new Exit_typeContext(Context, State);
		EnterRule(_localctx, 1518, RULE_exit_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10352;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_P || _la==EXIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_returnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(PostgreSQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_return_resultContext opt_return_result() {
			return GetRuleContext<Opt_return_resultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_for_using_expressionContext opt_for_using_expression() {
			return GetRuleContext<Opt_for_using_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		public Stmt_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_return(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_return(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_returnContext stmt_return() {
		Stmt_returnContext _localctx = new Stmt_returnContext(Context, State);
		EnterRule(_localctx, 1520, RULE_stmt_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10354;
			Match(RETURN);
			State = 10366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
			case 1:
				{
				State = 10355;
				Match(NEXT);
				State = 10356;
				sql_expression();
				}
				break;
			case 2:
				{
				State = 10357;
				Match(QUERY);
				State = 10363;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXECUTE:
					{
					State = 10358;
					Match(EXECUTE);
					State = 10359;
					a_expr();
					State = 10360;
					opt_for_using_expression();
					}
					break;
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					State = 10362;
					selectstmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 10365;
				opt_return_result();
				}
				break;
			}
			State = 10368;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_return_resultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_return_resultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_return_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_return_result(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_return_result(this);
		}
	}

	[RuleVersion(0)]
	public Opt_return_resultContext opt_return_result() {
		Opt_return_resultContext _localctx = new Opt_return_resultContext(Context, State);
		EnterRule(_localctx, 1522, RULE_opt_return_result);
		try {
			State = 10372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,706,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10371;
				sql_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_raiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(PostgreSQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
			return GetRuleContext<Opt_stmt_raise_levelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_listContext opt_raise_list() {
			return GetRuleContext<Opt_raise_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_usingContext opt_raise_using() {
			return GetRuleContext<Opt_raise_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		public Stmt_raiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_raise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_raise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_raise(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_raiseContext stmt_raise() {
		Stmt_raiseContext _localctx = new Stmt_raiseContext(Context, State);
		EnterRule(_localctx, 1524, RULE_stmt_raise);
		try {
			State = 10400;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,707,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10374;
				Match(RAISE);
				State = 10375;
				opt_stmt_raise_level();
				State = 10376;
				sconst();
				State = 10377;
				opt_raise_list();
				State = 10378;
				opt_raise_using();
				State = 10379;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10381;
				Match(RAISE);
				State = 10382;
				opt_stmt_raise_level();
				State = 10383;
				identifier();
				State = 10384;
				opt_raise_using();
				State = 10385;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10387;
				Match(RAISE);
				State = 10388;
				opt_stmt_raise_level();
				State = 10389;
				Match(SQLSTATE);
				State = 10390;
				sconst();
				State = 10391;
				opt_raise_using();
				State = 10392;
				Match(SEMI);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10394;
				Match(RAISE);
				State = 10395;
				opt_stmt_raise_level();
				State = 10396;
				opt_raise_using();
				State = 10397;
				Match(SEMI);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10399;
				Match(RAISE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_stmt_raise_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(PostgreSQLParser.DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(PostgreSQLParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFO() { return GetToken(PostgreSQLParser.INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTICE() { return GetToken(PostgreSQLParser.NOTICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNING() { return GetToken(PostgreSQLParser.WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		public Opt_stmt_raise_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_stmt_raise_level; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_stmt_raise_level(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_stmt_raise_level(this);
		}
	}

	[RuleVersion(0)]
	public Opt_stmt_raise_levelContext opt_stmt_raise_level() {
		Opt_stmt_raise_levelContext _localctx = new Opt_stmt_raise_levelContext(Context, State);
		EnterRule(_localctx, 1526, RULE_opt_stmt_raise_level);
		try {
			State = 10410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,708,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10404;
				Match(DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10405;
				Match(LOG);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10406;
				Match(INFO);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10407;
				Match(NOTICE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10408;
				Match(WARNING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10409;
				Match(EXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		public Opt_raise_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_listContext opt_raise_list() {
		Opt_raise_listContext _localctx = new Opt_raise_listContext(Context, State);
		EnterRule(_localctx, 1528, RULE_opt_raise_list);
		int _la;
		try {
			State = 10419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 10413;
					Match(COMMA);
					State = 10414;
					a_expr();
					}
					}
					State = 10417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
			return GetRuleContext<Opt_raise_using_elem_listContext>(0);
		}
		public Opt_raise_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_usingContext opt_raise_using() {
		Opt_raise_usingContext _localctx = new Opt_raise_usingContext(Context, State);
		EnterRule(_localctx, 1530, RULE_opt_raise_using);
		try {
			State = 10424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10422;
				Match(USING);
				State = 10423;
				opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_using_elemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PostgreSQLParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_raise_using_elemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using_elem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using_elem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using_elem(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_using_elemContext opt_raise_using_elem() {
		Opt_raise_using_elemContext _localctx = new Opt_raise_using_elemContext(Context, State);
		EnterRule(_localctx, 1532, RULE_opt_raise_using_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10426;
			identifier();
			State = 10427;
			Match(EQUAL);
			State = 10428;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_raise_using_elem_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elemContext[] opt_raise_using_elem() {
			return GetRuleContexts<Opt_raise_using_elemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_raise_using_elemContext opt_raise_using_elem(int i) {
			return GetRuleContext<Opt_raise_using_elemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_raise_using_elem_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_raise_using_elem_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_raise_using_elem_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_raise_using_elem_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_raise_using_elem_listContext opt_raise_using_elem_list() {
		Opt_raise_using_elem_listContext _localctx = new Opt_raise_using_elem_listContext(Context, State);
		EnterRule(_localctx, 1534, RULE_opt_raise_using_elem_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10430;
			opt_raise_using_elem();
			State = 10435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10431;
				Match(COMMA);
				State = 10432;
				opt_raise_using_elem();
				}
				}
				State = 10437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(PostgreSQLParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
			return GetRuleContext<Opt_stmt_assert_messageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_assert(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_assertContext stmt_assert() {
		Stmt_assertContext _localctx = new Stmt_assertContext(Context, State);
		EnterRule(_localctx, 1536, RULE_stmt_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10438;
			Match(ASSERT);
			State = 10439;
			sql_expression();
			State = 10440;
			opt_stmt_assert_message();
			State = 10441;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_stmt_assert_messageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PostgreSQLParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Opt_stmt_assert_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_stmt_assert_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_stmt_assert_message(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_stmt_assert_message(this);
		}
	}

	[RuleVersion(0)]
	public Opt_stmt_assert_messageContext opt_stmt_assert_message() {
		Opt_stmt_assert_messageContext _localctx = new Opt_stmt_assert_messageContext(Context, State);
		EnterRule(_localctx, 1538, RULE_opt_stmt_assert_message);
		try {
			State = 10446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10444;
				Match(COMMA);
				State = 10445;
				sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(PostgreSQLParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(PostgreSQLParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_P() { return GetToken(PostgreSQLParser.END_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_labelContext opt_label() {
			return GetRuleContext<Opt_labelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Loop_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterLoop_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitLoop_body(this);
		}
	}

	[RuleVersion(0)]
	public Loop_bodyContext loop_body() {
		Loop_bodyContext _localctx = new Loop_bodyContext(Context, State);
		EnterRule(_localctx, 1540, RULE_loop_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10448;
			Match(LOOP);
			State = 10449;
			proc_sect();
			State = 10450;
			Match(END_P);
			State = 10451;
			Match(LOOP);
			State = 10452;
			opt_label();
			State = 10453;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_execsqlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Make_execsql_stmtContext make_execsql_stmt() {
			return GetRuleContext<Make_execsql_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_execsqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_execsql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_execsql(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_execsql(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_execsqlContext stmt_execsql() {
		Stmt_execsqlContext _localctx = new Stmt_execsqlContext(Context, State);
		EnterRule(_localctx, 1542, RULE_stmt_execsql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10455;
			make_execsql_stmt();
			State = 10456;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_dynexecuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_intoContext opt_execute_into() {
			return GetRuleContext<Opt_execute_intoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_usingContext opt_execute_using() {
			return GetRuleContext<Opt_execute_usingContext>(0);
		}
		public Stmt_dynexecuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_dynexecute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_dynexecute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_dynexecute(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_dynexecuteContext stmt_dynexecute() {
		Stmt_dynexecuteContext _localctx = new Stmt_dynexecuteContext(Context, State);
		EnterRule(_localctx, 1544, RULE_stmt_dynexecute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10458;
			Match(EXECUTE);
			State = 10459;
			a_expr();
			State = 10467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,714,Context) ) {
			case 1:
				{
				State = 10460;
				opt_execute_into();
				State = 10461;
				opt_execute_using();
				}
				break;
			case 2:
				{
				State = 10463;
				opt_execute_using();
				State = 10464;
				opt_execute_into();
				}
				break;
			case 3:
				{
				}
				break;
			}
			State = 10469;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_execute_using_listContext opt_execute_using_list() {
			return GetRuleContext<Opt_execute_using_listContext>(0);
		}
		public Opt_execute_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_usingContext opt_execute_using() {
		Opt_execute_usingContext _localctx = new Opt_execute_usingContext(Context, State);
		EnterRule(_localctx, 1546, RULE_opt_execute_using);
		try {
			State = 10474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case INTO:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10472;
				Match(USING);
				State = 10473;
				opt_execute_using_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_using_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_execute_using_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_using_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_using_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_using_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_using_listContext opt_execute_using_list() {
		Opt_execute_using_listContext _localctx = new Opt_execute_using_listContext(Context, State);
		EnterRule(_localctx, 1548, RULE_opt_execute_using_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10476;
			a_expr();
			State = 10481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10477;
				Match(COMMA);
				State = 10478;
				a_expr();
				}
				}
				State = 10483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_execute_intoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRICT_P() { return GetToken(PostgreSQLParser.STRICT_P, 0); }
		public Opt_execute_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_execute_into; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_execute_into(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_execute_into(this);
		}
	}

	[RuleVersion(0)]
	public Opt_execute_intoContext opt_execute_into() {
		Opt_execute_intoContext _localctx = new Opt_execute_intoContext(Context, State);
		EnterRule(_localctx, 1550, RULE_opt_execute_into);
		try {
			State = 10490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
			case USING:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case INTO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10485;
				Match(INTO);
				State = 10487;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,717,Context) ) {
				case 1:
					{
					State = 10486;
					Match(STRICT_P);
					}
					break;
				}
				State = 10489;
				into_target();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_openContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(PostgreSQLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scroll_optionContext opt_scroll_option() {
			return GetRuleContext<Opt_scroll_optionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PostgreSQLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectstmtContext selectstmt() {
			return GetRuleContext<SelectstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(PostgreSQLParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_usingContext opt_open_using() {
			return GetRuleContext<Opt_open_usingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(PostgreSQLParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_listContext opt_open_bound_list() {
			return GetRuleContext<Opt_open_bound_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Stmt_openContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_open; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_open(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_open(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_openContext stmt_open() {
		Stmt_openContext _localctx = new Stmt_openContext(Context, State);
		EnterRule(_localctx, 1552, RULE_stmt_open);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10492;
			Match(OPEN);
			State = 10510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
			case 1:
				{
				State = 10493;
				cursor_variable();
				State = 10494;
				opt_scroll_option();
				State = 10495;
				Match(FOR);
				State = 10501;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAREN:
				case SELECT:
				case TABLE:
				case WITH:
				case VALUES:
					{
					State = 10496;
					selectstmt();
					}
					break;
				case EXECUTE:
					{
					State = 10497;
					Match(EXECUTE);
					State = 10498;
					sql_expression();
					State = 10499;
					opt_open_using();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 10503;
				colid();
				State = 10508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAREN) {
					{
					State = 10504;
					Match(OPEN_PAREN);
					State = 10505;
					opt_open_bound_list();
					State = 10506;
					Match(CLOSE_PAREN);
					}
				}

				}
				break;
			}
			State = 10512;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_bound_list_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_EQUALS() { return GetToken(PostgreSQLParser.COLON_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Opt_open_bound_list_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_bound_list_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_bound_list_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_bound_list_item(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_bound_list_itemContext opt_open_bound_list_item() {
		Opt_open_bound_list_itemContext _localctx = new Opt_open_bound_list_itemContext(Context, State);
		EnterRule(_localctx, 1554, RULE_opt_open_bound_list_item);
		try {
			State = 10519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,722,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10514;
				colid();
				State = 10515;
				Match(COLON_EQUALS);
				State = 10516;
				a_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10518;
				a_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_bound_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_list_itemContext[] opt_open_bound_list_item() {
			return GetRuleContexts<Opt_open_bound_list_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_open_bound_list_itemContext opt_open_bound_list_item(int i) {
			return GetRuleContext<Opt_open_bound_list_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PostgreSQLParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PostgreSQLParser.COMMA, i);
		}
		public Opt_open_bound_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_bound_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_bound_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_bound_list(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_bound_listContext opt_open_bound_list() {
		Opt_open_bound_listContext _localctx = new Opt_open_bound_listContext(Context, State);
		EnterRule(_localctx, 1556, RULE_opt_open_bound_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10521;
			opt_open_bound_list_item();
			State = 10526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 10522;
				Match(COMMA);
				State = 10523;
				opt_open_bound_list_item();
				}
				}
				State = 10528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_open_usingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(PostgreSQLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Opt_open_usingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_open_using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_open_using(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_open_using(this);
		}
	}

	[RuleVersion(0)]
	public Opt_open_usingContext opt_open_using() {
		Opt_open_usingContext _localctx = new Opt_open_usingContext(Context, State);
		EnterRule(_localctx, 1558, RULE_opt_open_using);
		try {
			State = 10532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10530;
				Match(USING);
				State = 10531;
				expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scroll_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_scroll_option_noContext opt_scroll_option_no() {
			return GetRuleContext<Opt_scroll_option_noContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		public Opt_scroll_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scroll_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scroll_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scroll_option(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scroll_optionContext opt_scroll_option() {
		Opt_scroll_optionContext _localctx = new Opt_scroll_optionContext(Context, State);
		EnterRule(_localctx, 1560, RULE_opt_scroll_option);
		try {
			State = 10538;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
			case SCROLL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10535;
				opt_scroll_option_no();
				State = 10536;
				Match(SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_scroll_option_noContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Opt_scroll_option_noContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_scroll_option_no; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_scroll_option_no(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_scroll_option_no(this);
		}
	}

	[RuleVersion(0)]
	public Opt_scroll_option_noContext opt_scroll_option_no() {
		Opt_scroll_option_noContext _localctx = new Opt_scroll_option_noContext(Context, State);
		EnterRule(_localctx, 1562, RULE_opt_scroll_option_no);
		try {
			State = 10542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCROLL:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10541;
				Match(NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_fetchContext : ParserRuleContext {
		public Opt_fetch_directionContext direction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_cursor_fromContext opt_cursor_from() {
			return GetRuleContext<Opt_cursor_fromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fetch_directionContext opt_fetch_direction() {
			return GetRuleContext<Opt_fetch_directionContext>(0);
		}
		public Stmt_fetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_fetch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_fetch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_fetch(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_fetchContext stmt_fetch() {
		Stmt_fetchContext _localctx = new Stmt_fetchContext(Context, State);
		EnterRule(_localctx, 1564, RULE_stmt_fetch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10544;
			Match(FETCH);
			State = 10545;
			_localctx.direction = opt_fetch_direction();
			State = 10546;
			opt_cursor_from();
			State = 10547;
			cursor_variable();
			State = 10548;
			Match(INTO);
			State = 10549;
			into_target();
			State = 10550;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_listContext expr_list() {
			return GetRuleContext<Expr_listContext>(0);
		}
		public Into_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterInto_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitInto_target(this);
		}
	}

	[RuleVersion(0)]
	public Into_targetContext into_target() {
		Into_targetContext _localctx = new Into_targetContext(Context, State);
		EnterRule(_localctx, 1566, RULE_into_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10552;
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_cursor_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PostgreSQLParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_P() { return GetToken(PostgreSQLParser.IN_P, 0); }
		public Opt_cursor_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_cursor_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_cursor_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_cursor_from(this);
		}
	}

	[RuleVersion(0)]
	public Opt_cursor_fromContext opt_cursor_from() {
		Opt_cursor_fromContext _localctx = new Opt_cursor_fromContext(Context, State);
		EnterRule(_localctx, 1568, RULE_opt_cursor_from);
		try {
			State = 10557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARAM:
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10555;
				Match(FROM);
				}
				break;
			case IN_P:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10556;
				Match(IN_P);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_fetch_directionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		public Opt_fetch_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_fetch_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_fetch_direction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_fetch_direction(this);
		}
	}

	[RuleVersion(0)]
	public Opt_fetch_directionContext opt_fetch_direction() {
		Opt_fetch_directionContext _localctx = new Opt_fetch_directionContext(Context, State);
		EnterRule(_localctx, 1570, RULE_opt_fetch_direction);
		int _la;
		try {
			State = 10576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,729,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 10561;
				Match(NEXT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 10562;
				Match(PRIOR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 10563;
				Match(FIRST_P);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 10564;
				Match(LAST_P);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 10565;
				Match(ABSOLUTE_P);
				State = 10566;
				a_expr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 10567;
				Match(RELATIVE_P);
				State = 10568;
				a_expr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 10569;
				a_expr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 10570;
				Match(ALL);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 10571;
				_la = TokenStream.LA(1);
				if ( !(_la==BACKWARD || _la==FORWARD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 10574;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,728,Context) ) {
				case 1:
					{
					State = 10572;
					a_expr();
					}
					break;
				case 2:
					{
					State = 10573;
					Match(ALL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_moveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_fetch_directionContext opt_fetch_direction() {
			return GetRuleContext<Opt_fetch_directionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_moveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_move(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_move(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_moveContext stmt_move() {
		Stmt_moveContext _localctx = new Stmt_moveContext(Context, State);
		EnterRule(_localctx, 1572, RULE_stmt_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10578;
			Match(MOVE);
			State = 10579;
			opt_fetch_direction();
			State = 10580;
			cursor_variable();
			State = 10581;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_closeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cursor_variableContext cursor_variable() {
			return GetRuleContext<Cursor_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_closeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_close; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_close(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_close(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_closeContext stmt_close() {
		Stmt_closeContext _localctx = new Stmt_closeContext(Context, State);
		EnterRule(_localctx, 1574, RULE_stmt_close);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10583;
			Match(CLOSE);
			State = 10584;
			cursor_variable();
			State = 10585;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_nullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_P() { return GetToken(PostgreSQLParser.NULL_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_nullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_null; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_null(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_null(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_nullContext stmt_null() {
		Stmt_nullContext _localctx = new Stmt_nullContext(Context, State);
		EnterRule(_localctx, 1576, RULE_stmt_null);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10587;
			Match(NULL_P);
			State = 10588;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_commitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return GetRuleContext<Plsql_opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_commitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_commit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_commit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_commit(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_commitContext stmt_commit() {
		Stmt_commitContext _localctx = new Stmt_commitContext(Context, State);
		EnterRule(_localctx, 1578, RULE_stmt_commit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10590;
			Match(COMMIT);
			State = 10591;
			plsql_opt_transaction_chain();
			State = 10592;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_rollbackContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
			return GetRuleContext<Plsql_opt_transaction_chainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		public Stmt_rollbackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_rollback; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_rollback(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_rollback(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_rollbackContext stmt_rollback() {
		Stmt_rollbackContext _localctx = new Stmt_rollbackContext(Context, State);
		EnterRule(_localctx, 1580, RULE_stmt_rollback);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10594;
			Match(ROLLBACK);
			State = 10595;
			plsql_opt_transaction_chain();
			State = 10596;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plsql_opt_transaction_chainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		public Plsql_opt_transaction_chainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsql_opt_transaction_chain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsql_opt_transaction_chain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsql_opt_transaction_chain(this);
		}
	}

	[RuleVersion(0)]
	public Plsql_opt_transaction_chainContext plsql_opt_transaction_chain() {
		Plsql_opt_transaction_chainContext _localctx = new Plsql_opt_transaction_chainContext(Context, State);
		EnterRule(_localctx, 1582, RULE_plsql_opt_transaction_chain);
		int _la;
		try {
			State = 10604;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10598;
				Match(AND);
				State = 10600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 10599;
					Match(NO);
					}
				}

				State = 10602;
				Match(CHAIN);
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stmt_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(PostgreSQLParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(PostgreSQLParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(PostgreSQLParser.ALL, 0); }
		public Stmt_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterStmt_set(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitStmt_set(this);
		}
	}

	[RuleVersion(0)]
	public Stmt_setContext stmt_set() {
		Stmt_setContext _localctx = new Stmt_setContext(Context, State);
		EnterRule(_localctx, 1584, RULE_stmt_set);
		try {
			State = 10618;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10606;
				Match(SET);
				State = 10607;
				any_name();
				State = 10608;
				Match(TO);
				State = 10609;
				Match(DEFAULT);
				State = 10610;
				Match(SEMI);
				}
				break;
			case RESET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10612;
				Match(RESET);
				State = 10615;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AND:
				case ARRAY:
				case COLLATE:
				case COLUMN:
				case CONSTRAINT:
				case DEFAULT:
				case DO:
				case FETCH:
				case TABLE:
				case IS:
				case LEFT:
				case OUTER_P:
				case OVER:
				case RIGHT:
				case ABORT_P:
				case ABSOLUTE_P:
				case ACCESS:
				case ACTION:
				case ADD_P:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN_P:
				case BY:
				case CACHE:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT_P:
				case CONTINUE_P:
				case CONVERSION_P:
				case COPY:
				case COST:
				case CSV:
				case CURSOR:
				case CYCLE:
				case DATA_P:
				case DATABASE:
				case DAY_P:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE_P:
				case DELIMITER:
				case DELIMITERS:
				case DICTIONARY:
				case DISABLE_P:
				case DISCARD:
				case DOCUMENT_P:
				case DOMAIN_P:
				case DOUBLE_P:
				case DROP:
				case EACH:
				case ENABLE_P:
				case ENCODING:
				case ENCRYPTED:
				case ENUM_P:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FIRST_P:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GLOBAL:
				case GRANTED:
				case HANDLER:
				case HEADER_P:
				case HOLD:
				case HOUR_P:
				case IDENTITY_P:
				case IF_P:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT_P:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE_P:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE_P:
				case LAST_P:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK_P:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case MINUTE_P:
				case MINVALUE:
				case MODE:
				case MONTH_P:
				case MOVE:
				case NAME_P:
				case NAMES:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS_P:
				case OBJECT_P:
				case OF:
				case OFF:
				case OIDS:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case OWNED:
				case OWNER:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROGRAM:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFRESH:
				case REINDEX:
				case RELATIVE_P:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND_P:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SNAPSHOT:
				case STABLE:
				case STANDALONE_P:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT_P:
				case STRIP_P:
				case SYSID:
				case SYSTEM_P:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT_P:
				case TRANSACTION:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE_P:
				case TYPES_P:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VARYING:
				case VERSION_P:
				case VIEW:
				case VOLATILE:
				case WHITESPACE_P:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML_P:
				case YEAR_P:
				case YES_P:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN_P:
				case CHAR_P:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL_P:
				case EXISTS:
				case EXTRACT:
				case FLOAT_P:
				case GREATEST:
				case INOUT:
				case INT_P:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCOMMENT:
				case XMLAGG:
				case XML_IS_WELL_FORMED:
				case XML_IS_WELL_FORMED_DOCUMENT:
				case XML_IS_WELL_FORMED_CONTENT:
				case XPATH:
				case XPATH_EXISTS:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case CALL:
				case CURRENT_P:
				case ATTACH:
				case DETACH:
				case EXPRESSION:
				case GENERATED:
				case LOGGED:
				case STORED:
				case INCLUDE:
				case ROUTINE:
				case TRANSFORM:
				case IMPORT_P:
				case POLICY:
				case METHOD:
				case REFERENCING:
				case NEW:
				case OLD:
				case VALUE_P:
				case SUBSCRIPTION:
				case PUBLICATION:
				case OUT_P:
				case ROUTINES:
				case SCHEMAS:
				case PROCEDURES:
				case INPUT_P:
				case SUPPORT:
				case PARALLEL:
				case SQL_P:
				case DEPENDS:
				case OVERRIDING:
				case CONFLICT:
				case SKIP_P:
				case LOCKED:
				case TIES:
				case ROLLUP:
				case CUBE:
				case GROUPING:
				case SETS:
				case ORDINALITY:
				case XMLTABLE:
				case COLUMNS:
				case XMLNAMESPACES:
				case ROWTYPE:
				case NORMALIZED:
				case WITHIN:
				case FILTER:
				case GROUPS:
				case OTHERS:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case UESCAPE:
				case VIEWS:
				case NORMALIZE:
				case DUMP:
				case PRINT_STRICT_PARAMS:
				case VARIABLE_CONFLICT:
				case ERROR:
				case USE_VARIABLE:
				case USE_COLUMN:
				case ALIAS:
				case CONSTANT:
				case PERFORM:
				case GET:
				case DIAGNOSTICS:
				case STACKED:
				case ELSIF:
				case REVERSE:
				case SLICE:
				case EXIT:
				case RETURN:
				case QUERY:
				case RAISE:
				case SQLSTATE:
				case DEBUG:
				case LOG:
				case INFO:
				case NOTICE:
				case WARNING:
				case EXCEPTION:
				case ASSERT:
				case OPEN:
				case ABS:
				case CBRT:
				case CEIL:
				case CEILING:
				case DEGREES:
				case DIV:
				case EXP:
				case FACTORIAL:
				case FLOOR:
				case GCD:
				case LCM:
				case LN:
				case LOG10:
				case MIN_SCALE:
				case MOD:
				case PI:
				case POWER:
				case RADIANS:
				case ROUND:
				case SCALE:
				case SIGN:
				case SQRT:
				case TRIM_SCALE:
				case TRUNC:
				case WIDTH_BUCKET:
				case RANDOM:
				case SETSEED:
				case ACOS:
				case ACOSD:
				case ASIN:
				case ASIND:
				case ATAN:
				case ATAND:
				case ATAN2:
				case ATAN2D:
				case COS:
				case COSD:
				case COT:
				case COTD:
				case SIN:
				case SIND:
				case TAN:
				case TAND:
				case SINH:
				case COSH:
				case TANH:
				case ASINH:
				case ACOSH:
				case ATANH:
				case BIT_LENGTH:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case LOWER:
				case OCTET_LENGTH:
				case UPPER:
				case ASCII:
				case BTRIM:
				case CHR:
				case CONCAT:
				case CONCAT_WS:
				case FORMAT:
				case INITCAP:
				case LENGTH:
				case LPAD:
				case LTRIM:
				case MD5:
				case PARSE_IDENT:
				case PG_CLIENT_ENCODING:
				case QUOTE_IDENT:
				case QUOTE_LITERAL:
				case QUOTE_NULLABLE:
				case REGEXP_COUNT:
				case REGEXP_INSTR:
				case REGEXP_LIKE:
				case REGEXP_MATCH:
				case REGEXP_MATCHES:
				case REGEXP_REPLACE:
				case REGEXP_SPLIT_TO_ARRAY:
				case REGEXP_SPLIT_TO_TABLE:
				case REGEXP_SUBSTR:
				case REPEAT:
				case RPAD:
				case RTRIM:
				case SPLIT_PART:
				case STARTS_WITH:
				case STRING_TO_ARRAY:
				case STRING_TO_TABLE:
				case STRPOS:
				case SUBSTR:
				case TO_ASCII:
				case TO_HEX:
				case TRANSLATE:
				case UNISTR:
				case AGE:
				case CLOCK_TIMESTAMP:
				case DATE_BIN:
				case DATE_PART:
				case DATE_TRUNC:
				case ISFINITE:
				case JUSTIFY_DAYS:
				case JUSTIFY_HOURS:
				case JUSTIFY_INTERVAL:
				case MAKE_DATE:
				case MAKE_INTERVAL:
				case MAKE_TIME:
				case MAKE_TIMESTAMP:
				case MAKE_TIMESTAMPTZ:
				case NOW:
				case STATEMENT_TIMESTAMP:
				case TIMEOFDAY:
				case TRANSACTION_TIMESTAMP:
				case TO_TIMESTAMP:
				case TO_CHAR:
				case TO_DATE:
				case TO_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case UnicodeQuotedIdentifier:
				case PLSQLVARIABLENAME:
				case PLSQLIDENTIFIER:
					{
					State = 10613;
					any_name();
					}
					break;
				case ALL:
					{
					State = 10614;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 10617;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM() { return GetToken(PostgreSQLParser.PARAM, 0); }
		public Cursor_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterCursor_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitCursor_variable(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_variableContext cursor_variable() {
		Cursor_variableContext _localctx = new Cursor_variableContext(Context, State);
		EnterRule(_localctx, 1586, RULE_cursor_variable);
		try {
			State = 10622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10620;
				colid();
				}
				break;
			case PARAM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10621;
				Match(PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_sectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionsContext proc_exceptions() {
			return GetRuleContext<Proc_exceptionsContext>(0);
		}
		public Exception_sectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_sect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterException_sect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitException_sect(this);
		}
	}

	[RuleVersion(0)]
	public Exception_sectContext exception_sect() {
		Exception_sectContext _localctx = new Exception_sectContext(Context, State);
		EnterRule(_localctx, 1588, RULE_exception_sect);
		try {
			State = 10627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case END_P:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case EXCEPTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10625;
				Match(EXCEPTION);
				State = 10626;
				proc_exceptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_exceptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionContext[] proc_exception() {
			return GetRuleContexts<Proc_exceptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_exceptionContext proc_exception(int i) {
			return GetRuleContext<Proc_exceptionContext>(i);
		}
		public Proc_exceptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_exceptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_exceptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_exceptions(this);
		}
	}

	[RuleVersion(0)]
	public Proc_exceptionsContext proc_exceptions() {
		Proc_exceptionsContext _localctx = new Proc_exceptionsContext(Context, State);
		EnterRule(_localctx, 1590, RULE_proc_exceptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10629;
				proc_exception();
				}
				}
				State = 10632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_exceptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionsContext proc_conditions() {
			return GetRuleContext<Proc_conditionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(PostgreSQLParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Proc_sectContext proc_sect() {
			return GetRuleContext<Proc_sectContext>(0);
		}
		public Proc_exceptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_exception; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_exception(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_exception(this);
		}
	}

	[RuleVersion(0)]
	public Proc_exceptionContext proc_exception() {
		Proc_exceptionContext _localctx = new Proc_exceptionContext(Context, State);
		EnterRule(_localctx, 1592, RULE_proc_exception);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10634;
			Match(WHEN);
			State = 10635;
			proc_conditions();
			State = 10636;
			Match(THEN);
			State = 10637;
			proc_sect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_conditionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionContext[] proc_condition() {
			return GetRuleContexts<Proc_conditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Proc_conditionContext proc_condition(int i) {
			return GetRuleContext<Proc_conditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PostgreSQLParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PostgreSQLParser.OR, i);
		}
		public Proc_conditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_conditions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_conditions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_conditions(this);
		}
	}

	[RuleVersion(0)]
	public Proc_conditionsContext proc_conditions() {
		Proc_conditionsContext _localctx = new Proc_conditionsContext(Context, State);
		EnterRule(_localctx, 1594, RULE_proc_conditions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10639;
			proc_condition();
			State = 10644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 10640;
				Match(OR);
				State = 10641;
				proc_condition();
				}
				}
				State = 10646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SconstContext sconst() {
			return GetRuleContext<SconstContext>(0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterProc_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitProc_condition(this);
		}
	}

	[RuleVersion(0)]
	public Proc_conditionContext proc_condition() {
		Proc_conditionContext _localctx = new Proc_conditionContext(Context, State);
		EnterRule(_localctx, 1596, RULE_proc_condition);
		try {
			State = 10650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10647;
				any_identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10648;
				Match(SQLSTATE);
				State = 10649;
				sconst();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_block_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Opt_block_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_block_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_block_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_block_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_block_labelContext opt_block_label() {
		Opt_block_labelContext _localctx = new Opt_block_labelContext(Context, State);
		EnterRule(_localctx, 1598, RULE_opt_block_label);
		try {
			State = 10654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_P:
			case DECLARE:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10653;
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_loop_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_declContext label_decl() {
			return GetRuleContext<Label_declContext>(0);
		}
		public Opt_loop_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_loop_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_loop_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_loop_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_loop_labelContext opt_loop_label() {
		Opt_loop_labelContext _localctx = new Opt_loop_labelContext(Context, State);
		EnterRule(_localctx, 1600, RULE_opt_loop_label);
		try {
			State = 10658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
			case WHILE:
			case FOREACH:
			case LOOP:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case LESS_LESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10657;
				label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_labelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_identifierContext any_identifier() {
			return GetRuleContext<Any_identifierContext>(0);
		}
		public Opt_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_label(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_label(this);
		}
	}

	[RuleVersion(0)]
	public Opt_labelContext opt_label() {
		Opt_labelContext _localctx = new Opt_labelContext(Context, State);
		EnterRule(_localctx, 1602, RULE_opt_label);
		try {
			State = 10662;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
			case SEMI:
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case AND:
			case ARRAY:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case DEFAULT:
			case DO:
			case FETCH:
			case TABLE:
			case IS:
			case LEFT:
			case OUTER_P:
			case OVER:
			case RIGHT:
			case ABORT_P:
			case ABSOLUTE_P:
			case ACCESS:
			case ACTION:
			case ADD_P:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN_P:
			case BY:
			case CACHE:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT_P:
			case CONTINUE_P:
			case CONVERSION_P:
			case COPY:
			case COST:
			case CSV:
			case CURSOR:
			case CYCLE:
			case DATA_P:
			case DATABASE:
			case DAY_P:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE_P:
			case DELIMITER:
			case DELIMITERS:
			case DICTIONARY:
			case DISABLE_P:
			case DISCARD:
			case DOCUMENT_P:
			case DOMAIN_P:
			case DOUBLE_P:
			case DROP:
			case EACH:
			case ENABLE_P:
			case ENCODING:
			case ENCRYPTED:
			case ENUM_P:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FIRST_P:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GLOBAL:
			case GRANTED:
			case HANDLER:
			case HEADER_P:
			case HOLD:
			case HOUR_P:
			case IDENTITY_P:
			case IF_P:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT_P:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE_P:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE_P:
			case LAST_P:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK_P:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case MINUTE_P:
			case MINVALUE:
			case MODE:
			case MONTH_P:
			case MOVE:
			case NAME_P:
			case NAMES:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS_P:
			case OBJECT_P:
			case OF:
			case OFF:
			case OIDS:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case OWNED:
			case OWNER:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROGRAM:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFRESH:
			case REINDEX:
			case RELATIVE_P:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND_P:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SNAPSHOT:
			case STABLE:
			case STANDALONE_P:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT_P:
			case STRIP_P:
			case SYSID:
			case SYSTEM_P:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT_P:
			case TRANSACTION:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE_P:
			case TYPES_P:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VARYING:
			case VERSION_P:
			case VIEW:
			case VOLATILE:
			case WHITESPACE_P:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML_P:
			case YEAR_P:
			case YES_P:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN_P:
			case CHAR_P:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL_P:
			case EXISTS:
			case EXTRACT:
			case FLOAT_P:
			case GREATEST:
			case INOUT:
			case INT_P:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCOMMENT:
			case XMLAGG:
			case XML_IS_WELL_FORMED:
			case XML_IS_WELL_FORMED_DOCUMENT:
			case XML_IS_WELL_FORMED_CONTENT:
			case XPATH:
			case XPATH_EXISTS:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case CALL:
			case CURRENT_P:
			case ATTACH:
			case DETACH:
			case EXPRESSION:
			case GENERATED:
			case LOGGED:
			case STORED:
			case INCLUDE:
			case ROUTINE:
			case TRANSFORM:
			case IMPORT_P:
			case POLICY:
			case METHOD:
			case REFERENCING:
			case NEW:
			case OLD:
			case VALUE_P:
			case SUBSCRIPTION:
			case PUBLICATION:
			case OUT_P:
			case ROUTINES:
			case SCHEMAS:
			case PROCEDURES:
			case INPUT_P:
			case SUPPORT:
			case PARALLEL:
			case SQL_P:
			case DEPENDS:
			case OVERRIDING:
			case CONFLICT:
			case SKIP_P:
			case LOCKED:
			case TIES:
			case ROLLUP:
			case CUBE:
			case GROUPING:
			case SETS:
			case ORDINALITY:
			case XMLTABLE:
			case COLUMNS:
			case XMLNAMESPACES:
			case ROWTYPE:
			case NORMALIZED:
			case WITHIN:
			case FILTER:
			case GROUPS:
			case OTHERS:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case UESCAPE:
			case VIEWS:
			case NORMALIZE:
			case DUMP:
			case PRINT_STRICT_PARAMS:
			case VARIABLE_CONFLICT:
			case ERROR:
			case USE_VARIABLE:
			case USE_COLUMN:
			case ALIAS:
			case CONSTANT:
			case PERFORM:
			case GET:
			case DIAGNOSTICS:
			case STACKED:
			case ELSIF:
			case REVERSE:
			case SLICE:
			case EXIT:
			case RETURN:
			case QUERY:
			case RAISE:
			case SQLSTATE:
			case DEBUG:
			case LOG:
			case INFO:
			case NOTICE:
			case WARNING:
			case EXCEPTION:
			case ASSERT:
			case OPEN:
			case ABS:
			case CBRT:
			case CEIL:
			case CEILING:
			case DEGREES:
			case DIV:
			case EXP:
			case FACTORIAL:
			case FLOOR:
			case GCD:
			case LCM:
			case LN:
			case LOG10:
			case MIN_SCALE:
			case MOD:
			case PI:
			case POWER:
			case RADIANS:
			case ROUND:
			case SCALE:
			case SIGN:
			case SQRT:
			case TRIM_SCALE:
			case TRUNC:
			case WIDTH_BUCKET:
			case RANDOM:
			case SETSEED:
			case ACOS:
			case ACOSD:
			case ASIN:
			case ASIND:
			case ATAN:
			case ATAND:
			case ATAN2:
			case ATAN2D:
			case COS:
			case COSD:
			case COT:
			case COTD:
			case SIN:
			case SIND:
			case TAN:
			case TAND:
			case SINH:
			case COSH:
			case TANH:
			case ASINH:
			case ACOSH:
			case ATANH:
			case BIT_LENGTH:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case LOWER:
			case OCTET_LENGTH:
			case UPPER:
			case ASCII:
			case BTRIM:
			case CHR:
			case CONCAT:
			case CONCAT_WS:
			case FORMAT:
			case INITCAP:
			case LENGTH:
			case LPAD:
			case LTRIM:
			case MD5:
			case PARSE_IDENT:
			case PG_CLIENT_ENCODING:
			case QUOTE_IDENT:
			case QUOTE_LITERAL:
			case QUOTE_NULLABLE:
			case REGEXP_COUNT:
			case REGEXP_INSTR:
			case REGEXP_LIKE:
			case REGEXP_MATCH:
			case REGEXP_MATCHES:
			case REGEXP_REPLACE:
			case REGEXP_SPLIT_TO_ARRAY:
			case REGEXP_SPLIT_TO_TABLE:
			case REGEXP_SUBSTR:
			case REPEAT:
			case RPAD:
			case RTRIM:
			case SPLIT_PART:
			case STARTS_WITH:
			case STRING_TO_ARRAY:
			case STRING_TO_TABLE:
			case STRPOS:
			case SUBSTR:
			case TO_ASCII:
			case TO_HEX:
			case TRANSLATE:
			case UNISTR:
			case AGE:
			case CLOCK_TIMESTAMP:
			case DATE_BIN:
			case DATE_PART:
			case DATE_TRUNC:
			case ISFINITE:
			case JUSTIFY_DAYS:
			case JUSTIFY_HOURS:
			case JUSTIFY_INTERVAL:
			case MAKE_DATE:
			case MAKE_INTERVAL:
			case MAKE_TIME:
			case MAKE_TIMESTAMP:
			case MAKE_TIMESTAMPTZ:
			case NOW:
			case STATEMENT_TIMESTAMP:
			case TIMEOFDAY:
			case TRANSACTION_TIMESTAMP:
			case TO_TIMESTAMP:
			case TO_CHAR:
			case TO_DATE:
			case TO_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case UnicodeQuotedIdentifier:
			case PLSQLVARIABLENAME:
			case PLSQLIDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10661;
				any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_exitcondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(PostgreSQLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr_until_semiContext expr_until_semi() {
			return GetRuleContext<Expr_until_semiContext>(0);
		}
		public Opt_exitcondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_exitcond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_exitcond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_exitcond(this);
		}
	}

	[RuleVersion(0)]
	public Opt_exitcondContext opt_exitcond() {
		Opt_exitcondContext _localctx = new Opt_exitcondContext(Context, State);
		EnterRule(_localctx, 1604, RULE_opt_exitcond);
		try {
			State = 10667;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10664;
				Match(WHEN);
				State = 10665;
				expr_until_semi();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColidContext colid() {
			return GetRuleContext<ColidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
			return GetRuleContext<Plsql_unreserved_keywordContext>(0);
		}
		public Any_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterAny_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitAny_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Any_identifierContext any_identifier() {
		Any_identifierContext _localctx = new Any_identifierContext(Context, State);
		EnterRule(_localctx, 1606, RULE_any_identifier);
		try {
			State = 10671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10669;
				colid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 10670;
				plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Plsql_unreserved_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSOLUTE_P() { return GetToken(PostgreSQLParser.ABSOLUTE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(PostgreSQLParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(PostgreSQLParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(PostgreSQLParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(PostgreSQLParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKWARD() { return GetToken(PostgreSQLParser.BACKWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(PostgreSQLParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(PostgreSQLParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(PostgreSQLParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(PostgreSQLParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(PostgreSQLParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(PostgreSQLParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(PostgreSQLParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(PostgreSQLParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_P() { return GetToken(PostgreSQLParser.CONTINUE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_P() { return GetToken(PostgreSQLParser.CURRENT_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(PostgreSQLParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEBUG() { return GetToken(PostgreSQLParser.DEBUG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(PostgreSQLParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(PostgreSQLParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMP() { return GetToken(PostgreSQLParser.DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(PostgreSQLParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(PostgreSQLParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPTION() { return GetToken(PostgreSQLParser.EXCEPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(PostgreSQLParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(PostgreSQLParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_P() { return GetToken(PostgreSQLParser.FIRST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORWARD() { return GetToken(PostgreSQLParser.FORWARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(PostgreSQLParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFO() { return GetToken(PostgreSQLParser.INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(PostgreSQLParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PostgreSQLParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_P() { return GetToken(PostgreSQLParser.LAST_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(PostgreSQLParser.MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(PostgreSQLParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(PostgreSQLParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTICE() { return GetToken(PostgreSQLParser.NOTICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(PostgreSQLParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(PostgreSQLParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORM() { return GetToken(PostgreSQLParser.PERFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT_STRICT_PARAMS() { return GetToken(PostgreSQLParser.PRINT_STRICT_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIOR() { return GetToken(PostgreSQLParser.PRIOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(PostgreSQLParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(PostgreSQLParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIVE_P() { return GetToken(PostgreSQLParser.RELATIVE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(PostgreSQLParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PostgreSQLParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(PostgreSQLParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWTYPE() { return GetToken(PostgreSQLParser.ROWTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(PostgreSQLParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCROLL() { return GetToken(PostgreSQLParser.SCROLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(PostgreSQLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLICE() { return GetToken(PostgreSQLParser.SLICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(PostgreSQLParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(PostgreSQLParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(PostgreSQLParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_P() { return GetToken(PostgreSQLParser.TYPE_P, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_COLUMN() { return GetToken(PostgreSQLParser.USE_COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_VARIABLE() { return GetToken(PostgreSQLParser.USE_VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE_CONFLICT() { return GetToken(PostgreSQLParser.VARIABLE_CONFLICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNING() { return GetToken(PostgreSQLParser.WARNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_P() { return GetToken(PostgreSQLParser.OUTER_P, 0); }
		public Plsql_unreserved_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plsql_unreserved_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterPlsql_unreserved_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitPlsql_unreserved_keyword(this);
		}
	}

	[RuleVersion(0)]
	public Plsql_unreserved_keywordContext plsql_unreserved_keyword() {
		Plsql_unreserved_keywordContext _localctx = new Plsql_unreserved_keywordContext(Context, State);
		EnterRule(_localctx, 1608, RULE_plsql_unreserved_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10673;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 2459027012145119232L) != 0 || (((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & 4620693494724296705L) != 0 || (((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & 10133099161617425L) != 0 || (((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & 18015499698831617L) != 0 || (((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & 9007199322050625L) != 0 || (((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & -144097595889811453L) != 0 || (((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & 12516927L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Opt_target_listContext opt_target_list() {
			return GetRuleContext<Opt_target_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		public Sql_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterSql_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitSql_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sql_expressionContext sql_expression() {
		Sql_expressionContext _localctx = new Sql_expressionContext(Context, State);
		EnterRule(_localctx, 1610, RULE_sql_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10675;
			opt_target_list();
			State = 10676;
			into_clause();
			State = 10677;
			from_clause();
			State = 10678;
			where_clause();
			State = 10679;
			group_clause();
			State = 10680;
			having_clause();
			State = 10681;
			window_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_thenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Expr_until_thenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_then; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_then(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_then(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_thenContext expr_until_then() {
		Expr_until_thenContext _localctx = new Expr_until_thenContext(Context, State);
		EnterRule(_localctx, 1612, RULE_expr_until_then);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10683;
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_semiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_expressionContext sql_expression() {
			return GetRuleContext<Sql_expressionContext>(0);
		}
		public Expr_until_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_semi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_semi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_semi(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_semiContext expr_until_semi() {
		Expr_until_semiContext _localctx = new Expr_until_semiContext(Context, State);
		EnterRule(_localctx, 1614, RULE_expr_until_semi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10685;
			sql_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_rightbracketContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Expr_until_rightbracketContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_rightbracket; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_rightbracket(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_rightbracket(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_rightbracketContext expr_until_rightbracket() {
		Expr_until_rightbracketContext _localctx = new Expr_until_rightbracketContext(Context, State);
		EnterRule(_localctx, 1616, RULE_expr_until_rightbracket);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10687;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_until_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public Expr_until_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_until_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterExpr_until_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitExpr_until_loop(this);
		}
	}

	[RuleVersion(0)]
	public Expr_until_loopContext expr_until_loop() {
		Expr_until_loopContext _localctx = new Expr_until_loopContext(Context, State);
		EnterRule(_localctx, 1618, RULE_expr_until_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10689;
			a_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Make_execsql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Opt_returning_clause_intoContext opt_returning_clause_into() {
			return GetRuleContext<Opt_returning_clause_intoContext>(0);
		}
		public Make_execsql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_make_execsql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterMake_execsql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitMake_execsql_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Make_execsql_stmtContext make_execsql_stmt() {
		Make_execsql_stmtContext _localctx = new Make_execsql_stmtContext(Context, State);
		EnterRule(_localctx, 1620, RULE_make_execsql_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10691;
			stmt();
			State = 10692;
			opt_returning_clause_into();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Opt_returning_clause_intoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(PostgreSQLParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Opt_strictContext opt_strict() {
			return GetRuleContext<Opt_strictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Into_targetContext into_target() {
			return GetRuleContext<Into_targetContext>(0);
		}
		public Opt_returning_clause_intoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opt_returning_clause_into; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.EnterOpt_returning_clause_into(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPostgreSQLParserListener typedListener = listener as IPostgreSQLParserListener;
			if (typedListener != null) typedListener.ExitOpt_returning_clause_into(this);
		}
	}

	[RuleVersion(0)]
	public Opt_returning_clause_intoContext opt_returning_clause_into() {
		Opt_returning_clause_intoContext _localctx = new Opt_returning_clause_intoContext(Context, State);
		EnterRule(_localctx, 1622, RULE_opt_returning_clause_into);
		try {
			State = 10699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 10694;
				Match(INTO);
				State = 10695;
				opt_strict();
				State = 10696;
				into_target();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 602: return b_expr_sempred((B_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,680,10702,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,
		2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
		2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
		2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,
		2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,
		2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,
		2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,
		2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,
		2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,
		2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,
		2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,
		2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,
		2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
		2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
		2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,
		2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,
		2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,
		2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,
		2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,
		2,651,7,651,2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,
		2,657,7,657,2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,
		2,663,7,663,2,664,7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,
		2,669,7,669,2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,
		2,675,7,675,2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,
		2,681,7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
		2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,7,692,
		2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,2,698,7,698,
		2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,7,703,2,704,7,704,
		2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,2,709,7,709,2,710,7,710,
		2,711,7,711,2,712,7,712,2,713,7,713,2,714,7,714,2,715,7,715,2,716,7,716,
		2,717,7,717,2,718,7,718,2,719,7,719,2,720,7,720,2,721,7,721,2,722,7,722,
		2,723,7,723,2,724,7,724,2,725,7,725,2,726,7,726,2,727,7,727,2,728,7,728,
		2,729,7,729,2,730,7,730,2,731,7,731,2,732,7,732,2,733,7,733,2,734,7,734,
		2,735,7,735,2,736,7,736,2,737,7,737,2,738,7,738,2,739,7,739,2,740,7,740,
		2,741,7,741,2,742,7,742,2,743,7,743,2,744,7,744,2,745,7,745,2,746,7,746,
		2,747,7,747,2,748,7,748,2,749,7,749,2,750,7,750,2,751,7,751,2,752,7,752,
		2,753,7,753,2,754,7,754,2,755,7,755,2,756,7,756,2,757,7,757,2,758,7,758,
		2,759,7,759,2,760,7,760,2,761,7,761,2,762,7,762,2,763,7,763,2,764,7,764,
		2,765,7,765,2,766,7,766,2,767,7,767,2,768,7,768,2,769,7,769,2,770,7,770,
		2,771,7,771,2,772,7,772,2,773,7,773,2,774,7,774,2,775,7,775,2,776,7,776,
		2,777,7,777,2,778,7,778,2,779,7,779,2,780,7,780,2,781,7,781,2,782,7,782,
		2,783,7,783,2,784,7,784,2,785,7,785,2,786,7,786,2,787,7,787,2,788,7,788,
		2,789,7,789,2,790,7,790,2,791,7,791,2,792,7,792,2,793,7,793,2,794,7,794,
		2,795,7,795,2,796,7,796,2,797,7,797,2,798,7,798,2,799,7,799,2,800,7,800,
		2,801,7,801,2,802,7,802,2,803,7,803,2,804,7,804,2,805,7,805,2,806,7,806,
		2,807,7,807,2,808,7,808,2,809,7,809,2,810,7,810,2,811,7,811,1,0,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,3,3,1634,8,3,5,3,1636,8,3,10,3,12,3,1639,9,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,3,4,1766,8,4,1,5,1,5,3,5,1770,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,7,1,7,1,8,1,8,3,8,1783,8,8,1,9,5,9,1786,8,9,10,9,12,9,1789,9,9,1,10,
		5,10,1792,8,10,10,10,12,10,1795,9,10,1,11,1,11,1,11,3,11,1800,8,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,1815,
		8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1827,8,12,
		1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
		1,15,1,15,3,15,1845,8,15,1,16,1,16,1,16,3,16,1850,8,16,1,16,1,16,1,16,
		1,16,1,17,1,17,1,17,1,17,3,17,1860,8,17,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,3,21,1884,8,21,1,21,1,21,1,21,1,21,1,21,3,21,1891,8,21,1,21,
		1,21,1,22,1,22,3,22,1897,8,22,1,23,5,23,1900,8,23,10,23,12,23,1903,9,23,
		1,24,1,24,1,24,1,24,1,24,1,24,3,24,1911,8,24,1,25,1,25,3,25,1915,8,25,
		1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1927,8,26,1,27,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		3,28,1958,8,28,1,29,1,29,1,29,5,29,1963,8,29,10,29,12,29,1966,9,29,1,30,
		1,30,1,30,5,30,1971,8,30,10,30,12,30,1974,9,30,1,31,1,31,3,31,1978,8,31,
		1,32,1,32,1,32,1,32,1,32,3,32,1985,8,32,1,33,1,33,1,33,1,33,3,33,1991,
		8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,3,34,2008,8,34,1,35,1,35,1,35,3,35,2013,8,35,1,36,1,36,3,36,
		2017,8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
		2030,8,38,1,39,1,39,3,39,2034,8,39,1,40,1,40,1,40,3,40,2039,8,40,1,41,
		1,41,1,41,3,41,2044,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		1,42,3,42,2056,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,3,44,2065,8,44,
		1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,2078,8,48,
		1,48,1,48,1,48,3,48,2083,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,2094,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
		2105,8,48,1,48,1,48,1,48,3,48,2110,8,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,3,48,2121,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,2132,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2141,8,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2151,8,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2166,8,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2178,8,48,1,48,1,48,
		1,48,3,48,2183,8,48,1,49,1,49,1,49,5,49,2188,8,49,10,49,12,49,2191,9,49,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2201,8,50,1,51,1,51,1,51,
		1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
		1,52,3,52,2459,8,52,1,53,1,53,1,53,1,53,1,53,3,53,2466,8,53,1,54,1,54,
		1,54,3,54,2471,8,54,1,55,1,55,1,55,3,55,2476,8,55,1,56,1,56,1,56,3,56,
		2481,8,56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,2489,8,57,1,58,1,58,1,58,
		1,58,1,59,1,59,1,59,3,59,2498,8,59,1,60,1,60,1,60,5,60,2503,8,60,10,60,
		12,60,2506,9,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2515,8,61,3,61,
		2517,8,61,1,62,4,62,2520,8,62,11,62,12,62,2521,1,63,1,63,1,63,1,63,3,63,
		2528,8,63,1,63,1,63,1,63,1,63,3,63,2534,8,63,3,63,2536,8,63,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2564,8,64,1,65,
		1,65,1,65,1,66,1,66,1,66,5,66,2572,8,66,10,66,12,66,2575,9,66,1,67,1,67,
		1,67,1,67,1,67,1,68,1,68,1,68,5,68,2585,8,68,10,68,12,68,2588,9,68,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2599,8,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2613,8,69,1,70,1,70,
		1,70,3,70,2618,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2642,
		8,71,1,72,1,72,1,73,1,73,3,73,2648,8,73,1,74,1,74,1,74,3,74,2653,8,74,
		1,75,1,75,1,75,1,75,1,75,3,75,2660,8,75,1,76,5,76,2663,8,76,10,76,12,76,
		2666,9,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,2703,8,77,1,78,1,78,
		3,78,2707,8,78,1,79,1,79,1,79,1,79,1,79,3,79,2714,8,79,1,80,1,80,3,80,
		2718,8,80,1,81,1,81,1,81,5,81,2723,8,81,10,81,12,81,2726,9,81,1,82,1,82,
		1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2739,8,83,1,84,1,84,
		1,84,5,84,2744,8,84,10,84,12,84,2747,9,84,1,85,1,85,1,86,1,86,1,86,1,86,
		1,86,1,86,3,86,2757,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
		1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2790,8,86,1,87,1,87,1,87,
		1,87,1,87,1,87,1,87,1,87,3,87,2800,8,87,1,88,1,88,3,88,2804,8,88,1,89,
		1,89,1,89,1,89,1,89,3,89,2811,8,89,1,90,1,90,1,90,5,90,2816,8,90,10,90,
		12,90,2819,9,90,1,91,1,91,1,91,5,91,2824,8,91,10,91,12,91,2827,9,91,1,
		92,1,92,1,92,3,92,2832,8,92,1,93,1,93,3,93,2836,8,93,1,94,1,94,1,94,1,
		94,1,94,1,95,1,95,1,95,3,95,2846,8,95,1,95,1,95,1,96,5,96,2851,8,96,10,
		96,12,96,2854,9,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,2864,8,
		97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
		98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,
		98,1,98,1,98,3,98,2896,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2904,8,
		98,1,99,1,99,1,99,3,99,2909,8,99,1,100,1,100,1,100,1,100,1,100,3,100,2916,
		8,100,1,101,1,101,1,101,1,101,1,102,1,102,5,102,2924,8,102,10,102,12,102,
		2927,9,102,1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,2936,8,104,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,3,105,2956,8,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,2971,
		8,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
		3,105,2996,8,105,1,106,1,106,1,106,3,106,3001,8,106,1,107,1,107,1,107,
		1,107,1,107,3,107,3008,8,107,1,108,1,108,1,108,5,108,3013,8,108,10,108,
		12,108,3016,9,108,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,3,110,
		3026,8,110,1,111,1,111,1,111,3,111,3031,8,111,1,112,1,112,1,112,5,112,
		3036,8,112,10,112,12,112,3039,9,112,1,113,1,113,1,113,1,113,1,113,1,113,
		1,113,1,113,3,113,3049,8,113,1,114,1,114,1,114,1,114,1,114,1,114,3,114,
		3057,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,
		3068,8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,118,1,118,
		1,118,1,118,1,118,1,118,3,118,3084,8,118,1,119,1,119,1,119,1,119,1,119,
		1,119,3,119,3092,8,119,1,120,1,120,3,120,3096,8,120,1,121,1,121,1,121,
		1,121,1,121,1,121,1,121,1,122,1,122,1,122,5,122,3108,8,122,10,122,12,122,
		3111,9,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
		1,123,1,123,1,123,1,123,3,123,3127,8,123,1,124,1,124,1,124,3,124,3132,
		8,124,1,125,1,125,1,125,1,125,1,125,3,125,3139,8,125,1,126,1,126,1,126,
		1,126,1,126,1,126,1,126,3,126,3148,8,126,1,126,3,126,3151,8,126,1,127,
		1,127,1,127,3,127,3156,8,127,1,128,1,128,1,128,1,128,1,128,3,128,3163,
		8,128,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,3,130,3174,
		8,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,
		3,131,3187,8,131,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,
		1,132,1,132,3,132,3200,8,132,1,132,1,132,1,132,1,132,1,132,1,133,1,133,
		1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,1,134,3,134,3218,8,134,
		1,134,3,134,3221,8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,
		3230,8,135,1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,
		1,136,1,137,1,137,3,137,3245,8,137,1,138,1,138,1,138,1,138,1,138,1,138,
		1,138,1,139,1,139,1,139,1,139,1,139,1,139,3,139,3260,8,139,1,139,1,139,
		1,139,1,140,1,140,1,140,1,140,3,140,3269,8,140,1,140,1,140,1,140,1,141,
		1,141,3,141,3276,8,141,1,142,1,142,1,142,1,142,1,142,3,142,3283,8,142,
		1,143,4,143,3286,8,143,11,143,12,143,3287,1,144,1,144,1,144,1,144,1,144,
		1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
		1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,
		3318,8,144,3,144,3320,8,144,1,145,1,145,3,145,3324,8,145,1,146,1,146,1,
		146,1,146,1,146,1,146,3,146,3332,8,146,1,147,1,147,1,147,5,147,3337,8,
		147,10,147,12,147,3340,9,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
		1,148,1,148,1,148,1,148,3,148,3353,8,148,1,149,1,149,3,149,3357,8,149,
		1,150,1,150,3,150,3361,8,150,1,151,1,151,1,151,3,151,3366,8,151,1,152,
		1,152,1,152,1,152,3,152,3372,8,152,1,153,1,153,3,153,3376,8,153,1,154,
		1,154,3,154,3380,8,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,
		1,156,1,156,1,156,3,156,3393,8,156,1,157,1,157,1,157,1,157,3,157,3399,
		8,157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,3,158,3408,8,158,1,158,
		1,158,1,158,1,158,1,159,5,159,3415,8,159,10,159,12,159,3418,9,159,1,160,
		1,160,1,160,1,160,1,160,1,160,1,160,3,160,3427,8,160,1,161,1,161,1,161,
		1,161,1,161,1,161,1,162,5,162,3436,8,162,10,162,12,162,3439,9,162,1,163,
		1,163,1,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,
		1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,3548,
		8,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,166,1,166,1,166,
		1,166,1,166,1,166,1,166,1,166,3,166,3566,8,166,1,167,4,167,3569,8,167,
		11,167,12,167,3570,1,168,1,168,3,168,3575,8,168,1,169,1,169,1,169,1,169,
		1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,
		3592,8,169,1,170,1,170,1,170,1,170,1,170,1,170,3,170,3600,8,170,1,171,
		1,171,1,171,5,171,3605,8,171,10,171,12,171,3608,9,171,1,172,1,172,1,172,
		1,172,1,172,1,173,1,173,1,173,5,173,3618,8,173,10,173,12,173,3621,9,173,
		1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,3630,8,174,1,175,1,175,
		1,175,1,176,1,176,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
		1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
		1,178,1,178,1,178,1,178,1,178,1,178,3,178,3664,8,178,1,179,1,179,1,179,
		3,179,3669,8,179,1,180,1,180,1,180,3,180,3674,8,180,1,181,1,181,3,181,
		3678,8,181,1,182,1,182,1,182,1,182,1,182,1,182,3,182,3686,8,182,3,182,
		3688,8,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,3746,
		8,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
		1,184,1,185,1,185,1,185,3,185,3763,8,185,1,186,1,186,1,186,1,186,1,186,
		1,186,3,186,3771,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
		1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
		1,187,3,187,3794,8,187,1,188,1,188,3,188,3798,8,188,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,3,189,3818,8,189,1,190,1,190,1,190,1,190,1,190,1,190,
		1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,
		1,191,1,191,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,192,1,193,
		1,193,1,193,1,193,1,193,1,193,3,193,3855,8,193,1,194,1,194,1,194,1,194,
		1,194,1,194,1,194,3,194,3864,8,194,1,195,1,195,1,195,3,195,3869,8,195,
		1,196,1,196,1,196,3,196,3874,8,196,1,197,1,197,1,197,3,197,3879,8,197,
		1,198,1,198,1,198,3,198,3884,8,198,1,199,1,199,1,200,1,200,1,200,1,200,
		1,200,1,200,1,200,1,200,1,200,1,201,1,201,1,202,1,202,1,202,1,202,1,202,
		1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
		1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
		1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,3938,
		8,202,1,203,1,203,1,203,1,203,3,203,3944,8,203,1,204,1,204,1,204,5,204,
		3949,8,204,10,204,12,204,3952,9,204,1,205,1,205,1,205,1,205,1,205,1,205,
		1,205,3,205,3961,8,205,1,206,1,206,1,206,3,206,3966,8,206,1,207,4,207,
		3969,8,207,11,207,12,207,3970,1,208,1,208,1,208,1,208,1,208,1,209,1,209,
		1,210,1,210,1,211,1,211,1,212,1,212,1,212,1,212,1,212,3,212,3989,8,212,
		1,213,1,213,3,213,3993,8,213,1,214,1,214,1,215,1,215,1,215,1,215,1,215,
		1,215,3,215,4003,8,215,1,216,1,216,1,217,1,217,3,217,4009,8,217,1,217,
		1,217,5,217,4013,8,217,10,217,12,217,4016,9,217,1,218,1,218,1,218,1,218,
		3,218,4022,8,218,1,219,1,219,1,219,3,219,4027,8,219,1,220,5,220,4030,8,
		220,10,220,12,220,4033,9,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
		1,221,1,221,1,221,1,221,3,221,4046,8,221,1,222,1,222,1,222,1,222,1,222,
		1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
		1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,3,222,4074,8,222,
		1,223,1,223,1,223,5,223,4079,8,223,10,223,12,223,4082,9,223,1,224,1,224,
		1,224,1,224,1,224,1,224,1,225,1,225,1,225,5,225,4093,8,225,10,225,12,225,
		4096,9,225,1,226,1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,1,227,
		1,227,1,227,3,227,4110,8,227,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
		1,228,1,228,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,
		3,229,4227,8,229,1,230,1,230,1,230,1,230,1,231,1,231,1,231,5,231,4236,
		8,231,10,231,12,231,4239,9,231,1,232,1,232,1,232,3,232,4244,8,232,1,233,
		1,233,1,233,1,233,1,233,1,233,3,233,4252,8,233,1,234,1,234,1,234,1,234,
		1,235,1,235,1,235,5,235,4261,8,235,10,235,12,235,4264,9,235,1,236,1,236,
		1,236,1,236,1,237,1,237,3,237,4272,8,237,1,238,1,238,1,238,5,238,4277,
		8,238,10,238,12,238,4280,9,238,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
		1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
		1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
		1,239,1,239,1,239,1,239,1,239,1,239,3,239,4319,8,239,1,240,1,240,1,240,
		1,240,3,240,4325,8,240,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,
		1,241,1,241,1,241,1,241,1,241,1,241,1,242,1,242,1,242,5,242,4344,8,242,
		10,242,12,242,4347,9,242,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
		1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
		1,243,1,243,1,243,1,243,1,243,3,243,4374,8,243,1,244,1,244,3,244,4378,
		8,244,1,245,1,245,1,245,3,245,4383,8,245,1,246,1,246,1,246,1,246,1,246,
		1,246,1,246,3,246,4392,8,246,1,247,1,247,3,247,4396,8,247,1,248,1,248,
		1,248,1,248,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
		1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,
		4423,8,249,1,250,1,250,1,250,5,250,4428,8,250,10,250,12,250,4431,9,250,
		1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
		3,251,4445,8,251,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,
		1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,1,252,3,252,4465,8,252,
		1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
		1,253,1,253,1,253,1,253,1,253,1,253,3,253,4485,8,253,1,254,1,254,1,254,
		1,254,1,254,1,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,
		1,256,1,256,1,256,1,256,3,256,4578,8,256,1,257,1,257,1,257,1,257,1,257,
		1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,
		1,257,1,257,1,257,1,257,1,257,1,257,3,257,4603,8,257,1,258,1,258,1,258,
		1,258,1,258,3,258,4610,8,258,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
		1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,4626,8,259,1,260,1,260,
		1,261,1,261,1,261,5,261,4633,8,261,10,261,12,261,4636,9,261,1,262,1,262,
		3,262,4640,8,262,1,263,1,263,4,263,4644,8,263,11,263,12,263,4645,1,264,
		1,264,1,264,5,264,4651,8,264,10,264,12,264,4654,9,264,1,265,1,265,1,265,
		1,265,1,265,1,265,1,266,1,266,1,266,1,266,1,266,3,266,4667,8,266,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
		1,267,1,267,3,267,4816,8,267,1,268,1,268,3,268,4820,8,268,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,
		1,269,1,269,1,269,1,269,1,269,3,269,4913,8,269,1,270,1,270,1,270,3,270,
		4918,8,270,1,271,1,271,3,271,4922,8,271,1,272,1,272,1,272,1,272,3,272,
		4928,8,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
		1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,3,273,4996,8,273,1,274,
		1,274,1,275,1,275,3,275,5002,8,275,1,276,1,276,1,276,1,276,1,276,1,276,
		1,276,1,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
		1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,5031,8,277,
		1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,
		1,278,1,278,1,278,3,278,5048,8,278,1,279,1,279,1,279,5,279,5053,8,279,
		10,279,12,279,5056,9,279,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,
		1,280,3,280,5067,8,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
		1,281,1,281,3,281,5127,8,281,1,282,1,282,1,282,5,282,5132,8,282,10,282,
		12,282,5135,9,282,1,283,1,283,1,283,3,283,5140,8,283,1,284,1,284,1,284,
		1,284,3,284,5146,8,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,286,
		1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
		1,286,1,286,1,286,1,286,3,286,5172,8,286,1,287,1,287,1,287,1,287,3,287,
		5178,8,287,1,288,1,288,1,288,1,288,3,288,5184,8,288,1,289,1,289,1,289,
		1,289,1,289,1,289,1,290,5,290,5193,8,290,10,290,12,290,5196,9,290,1,291,
		1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,5207,8,291,1,292,
		1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,
		1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,
		1,292,1,292,3,292,5236,8,292,1,293,1,293,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,
		1,294,1,294,1,294,1,294,1,294,1,294,3,294,5275,8,294,1,295,1,295,3,295,
		5279,8,295,1,296,1,296,3,296,5283,8,296,1,297,1,297,3,297,5287,8,297,1,
		298,1,298,1,298,3,298,5292,8,298,1,299,1,299,1,299,5,299,5297,8,299,10,
		299,12,299,5300,9,299,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,
		1,300,1,300,1,300,3,300,5313,8,300,1,301,1,301,1,301,1,301,1,301,1,301,
		1,301,1,301,1,301,1,301,1,301,3,301,5326,8,301,1,302,1,302,1,302,1,302,
		1,302,1,302,3,302,5334,8,302,1,303,1,303,1,303,5,303,5339,8,303,10,303,
		12,303,5342,9,303,1,304,1,304,1,304,3,304,5347,8,304,1,305,1,305,3,305,
		5351,8,305,1,306,1,306,1,306,3,306,5356,8,306,1,307,1,307,1,307,1,307,
		1,307,3,307,5363,8,307,1,308,1,308,1,308,1,308,1,308,1,308,1,308,1,308,
		1,308,1,308,1,308,1,308,3,308,5377,8,308,3,308,5379,8,308,1,308,1,308,
		1,309,1,309,1,309,3,309,5386,8,309,1,310,1,310,3,310,5390,8,310,1,310,
		1,310,1,311,1,311,1,311,5,311,5397,8,311,10,311,12,311,5400,9,311,1,312,
		1,312,1,312,5,312,5405,8,312,10,312,12,312,5408,9,312,1,313,1,313,1,313,
		1,313,1,313,1,313,3,313,5416,8,313,3,313,5418,8,313,1,314,1,314,3,314,
		5422,8,314,1,314,1,314,1,315,1,315,1,315,5,315,5429,8,315,10,315,12,315,
		5432,9,315,1,316,1,316,3,316,5436,8,316,1,316,1,316,1,316,1,316,3,316,
		5442,8,316,1,316,1,316,1,316,3,316,5447,8,316,1,317,1,317,3,317,5451,8,
		317,1,317,1,317,1,317,3,317,5456,8,317,1,318,1,318,1,318,1,318,3,318,5462,
		8,318,1,319,1,319,1,320,1,320,3,320,5468,8,320,1,320,1,320,1,320,1,320,
		3,320,5474,8,320,1,320,1,320,1,320,1,320,3,320,5480,8,320,1,321,1,321,
		1,321,3,321,5485,8,321,1,322,1,322,1,323,1,323,1,323,1,323,1,323,1,323,
		1,323,1,323,1,323,1,323,1,323,3,323,5500,8,323,1,323,1,323,1,324,1,324,
		1,324,5,324,5507,8,324,10,324,12,324,5510,9,324,1,325,1,325,1,325,1,326,
		1,326,1,326,5,326,5518,8,326,10,326,12,326,5521,9,326,1,327,4,327,5524,
		8,327,11,327,12,327,5525,1,327,1,327,1,328,1,328,1,328,1,328,1,328,1,328,
		1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,
		1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,
		1,328,1,328,1,328,1,328,1,328,3,328,5565,8,328,1,329,1,329,1,329,1,329,
		1,329,1,329,1,329,1,329,3,329,5575,8,329,1,330,1,330,1,330,1,330,1,330,
		3,330,5582,8,330,1,331,1,331,1,331,1,331,1,331,1,331,1,331,5,331,5591,
		8,331,10,331,12,331,5594,9,331,1,332,1,332,1,332,3,332,5599,8,332,1,333,
		1,333,1,333,1,334,1,334,1,334,5,334,5607,8,334,10,334,12,334,5610,9,334,
		1,335,1,335,1,335,1,335,1,335,1,335,1,336,4,336,5619,8,336,11,336,12,336,
		5620,1,337,1,337,3,337,5625,8,337,1,338,1,338,1,338,1,338,1,338,1,338,
		1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
		1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
		1,338,1,338,1,338,1,338,1,338,1,338,3,338,5663,8,338,1,339,1,339,1,339,
		1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,5677,8,339,
		1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
		3,340,5691,8,340,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
		1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
		1,341,3,341,5715,8,341,1,342,1,342,1,342,5,342,5720,8,342,10,342,12,342,
		5723,9,342,1,342,1,342,1,343,1,343,1,343,5,343,5730,8,343,10,343,12,343,
		5733,9,343,1,344,1,344,1,344,1,345,1,345,1,345,1,346,4,346,5742,8,346,
		11,346,12,346,5743,1,347,1,347,1,347,3,347,5749,8,347,1,348,1,348,1,348,
		1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,
		1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,
		1,348,1,348,1,348,1,348,1,348,1,348,1,348,3,348,5785,8,348,1,349,1,349,
		1,349,1,349,1,349,3,349,5792,8,349,1,350,1,350,1,350,1,350,1,350,1,350,
		1,350,1,350,1,350,1,350,1,351,1,351,1,351,3,351,5807,8,351,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,5854,8,353,1,354,1,354,
		1,354,1,354,1,354,1,354,1,354,1,354,1,354,1,355,1,355,1,355,1,355,1,355,
		1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,
		1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,3,355,5891,8,355,
		1,356,1,356,1,357,1,357,1,358,1,358,1,358,5,358,5900,8,358,10,358,12,358,
		5903,9,358,1,359,1,359,1,360,1,360,1,360,1,360,1,360,1,360,1,360,1,360,
		1,360,1,360,1,360,1,360,3,360,5919,8,360,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,1,361,1,361,1,361,1,361,3,361,6389,8,361,1,362,1,362,
		3,362,6393,8,362,1,363,1,363,1,363,3,363,6398,8,363,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
		1,364,1,364,1,364,1,364,1,364,1,364,3,364,6457,8,364,1,365,1,365,3,365,
		6461,8,365,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
		1,366,1,366,1,366,3,366,6680,8,366,1,367,1,367,1,367,1,367,1,367,1,367,
		1,367,1,367,1,368,1,368,1,368,5,368,6693,8,368,10,368,12,368,6696,9,368,
		1,369,1,369,1,369,1,369,1,369,1,369,1,369,1,369,3,369,6706,8,369,1,370,
		1,370,1,370,1,370,1,370,3,370,6713,8,370,1,371,1,371,1,371,1,371,1,371,
		1,371,1,371,1,371,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
		1,372,1,372,1,372,1,372,1,372,1,372,3,372,6906,8,372,1,373,1,373,1,373,
		1,373,1,373,1,373,1,374,1,374,3,374,6916,8,374,1,375,1,375,1,375,1,375,
		1,375,1,375,3,375,6924,8,375,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
		1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,
		1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,3,376,6953,8,376,1,377,
		1,377,1,377,1,377,1,377,1,377,1,377,1,377,1,377,1,378,1,378,1,378,5,378,
		6967,8,378,10,378,12,378,6970,9,378,1,379,1,379,1,380,1,380,1,380,1,380,
		1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,
		1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,
		1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,3,380,7011,8,380,
		1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,1,381,
		3,381,7025,8,381,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,
		1,382,1,382,1,382,1,382,1,382,1,383,1,383,1,383,1,383,1,383,1,383,3,383,
		7047,8,383,1,384,1,384,1,384,5,384,7052,8,384,10,384,12,384,7055,9,384,
		1,385,1,385,1,385,1,385,1,385,3,385,7062,8,385,1,386,1,386,3,386,7066,
		8,386,1,387,1,387,1,388,1,388,1,388,3,388,7073,8,388,1,389,1,389,1,389,
		1,389,1,390,1,390,1,390,3,390,7082,8,390,1,391,1,391,1,391,1,392,1,392,
		1,392,1,392,3,392,7091,8,392,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,
		1,393,1,393,1,393,1,393,1,393,1,393,1,393,3,393,7143,8,393,1,394,1,394,
		1,394,1,394,3,394,7149,8,394,1,395,1,395,1,395,1,395,1,395,1,395,1,395,
		1,395,1,395,1,395,3,395,7161,8,395,1,396,1,396,3,396,7165,8,396,1,396,
		5,396,7168,8,396,10,396,12,396,7171,9,396,1,397,1,397,3,397,7175,8,397,
		1,398,1,398,3,398,7179,8,398,1,398,1,398,3,398,7183,8,398,1,399,1,399,
		1,399,3,399,7188,8,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,
		1,399,1,399,1,399,1,399,1,399,1,399,3,399,7204,8,399,1,399,1,399,1,399,
		1,399,1,400,1,400,3,400,7212,8,400,1,400,1,400,1,400,3,400,7217,8,400,
		1,401,1,401,1,401,1,402,1,402,1,402,1,402,1,402,1,402,1,403,1,403,3,403,
		7230,8,403,1,404,4,404,7233,8,404,11,404,12,404,7234,1,405,1,405,1,405,
		1,405,1,405,3,405,7242,8,405,1,406,1,406,1,406,1,406,1,406,1,406,1,406,
		1,406,3,406,7252,8,406,1,407,1,407,3,407,7256,8,407,1,408,1,408,1,408,
		1,408,1,408,1,408,1,408,1,408,1,408,3,408,7267,8,408,1,409,1,409,1,409,
		1,409,1,409,1,410,1,410,1,410,1,410,3,410,7278,8,410,1,410,1,410,1,410,
		1,410,1,410,1,410,3,410,7286,8,410,1,411,1,411,1,411,5,411,7291,8,411,
		10,411,12,411,7294,9,411,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,413,
		1,414,1,414,1,414,1,414,1,414,1,415,1,415,1,415,1,415,1,415,1,415,1,415,
		1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,1,416,
		1,416,1,416,1,416,1,416,3,416,7332,8,416,1,416,1,416,1,416,1,416,1,416,
		1,416,3,416,7340,8,416,1,417,1,417,3,417,7344,8,417,1,418,1,418,1,418,
		1,418,1,418,1,418,1,418,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,
		1,419,1,419,1,419,1,419,3,419,7425,8,419,1,420,1,420,1,421,1,421,1,421,
		1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,422,1,422,1,422,1,422,
		1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,1,422,3,422,7453,8,422,
		1,423,1,423,1,423,3,423,7458,8,423,1,424,1,424,1,424,1,424,1,424,1,424,
		1,424,1,424,1,424,1,424,1,424,1,424,1,424,3,424,7473,8,424,1,425,1,425,
		1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,3,425,7485,8,425,1,426,
		1,426,1,426,5,426,7490,8,426,10,426,12,426,7493,9,426,1,427,1,427,1,428,
		1,428,1,428,1,429,1,429,3,429,7502,8,429,1,430,1,430,1,430,3,430,7507,
		8,430,1,431,1,431,3,431,7511,8,431,1,432,1,432,3,432,7515,8,432,1,433,
		1,433,3,433,7519,8,433,1,434,1,434,3,434,7523,8,434,1,435,1,435,1,435,
		1,435,1,435,3,435,7530,8,435,1,436,1,436,1,436,1,437,1,437,1,437,5,437,
		7538,8,437,10,437,12,437,7541,9,437,1,438,1,438,3,438,7545,8,438,1,439,
		1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,
		1,439,1,439,1,439,3,439,7563,8,439,1,440,1,440,1,440,1,440,1,440,1,440,
		1,440,1,440,1,440,3,440,7574,8,440,1,441,1,441,1,441,5,441,7579,8,441,
		10,441,12,441,7582,9,441,1,442,1,442,1,442,1,443,1,443,3,443,7589,8,443,
		1,444,1,444,1,444,3,444,7594,8,444,1,445,1,445,1,445,1,445,1,445,1,445,
		1,446,1,446,1,446,1,446,1,446,3,446,7607,8,446,1,447,1,447,1,447,1,447,
		3,447,7613,8,447,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,
		1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,1,448,
		1,448,1,448,1,448,1,448,1,448,1,448,3,448,7642,8,448,1,449,1,449,1,449,
		1,449,1,449,3,449,7649,8,449,1,450,1,450,1,450,1,450,1,450,1,450,1,450,
		1,450,1,450,1,450,3,450,7661,8,450,1,451,1,451,1,451,1,451,1,451,1,451,
		1,451,1,451,1,452,1,452,1,452,3,452,7674,8,452,1,453,1,453,1,453,1,453,
		1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,7689,8,453,
		1,453,1,453,1,453,1,453,3,453,7695,8,453,1,454,1,454,1,455,1,455,1,455,
		5,455,7702,8,455,10,455,12,455,7705,9,455,1,456,1,456,1,456,1,457,1,457,
		1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,3,457,7720,8,457,1,457,
		3,457,7723,8,457,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,
		3,458,7734,8,458,1,459,1,459,1,459,3,459,7739,8,459,1,460,1,460,3,460,
		7743,8,460,1,460,1,460,3,460,7747,8,460,1,460,1,460,1,460,3,460,7752,8,
		460,1,460,3,460,7755,8,460,1,460,1,460,1,460,1,460,3,460,7761,8,460,1,
		460,1,460,3,460,7765,8,460,3,460,7767,8,460,1,460,3,460,7770,8,460,1,461,
		1,461,1,461,1,461,1,461,3,461,7777,8,461,1,461,3,461,7780,8,461,1,461,
		1,461,1,461,1,461,1,461,3,461,7787,8,461,1,461,1,461,1,462,1,462,1,462,
		1,462,3,462,7795,8,462,1,462,3,462,7798,8,462,1,462,1,462,1,462,1,462,
		1,463,1,463,1,463,3,463,7807,8,463,1,463,1,463,1,464,1,464,1,464,1,464,
		1,464,1,464,1,464,1,464,1,465,1,465,1,465,3,465,7822,8,465,1,466,1,466,
		1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,467,3,467,7835,8,467,
		1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,3,468,7846,8,468,
		1,468,3,468,7849,8,468,1,469,1,469,3,469,7853,8,469,1,470,1,470,1,470,
		1,470,3,470,7859,8,470,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,471,
		1,471,1,472,1,472,1,472,5,472,7873,8,472,10,472,12,472,7876,9,472,1,473,
		1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,3,473,7888,8,473,
		1,474,1,474,1,474,1,475,1,475,1,475,5,475,7896,8,475,10,475,12,475,7899,
		9,475,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,476,1,477,1,477,1,478,
		1,478,1,478,1,478,1,478,5,478,7916,8,478,10,478,12,478,7919,9,478,1,479,
		1,479,1,479,1,479,1,479,3,479,7926,8,479,1,480,1,480,3,480,7930,8,480,
		1,481,1,481,1,481,1,481,1,481,1,481,1,481,1,481,3,481,7940,8,481,1,482,
		1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7950,8,482,1,482,1,482,
		1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7961,8,482,3,482,7963,
		8,482,1,483,1,483,1,483,3,483,7968,8,483,1,483,1,483,1,483,5,483,7973,
		8,483,10,483,12,483,7976,9,483,1,484,1,484,1,484,1,484,1,484,5,484,7983,
		8,484,10,484,12,484,7986,9,484,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
		1,485,3,485,7996,8,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
		1,485,1,485,1,485,3,485,8009,8,485,1,486,1,486,3,486,8013,8,486,1,486,
		1,486,1,487,1,487,1,487,5,487,8020,8,487,10,487,12,487,8023,9,487,1,488,
		1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,489,1,489,1,489,1,489,3,489,
		8037,8,489,1,490,1,490,3,490,8041,8,490,1,491,1,491,1,491,1,491,1,491,
		3,491,8048,8,491,1,491,3,491,8051,8,491,1,492,1,492,3,492,8055,8,492,1,
		493,3,493,8058,8,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,
		493,1,493,1,493,3,493,8071,8,493,1,494,1,494,3,494,8075,8,494,1,495,1,
		495,1,495,3,495,8080,8,495,1,496,1,496,1,496,1,496,1,496,1,496,3,496,8088,
		8,496,1,497,1,497,3,497,8092,8,497,1,498,1,498,3,498,8096,8,498,1,499,
		1,499,1,499,1,499,1,500,1,500,1,500,5,500,8105,8,500,10,500,12,500,8108,
		9,500,1,501,1,501,1,501,1,501,3,501,8114,8,501,1,501,1,501,1,502,1,502,
		3,502,8120,8,502,1,502,1,502,3,502,8124,8,502,3,502,8126,8,502,1,503,1,
		503,3,503,8130,8,503,1,504,1,504,1,504,1,504,3,504,8136,8,504,1,504,1,
		504,1,504,1,504,1,504,1,504,1,504,3,504,8145,8,504,1,504,1,504,1,504,1,
		504,3,504,8151,8,504,3,504,8153,8,504,3,504,8155,8,504,1,505,1,505,1,505,
		1,505,1,505,3,505,8162,8,505,1,506,1,506,3,506,8166,8,506,1,507,1,507,
		1,508,1,508,1,508,1,508,1,508,3,508,8175,8,508,1,509,1,509,3,509,8179,
		8,509,1,510,1,510,1,511,1,511,1,512,1,512,1,512,1,512,3,512,8189,8,512,
		1,513,1,513,1,513,5,513,8194,8,513,10,513,12,513,8197,9,513,1,514,1,514,
		1,514,1,514,1,514,3,514,8204,8,514,1,515,1,515,1,515,1,516,1,516,1,516,
		1,516,1,516,1,517,1,517,1,517,1,517,1,517,1,518,1,518,1,518,1,518,1,518,
		1,518,1,519,1,519,1,519,3,519,8228,8,519,1,520,1,520,1,520,1,520,3,520,
		8234,8,520,1,521,1,521,3,521,8238,8,521,1,522,4,522,8241,8,522,11,522,
		12,522,8242,1,523,1,523,1,523,1,523,1,524,1,524,1,524,3,524,8252,8,524,
		1,524,1,524,3,524,8256,8,524,1,524,3,524,8259,8,524,1,525,1,525,1,525,
		3,525,8264,8,525,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,
		5,526,8275,8,526,10,526,12,526,8278,9,526,1,527,1,527,1,527,3,527,8283,
		8,527,1,528,1,528,1,528,1,528,5,528,8289,8,528,10,528,12,528,8292,9,528,
		3,528,8294,8,528,1,529,1,529,1,529,4,529,8299,8,529,11,529,12,529,8300,
		1,530,1,530,1,530,3,530,8306,8,530,1,530,1,530,1,530,1,530,1,530,1,530,
		1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
		1,530,3,530,8327,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,
		8336,8,530,1,530,1,530,1,530,3,530,8341,8,530,1,530,1,530,1,530,1,530,
		3,530,8347,8,530,1,530,1,530,1,530,3,530,8352,8,530,1,530,1,530,1,530,
		1,530,1,530,3,530,8359,8,530,1,530,1,530,1,530,3,530,8364,8,530,1,530,
		1,530,1,530,1,530,5,530,8370,8,530,10,530,12,530,8373,9,530,1,531,3,531,
		8376,8,531,1,531,1,531,1,531,1,531,1,531,3,531,8383,8,531,1,532,1,532,
		3,532,8387,8,532,1,533,3,533,8390,8,533,1,533,1,533,1,533,1,533,1,533,
		3,533,8397,8,533,1,534,1,534,1,534,3,534,8402,8,534,1,534,3,534,8405,8,
		534,1,534,1,534,1,534,1,534,1,534,3,534,8412,8,534,1,535,1,535,3,535,8416,
		8,535,1,536,1,536,1,536,1,536,1,536,1,536,1,536,3,536,8425,8,536,1,537,
		1,537,3,537,8429,8,537,1,537,1,537,1,537,1,537,1,537,1,537,3,537,8437,
		8,537,3,537,8439,8,537,1,538,1,538,1,538,5,538,8444,8,538,10,538,12,538,
		8447,9,538,1,539,1,539,3,539,8451,8,539,1,539,3,539,8454,8,539,1,540,1,
		540,1,540,1,540,1,540,1,540,1,540,1,541,1,541,1,541,1,541,1,541,1,541,
		3,541,8469,8,541,1,542,1,542,1,542,1,542,1,542,1,542,1,542,1,542,1,542,
		1,542,3,542,8481,8,542,1,543,1,543,1,543,1,544,1,544,1,544,5,544,8489,
		8,544,10,544,12,544,8492,9,544,1,545,1,545,1,545,1,545,1,545,1,545,3,545,
		8500,8,545,1,546,1,546,1,546,3,546,8505,8,546,1,547,1,547,1,547,3,547,
		8510,8,547,1,548,1,548,1,548,1,548,1,548,3,548,8517,8,548,1,548,3,548,
		8520,8,548,1,549,1,549,3,549,8524,8,549,1,550,1,550,1,550,5,550,8529,8,
		550,10,550,12,550,8532,9,550,1,551,1,551,1,551,1,551,1,552,1,552,1,552,
		1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,
		1,552,1,552,3,552,8555,8,552,1,552,1,552,1,553,1,553,1,553,5,553,8562,
		8,553,10,553,12,553,8565,9,553,1,554,1,554,1,554,3,554,8570,8,554,1,554,
		1,554,3,554,8574,8,554,1,555,4,555,8577,8,555,11,555,12,555,8578,1,556,
		1,556,1,556,1,556,1,556,1,556,1,556,1,556,3,556,8589,8,556,1,557,1,557,
		1,557,5,557,8594,8,557,10,557,12,557,8597,9,557,1,558,1,558,1,558,1,558,
		1,558,1,558,3,558,8605,8,558,1,559,3,559,8608,8,559,1,559,1,559,1,559,
		1,559,1,559,1,559,1,559,3,559,8617,8,559,3,559,8619,8,559,1,559,1,559,
		1,559,1,559,3,559,8625,8,559,1,560,1,560,3,560,8629,8,560,1,560,5,560,
		8632,8,560,10,560,12,560,8635,9,560,1,561,1,561,1,561,1,561,1,561,1,561,
		1,561,1,561,1,561,1,561,1,561,3,561,8648,8,561,3,561,8650,8,561,1,562,
		1,562,1,562,1,562,3,562,8656,8,562,1,563,1,563,1,563,1,563,3,563,8662,
		8,563,1,563,3,563,8665,8,563,1,563,1,563,1,564,1,564,1,564,1,564,1,564,
		3,564,8674,8,564,1,565,1,565,1,565,1,565,1,565,1,565,1,565,1,565,1,565,
		1,565,1,565,1,565,1,565,1,565,1,565,1,565,3,565,8692,8,565,1,566,1,566,
		1,566,1,566,1,566,3,566,8699,8,566,1,567,1,567,3,567,8703,8,567,1,568,
		1,568,3,568,8707,8,568,1,569,1,569,1,569,1,569,1,569,1,569,1,570,1,570,
		1,570,1,571,1,571,1,571,1,571,1,571,3,571,8723,8,571,1,572,1,572,1,572,
		1,572,1,572,3,572,8730,8,572,1,573,1,573,1,573,1,573,1,573,1,573,3,573,
		8738,8,573,1,574,1,574,3,574,8742,8,574,1,575,1,575,1,575,1,575,1,575,
		3,575,8749,8,575,1,575,1,575,1,576,1,576,1,577,1,577,1,577,1,577,1,577,
		1,577,1,577,3,577,8762,8,577,1,578,1,578,1,578,1,578,1,578,1,578,1,578,
		1,578,1,578,1,578,1,578,1,578,1,578,1,578,3,578,8778,8,578,1,578,1,578,
		1,578,1,578,3,578,8784,8,578,1,578,1,578,1,578,1,578,3,578,8790,8,578,
		1,579,1,579,1,579,1,579,1,579,3,579,8797,8,579,1,580,1,580,1,580,3,580,
		8802,8,580,1,581,1,581,1,582,1,582,3,582,8808,8,582,1,583,1,583,1,583,
		5,583,8813,8,583,10,583,12,583,8816,9,583,1,584,1,584,1,584,5,584,8821,
		8,584,10,584,12,584,8824,9,584,1,585,1,585,1,585,5,585,8829,8,585,10,585,
		12,585,8832,9,585,1,586,1,586,3,586,8836,8,586,1,586,1,586,3,586,8840,
		8,586,1,586,1,586,1,586,1,586,3,586,8846,8,586,1,587,1,587,3,587,8850,
		8,587,1,587,1,587,3,587,8854,8,587,1,588,3,588,8857,8,588,1,588,1,588,
		1,589,1,589,1,589,1,589,1,589,1,589,1,589,1,589,3,589,8869,8,589,1,590,
		1,590,1,590,3,590,8874,8,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,
		1,590,1,590,1,590,3,590,8886,8,590,1,590,3,590,8889,8,590,3,590,8891,8,
		590,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,3,591,
		8903,8,591,3,591,8905,8,591,1,592,1,592,3,592,8909,8,592,1,592,1,592,1,
		592,1,592,3,592,8915,8,592,1,592,1,592,1,592,3,592,8920,8,592,1,593,1,
		593,1,593,1,593,5,593,8926,8,593,10,593,12,593,8929,9,593,1,594,3,594,
		8932,8,594,1,594,1,594,1,595,1,595,1,595,5,595,8939,8,595,10,595,12,595,
		8942,9,595,1,596,1,596,1,596,5,596,8947,8,596,10,596,12,596,8950,9,596,
		1,597,1,597,1,597,3,597,8955,8,597,1,598,3,598,8958,8,598,1,598,1,598,
		1,599,1,599,1,599,1,599,1,599,3,599,8967,8,599,1,600,1,600,1,600,3,600,
		8972,8,600,1,601,1,601,1,601,5,601,8977,8,601,10,601,12,601,8980,9,601,
		1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,8989,8,602,1,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,
		1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,9015,
		8,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,9026,
		8,602,5,602,9028,8,602,10,602,12,602,9031,9,602,1,603,1,603,1,603,1,603,
		1,603,3,603,9038,8,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
		1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
		1,603,3,603,9061,8,603,1,603,1,603,1,603,1,603,1,603,1,603,3,603,9069,
		8,603,1,604,1,604,1,605,1,605,1,605,1,605,1,605,1,605,3,605,9079,8,605,
		1,605,1,605,1,605,1,605,1,605,1,605,1,605,1,605,1,605,1,605,1,605,1,605,
		3,605,9093,8,605,1,605,1,605,1,606,1,606,1,606,1,606,1,606,1,606,3,606,
		9103,8,606,1,607,1,607,3,607,9107,8,607,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9121,8,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9128,8,608,1,608,1,608,1,608,1,608,1,608,3,608,
		9135,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9142,8,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9167,8,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9196,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9235,8,608,3,608,9237,
		8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,3,608,9265,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,3,608,9286,8,608,1,609,1,609,1,609,1,609,1,609,3,609,9293,8,609,
		1,610,1,610,1,610,1,610,1,610,1,610,1,610,1,610,1,610,1,610,1,610,3,610,
		9306,8,610,1,611,1,611,1,611,1,611,1,611,1,612,1,612,1,612,5,612,9316,
		8,612,10,612,12,612,9319,9,612,1,613,1,613,1,613,3,613,9324,8,613,1,614,
		1,614,1,615,1,615,1,615,1,615,1,615,3,615,9333,8,615,1,616,1,616,1,616,
		1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,
		3,616,9350,8,616,1,617,1,617,1,617,1,618,1,618,1,618,1,618,1,618,1,618,
		1,618,3,618,9362,8,618,1,619,1,619,1,619,1,619,1,619,1,619,1,619,3,619,
		9371,8,619,1,620,1,620,1,620,3,620,9376,8,620,1,621,1,621,1,621,5,621,
		9381,8,621,10,621,12,621,9384,9,621,1,622,1,622,1,622,1,622,1,623,1,623,
		1,623,3,623,9393,8,623,1,623,3,623,9396,8,623,1,624,1,624,1,624,1,624,
		1,624,1,624,1,624,1,625,1,625,3,625,9407,8,625,1,626,1,626,1,626,1,626,
		3,626,9413,8,626,1,627,1,627,1,627,1,627,1,627,1,627,1,627,1,627,1,627,
		1,627,1,627,1,627,1,627,3,627,9428,8,627,1,628,1,628,1,628,1,628,1,628,
		1,628,3,628,9436,8,628,1,629,1,629,1,629,1,629,1,629,1,629,1,629,3,629,
		9445,8,629,1,630,1,630,1,630,1,630,1,630,1,630,1,630,3,630,9454,8,630,
		1,630,3,630,9457,8,630,1,631,1,631,1,631,3,631,9462,8,631,1,631,1,631,
		1,631,1,631,1,631,1,631,1,631,3,631,9471,8,631,1,632,1,632,1,632,3,632,
		9476,8,632,1,632,1,632,1,633,1,633,1,633,1,633,1,633,1,633,1,634,1,634,
		1,635,1,635,3,635,9490,8,635,1,636,1,636,1,637,1,637,1,637,1,637,1,637,
		1,637,3,637,9500,8,637,1,638,1,638,1,638,1,638,1,638,1,638,3,638,9508,
		8,638,1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,
		1,639,3,639,9522,8,639,1,640,1,640,1,640,5,640,9527,8,640,10,640,12,640,
		9530,9,640,1,641,1,641,1,641,5,641,9535,8,641,10,641,12,641,9538,9,641,
		1,642,1,642,1,642,1,642,1,642,3,642,9545,8,642,1,643,1,643,1,643,5,643,
		9550,8,643,10,643,12,643,9553,9,643,1,644,1,644,1,644,3,644,9558,8,644,
		1,644,1,644,1,645,1,645,1,645,5,645,9565,8,645,10,645,12,645,9568,9,645,
		1,646,1,646,1,646,1,646,1,646,3,646,9575,8,646,1,647,1,647,1,647,1,647,
		1,647,1,647,1,647,1,647,3,647,9585,8,647,1,648,1,648,1,649,1,649,1,649,
		1,649,1,649,1,649,1,649,3,649,9596,8,649,1,650,1,650,1,650,1,650,1,650,
		3,650,9603,8,650,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
		1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
		1,651,1,651,1,651,1,651,1,651,1,651,3,651,9632,8,651,1,652,1,652,1,652,
		1,652,1,652,1,652,1,652,3,652,9641,8,652,1,653,1,653,1,653,1,653,1,653,
		3,653,9648,8,653,1,654,1,654,1,654,1,654,1,654,1,654,1,655,4,655,9657,
		8,655,11,655,12,655,9658,1,656,1,656,1,656,1,656,1,656,1,657,1,657,1,657,
		3,657,9669,8,657,1,658,1,658,3,658,9673,8,658,1,659,1,659,3,659,9677,8,
		659,1,660,1,660,1,660,3,660,9682,8,660,1,660,1,660,1,660,1,660,1,660,1,
		660,3,660,9690,8,660,1,660,1,660,3,660,9694,8,660,1,661,1,661,3,661,9698,
		8,661,1,662,4,662,9701,8,662,11,662,12,662,9702,1,663,5,663,9706,8,663,
		10,663,12,663,9709,9,663,1,664,1,664,3,664,9713,8,664,1,665,1,665,1,665,
		5,665,9718,8,665,10,665,12,665,9721,9,665,1,666,1,666,1,666,1,666,1,666,
		3,666,9728,8,666,1,666,3,666,9731,8,666,1,667,1,667,1,667,5,667,9736,8,
		667,10,667,12,667,9739,9,667,1,668,1,668,3,668,9743,8,668,1,669,1,669,
		1,669,5,669,9748,8,669,10,669,12,669,9751,9,669,1,670,1,670,1,671,1,671,
		1,672,1,672,1,673,1,673,1,673,1,673,1,673,1,673,1,673,3,673,9766,8,673,
		1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,
		1,674,3,674,9781,8,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,
		1,674,1,674,1,674,1,674,3,674,9795,8,674,1,674,1,674,1,674,3,674,9800,
		8,674,1,675,1,675,1,676,1,676,1,677,1,677,1,678,1,678,1,679,1,679,1,679,
		1,680,1,680,1,680,1,680,5,680,9817,8,680,10,680,12,680,9820,9,680,1,680,
		1,680,3,680,9824,8,680,1,681,1,681,1,681,3,681,9829,8,681,1,682,1,682,
		1,682,1,682,1,682,3,682,9836,8,682,1,683,1,683,1,684,1,684,1,684,3,684,
		9843,8,684,1,685,1,685,1,685,5,685,9848,8,685,10,685,12,685,9851,9,685,
		1,686,1,686,1,686,1,686,1,686,1,686,3,686,9859,8,686,1,687,1,687,1,687,
		1,687,3,687,9865,8,687,1,688,1,688,1,688,1,688,3,688,9871,8,688,1,689,
		1,689,1,689,1,689,3,689,9877,8,689,1,690,1,690,1,690,1,690,1,690,1,690,
		3,690,9885,8,690,1,691,1,691,1,691,1,691,1,691,1,691,1,691,3,691,9894,
		8,691,1,692,1,692,1,693,1,693,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,
		1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,1,694,3,694,9952,8,694,
		1,695,1,695,1,696,1,696,1,697,1,697,1,698,1,698,1,698,1,698,1,699,5,699,
		9965,8,699,10,699,12,699,9968,9,699,1,700,1,700,1,700,1,700,1,700,1,700,
		1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,1,700,
		1,700,1,700,3,700,9990,8,700,1,701,1,701,1,702,1,702,1,702,1,702,3,702,
		9998,8,702,1,703,1,703,3,703,10002,8,703,1,704,1,704,1,704,1,704,1,704,
		1,704,1,704,1,705,1,705,1,705,3,705,10014,8,705,3,705,10016,8,705,1,706,
		1,706,1,707,4,707,10021,8,707,11,707,12,707,10022,1,708,1,708,1,708,1,
		708,1,709,1,709,1,709,3,709,10032,8,709,1,710,1,710,1,710,1,710,1,710,
		1,710,1,710,1,710,1,710,1,710,1,710,1,710,1,710,1,710,1,710,1,710,3,710,
		10050,8,710,1,710,1,710,1,711,1,711,1,711,1,711,3,711,10058,8,711,1,712,
		1,712,1,713,1,713,1,713,1,713,1,713,3,713,10067,8,713,1,714,1,714,1,714,
		5,714,10072,8,714,10,714,12,714,10075,9,714,1,715,1,715,1,715,1,716,1,
		716,1,717,1,717,3,717,10084,8,717,1,718,1,718,1,719,1,719,3,719,10090,
		8,719,1,720,1,720,1,721,1,721,1,721,3,721,10097,8,721,1,722,1,722,1,722,
		3,722,10102,8,722,1,723,1,723,1,723,1,723,3,723,10108,8,723,1,724,1,724,
		3,724,10112,8,724,1,725,1,725,1,726,5,726,10117,8,726,10,726,12,726,10120,
		9,726,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,
		1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,1,727,
		1,727,1,727,1,727,1,727,3,727,10149,8,727,1,728,1,728,1,728,1,728,1,729,
		1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,1,729,
		1,729,3,729,10169,8,729,1,730,1,730,3,730,10173,8,730,1,731,1,731,1,731,
		1,731,1,731,1,732,1,732,1,732,1,732,1,732,1,732,1,733,1,733,1,733,3,733,
		10189,8,733,1,734,1,734,1,734,5,734,10194,8,734,10,734,12,734,10197,9,
		734,1,735,1,735,1,735,1,735,1,736,1,736,1,737,1,737,1,738,1,738,3,738,
		10209,8,738,1,738,1,738,1,738,1,738,5,738,10215,8,738,10,738,12,738,10218,
		9,738,1,739,1,739,1,739,1,739,1,739,1,739,1,739,1,739,1,739,1,739,1,740,
		1,740,1,740,1,740,1,740,5,740,10235,8,740,10,740,12,740,10238,9,740,1,
		741,1,741,1,741,3,741,10243,8,741,1,742,1,742,1,742,1,742,1,742,1,742,
		1,742,1,742,1,743,1,743,3,743,10255,8,743,1,744,4,744,10258,8,744,11,744,
		12,744,10259,1,745,1,745,1,745,1,745,1,745,1,746,1,746,1,746,3,746,10270,
		8,746,1,747,1,747,1,747,1,748,1,748,1,748,1,748,1,748,1,749,1,749,1,749,
		1,749,1,749,1,750,1,750,1,750,1,750,1,750,1,750,1,750,1,750,1,750,1,750,
		1,750,1,750,1,750,1,750,1,750,1,750,1,750,3,750,10302,8,750,1,751,1,751,
		1,751,3,751,10307,8,751,1,752,1,752,1,752,1,752,1,752,5,752,10314,8,752,
		10,752,12,752,10317,9,752,1,752,1,752,3,752,10321,8,752,1,753,1,753,3,
		753,10325,8,753,1,754,1,754,1,754,3,754,10330,8,754,1,755,1,755,1,756,
		1,756,1,756,1,756,1,756,1,756,1,756,1,756,1,756,1,757,1,757,1,757,3,757,
		10346,8,757,1,758,1,758,1,758,1,758,1,758,1,759,1,759,1,760,1,760,1,760,
		1,760,1,760,1,760,1,760,1,760,1,760,3,760,10364,8,760,1,760,3,760,10367,
		8,760,1,760,1,760,1,761,1,761,3,761,10373,8,761,1,762,1,762,1,762,1,762,
		1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,
		1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,1,762,3,762,10401,
		8,762,1,763,1,763,1,763,1,763,1,763,1,763,1,763,1,763,3,763,10411,8,763,
		1,764,1,764,1,764,4,764,10416,8,764,11,764,12,764,10417,3,764,10420,8,
		764,1,765,1,765,1,765,3,765,10425,8,765,1,766,1,766,1,766,1,766,1,767,
		1,767,1,767,5,767,10434,8,767,10,767,12,767,10437,9,767,1,768,1,768,1,
		768,1,768,1,768,1,769,1,769,1,769,3,769,10447,8,769,1,770,1,770,1,770,
		1,770,1,770,1,770,1,770,1,771,1,771,1,771,1,772,1,772,1,772,1,772,1,772,
		1,772,1,772,1,772,1,772,3,772,10468,8,772,1,772,1,772,1,773,1,773,1,773,
		3,773,10475,8,773,1,774,1,774,1,774,5,774,10480,8,774,10,774,12,774,10483,
		9,774,1,775,1,775,1,775,3,775,10488,8,775,1,775,3,775,10491,8,775,1,776,
		1,776,1,776,1,776,1,776,1,776,1,776,1,776,1,776,3,776,10502,8,776,1,776,
		1,776,1,776,1,776,1,776,3,776,10509,8,776,3,776,10511,8,776,1,776,1,776,
		1,777,1,777,1,777,1,777,1,777,3,777,10520,8,777,1,778,1,778,1,778,5,778,
		10525,8,778,10,778,12,778,10528,9,778,1,779,1,779,1,779,3,779,10533,8,
		779,1,780,1,780,1,780,1,780,3,780,10539,8,780,1,781,1,781,3,781,10543,
		8,781,1,782,1,782,1,782,1,782,1,782,1,782,1,782,1,782,1,783,1,783,1,784,
		1,784,1,784,3,784,10558,8,784,1,785,1,785,1,785,1,785,1,785,1,785,1,785,
		1,785,1,785,1,785,1,785,1,785,1,785,1,785,1,785,3,785,10575,8,785,3,785,
		10577,8,785,1,786,1,786,1,786,1,786,1,786,1,787,1,787,1,787,1,787,1,788,
		1,788,1,788,1,789,1,789,1,789,1,789,1,790,1,790,1,790,1,790,1,791,1,791,
		3,791,10601,8,791,1,791,1,791,3,791,10605,8,791,1,792,1,792,1,792,1,792,
		1,792,1,792,1,792,1,792,1,792,3,792,10616,8,792,1,792,3,792,10619,8,792,
		1,793,1,793,3,793,10623,8,793,1,794,1,794,1,794,3,794,10628,8,794,1,795,
		4,795,10631,8,795,11,795,12,795,10632,1,796,1,796,1,796,1,796,1,796,1,
		797,1,797,1,797,5,797,10643,8,797,10,797,12,797,10646,9,797,1,798,1,798,
		1,798,3,798,10651,8,798,1,799,1,799,3,799,10655,8,799,1,800,1,800,3,800,
		10659,8,800,1,801,1,801,3,801,10663,8,801,1,802,1,802,1,802,3,802,10668,
		8,802,1,803,1,803,3,803,10672,8,803,1,804,1,804,1,805,1,805,1,805,1,805,
		1,805,1,805,1,805,1,805,1,806,1,806,1,807,1,807,1,808,1,808,1,809,1,809,
		1,810,1,810,1,810,1,811,1,811,1,811,1,811,1,811,3,811,10700,8,811,1,811,
		0,1,1204,812,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
		164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
		200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
		236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
		272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
		308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
		344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
		380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,
		416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
		452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,
		488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
		524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,
		560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,
		596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
		632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,
		668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,
		704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,
		740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,
		776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
		812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,
		848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,
		884,886,888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,
		920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,
		956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,
		992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,
		1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,
		1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,
		1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,
		1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,
		1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,
		1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,
		1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,
		1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,
		1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,
		1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,
		1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,
		1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,
		1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,
		1386,1388,1390,1392,1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,
		1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,
		1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,
		1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,
		1498,1500,1502,1504,1506,1508,1510,1512,1514,1516,1518,1520,1522,1524,
		1526,1528,1530,1532,1534,1536,1538,1540,1542,1544,1546,1548,1550,1552,
		1554,1556,1558,1560,1562,1564,1566,1568,1570,1572,1574,1576,1578,1580,
		1582,1584,1586,1588,1590,1592,1594,1596,1598,1600,1602,1604,1606,1608,
		1610,1612,1614,1616,1618,1620,1622,0,69,2,0,196,196,358,358,2,0,66,66,
		312,312,2,0,99,99,312,312,3,0,66,66,99,99,312,312,2,0,133,133,192,192,
		2,0,246,246,326,326,2,0,10,10,94,94,2,0,163,163,357,357,2,0,181,181,222,
		222,5,0,30,30,282,282,323,323,346,346,348,348,2,0,64,64,94,94,2,0,346,
		346,348,348,2,0,201,201,225,225,9,0,30,30,161,161,166,166,180,180,220,
		220,228,228,336,336,339,339,439,439,3,0,113,113,278,278,330,330,2,0,53,
		53,78,78,3,0,174,174,253,253,256,256,5,0,30,30,88,88,183,183,233,233,363,
		363,2,0,92,92,227,227,1,0,449,450,2,0,92,92,408,408,2,0,335,335,408,408,
		2,0,212,212,290,290,3,0,315,315,351,351,446,446,2,0,64,64,68,68,5,0,213,
		213,323,323,344,344,355,355,456,457,3,0,212,212,290,290,351,351,2,0,10,
		10,53,53,3,0,212,212,290,290,443,443,5,0,92,92,176,176,227,227,317,317,
		343,343,3,0,176,176,317,317,343,343,3,0,109,109,128,128,345,345,4,0,88,
		88,183,183,233,233,363,363,2,0,152,152,246,246,2,0,307,307,327,327,1,0,
		31,32,2,0,99,99,343,343,2,0,202,202,328,328,2,0,214,214,246,246,2,0,314,
		314,408,408,2,0,208,208,262,262,4,0,113,113,115,115,119,119,126,126,2,
		0,354,354,478,478,2,0,385,386,400,400,1,0,385,386,1,0,412,413,1,0,18,19,
		5,0,56,56,60,60,78,78,96,96,359,359,5,0,10,10,16,17,21,21,23,23,25,25,
		1,0,12,13,3,0,9,9,14,14,27,27,2,0,30,30,56,56,3,0,39,39,73,73,95,95,2,
		0,167,167,189,189,2,0,298,298,451,451,2,0,209,209,283,283,3,0,30,30,34,
		34,90,90,6,0,9,10,12,17,21,21,23,23,25,25,27,27,2,0,20,20,22,22,1,0,484,
		487,12,0,124,124,129,142,144,250,252,253,255,304,306,380,434,453,456,470,
		472,472,474,474,476,476,479,489,5,0,106,118,120,123,125,125,127,128,473,
		473,4,0,30,52,54,70,72,105,455,455,5,0,305,305,419,425,505,505,514,514,
		522,636,2,0,62,62,116,116,2,0,10,10,20,20,2,0,168,168,508,508,2,0,145,
		145,211,211,36,0,33,33,35,35,43,45,53,53,57,57,61,61,92,92,116,116,123,
		123,130,130,145,145,154,154,158,158,162,162,168,168,173,173,208,208,211,
		211,233,233,241,241,259,259,262,263,273,273,287,287,301,301,307,307,313,
		313,317,318,327,327,354,354,434,435,478,478,491,503,507,513,515,519,521,
		521,11564,0,1624,1,0,0,0,2,1627,1,0,0,0,4,1629,1,0,0,0,6,1637,1,0,0,0,
		8,1765,1,0,0,0,10,1767,1,0,0,0,12,1771,1,0,0,0,14,1774,1,0,0,0,16,1782,
		1,0,0,0,18,1787,1,0,0,0,20,1793,1,0,0,0,22,1814,1,0,0,0,24,1826,1,0,0,
		0,26,1828,1,0,0,0,28,1834,1,0,0,0,30,1844,1,0,0,0,32,1846,1,0,0,0,34,1855,
		1,0,0,0,36,1863,1,0,0,0,38,1869,1,0,0,0,40,1876,1,0,0,0,42,1878,1,0,0,
		0,44,1896,1,0,0,0,46,1901,1,0,0,0,48,1910,1,0,0,0,50,1912,1,0,0,0,52,1926,
		1,0,0,0,54,1928,1,0,0,0,56,1957,1,0,0,0,58,1959,1,0,0,0,60,1967,1,0,0,
		0,62,1977,1,0,0,0,64,1984,1,0,0,0,66,1990,1,0,0,0,68,2007,1,0,0,0,70,2012,
		1,0,0,0,72,2016,1,0,0,0,74,2018,1,0,0,0,76,2029,1,0,0,0,78,2033,1,0,0,
		0,80,2038,1,0,0,0,82,2043,1,0,0,0,84,2045,1,0,0,0,86,2057,1,0,0,0,88,2064,
		1,0,0,0,90,2066,1,0,0,0,92,2068,1,0,0,0,94,2070,1,0,0,0,96,2182,1,0,0,
		0,98,2184,1,0,0,0,100,2200,1,0,0,0,102,2202,1,0,0,0,104,2458,1,0,0,0,106,
		2465,1,0,0,0,108,2470,1,0,0,0,110,2475,1,0,0,0,112,2480,1,0,0,0,114,2488,
		1,0,0,0,116,2490,1,0,0,0,118,2497,1,0,0,0,120,2499,1,0,0,0,122,2507,1,
		0,0,0,124,2519,1,0,0,0,126,2535,1,0,0,0,128,2563,1,0,0,0,130,2565,1,0,
		0,0,132,2568,1,0,0,0,134,2576,1,0,0,0,136,2581,1,0,0,0,138,2612,1,0,0,
		0,140,2614,1,0,0,0,142,2641,1,0,0,0,144,2643,1,0,0,0,146,2647,1,0,0,0,
		148,2652,1,0,0,0,150,2659,1,0,0,0,152,2664,1,0,0,0,154,2702,1,0,0,0,156,
		2706,1,0,0,0,158,2713,1,0,0,0,160,2717,1,0,0,0,162,2719,1,0,0,0,164,2727,
		1,0,0,0,166,2738,1,0,0,0,168,2740,1,0,0,0,170,2748,1,0,0,0,172,2750,1,
		0,0,0,174,2799,1,0,0,0,176,2803,1,0,0,0,178,2810,1,0,0,0,180,2812,1,0,
		0,0,182,2820,1,0,0,0,184,2831,1,0,0,0,186,2835,1,0,0,0,188,2837,1,0,0,
		0,190,2842,1,0,0,0,192,2852,1,0,0,0,194,2863,1,0,0,0,196,2903,1,0,0,0,
		198,2908,1,0,0,0,200,2915,1,0,0,0,202,2917,1,0,0,0,204,2925,1,0,0,0,206,
		2928,1,0,0,0,208,2935,1,0,0,0,210,2995,1,0,0,0,212,3000,1,0,0,0,214,3007,
		1,0,0,0,216,3009,1,0,0,0,218,3017,1,0,0,0,220,3025,1,0,0,0,222,3030,1,
		0,0,0,224,3032,1,0,0,0,226,3040,1,0,0,0,228,3056,1,0,0,0,230,3067,1,0,
		0,0,232,3069,1,0,0,0,234,3073,1,0,0,0,236,3083,1,0,0,0,238,3091,1,0,0,
		0,240,3095,1,0,0,0,242,3097,1,0,0,0,244,3104,1,0,0,0,246,3126,1,0,0,0,
		248,3131,1,0,0,0,250,3138,1,0,0,0,252,3150,1,0,0,0,254,3155,1,0,0,0,256,
		3162,1,0,0,0,258,3164,1,0,0,0,260,3168,1,0,0,0,262,3182,1,0,0,0,264,3193,
		1,0,0,0,266,3206,1,0,0,0,268,3220,1,0,0,0,270,3222,1,0,0,0,272,3236,1,
		0,0,0,274,3244,1,0,0,0,276,3246,1,0,0,0,278,3253,1,0,0,0,280,3264,1,0,
		0,0,282,3275,1,0,0,0,284,3282,1,0,0,0,286,3285,1,0,0,0,288,3319,1,0,0,
		0,290,3323,1,0,0,0,292,3331,1,0,0,0,294,3333,1,0,0,0,296,3341,1,0,0,0,
		298,3356,1,0,0,0,300,3358,1,0,0,0,302,3365,1,0,0,0,304,3371,1,0,0,0,306,
		3375,1,0,0,0,308,3379,1,0,0,0,310,3381,1,0,0,0,312,3392,1,0,0,0,314,3394,
		1,0,0,0,316,3402,1,0,0,0,318,3416,1,0,0,0,320,3426,1,0,0,0,322,3428,1,
		0,0,0,324,3437,1,0,0,0,326,3440,1,0,0,0,328,3547,1,0,0,0,330,3549,1,0,
		0,0,332,3565,1,0,0,0,334,3568,1,0,0,0,336,3574,1,0,0,0,338,3591,1,0,0,
		0,340,3599,1,0,0,0,342,3601,1,0,0,0,344,3609,1,0,0,0,346,3614,1,0,0,0,
		348,3629,1,0,0,0,350,3631,1,0,0,0,352,3634,1,0,0,0,354,3636,1,0,0,0,356,
		3663,1,0,0,0,358,3668,1,0,0,0,360,3670,1,0,0,0,362,3677,1,0,0,0,364,3679,
		1,0,0,0,366,3745,1,0,0,0,368,3747,1,0,0,0,370,3762,1,0,0,0,372,3770,1,
		0,0,0,374,3793,1,0,0,0,376,3797,1,0,0,0,378,3817,1,0,0,0,380,3819,1,0,
		0,0,382,3828,1,0,0,0,384,3839,1,0,0,0,386,3854,1,0,0,0,388,3863,1,0,0,
		0,390,3868,1,0,0,0,392,3873,1,0,0,0,394,3878,1,0,0,0,396,3883,1,0,0,0,
		398,3885,1,0,0,0,400,3887,1,0,0,0,402,3896,1,0,0,0,404,3937,1,0,0,0,406,
		3943,1,0,0,0,408,3945,1,0,0,0,410,3960,1,0,0,0,412,3965,1,0,0,0,414,3968,
		1,0,0,0,416,3972,1,0,0,0,418,3977,1,0,0,0,420,3979,1,0,0,0,422,3981,1,
		0,0,0,424,3988,1,0,0,0,426,3992,1,0,0,0,428,3994,1,0,0,0,430,4002,1,0,
		0,0,432,4004,1,0,0,0,434,4008,1,0,0,0,436,4021,1,0,0,0,438,4026,1,0,0,
		0,440,4031,1,0,0,0,442,4045,1,0,0,0,444,4073,1,0,0,0,446,4075,1,0,0,0,
		448,4083,1,0,0,0,450,4089,1,0,0,0,452,4097,1,0,0,0,454,4109,1,0,0,0,456,
		4111,1,0,0,0,458,4226,1,0,0,0,460,4228,1,0,0,0,462,4232,1,0,0,0,464,4240,
		1,0,0,0,466,4251,1,0,0,0,468,4253,1,0,0,0,470,4257,1,0,0,0,472,4265,1,
		0,0,0,474,4271,1,0,0,0,476,4273,1,0,0,0,478,4318,1,0,0,0,480,4324,1,0,
		0,0,482,4326,1,0,0,0,484,4340,1,0,0,0,486,4373,1,0,0,0,488,4377,1,0,0,
		0,490,4382,1,0,0,0,492,4391,1,0,0,0,494,4395,1,0,0,0,496,4397,1,0,0,0,
		498,4422,1,0,0,0,500,4424,1,0,0,0,502,4444,1,0,0,0,504,4464,1,0,0,0,506,
		4484,1,0,0,0,508,4486,1,0,0,0,510,4492,1,0,0,0,512,4577,1,0,0,0,514,4602,
		1,0,0,0,516,4609,1,0,0,0,518,4625,1,0,0,0,520,4627,1,0,0,0,522,4629,1,
		0,0,0,524,4637,1,0,0,0,526,4643,1,0,0,0,528,4647,1,0,0,0,530,4655,1,0,
		0,0,532,4666,1,0,0,0,534,4815,1,0,0,0,536,4819,1,0,0,0,538,4912,1,0,0,
		0,540,4917,1,0,0,0,542,4921,1,0,0,0,544,4927,1,0,0,0,546,4995,1,0,0,0,
		548,4997,1,0,0,0,550,5001,1,0,0,0,552,5003,1,0,0,0,554,5030,1,0,0,0,556,
		5047,1,0,0,0,558,5049,1,0,0,0,560,5066,1,0,0,0,562,5126,1,0,0,0,564,5128,
		1,0,0,0,566,5139,1,0,0,0,568,5145,1,0,0,0,570,5147,1,0,0,0,572,5171,1,
		0,0,0,574,5177,1,0,0,0,576,5183,1,0,0,0,578,5185,1,0,0,0,580,5194,1,0,
		0,0,582,5206,1,0,0,0,584,5235,1,0,0,0,586,5237,1,0,0,0,588,5274,1,0,0,
		0,590,5278,1,0,0,0,592,5282,1,0,0,0,594,5286,1,0,0,0,596,5291,1,0,0,0,
		598,5293,1,0,0,0,600,5312,1,0,0,0,602,5325,1,0,0,0,604,5333,1,0,0,0,606,
		5335,1,0,0,0,608,5346,1,0,0,0,610,5350,1,0,0,0,612,5355,1,0,0,0,614,5362,
		1,0,0,0,616,5364,1,0,0,0,618,5385,1,0,0,0,620,5387,1,0,0,0,622,5393,1,
		0,0,0,624,5401,1,0,0,0,626,5417,1,0,0,0,628,5419,1,0,0,0,630,5425,1,0,
		0,0,632,5446,1,0,0,0,634,5455,1,0,0,0,636,5461,1,0,0,0,638,5463,1,0,0,
		0,640,5479,1,0,0,0,642,5481,1,0,0,0,644,5486,1,0,0,0,646,5488,1,0,0,0,
		648,5503,1,0,0,0,650,5511,1,0,0,0,652,5514,1,0,0,0,654,5523,1,0,0,0,656,
		5564,1,0,0,0,658,5574,1,0,0,0,660,5581,1,0,0,0,662,5583,1,0,0,0,664,5598,
		1,0,0,0,666,5600,1,0,0,0,668,5603,1,0,0,0,670,5611,1,0,0,0,672,5618,1,
		0,0,0,674,5624,1,0,0,0,676,5662,1,0,0,0,678,5676,1,0,0,0,680,5690,1,0,
		0,0,682,5714,1,0,0,0,684,5721,1,0,0,0,686,5726,1,0,0,0,688,5734,1,0,0,
		0,690,5737,1,0,0,0,692,5741,1,0,0,0,694,5748,1,0,0,0,696,5784,1,0,0,0,
		698,5791,1,0,0,0,700,5793,1,0,0,0,702,5806,1,0,0,0,704,5808,1,0,0,0,706,
		5853,1,0,0,0,708,5855,1,0,0,0,710,5890,1,0,0,0,712,5892,1,0,0,0,714,5894,
		1,0,0,0,716,5896,1,0,0,0,718,5904,1,0,0,0,720,5918,1,0,0,0,722,6388,1,
		0,0,0,724,6392,1,0,0,0,726,6397,1,0,0,0,728,6456,1,0,0,0,730,6460,1,0,
		0,0,732,6679,1,0,0,0,734,6681,1,0,0,0,736,6689,1,0,0,0,738,6705,1,0,0,
		0,740,6712,1,0,0,0,742,6714,1,0,0,0,744,6905,1,0,0,0,746,6907,1,0,0,0,
		748,6915,1,0,0,0,750,6923,1,0,0,0,752,6952,1,0,0,0,754,6954,1,0,0,0,756,
		6963,1,0,0,0,758,6971,1,0,0,0,760,7010,1,0,0,0,762,7024,1,0,0,0,764,7026,
		1,0,0,0,766,7046,1,0,0,0,768,7048,1,0,0,0,770,7061,1,0,0,0,772,7065,1,
		0,0,0,774,7067,1,0,0,0,776,7072,1,0,0,0,778,7074,1,0,0,0,780,7081,1,0,
		0,0,782,7083,1,0,0,0,784,7090,1,0,0,0,786,7142,1,0,0,0,788,7148,1,0,0,
		0,790,7160,1,0,0,0,792,7162,1,0,0,0,794,7174,1,0,0,0,796,7182,1,0,0,0,
		798,7184,1,0,0,0,800,7216,1,0,0,0,802,7218,1,0,0,0,804,7221,1,0,0,0,806,
		7229,1,0,0,0,808,7232,1,0,0,0,810,7236,1,0,0,0,812,7251,1,0,0,0,814,7255,
		1,0,0,0,816,7257,1,0,0,0,818,7268,1,0,0,0,820,7273,1,0,0,0,822,7287,1,
		0,0,0,824,7295,1,0,0,0,826,7297,1,0,0,0,828,7303,1,0,0,0,830,7308,1,0,
		0,0,832,7315,1,0,0,0,834,7343,1,0,0,0,836,7345,1,0,0,0,838,7424,1,0,0,
		0,840,7426,1,0,0,0,842,7428,1,0,0,0,844,7452,1,0,0,0,846,7457,1,0,0,0,
		848,7472,1,0,0,0,850,7484,1,0,0,0,852,7486,1,0,0,0,854,7494,1,0,0,0,856,
		7496,1,0,0,0,858,7501,1,0,0,0,860,7506,1,0,0,0,862,7510,1,0,0,0,864,7514,
		1,0,0,0,866,7518,1,0,0,0,868,7522,1,0,0,0,870,7529,1,0,0,0,872,7531,1,
		0,0,0,874,7534,1,0,0,0,876,7544,1,0,0,0,878,7562,1,0,0,0,880,7573,1,0,
		0,0,882,7575,1,0,0,0,884,7583,1,0,0,0,886,7588,1,0,0,0,888,7593,1,0,0,
		0,890,7595,1,0,0,0,892,7606,1,0,0,0,894,7612,1,0,0,0,896,7641,1,0,0,0,
		898,7648,1,0,0,0,900,7660,1,0,0,0,902,7662,1,0,0,0,904,7670,1,0,0,0,906,
		7694,1,0,0,0,908,7696,1,0,0,0,910,7698,1,0,0,0,912,7706,1,0,0,0,914,7722,
		1,0,0,0,916,7733,1,0,0,0,918,7738,1,0,0,0,920,7740,1,0,0,0,922,7771,1,
		0,0,0,924,7790,1,0,0,0,926,7803,1,0,0,0,928,7810,1,0,0,0,930,7821,1,0,
		0,0,932,7823,1,0,0,0,934,7834,1,0,0,0,936,7848,1,0,0,0,938,7852,1,0,0,
		0,940,7858,1,0,0,0,942,7860,1,0,0,0,944,7869,1,0,0,0,946,7887,1,0,0,0,
		948,7889,1,0,0,0,950,7892,1,0,0,0,952,7900,1,0,0,0,954,7908,1,0,0,0,956,
		7917,1,0,0,0,958,7925,1,0,0,0,960,7929,1,0,0,0,962,7939,1,0,0,0,964,7962,
		1,0,0,0,966,7964,1,0,0,0,968,7977,1,0,0,0,970,8008,1,0,0,0,972,8010,1,
		0,0,0,974,8016,1,0,0,0,976,8024,1,0,0,0,978,8036,1,0,0,0,980,8040,1,0,
		0,0,982,8050,1,0,0,0,984,8054,1,0,0,0,986,8070,1,0,0,0,988,8074,1,0,0,
		0,990,8079,1,0,0,0,992,8081,1,0,0,0,994,8091,1,0,0,0,996,8095,1,0,0,0,
		998,8097,1,0,0,0,1000,8101,1,0,0,0,1002,8109,1,0,0,0,1004,8125,1,0,0,0,
		1006,8129,1,0,0,0,1008,8154,1,0,0,0,1010,8156,1,0,0,0,1012,8165,1,0,0,
		0,1014,8167,1,0,0,0,1016,8174,1,0,0,0,1018,8178,1,0,0,0,1020,8180,1,0,
		0,0,1022,8182,1,0,0,0,1024,8188,1,0,0,0,1026,8190,1,0,0,0,1028,8203,1,
		0,0,0,1030,8205,1,0,0,0,1032,8208,1,0,0,0,1034,8213,1,0,0,0,1036,8218,
		1,0,0,0,1038,8227,1,0,0,0,1040,8233,1,0,0,0,1042,8237,1,0,0,0,1044,8240,
		1,0,0,0,1046,8244,1,0,0,0,1048,8248,1,0,0,0,1050,8263,1,0,0,0,1052,8265,
		1,0,0,0,1054,8282,1,0,0,0,1056,8293,1,0,0,0,1058,8295,1,0,0,0,1060,8351,
		1,0,0,0,1062,8375,1,0,0,0,1064,8386,1,0,0,0,1066,8389,1,0,0,0,1068,8411,
		1,0,0,0,1070,8413,1,0,0,0,1072,8424,1,0,0,0,1074,8438,1,0,0,0,1076,8440,
		1,0,0,0,1078,8448,1,0,0,0,1080,8455,1,0,0,0,1082,8468,1,0,0,0,1084,8480,
		1,0,0,0,1086,8482,1,0,0,0,1088,8485,1,0,0,0,1090,8499,1,0,0,0,1092,8504,
		1,0,0,0,1094,8509,1,0,0,0,1096,8519,1,0,0,0,1098,8523,1,0,0,0,1100,8525,
		1,0,0,0,1102,8533,1,0,0,0,1104,8537,1,0,0,0,1106,8558,1,0,0,0,1108,8566,
		1,0,0,0,1110,8576,1,0,0,0,1112,8588,1,0,0,0,1114,8590,1,0,0,0,1116,8604,
		1,0,0,0,1118,8624,1,0,0,0,1120,8633,1,0,0,0,1122,8649,1,0,0,0,1124,8655,
		1,0,0,0,1126,8661,1,0,0,0,1128,8673,1,0,0,0,1130,8691,1,0,0,0,1132,8698,
		1,0,0,0,1134,8702,1,0,0,0,1136,8706,1,0,0,0,1138,8708,1,0,0,0,1140,8714,
		1,0,0,0,1142,8717,1,0,0,0,1144,8724,1,0,0,0,1146,8737,1,0,0,0,1148,8741,
		1,0,0,0,1150,8743,1,0,0,0,1152,8752,1,0,0,0,1154,8761,1,0,0,0,1156,8789,
		1,0,0,0,1158,8791,1,0,0,0,1160,8801,1,0,0,0,1162,8803,1,0,0,0,1164,8805,
		1,0,0,0,1166,8809,1,0,0,0,1168,8817,1,0,0,0,1170,8825,1,0,0,0,1172,8833,
		1,0,0,0,1174,8847,1,0,0,0,1176,8856,1,0,0,0,1178,8860,1,0,0,0,1180,8870,
		1,0,0,0,1182,8892,1,0,0,0,1184,8906,1,0,0,0,1186,8921,1,0,0,0,1188,8931,
		1,0,0,0,1190,8935,1,0,0,0,1192,8943,1,0,0,0,1194,8951,1,0,0,0,1196,8957,
		1,0,0,0,1198,8961,1,0,0,0,1200,8968,1,0,0,0,1202,8973,1,0,0,0,1204,8988,
		1,0,0,0,1206,9068,1,0,0,0,1208,9070,1,0,0,0,1210,9072,1,0,0,0,1212,9102,
		1,0,0,0,1214,9106,1,0,0,0,1216,9285,1,0,0,0,1218,9292,1,0,0,0,1220,9305,
		1,0,0,0,1222,9307,1,0,0,0,1224,9312,1,0,0,0,1226,9320,1,0,0,0,1228,9325,
		1,0,0,0,1230,9332,1,0,0,0,1232,9349,1,0,0,0,1234,9351,1,0,0,0,1236,9361,
		1,0,0,0,1238,9370,1,0,0,0,1240,9375,1,0,0,0,1242,9377,1,0,0,0,1244,9385,
		1,0,0,0,1246,9395,1,0,0,0,1248,9397,1,0,0,0,1250,9406,1,0,0,0,1252,9412,
		1,0,0,0,1254,9427,1,0,0,0,1256,9435,1,0,0,0,1258,9444,1,0,0,0,1260,9456,
		1,0,0,0,1262,9470,1,0,0,0,1264,9472,1,0,0,0,1266,9479,1,0,0,0,1268,9485,
		1,0,0,0,1270,9489,1,0,0,0,1272,9491,1,0,0,0,1274,9499,1,0,0,0,1276,9507,
		1,0,0,0,1278,9521,1,0,0,0,1280,9523,1,0,0,0,1282,9531,1,0,0,0,1284,9544,
		1,0,0,0,1286,9546,1,0,0,0,1288,9554,1,0,0,0,1290,9561,1,0,0,0,1292,9574,
		1,0,0,0,1294,9584,1,0,0,0,1296,9586,1,0,0,0,1298,9588,1,0,0,0,1300,9602,
		1,0,0,0,1302,9631,1,0,0,0,1304,9640,1,0,0,0,1306,9647,1,0,0,0,1308,9649,
		1,0,0,0,1310,9656,1,0,0,0,1312,9660,1,0,0,0,1314,9668,1,0,0,0,1316,9672,
		1,0,0,0,1318,9674,1,0,0,0,1320,9693,1,0,0,0,1322,9697,1,0,0,0,1324,9700,
		1,0,0,0,1326,9707,1,0,0,0,1328,9712,1,0,0,0,1330,9714,1,0,0,0,1332,9730,
		1,0,0,0,1334,9732,1,0,0,0,1336,9740,1,0,0,0,1338,9744,1,0,0,0,1340,9752,
		1,0,0,0,1342,9754,1,0,0,0,1344,9756,1,0,0,0,1346,9765,1,0,0,0,1348,9799,
		1,0,0,0,1350,9801,1,0,0,0,1352,9803,1,0,0,0,1354,9805,1,0,0,0,1356,9807,
		1,0,0,0,1358,9809,1,0,0,0,1360,9823,1,0,0,0,1362,9828,1,0,0,0,1364,9835,
		1,0,0,0,1366,9837,1,0,0,0,1368,9842,1,0,0,0,1370,9844,1,0,0,0,1372,9858,
		1,0,0,0,1374,9864,1,0,0,0,1376,9870,1,0,0,0,1378,9876,1,0,0,0,1380,9884,
		1,0,0,0,1382,9893,1,0,0,0,1384,9895,1,0,0,0,1386,9897,1,0,0,0,1388,9951,
		1,0,0,0,1390,9953,1,0,0,0,1392,9955,1,0,0,0,1394,9957,1,0,0,0,1396,9959,
		1,0,0,0,1398,9966,1,0,0,0,1400,9989,1,0,0,0,1402,9991,1,0,0,0,1404,9997,
		1,0,0,0,1406,10001,1,0,0,0,1408,10003,1,0,0,0,1410,10010,1,0,0,0,1412,
		10017,1,0,0,0,1414,10020,1,0,0,0,1416,10024,1,0,0,0,1418,10031,1,0,0,0,
		1420,10033,1,0,0,0,1422,10057,1,0,0,0,1424,10059,1,0,0,0,1426,10066,1,
		0,0,0,1428,10068,1,0,0,0,1430,10076,1,0,0,0,1432,10079,1,0,0,0,1434,10083,
		1,0,0,0,1436,10085,1,0,0,0,1438,10089,1,0,0,0,1440,10091,1,0,0,0,1442,
		10096,1,0,0,0,1444,10101,1,0,0,0,1446,10107,1,0,0,0,1448,10111,1,0,0,0,
		1450,10113,1,0,0,0,1452,10118,1,0,0,0,1454,10148,1,0,0,0,1456,10150,1,
		0,0,0,1458,10168,1,0,0,0,1460,10172,1,0,0,0,1462,10174,1,0,0,0,1464,10179,
		1,0,0,0,1466,10188,1,0,0,0,1468,10190,1,0,0,0,1470,10198,1,0,0,0,1472,
		10202,1,0,0,0,1474,10204,1,0,0,0,1476,10208,1,0,0,0,1478,10219,1,0,0,0,
		1480,10236,1,0,0,0,1482,10242,1,0,0,0,1484,10244,1,0,0,0,1486,10254,1,
		0,0,0,1488,10257,1,0,0,0,1490,10261,1,0,0,0,1492,10269,1,0,0,0,1494,10271,
		1,0,0,0,1496,10274,1,0,0,0,1498,10279,1,0,0,0,1500,10284,1,0,0,0,1502,
		10306,1,0,0,0,1504,10320,1,0,0,0,1506,10324,1,0,0,0,1508,10329,1,0,0,0,
		1510,10331,1,0,0,0,1512,10333,1,0,0,0,1514,10345,1,0,0,0,1516,10347,1,
		0,0,0,1518,10352,1,0,0,0,1520,10354,1,0,0,0,1522,10372,1,0,0,0,1524,10400,
		1,0,0,0,1526,10410,1,0,0,0,1528,10419,1,0,0,0,1530,10424,1,0,0,0,1532,
		10426,1,0,0,0,1534,10430,1,0,0,0,1536,10438,1,0,0,0,1538,10446,1,0,0,0,
		1540,10448,1,0,0,0,1542,10455,1,0,0,0,1544,10458,1,0,0,0,1546,10474,1,
		0,0,0,1548,10476,1,0,0,0,1550,10490,1,0,0,0,1552,10492,1,0,0,0,1554,10519,
		1,0,0,0,1556,10521,1,0,0,0,1558,10532,1,0,0,0,1560,10538,1,0,0,0,1562,
		10542,1,0,0,0,1564,10544,1,0,0,0,1566,10552,1,0,0,0,1568,10557,1,0,0,0,
		1570,10576,1,0,0,0,1572,10578,1,0,0,0,1574,10583,1,0,0,0,1576,10587,1,
		0,0,0,1578,10590,1,0,0,0,1580,10594,1,0,0,0,1582,10604,1,0,0,0,1584,10618,
		1,0,0,0,1586,10622,1,0,0,0,1588,10627,1,0,0,0,1590,10630,1,0,0,0,1592,
		10634,1,0,0,0,1594,10639,1,0,0,0,1596,10650,1,0,0,0,1598,10654,1,0,0,0,
		1600,10658,1,0,0,0,1602,10662,1,0,0,0,1604,10667,1,0,0,0,1606,10671,1,
		0,0,0,1608,10673,1,0,0,0,1610,10675,1,0,0,0,1612,10683,1,0,0,0,1614,10685,
		1,0,0,0,1616,10687,1,0,0,0,1618,10689,1,0,0,0,1620,10691,1,0,0,0,1622,
		10699,1,0,0,0,1624,1625,3,4,2,0,1625,1626,5,0,0,1,1626,1,1,0,0,0,1627,
		1628,3,1396,698,0,1628,3,1,0,0,0,1629,1630,3,6,3,0,1630,5,1,0,0,0,1631,
		1633,3,8,4,0,1632,1634,5,7,0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,
		1636,1,0,0,0,1635,1631,1,0,0,0,1636,1639,1,0,0,0,1637,1635,1,0,0,0,1637,
		1638,1,0,0,0,1638,7,1,0,0,0,1639,1637,1,0,0,0,1640,1766,3,452,226,0,1641,
		1766,3,826,413,0,1642,1766,3,816,408,0,1643,1766,3,818,409,0,1644,1766,
		3,578,289,0,1645,1766,3,832,416,0,1646,1766,3,478,239,0,1647,1766,3,322,
		161,0,1648,1766,3,328,164,0,1649,1766,3,338,169,0,1650,1766,3,364,182,
		0,1651,1766,3,670,335,0,1652,1766,3,38,19,0,1653,1766,3,728,364,0,1654,
		1766,3,732,366,0,1655,1766,3,744,372,0,1656,1766,3,734,367,0,1657,1766,
		3,742,371,0,1658,1766,3,384,192,0,1659,1766,3,280,140,0,1660,1766,3,828,
		414,0,1661,1766,3,96,48,0,1662,1766,3,720,360,0,1663,1766,3,134,67,0,1664,
		1766,3,752,376,0,1665,1766,3,32,16,0,1666,1766,3,28,14,0,1667,1766,3,760,
		380,0,1668,1766,3,262,131,0,1669,1766,3,838,419,0,1670,1766,3,836,418,
		0,1671,1766,3,380,190,0,1672,1766,3,850,425,0,1673,1766,3,12,6,0,1674,
		1766,3,92,46,0,1675,1766,3,140,70,0,1676,1766,3,844,422,0,1677,1766,3,
		534,267,0,1678,1766,3,86,43,0,1679,1766,3,142,71,0,1680,1766,3,400,200,
		0,1681,1766,3,264,132,0,1682,1766,3,456,228,0,1683,1766,3,696,348,0,1684,
		1766,3,842,421,0,1685,1766,3,830,415,0,1686,1766,3,316,158,0,1687,1766,
		3,330,165,0,1688,1766,3,356,178,0,1689,1766,3,366,183,0,1690,1766,3,616,
		308,0,1691,1766,3,36,18,0,1692,1766,3,270,135,0,1693,1766,3,482,241,0,
		1694,1766,3,496,248,0,1695,1766,3,746,373,0,1696,1766,3,498,249,0,1697,
		1766,3,382,191,0,1698,1766,3,296,148,0,1699,1766,3,42,21,0,1700,1766,3,
		278,139,0,1701,1766,3,172,86,0,1702,1766,3,754,377,0,1703,1766,3,260,130,
		0,1704,1766,3,310,155,0,1705,1766,3,704,352,0,1706,1766,3,404,202,0,1707,
		1766,3,444,222,0,1708,1766,3,14,7,0,1709,1766,3,26,13,0,1710,1766,3,374,
		187,0,1711,1766,3,804,402,0,1712,1766,3,900,450,0,1713,1766,3,952,476,
		0,1714,1766,3,458,229,0,1715,1766,3,928,464,0,1716,1766,3,94,47,0,1717,
		1766,3,690,345,0,1718,1766,3,700,350,0,1719,1766,3,504,252,0,1720,1766,
		3,506,253,0,1721,1766,3,508,254,0,1722,1766,3,512,256,0,1723,1766,3,762,
		381,0,1724,1766,3,314,157,0,1725,1766,3,708,354,0,1726,1766,3,34,17,0,
		1727,1766,3,378,189,0,1728,1766,3,820,410,0,1729,1766,3,896,448,0,1730,
		1766,3,878,439,0,1731,1766,3,544,272,0,1732,1766,3,552,276,0,1733,1766,
		3,570,285,0,1734,1766,3,368,184,0,1735,1766,3,588,294,0,1736,1766,3,902,
		451,0,1737,1766,3,920,460,0,1738,1766,3,782,391,0,1739,1766,3,276,138,
		0,1740,1766,3,802,401,0,1741,1766,3,932,466,0,1742,1766,3,778,389,0,1743,
		1766,3,890,445,0,1744,1766,3,510,255,0,1745,1766,3,710,355,0,1746,1766,
		3,678,339,0,1747,1766,3,676,338,0,1748,1766,3,680,340,0,1749,1766,3,722,
		361,0,1750,1766,3,554,277,0,1751,1766,3,572,286,0,1752,1766,3,764,382,
		0,1753,1766,3,538,269,0,1754,1766,3,960,480,0,1755,1766,3,786,393,0,1756,
		1766,3,530,265,0,1757,1766,3,784,392,0,1758,1766,3,942,471,0,1759,1766,
		3,848,424,0,1760,1766,3,74,37,0,1761,1766,3,50,25,0,1762,1766,3,84,42,
		0,1763,1766,3,798,399,0,1764,1766,3,10,5,0,1765,1640,1,0,0,0,1765,1641,
		1,0,0,0,1765,1642,1,0,0,0,1765,1643,1,0,0,0,1765,1644,1,0,0,0,1765,1645,
		1,0,0,0,1765,1646,1,0,0,0,1765,1647,1,0,0,0,1765,1648,1,0,0,0,1765,1649,
		1,0,0,0,1765,1650,1,0,0,0,1765,1651,1,0,0,0,1765,1652,1,0,0,0,1765,1653,
		1,0,0,0,1765,1654,1,0,0,0,1765,1655,1,0,0,0,1765,1656,1,0,0,0,1765,1657,
		1,0,0,0,1765,1658,1,0,0,0,1765,1659,1,0,0,0,1765,1660,1,0,0,0,1765,1661,
		1,0,0,0,1765,1662,1,0,0,0,1765,1663,1,0,0,0,1765,1664,1,0,0,0,1765,1665,
		1,0,0,0,1765,1666,1,0,0,0,1765,1667,1,0,0,0,1765,1668,1,0,0,0,1765,1669,
		1,0,0,0,1765,1670,1,0,0,0,1765,1671,1,0,0,0,1765,1672,1,0,0,0,1765,1673,
		1,0,0,0,1765,1674,1,0,0,0,1765,1675,1,0,0,0,1765,1676,1,0,0,0,1765,1677,
		1,0,0,0,1765,1678,1,0,0,0,1765,1679,1,0,0,0,1765,1680,1,0,0,0,1765,1681,
		1,0,0,0,1765,1682,1,0,0,0,1765,1683,1,0,0,0,1765,1684,1,0,0,0,1765,1685,
		1,0,0,0,1765,1686,1,0,0,0,1765,1687,1,0,0,0,1765,1688,1,0,0,0,1765,1689,
		1,0,0,0,1765,1690,1,0,0,0,1765,1691,1,0,0,0,1765,1692,1,0,0,0,1765,1693,
		1,0,0,0,1765,1694,1,0,0,0,1765,1695,1,0,0,0,1765,1696,1,0,0,0,1765,1697,
		1,0,0,0,1765,1698,1,0,0,0,1765,1699,1,0,0,0,1765,1700,1,0,0,0,1765,1701,
		1,0,0,0,1765,1702,1,0,0,0,1765,1703,1,0,0,0,1765,1704,1,0,0,0,1765,1705,
		1,0,0,0,1765,1706,1,0,0,0,1765,1707,1,0,0,0,1765,1708,1,0,0,0,1765,1709,
		1,0,0,0,1765,1710,1,0,0,0,1765,1711,1,0,0,0,1765,1712,1,0,0,0,1765,1713,
		1,0,0,0,1765,1714,1,0,0,0,1765,1715,1,0,0,0,1765,1716,1,0,0,0,1765,1717,
		1,0,0,0,1765,1718,1,0,0,0,1765,1719,1,0,0,0,1765,1720,1,0,0,0,1765,1721,
		1,0,0,0,1765,1722,1,0,0,0,1765,1723,1,0,0,0,1765,1724,1,0,0,0,1765,1725,
		1,0,0,0,1765,1726,1,0,0,0,1765,1727,1,0,0,0,1765,1728,1,0,0,0,1765,1729,
		1,0,0,0,1765,1730,1,0,0,0,1765,1731,1,0,0,0,1765,1732,1,0,0,0,1765,1733,
		1,0,0,0,1765,1734,1,0,0,0,1765,1735,1,0,0,0,1765,1736,1,0,0,0,1765,1737,
		1,0,0,0,1765,1738,1,0,0,0,1765,1739,1,0,0,0,1765,1740,1,0,0,0,1765,1741,
		1,0,0,0,1765,1742,1,0,0,0,1765,1743,1,0,0,0,1765,1744,1,0,0,0,1765,1745,
		1,0,0,0,1765,1746,1,0,0,0,1765,1747,1,0,0,0,1765,1748,1,0,0,0,1765,1749,
		1,0,0,0,1765,1750,1,0,0,0,1765,1751,1,0,0,0,1765,1752,1,0,0,0,1765,1753,
		1,0,0,0,1765,1754,1,0,0,0,1765,1755,1,0,0,0,1765,1756,1,0,0,0,1765,1757,
		1,0,0,0,1765,1758,1,0,0,0,1765,1759,1,0,0,0,1765,1760,1,0,0,0,1765,1761,
		1,0,0,0,1765,1762,1,0,0,0,1765,1763,1,0,0,0,1765,1764,1,0,0,0,1766,9,1,
		0,0,0,1767,1769,5,669,0,0,1768,1770,5,670,0,0,1769,1768,1,0,0,0,1769,1770,
		1,0,0,0,1770,11,1,0,0,0,1771,1772,5,434,0,0,1772,1773,3,1210,605,0,1773,
		13,1,0,0,0,1774,1775,5,46,0,0,1775,1776,5,312,0,0,1776,1777,3,1366,683,
		0,1777,1778,3,16,8,0,1778,1779,3,18,9,0,1779,15,1,0,0,0,1780,1783,5,105,
		0,0,1781,1783,1,0,0,0,1782,1780,1,0,0,0,1782,1781,1,0,0,0,1783,17,1,0,
		0,0,1784,1786,3,24,12,0,1785,1784,1,0,0,0,1786,1789,1,0,0,0,1787,1785,
		1,0,0,0,1787,1788,1,0,0,0,1788,19,1,0,0,0,1789,1787,1,0,0,0,1790,1792,
		3,22,11,0,1791,1790,1,0,0,0,1792,1795,1,0,0,0,1793,1791,1,0,0,0,1793,1794,
		1,0,0,0,1794,21,1,0,0,0,1795,1793,1,0,0,0,1796,1799,5,281,0,0,1797,1800,
		3,1358,679,0,1798,1800,5,78,0,0,1799,1797,1,0,0,0,1799,1798,1,0,0,0,1800,
		1815,1,0,0,0,1801,1802,7,0,0,0,1802,1803,5,281,0,0,1803,1815,3,1358,679,
		0,1804,1815,5,229,0,0,1805,1806,5,165,0,0,1806,1807,5,74,0,0,1807,1815,
		3,1364,682,0,1808,1809,5,365,0,0,1809,1810,5,362,0,0,1810,1815,3,1358,
		679,0,1811,1812,5,99,0,0,1812,1815,3,1370,685,0,1813,1815,3,1382,691,0,
		1814,1796,1,0,0,0,1814,1801,1,0,0,0,1814,1804,1,0,0,0,1814,1805,1,0,0,
		0,1814,1808,1,0,0,0,1814,1811,1,0,0,0,1814,1813,1,0,0,0,1815,23,1,0,0,
		0,1816,1827,3,22,11,0,1817,1818,5,342,0,0,1818,1827,3,1356,678,0,1819,
		1820,5,134,0,0,1820,1827,3,1370,685,0,1821,1822,5,312,0,0,1822,1827,3,
		1370,685,0,1823,1824,5,68,0,0,1824,1825,7,1,0,0,1825,1827,3,1370,685,0,
		1826,1816,1,0,0,0,1826,1817,1,0,0,0,1826,1819,1,0,0,0,1826,1821,1,0,0,
		0,1826,1823,1,0,0,0,1827,25,1,0,0,0,1828,1829,5,46,0,0,1829,1830,5,99,
		0,0,1830,1831,3,1366,683,0,1831,1832,3,16,8,0,1832,1833,3,18,9,0,1833,
		27,1,0,0,0,1834,1835,5,138,0,0,1835,1836,7,2,0,0,1836,1837,3,1368,684,
		0,1837,1838,3,16,8,0,1838,1839,3,20,10,0,1839,29,1,0,0,0,1840,1845,1,0,
		0,0,1841,1842,5,68,0,0,1842,1843,5,176,0,0,1843,1845,3,1340,670,0,1844,
		1840,1,0,0,0,1844,1841,1,0,0,0,1845,31,1,0,0,0,1846,1847,5,138,0,0,1847,
		1849,7,2,0,0,1848,1850,5,30,0,0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,
		1851,1,0,0,0,1851,1852,3,1368,684,0,1852,1853,3,30,15,0,1853,1854,3,80,
		40,0,1854,33,1,0,0,0,1855,1856,5,192,0,0,1856,1859,7,3,0,0,1857,1858,5,
		221,0,0,1858,1860,5,390,0,0,1859,1857,1,0,0,0,1859,1860,1,0,0,0,1860,1861,
		1,0,0,0,1861,1862,3,1370,685,0,1862,35,1,0,0,0,1863,1864,5,46,0,0,1864,
		1865,5,66,0,0,1865,1866,3,1366,683,0,1866,1867,3,16,8,0,1867,1868,3,18,
		9,0,1868,37,1,0,0,0,1869,1870,5,138,0,0,1870,1871,5,66,0,0,1871,1872,3,
		1368,684,0,1872,1873,3,40,20,0,1873,1874,5,99,0,0,1874,1875,3,1370,685,
		0,1875,39,1,0,0,0,1876,1877,7,4,0,0,1877,41,1,0,0,0,1878,1879,5,46,0,0,
		1879,1883,5,317,0,0,1880,1881,5,221,0,0,1881,1882,5,77,0,0,1882,1884,5,
		390,0,0,1883,1880,1,0,0,0,1883,1884,1,0,0,0,1884,1890,1,0,0,0,1885,1886,
		3,44,22,0,1886,1887,5,106,0,0,1887,1888,3,1368,684,0,1888,1891,1,0,0,0,
		1889,1891,3,1372,686,0,1890,1885,1,0,0,0,1890,1889,1,0,0,0,1891,1892,1,
		0,0,0,1892,1893,3,46,23,0,1893,43,1,0,0,0,1894,1897,3,1372,686,0,1895,
		1897,1,0,0,0,1896,1894,1,0,0,0,1896,1895,1,0,0,0,1897,45,1,0,0,0,1898,
		1900,3,48,24,0,1899,1898,1,0,0,0,1900,1903,1,0,0,0,1901,1899,1,0,0,0,1901,
		1902,1,0,0,0,1902,47,1,0,0,0,1903,1901,1,0,0,0,1904,1911,3,172,86,0,1905,
		1911,3,588,294,0,1906,1911,3,278,139,0,1907,1911,3,404,202,0,1908,1911,
		3,552,276,0,1909,1911,3,798,399,0,1910,1904,1,0,0,0,1910,1905,1,0,0,0,
		1910,1906,1,0,0,0,1910,1907,1,0,0,0,1910,1908,1,0,0,0,1910,1909,1,0,0,
		0,1911,49,1,0,0,0,1912,1914,5,327,0,0,1913,1915,7,5,0,0,1914,1913,1,0,
		0,0,1914,1915,1,0,0,0,1915,1916,1,0,0,0,1916,1917,3,52,26,0,1917,51,1,
		0,0,0,1918,1919,5,350,0,0,1919,1927,3,792,396,0,1920,1921,5,326,0,0,1921,
		1922,5,155,0,0,1922,1923,5,36,0,0,1923,1924,5,350,0,0,1924,1927,3,792,
		396,0,1925,1927,3,56,28,0,1926,1918,1,0,0,0,1926,1920,1,0,0,0,1926,1925,
		1,0,0,0,1927,53,1,0,0,0,1928,1929,3,58,29,0,1929,1930,7,6,0,0,1930,1931,
		3,60,30,0,1931,55,1,0,0,0,1932,1958,3,54,27,0,1933,1934,3,58,29,0,1934,
		1935,5,64,0,0,1935,1936,5,435,0,0,1936,1958,1,0,0,0,1937,1938,5,412,0,
		0,1938,1939,5,380,0,0,1939,1958,3,68,34,0,1940,1941,5,153,0,0,1941,1958,
		3,1358,679,0,1942,1943,5,317,0,0,1943,1958,3,1358,679,0,1944,1945,5,261,
		0,0,1945,1958,3,70,35,0,1946,1947,5,312,0,0,1947,1958,3,72,36,0,1948,1949,
		5,326,0,0,1949,1950,5,106,0,0,1950,1958,3,72,36,0,1951,1952,5,377,0,0,
		1952,1953,5,273,0,0,1953,1958,3,1228,614,0,1954,1955,5,350,0,0,1955,1956,
		5,331,0,0,1956,1958,3,1358,679,0,1957,1932,1,0,0,0,1957,1933,1,0,0,0,1957,
		1937,1,0,0,0,1957,1940,1,0,0,0,1957,1942,1,0,0,0,1957,1944,1,0,0,0,1957,
		1946,1,0,0,0,1957,1948,1,0,0,0,1957,1951,1,0,0,0,1957,1954,1,0,0,0,1958,
		57,1,0,0,0,1959,1964,3,1372,686,0,1960,1961,5,11,0,0,1961,1963,3,1372,
		686,0,1962,1960,1,0,0,0,1963,1966,1,0,0,0,1964,1962,1,0,0,0,1964,1965,
		1,0,0,0,1965,59,1,0,0,0,1966,1964,1,0,0,0,1967,1972,3,62,31,0,1968,1969,
		5,6,0,0,1969,1971,3,62,31,0,1970,1968,1,0,0,0,1971,1974,1,0,0,0,1972,1970,
		1,0,0,0,1972,1973,1,0,0,0,1973,61,1,0,0,0,1974,1972,1,0,0,0,1975,1978,
		3,66,33,0,1976,1978,3,292,146,0,1977,1975,1,0,0,0,1977,1976,1,0,0,0,1978,
		63,1,0,0,0,1979,1980,5,294,0,0,1980,1985,7,7,0,0,1981,1982,5,304,0,0,1982,
		1985,5,294,0,0,1983,1985,5,324,0,0,1984,1979,1,0,0,0,1984,1981,1,0,0,0,
		1984,1983,1,0,0,0,1985,65,1,0,0,0,1986,1991,5,96,0,0,1987,1991,5,60,0,
		0,1988,1991,5,80,0,0,1989,1991,3,72,36,0,1990,1986,1,0,0,0,1990,1987,1,
		0,0,0,1990,1988,1,0,0,0,1990,1989,1,0,0,0,1991,67,1,0,0,0,1992,2008,3,
		1358,679,0,1993,2008,3,1382,691,0,1994,1995,3,1152,576,0,1995,1996,3,1358,
		679,0,1996,1997,3,1156,578,0,1997,2008,1,0,0,0,1998,1999,3,1152,576,0,
		1999,2000,5,2,0,0,2000,2001,3,1356,678,0,2001,2002,5,3,0,0,2002,2003,3,
		1358,679,0,2003,2008,1,0,0,0,2004,2008,3,292,146,0,2005,2008,5,53,0,0,
		2006,2008,5,246,0,0,2007,1992,1,0,0,0,2007,1993,1,0,0,0,2007,1994,1,0,
		0,0,2007,1998,1,0,0,0,2007,2004,1,0,0,0,2007,2005,1,0,0,0,2007,2006,1,
		0,0,0,2008,69,1,0,0,0,2009,2013,3,1358,679,0,2010,2013,5,53,0,0,2011,2013,
		1,0,0,0,2012,2009,1,0,0,0,2012,2010,1,0,0,0,2012,2011,1,0,0,0,2013,71,
		1,0,0,0,2014,2017,3,1378,689,0,2015,2017,3,1358,679,0,2016,2014,1,0,0,
		0,2016,2015,1,0,0,0,2017,73,1,0,0,0,2018,2019,5,307,0,0,2019,2020,3,76,
		38,0,2020,75,1,0,0,0,2021,2030,3,78,39,0,2022,2023,5,412,0,0,2023,2030,
		5,380,0,0,2024,2025,5,350,0,0,2025,2026,5,236,0,0,2026,2030,5,243,0,0,
		2027,2028,5,326,0,0,2028,2030,5,106,0,0,2029,2021,1,0,0,0,2029,2022,1,
		0,0,0,2029,2024,1,0,0,0,2029,2027,1,0,0,0,2030,77,1,0,0,0,2031,2034,3,
		58,29,0,2032,2034,5,30,0,0,2033,2031,1,0,0,0,2033,2032,1,0,0,0,2034,79,
		1,0,0,0,2035,2036,5,327,0,0,2036,2039,3,52,26,0,2037,2039,3,74,37,0,2038,
		2035,1,0,0,0,2038,2037,1,0,0,0,2039,81,1,0,0,0,2040,2041,5,327,0,0,2041,
		2044,3,56,28,0,2042,2044,3,74,37,0,2043,2040,1,0,0,0,2043,2042,1,0,0,0,
		2044,83,1,0,0,0,2045,2055,5,329,0,0,2046,2056,3,58,29,0,2047,2048,5,412,
		0,0,2048,2056,5,380,0,0,2049,2050,5,350,0,0,2050,2051,5,236,0,0,2051,2056,
		5,243,0,0,2052,2053,5,326,0,0,2053,2056,5,106,0,0,2054,2056,5,30,0,0,2055,
		2046,1,0,0,0,2055,2047,1,0,0,0,2055,2049,1,0,0,0,2055,2052,1,0,0,0,2055,
		2054,1,0,0,0,2056,85,1,0,0,0,2057,2058,5,327,0,0,2058,2059,5,166,0,0,2059,
		2060,3,88,44,0,2060,2061,3,90,45,0,2061,87,1,0,0,0,2062,2065,5,30,0,0,
		2063,2065,3,1334,667,0,2064,2062,1,0,0,0,2064,2063,1,0,0,0,2065,89,1,0,
		0,0,2066,2067,7,8,0,0,2067,91,1,0,0,0,2068,2069,5,156,0,0,2069,93,1,0,
		0,0,2070,2071,5,188,0,0,2071,2072,7,9,0,0,2072,95,1,0,0,0,2073,2074,5,
		138,0,0,2074,2077,5,92,0,0,2075,2076,5,221,0,0,2076,2078,5,390,0,0,2077,
		2075,1,0,0,0,2077,2078,1,0,0,0,2078,2079,1,0,0,0,2079,2082,3,1074,537,
		0,2080,2083,3,98,49,0,2081,2083,3,100,50,0,2082,2080,1,0,0,0,2082,2081,
		1,0,0,0,2083,2183,1,0,0,0,2084,2085,5,138,0,0,2085,2086,5,92,0,0,2086,
		2087,5,30,0,0,2087,2088,5,68,0,0,2088,2089,5,345,0,0,2089,2093,3,1340,
		670,0,2090,2091,5,275,0,0,2091,2092,5,148,0,0,2092,2094,3,1370,685,0,2093,
		2090,1,0,0,0,2093,2094,1,0,0,0,2094,2095,1,0,0,0,2095,2096,5,327,0,0,2096,
		2097,5,345,0,0,2097,2098,3,1340,670,0,2098,2099,3,938,469,0,2099,2183,
		1,0,0,0,2100,2101,5,138,0,0,2101,2104,5,227,0,0,2102,2103,5,221,0,0,2103,
		2105,5,390,0,0,2104,2102,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,
		2109,3,1336,668,0,2107,2110,3,98,49,0,2108,2110,3,102,51,0,2109,2107,1,
		0,0,0,2109,2108,1,0,0,0,2110,2183,1,0,0,0,2111,2112,5,138,0,0,2112,2113,
		5,227,0,0,2113,2114,5,30,0,0,2114,2115,5,68,0,0,2115,2116,5,345,0,0,2116,
		2120,3,1340,670,0,2117,2118,5,275,0,0,2118,2119,5,148,0,0,2119,2121,3,
		1370,685,0,2120,2117,1,0,0,0,2120,2121,1,0,0,0,2121,2122,1,0,0,0,2122,
		2123,5,327,0,0,2123,2124,5,345,0,0,2124,2125,3,1340,670,0,2125,2126,3,
		938,469,0,2126,2183,1,0,0,0,2127,2128,5,138,0,0,2128,2131,5,322,0,0,2129,
		2130,5,221,0,0,2130,2132,5,390,0,0,2131,2129,1,0,0,0,2131,2132,1,0,0,0,
		2132,2133,1,0,0,0,2133,2134,3,1336,668,0,2134,2135,3,98,49,0,2135,2183,
		1,0,0,0,2136,2137,5,138,0,0,2137,2140,5,370,0,0,2138,2139,5,221,0,0,2139,
		2141,5,390,0,0,2140,2138,1,0,0,0,2140,2141,1,0,0,0,2141,2142,1,0,0,0,2142,
		2143,3,1336,668,0,2143,2144,3,98,49,0,2144,2183,1,0,0,0,2145,2146,5,138,
		0,0,2146,2147,5,252,0,0,2147,2150,5,370,0,0,2148,2149,5,221,0,0,2149,2151,
		5,390,0,0,2150,2148,1,0,0,0,2150,2151,1,0,0,0,2151,2152,1,0,0,0,2152,2153,
		3,1336,668,0,2153,2154,3,98,49,0,2154,2183,1,0,0,0,2155,2156,5,138,0,0,
		2156,2157,5,252,0,0,2157,2158,5,370,0,0,2158,2159,5,30,0,0,2159,2160,5,
		68,0,0,2160,2161,5,345,0,0,2161,2165,3,1340,670,0,2162,2163,5,275,0,0,
		2163,2164,5,148,0,0,2164,2166,3,1370,685,0,2165,2162,1,0,0,0,2165,2166,
		1,0,0,0,2166,2167,1,0,0,0,2167,2168,5,327,0,0,2168,2169,5,345,0,0,2169,
		2170,3,1340,670,0,2170,2171,3,938,469,0,2171,2183,1,0,0,0,2172,2173,5,
		138,0,0,2173,2174,5,63,0,0,2174,2177,5,92,0,0,2175,2176,5,221,0,0,2176,
		2178,5,390,0,0,2177,2175,1,0,0,0,2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,
		2180,3,1074,537,0,2180,2181,3,98,49,0,2181,2183,1,0,0,0,2182,2073,1,0,
		0,0,2182,2084,1,0,0,0,2182,2100,1,0,0,0,2182,2111,1,0,0,0,2182,2127,1,
		0,0,0,2182,2136,1,0,0,0,2182,2145,1,0,0,0,2182,2155,1,0,0,0,2182,2172,
		1,0,0,0,2183,97,1,0,0,0,2184,2189,3,104,52,0,2185,2186,5,6,0,0,2186,2188,
		3,104,52,0,2187,2185,1,0,0,0,2188,2191,1,0,0,0,2189,2187,1,0,0,0,2189,
		2190,1,0,0,0,2190,99,1,0,0,0,2191,2189,1,0,0,0,2192,2193,5,436,0,0,2193,
		2194,5,279,0,0,2194,2195,3,1336,668,0,2195,2196,3,128,64,0,2196,2201,1,
		0,0,0,2197,2198,5,437,0,0,2198,2199,5,279,0,0,2199,2201,3,1336,668,0,2200,
		2192,1,0,0,0,2200,2197,1,0,0,0,2201,101,1,0,0,0,2202,2203,5,436,0,0,2203,
		2204,5,279,0,0,2204,2205,3,1336,668,0,2205,103,1,0,0,0,2206,2207,5,133,
		0,0,2207,2459,3,188,94,0,2208,2209,5,133,0,0,2209,2210,5,221,0,0,2210,
		2211,5,77,0,0,2211,2212,5,390,0,0,2212,2459,3,188,94,0,2213,2214,5,133,
		0,0,2214,2215,5,44,0,0,2215,2459,3,188,94,0,2216,2217,5,133,0,0,2217,2218,
		5,44,0,0,2218,2219,5,221,0,0,2219,2220,5,77,0,0,2220,2221,5,390,0,0,2221,
		2459,3,188,94,0,2222,2223,5,138,0,0,2223,2224,3,724,362,0,2224,2225,3,
		1372,686,0,2225,2226,3,106,53,0,2226,2459,1,0,0,0,2227,2228,5,138,0,0,
		2228,2229,3,724,362,0,2229,2230,3,1372,686,0,2230,2231,5,192,0,0,2231,
		2232,5,77,0,0,2232,2233,5,78,0,0,2233,2459,1,0,0,0,2234,2235,5,138,0,0,
		2235,2236,3,724,362,0,2236,2237,3,1372,686,0,2237,2238,5,327,0,0,2238,
		2239,5,77,0,0,2239,2240,5,78,0,0,2240,2459,1,0,0,0,2241,2242,5,138,0,0,
		2242,2243,3,724,362,0,2243,2244,3,1372,686,0,2244,2245,5,192,0,0,2245,
		2246,5,438,0,0,2246,2459,1,0,0,0,2247,2248,5,138,0,0,2248,2249,3,724,362,
		0,2249,2250,3,1372,686,0,2250,2251,5,192,0,0,2251,2252,5,438,0,0,2252,
		2253,5,221,0,0,2253,2254,5,390,0,0,2254,2459,1,0,0,0,2255,2256,5,138,0,
		0,2256,2257,3,724,362,0,2257,2258,3,1372,686,0,2258,2259,5,327,0,0,2259,
		2260,5,336,0,0,2260,2261,3,1364,682,0,2261,2459,1,0,0,0,2262,2263,5,138,
		0,0,2263,2264,3,724,362,0,2264,2265,3,1356,678,0,2265,2266,5,327,0,0,2266,
		2267,5,336,0,0,2267,2268,3,1364,682,0,2268,2459,1,0,0,0,2269,2270,5,138,
		0,0,2270,2271,3,724,362,0,2271,2272,3,1372,686,0,2272,2273,5,327,0,0,2273,
		2274,3,116,58,0,2274,2459,1,0,0,0,2275,2276,5,138,0,0,2276,2277,3,724,
		362,0,2277,2278,3,1372,686,0,2278,2279,5,307,0,0,2279,2280,3,116,58,0,
		2280,2459,1,0,0,0,2281,2282,5,138,0,0,2282,2283,3,724,362,0,2283,2284,
		3,1372,686,0,2284,2285,5,327,0,0,2285,2286,5,339,0,0,2286,2287,3,1372,
		686,0,2287,2459,1,0,0,0,2288,2289,5,138,0,0,2289,2290,3,724,362,0,2290,
		2291,3,1372,686,0,2291,2292,5,133,0,0,2292,2293,5,439,0,0,2293,2294,3,
		198,99,0,2294,2295,5,36,0,0,2295,2296,5,220,0,0,2296,2297,3,284,142,0,
		2297,2459,1,0,0,0,2298,2299,5,138,0,0,2299,2300,3,724,362,0,2300,2301,
		3,1372,686,0,2301,2302,3,124,62,0,2302,2459,1,0,0,0,2303,2304,5,138,0,
		0,2304,2305,3,724,362,0,2305,2306,3,1372,686,0,2306,2307,5,192,0,0,2307,
		2308,5,220,0,0,2308,2459,1,0,0,0,2309,2310,5,138,0,0,2310,2311,3,724,362,
		0,2311,2312,3,1372,686,0,2312,2313,5,192,0,0,2313,2314,5,220,0,0,2314,
		2315,5,221,0,0,2315,2316,5,390,0,0,2316,2459,1,0,0,0,2317,2318,5,192,0,
		0,2318,2319,3,724,362,0,2319,2320,5,221,0,0,2320,2321,5,390,0,0,2321,2322,
		3,1372,686,0,2322,2323,3,108,54,0,2323,2459,1,0,0,0,2324,2325,5,192,0,
		0,2325,2326,3,724,362,0,2326,2327,3,1372,686,0,2327,2328,3,108,54,0,2328,
		2459,1,0,0,0,2329,2330,5,138,0,0,2330,2331,3,724,362,0,2331,2332,3,1372,
		686,0,2332,2333,3,726,363,0,2333,2334,5,354,0,0,2334,2335,3,1118,559,0,
		2335,2336,3,110,55,0,2336,2337,3,112,56,0,2337,2459,1,0,0,0,2338,2339,
		5,138,0,0,2339,2340,3,724,362,0,2340,2341,3,1372,686,0,2341,2342,3,344,
		172,0,2342,2459,1,0,0,0,2343,2344,5,133,0,0,2344,2459,3,208,104,0,2345,
		2346,5,138,0,0,2346,2347,5,45,0,0,2347,2348,3,1340,670,0,2348,2349,3,440,
		220,0,2349,2459,1,0,0,0,2350,2351,5,366,0,0,2351,2352,5,45,0,0,2352,2459,
		3,1340,670,0,2353,2354,5,192,0,0,2354,2355,5,45,0,0,2355,2356,5,221,0,
		0,2356,2357,5,390,0,0,2357,2358,3,1340,670,0,2358,2359,3,108,54,0,2359,
		2459,1,0,0,0,2360,2361,5,192,0,0,2361,2362,5,45,0,0,2362,2363,3,1340,670,
		0,2363,2364,3,108,54,0,2364,2459,1,0,0,0,2365,2366,5,327,0,0,2366,2367,
		5,373,0,0,2367,2459,5,271,0,0,2368,2369,5,159,0,0,2369,2370,5,80,0,0,2370,
		2459,3,1340,670,0,2371,2372,5,327,0,0,2372,2373,5,373,0,0,2373,2459,5,
		159,0,0,2374,2375,5,327,0,0,2375,2459,5,440,0,0,2376,2377,5,327,0,0,2377,
		2459,5,361,0,0,2378,2379,5,194,0,0,2379,2380,5,351,0,0,2380,2459,3,1340,
		670,0,2381,2382,5,194,0,0,2382,2383,5,139,0,0,2383,2384,5,351,0,0,2384,
		2459,3,1340,670,0,2385,2386,5,194,0,0,2386,2387,5,306,0,0,2387,2388,5,
		351,0,0,2388,2459,3,1340,670,0,2389,2390,5,194,0,0,2390,2391,5,351,0,0,
		2391,2459,5,30,0,0,2392,2393,5,194,0,0,2393,2394,5,351,0,0,2394,2459,5,
		99,0,0,2395,2396,5,187,0,0,2396,2397,5,351,0,0,2397,2459,3,1340,670,0,
		2398,2399,5,187,0,0,2399,2400,5,351,0,0,2400,2459,5,30,0,0,2401,2402,5,
		187,0,0,2402,2403,5,351,0,0,2403,2459,5,99,0,0,2404,2405,5,194,0,0,2405,
		2406,5,315,0,0,2406,2459,3,1340,670,0,2407,2408,5,194,0,0,2408,2409,5,
		139,0,0,2409,2410,5,315,0,0,2410,2459,3,1340,670,0,2411,2412,5,194,0,0,
		2412,2413,5,306,0,0,2413,2414,5,315,0,0,2414,2459,3,1340,670,0,2415,2416,
		5,187,0,0,2416,2417,5,315,0,0,2417,2459,3,1340,670,0,2418,2419,5,229,0,
		0,2419,2459,3,1336,668,0,2420,2421,5,263,0,0,2421,2422,5,229,0,0,2422,
		2459,3,1336,668,0,2423,2424,5,269,0,0,2424,2459,3,524,262,0,2425,2426,
		5,77,0,0,2426,2459,5,269,0,0,2427,2428,5,276,0,0,2428,2429,5,94,0,0,2429,
		2459,3,1368,684,0,2430,2431,5,327,0,0,2431,2432,5,345,0,0,2432,2459,3,
		1340,670,0,2433,2434,5,327,0,0,2434,2459,3,116,58,0,2435,2436,5,307,0,
		0,2436,2459,3,116,58,0,2437,2438,5,306,0,0,2438,2439,5,220,0,0,2439,2459,
		3,114,57,0,2440,2441,5,194,0,0,2441,2442,5,408,0,0,2442,2443,5,243,0,0,
		2443,2459,5,321,0,0,2444,2445,5,187,0,0,2445,2446,5,408,0,0,2446,2447,
		5,243,0,0,2447,2459,5,321,0,0,2448,2449,5,210,0,0,2449,2450,5,408,0,0,
		2450,2451,5,243,0,0,2451,2459,5,321,0,0,2452,2453,5,263,0,0,2453,2454,
		5,210,0,0,2454,2455,5,408,0,0,2455,2456,5,243,0,0,2456,2459,5,321,0,0,
		2457,2459,3,344,172,0,2458,2206,1,0,0,0,2458,2208,1,0,0,0,2458,2213,1,
		0,0,0,2458,2216,1,0,0,0,2458,2222,1,0,0,0,2458,2227,1,0,0,0,2458,2234,
		1,0,0,0,2458,2241,1,0,0,0,2458,2247,1,0,0,0,2458,2255,1,0,0,0,2458,2262,
		1,0,0,0,2458,2269,1,0,0,0,2458,2275,1,0,0,0,2458,2281,1,0,0,0,2458,2288,
		1,0,0,0,2458,2298,1,0,0,0,2458,2303,1,0,0,0,2458,2309,1,0,0,0,2458,2317,
		1,0,0,0,2458,2324,1,0,0,0,2458,2329,1,0,0,0,2458,2338,1,0,0,0,2458,2343,
		1,0,0,0,2458,2345,1,0,0,0,2458,2350,1,0,0,0,2458,2353,1,0,0,0,2458,2360,
		1,0,0,0,2458,2365,1,0,0,0,2458,2368,1,0,0,0,2458,2371,1,0,0,0,2458,2374,
		1,0,0,0,2458,2376,1,0,0,0,2458,2378,1,0,0,0,2458,2381,1,0,0,0,2458,2385,
		1,0,0,0,2458,2389,1,0,0,0,2458,2392,1,0,0,0,2458,2395,1,0,0,0,2458,2398,
		1,0,0,0,2458,2401,1,0,0,0,2458,2404,1,0,0,0,2458,2407,1,0,0,0,2458,2411,
		1,0,0,0,2458,2415,1,0,0,0,2458,2418,1,0,0,0,2458,2420,1,0,0,0,2458,2423,
		1,0,0,0,2458,2425,1,0,0,0,2458,2427,1,0,0,0,2458,2430,1,0,0,0,2458,2433,
		1,0,0,0,2458,2435,1,0,0,0,2458,2437,1,0,0,0,2458,2440,1,0,0,0,2458,2444,
		1,0,0,0,2458,2448,1,0,0,0,2458,2452,1,0,0,0,2458,2457,1,0,0,0,2459,105,
		1,0,0,0,2460,2461,5,327,0,0,2461,2462,5,53,0,0,2462,2466,3,1162,581,0,
		2463,2464,5,192,0,0,2464,2466,5,53,0,0,2465,2460,1,0,0,0,2465,2463,1,0,
		0,0,2466,107,1,0,0,0,2467,2471,5,151,0,0,2468,2471,5,309,0,0,2469,2471,
		1,0,0,0,2470,2467,1,0,0,0,2470,2468,1,0,0,0,2470,2469,1,0,0,0,2471,109,
		1,0,0,0,2472,2473,5,43,0,0,2473,2476,3,524,262,0,2474,2476,1,0,0,0,2475,
		2472,1,0,0,0,2475,2474,1,0,0,0,2476,111,1,0,0,0,2477,2478,5,100,0,0,2478,
		2481,3,1162,581,0,2479,2481,1,0,0,0,2480,2477,1,0,0,0,2480,2479,1,0,0,
		0,2481,113,1,0,0,0,2482,2489,5,264,0,0,2483,2489,5,113,0,0,2484,2489,5,
		53,0,0,2485,2486,5,100,0,0,2486,2487,5,227,0,0,2487,2489,3,1340,670,0,
		2488,2482,1,0,0,0,2488,2483,1,0,0,0,2488,2484,1,0,0,0,2488,2485,1,0,0,
		0,2489,115,1,0,0,0,2490,2491,5,2,0,0,2491,2492,3,120,60,0,2492,2493,5,
		3,0,0,2493,117,1,0,0,0,2494,2495,5,105,0,0,2495,2498,3,116,58,0,2496,2498,
		1,0,0,0,2497,2494,1,0,0,0,2497,2496,1,0,0,0,2498,119,1,0,0,0,2499,2504,
		3,122,61,0,2500,2501,5,6,0,0,2501,2503,3,122,61,0,2502,2500,1,0,0,0,2503,
		2506,1,0,0,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,121,1,0,0,0,2506,
		2504,1,0,0,0,2507,2516,3,1380,690,0,2508,2509,5,10,0,0,2509,2517,3,466,
		233,0,2510,2511,5,11,0,0,2511,2514,3,1380,690,0,2512,2513,5,10,0,0,2513,
		2515,3,466,233,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,2517,1,0,0,0,
		2516,2508,1,0,0,0,2516,2510,1,0,0,0,2516,2517,1,0,0,0,2517,123,1,0,0,0,
		2518,2520,3,126,63,0,2519,2518,1,0,0,0,2520,2521,1,0,0,0,2521,2519,1,0,
		0,0,2521,2522,1,0,0,0,2522,125,1,0,0,0,2523,2527,5,308,0,0,2524,2525,3,
		16,8,0,2525,2526,3,292,146,0,2526,2528,1,0,0,0,2527,2524,1,0,0,0,2527,
		2528,1,0,0,0,2528,2536,1,0,0,0,2529,2533,5,327,0,0,2530,2534,3,288,144,
		0,2531,2532,5,439,0,0,2532,2534,3,198,99,0,2533,2530,1,0,0,0,2533,2531,
		1,0,0,0,2534,2536,1,0,0,0,2535,2523,1,0,0,0,2535,2529,1,0,0,0,2536,127,
		1,0,0,0,2537,2538,5,62,0,0,2538,2539,5,416,0,0,2539,2540,5,105,0,0,2540,
		2541,5,2,0,0,2541,2542,3,132,66,0,2542,2543,5,3,0,0,2543,2564,1,0,0,0,
		2544,2545,5,62,0,0,2545,2546,5,416,0,0,2546,2547,5,68,0,0,2547,2548,5,
		2,0,0,2548,2549,3,1280,640,0,2549,2550,5,3,0,0,2550,2564,1,0,0,0,2551,
		2552,5,62,0,0,2552,2553,5,416,0,0,2553,2554,5,64,0,0,2554,2555,5,2,0,0,
		2555,2556,3,1280,640,0,2556,2557,5,3,0,0,2557,2558,5,94,0,0,2558,2559,
		5,2,0,0,2559,2560,3,1280,640,0,2560,2561,5,3,0,0,2561,2564,1,0,0,0,2562,
		2564,5,53,0,0,2563,2537,1,0,0,0,2563,2544,1,0,0,0,2563,2551,1,0,0,0,2563,
		2562,1,0,0,0,2564,129,1,0,0,0,2565,2566,3,1378,689,0,2566,2567,3,1356,
		678,0,2567,131,1,0,0,0,2568,2573,3,130,65,0,2569,2570,5,6,0,0,2570,2572,
		3,130,65,0,2571,2569,1,0,0,0,2572,2575,1,0,0,0,2573,2571,1,0,0,0,2573,
		2574,1,0,0,0,2574,133,1,0,0,0,2575,2573,1,0,0,0,2576,2577,5,138,0,0,2577,
		2578,5,354,0,0,2578,2579,3,524,262,0,2579,2580,3,136,68,0,2580,135,1,0,
		0,0,2581,2586,3,138,69,0,2582,2583,5,6,0,0,2583,2585,3,138,69,0,2584,2582,
		1,0,0,0,2585,2588,1,0,0,0,2586,2584,1,0,0,0,2586,2587,1,0,0,0,2587,137,
		1,0,0,0,2588,2586,1,0,0,0,2589,2590,5,133,0,0,2590,2591,5,144,0,0,2591,
		2592,3,1102,551,0,2592,2593,3,108,54,0,2593,2613,1,0,0,0,2594,2595,5,192,
		0,0,2595,2598,5,144,0,0,2596,2597,5,221,0,0,2597,2599,5,390,0,0,2598,2596,
		1,0,0,0,2598,2599,1,0,0,0,2599,2600,1,0,0,0,2600,2601,3,1372,686,0,2601,
		2602,3,108,54,0,2602,2613,1,0,0,0,2603,2604,5,138,0,0,2604,2605,5,144,
		0,0,2605,2606,3,1372,686,0,2606,2607,3,726,363,0,2607,2608,5,354,0,0,2608,
		2609,3,1118,559,0,2609,2610,3,110,55,0,2610,2611,3,108,54,0,2611,2613,
		1,0,0,0,2612,2589,1,0,0,0,2612,2594,1,0,0,0,2612,2603,1,0,0,0,2613,139,
		1,0,0,0,2614,2617,5,158,0,0,2615,2618,3,954,477,0,2616,2618,5,30,0,0,2617,
		2615,1,0,0,0,2617,2616,1,0,0,0,2618,141,1,0,0,0,2619,2620,5,170,0,0,2620,
		2621,3,156,78,0,2621,2622,3,1336,668,0,2622,2623,3,214,107,0,2623,2624,
		3,144,72,0,2624,2625,3,146,73,0,2625,2626,3,148,74,0,2626,2627,3,158,79,
		0,2627,2628,3,16,8,0,2628,2629,3,150,75,0,2629,2630,3,1094,547,0,2630,
		2642,1,0,0,0,2631,2632,5,170,0,0,2632,2633,5,2,0,0,2633,2634,3,894,447,
		0,2634,2635,5,3,0,0,2635,2636,5,94,0,0,2636,2637,3,146,73,0,2637,2638,
		3,148,74,0,2638,2639,3,16,8,0,2639,2640,3,150,75,0,2640,2642,1,0,0,0,2641,
		2619,1,0,0,0,2641,2631,1,0,0,0,2642,143,1,0,0,0,2643,2644,7,10,0,0,2644,
		145,1,0,0,0,2645,2648,5,291,0,0,2646,2648,1,0,0,0,2647,2645,1,0,0,0,2647,
		2646,1,0,0,0,2648,147,1,0,0,0,2649,2653,3,1358,679,0,2650,2653,5,337,0,
		0,2651,2653,5,338,0,0,2652,2649,1,0,0,0,2652,2650,1,0,0,0,2652,2651,1,
		0,0,0,2653,149,1,0,0,0,2654,2660,3,152,76,0,2655,2656,5,2,0,0,2656,2657,
		3,162,81,0,2657,2658,5,3,0,0,2658,2660,1,0,0,0,2659,2654,1,0,0,0,2659,
		2655,1,0,0,0,2660,151,1,0,0,0,2661,2663,3,154,77,0,2662,2661,1,0,0,0,2663,
		2666,1,0,0,0,2664,2662,1,0,0,0,2664,2665,1,0,0,0,2665,153,1,0,0,0,2666,
		2664,1,0,0,0,2667,2703,5,107,0,0,2668,2703,5,112,0,0,2669,2670,5,184,0,
		0,2670,2671,3,834,417,0,2671,2672,3,1358,679,0,2672,2703,1,0,0,0,2673,
		2674,5,78,0,0,2674,2675,3,834,417,0,2675,2676,3,1358,679,0,2676,2703,1,
		0,0,0,2677,2703,5,172,0,0,2678,2703,5,217,0,0,2679,2680,5,292,0,0,2680,
		2681,3,834,417,0,2681,2682,3,1358,679,0,2682,2703,1,0,0,0,2683,2684,5,
		198,0,0,2684,2685,3,834,417,0,2685,2686,3,1358,679,0,2686,2703,1,0,0,0,
		2687,2688,5,210,0,0,2688,2689,5,292,0,0,2689,2703,3,216,108,0,2690,2691,
		5,210,0,0,2691,2692,5,292,0,0,2692,2703,5,9,0,0,2693,2694,5,210,0,0,2694,
		2695,5,77,0,0,2695,2696,5,78,0,0,2696,2703,3,216,108,0,2697,2698,5,210,
		0,0,2698,2699,5,78,0,0,2699,2703,3,216,108,0,2700,2701,5,195,0,0,2701,
		2703,3,1358,679,0,2702,2667,1,0,0,0,2702,2668,1,0,0,0,2702,2669,1,0,0,
		0,2702,2673,1,0,0,0,2702,2677,1,0,0,0,2702,2678,1,0,0,0,2702,2679,1,0,
		0,0,2702,2683,1,0,0,0,2702,2687,1,0,0,0,2702,2690,1,0,0,0,2702,2693,1,
		0,0,0,2702,2697,1,0,0,0,2702,2700,1,0,0,0,2703,155,1,0,0,0,2704,2707,5,
		107,0,0,2705,2707,1,0,0,0,2706,2704,1,0,0,0,2706,2705,1,0,0,0,2707,157,
		1,0,0,0,2708,2709,3,160,80,0,2709,2710,5,185,0,0,2710,2711,3,1358,679,
		0,2711,2714,1,0,0,0,2712,2714,1,0,0,0,2713,2708,1,0,0,0,2713,2712,1,0,
		0,0,2714,159,1,0,0,0,2715,2718,5,100,0,0,2716,2718,1,0,0,0,2717,2715,1,
		0,0,0,2717,2716,1,0,0,0,2718,161,1,0,0,0,2719,2724,3,164,82,0,2720,2721,
		5,6,0,0,2721,2723,3,164,82,0,2722,2720,1,0,0,0,2723,2726,1,0,0,0,2724,
		2722,1,0,0,0,2724,2725,1,0,0,0,2725,163,1,0,0,0,2726,2724,1,0,0,0,2727,
		2728,3,1380,690,0,2728,2729,3,166,83,0,2729,165,1,0,0,0,2730,2739,3,66,
		33,0,2731,2739,3,292,146,0,2732,2739,5,9,0,0,2733,2734,5,2,0,0,2734,2735,
		3,168,84,0,2735,2736,5,3,0,0,2736,2739,1,0,0,0,2737,2739,1,0,0,0,2738,
		2730,1,0,0,0,2738,2731,1,0,0,0,2738,2732,1,0,0,0,2738,2733,1,0,0,0,2738,
		2737,1,0,0,0,2739,167,1,0,0,0,2740,2745,3,170,85,0,2741,2742,5,6,0,0,2742,
		2744,3,170,85,0,2743,2741,1,0,0,0,2744,2747,1,0,0,0,2745,2743,1,0,0,0,
		2745,2746,1,0,0,0,2746,169,1,0,0,0,2747,2745,1,0,0,0,2748,2749,3,66,33,
		0,2749,171,1,0,0,0,2750,2751,5,46,0,0,2751,2752,3,174,87,0,2752,2756,5,
		92,0,0,2753,2754,5,221,0,0,2754,2755,5,77,0,0,2755,2757,5,390,0,0,2756,
		2753,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,0,2758,2789,3,1336,668,
		0,2759,2760,5,2,0,0,2760,2761,3,176,88,0,2761,2762,5,3,0,0,2762,2763,3,
		238,119,0,2763,2764,3,240,120,0,2764,2765,3,248,124,0,2765,2766,3,250,
		125,0,2766,2767,3,252,126,0,2767,2768,3,254,127,0,2768,2790,1,0,0,0,2769,
		2770,5,269,0,0,2770,2771,3,524,262,0,2771,2772,3,178,89,0,2772,2773,3,
		240,120,0,2773,2774,3,248,124,0,2774,2775,3,250,125,0,2775,2776,3,252,
		126,0,2776,2777,3,254,127,0,2777,2790,1,0,0,0,2778,2779,5,279,0,0,2779,
		2780,5,269,0,0,2780,2781,3,1336,668,0,2781,2782,3,178,89,0,2782,2783,3,
		128,64,0,2783,2784,3,240,120,0,2784,2785,3,248,124,0,2785,2786,3,250,125,
		0,2786,2787,3,252,126,0,2787,2788,3,254,127,0,2788,2790,1,0,0,0,2789,2759,
		1,0,0,0,2789,2769,1,0,0,0,2789,2778,1,0,0,0,2790,173,1,0,0,0,2791,2800,
		5,348,0,0,2792,2800,5,346,0,0,2793,2794,5,246,0,0,2794,2800,7,11,0,0,2795,
		2796,5,214,0,0,2796,2800,7,11,0,0,2797,2800,5,361,0,0,2798,2800,1,0,0,
		0,2799,2791,1,0,0,0,2799,2792,1,0,0,0,2799,2793,1,0,0,0,2799,2795,1,0,
		0,0,2799,2797,1,0,0,0,2799,2798,1,0,0,0,2800,175,1,0,0,0,2801,2804,3,180,
		90,0,2802,2804,1,0,0,0,2803,2801,1,0,0,0,2803,2802,1,0,0,0,2804,177,1,
		0,0,0,2805,2806,5,2,0,0,2806,2807,3,182,91,0,2807,2808,5,3,0,0,2808,2811,
		1,0,0,0,2809,2811,1,0,0,0,2810,2805,1,0,0,0,2810,2809,1,0,0,0,2811,179,
		1,0,0,0,2812,2817,3,184,92,0,2813,2814,5,6,0,0,2814,2816,3,184,92,0,2815,
		2813,1,0,0,0,2816,2819,1,0,0,0,2817,2815,1,0,0,0,2817,2818,1,0,0,0,2818,
		181,1,0,0,0,2819,2817,1,0,0,0,2820,2825,3,186,93,0,2821,2822,5,6,0,0,2822,
		2824,3,186,93,0,2823,2821,1,0,0,0,2824,2827,1,0,0,0,2825,2823,1,0,0,0,
		2825,2826,1,0,0,0,2826,183,1,0,0,0,2827,2825,1,0,0,0,2828,2832,3,208,104,
		0,2829,2832,3,202,101,0,2830,2832,3,188,94,0,2831,2828,1,0,0,0,2831,2829,
		1,0,0,0,2831,2830,1,0,0,0,2832,185,1,0,0,0,2833,2836,3,190,95,0,2834,2836,
		3,208,104,0,2835,2833,1,0,0,0,2835,2834,1,0,0,0,2836,187,1,0,0,0,2837,
		2838,3,1372,686,0,2838,2839,3,1118,559,0,2839,2840,3,340,170,0,2840,2841,
		3,192,96,0,2841,189,1,0,0,0,2842,2845,3,1372,686,0,2843,2844,5,105,0,0,
		2844,2846,5,274,0,0,2845,2843,1,0,0,0,2845,2846,1,0,0,0,2846,2847,1,0,
		0,0,2847,2848,3,192,96,0,2848,191,1,0,0,0,2849,2851,3,194,97,0,2850,2849,
		1,0,0,0,2851,2854,1,0,0,0,2852,2850,1,0,0,0,2852,2853,1,0,0,0,2853,193,
		1,0,0,0,2854,2852,1,0,0,0,2855,2856,5,45,0,0,2856,2857,3,1340,670,0,2857,
		2858,3,196,98,0,2858,2864,1,0,0,0,2859,2864,3,196,98,0,2860,2864,3,200,
		100,0,2861,2862,5,43,0,0,2862,2864,3,524,262,0,2863,2855,1,0,0,0,2863,
		2859,1,0,0,0,2863,2860,1,0,0,0,2863,2861,1,0,0,0,2864,195,1,0,0,0,2865,
		2866,5,77,0,0,2866,2904,5,78,0,0,2867,2904,5,78,0,0,2868,2869,5,98,0,0,
		2869,2870,3,664,332,0,2870,2871,3,256,128,0,2871,2904,1,0,0,0,2872,2873,
		5,85,0,0,2873,2874,5,237,0,0,2874,2875,3,664,332,0,2875,2876,3,256,128,
		0,2876,2904,1,0,0,0,2877,2878,5,42,0,0,2878,2879,5,2,0,0,2879,2880,3,1162,
		581,0,2880,2881,5,3,0,0,2881,2882,3,212,106,0,2882,2904,1,0,0,0,2883,2884,
		5,53,0,0,2884,2904,3,1204,602,0,2885,2886,5,439,0,0,2886,2887,3,198,99,
		0,2887,2895,5,36,0,0,2888,2889,5,220,0,0,2889,2896,3,284,142,0,2890,2891,
		5,2,0,0,2891,2892,3,1162,581,0,2892,2893,5,3,0,0,2893,2894,5,441,0,0,2894,
		2896,1,0,0,0,2895,2888,1,0,0,0,2895,2890,1,0,0,0,2896,2904,1,0,0,0,2897,
		2898,5,86,0,0,2898,2899,3,1336,668,0,2899,2900,3,214,107,0,2900,2901,3,
		222,111,0,2901,2902,3,230,115,0,2902,2904,1,0,0,0,2903,2865,1,0,0,0,2903,
		2867,1,0,0,0,2903,2868,1,0,0,0,2903,2872,1,0,0,0,2903,2877,1,0,0,0,2903,
		2883,1,0,0,0,2903,2885,1,0,0,0,2903,2897,1,0,0,0,2904,197,1,0,0,0,2905,
		2909,5,139,0,0,2906,2907,5,148,0,0,2907,2909,5,53,0,0,2908,2905,1,0,0,
		0,2908,2906,1,0,0,0,2909,199,1,0,0,0,2910,2916,5,54,0,0,2911,2912,5,77,
		0,0,2912,2916,5,54,0,0,2913,2914,5,69,0,0,2914,2916,7,8,0,0,2915,2910,
		1,0,0,0,2915,2911,1,0,0,0,2915,2913,1,0,0,0,2916,201,1,0,0,0,2917,2918,
		5,120,0,0,2918,2919,3,1336,668,0,2919,2920,3,204,102,0,2920,203,1,0,0,
		0,2921,2922,7,12,0,0,2922,2924,3,206,103,0,2923,2921,1,0,0,0,2924,2927,
		1,0,0,0,2925,2923,1,0,0,0,2925,2926,1,0,0,0,2926,205,1,0,0,0,2927,2925,
		1,0,0,0,2928,2929,7,13,0,0,2929,207,1,0,0,0,2930,2931,5,45,0,0,2931,2932,
		3,1340,670,0,2932,2933,3,210,105,0,2933,2936,1,0,0,0,2934,2936,3,210,105,
		0,2935,2930,1,0,0,0,2935,2934,1,0,0,0,2936,209,1,0,0,0,2937,2938,5,42,
		0,0,2938,2939,5,2,0,0,2939,2940,3,1162,581,0,2940,2941,5,3,0,0,2941,2942,
		3,440,220,0,2942,2996,1,0,0,0,2943,2955,5,98,0,0,2944,2945,5,2,0,0,2945,
		2946,3,216,108,0,2946,2947,5,3,0,0,2947,2948,3,220,110,0,2948,2949,3,664,
		332,0,2949,2950,3,256,128,0,2950,2951,3,440,220,0,2951,2956,1,0,0,0,2952,
		2953,3,258,129,0,2953,2954,3,440,220,0,2954,2956,1,0,0,0,2955,2944,1,0,
		0,0,2955,2952,1,0,0,0,2956,2996,1,0,0,0,2957,2958,5,85,0,0,2958,2970,5,
		237,0,0,2959,2960,5,2,0,0,2960,2961,3,216,108,0,2961,2962,5,3,0,0,2962,
		2963,3,220,110,0,2963,2964,3,664,332,0,2964,2965,3,256,128,0,2965,2966,
		3,440,220,0,2966,2971,1,0,0,0,2967,2968,3,258,129,0,2968,2969,3,440,220,
		0,2969,2971,1,0,0,0,2970,2959,1,0,0,0,2970,2967,1,0,0,0,2971,2996,1,0,
		0,0,2972,2973,5,200,0,0,2973,2974,3,596,298,0,2974,2975,5,2,0,0,2975,2976,
		3,224,112,0,2976,2977,5,3,0,0,2977,2978,3,220,110,0,2978,2979,3,664,332,
		0,2979,2980,3,256,128,0,2980,2981,3,228,114,0,2981,2982,3,440,220,0,2982,
		2996,1,0,0,0,2983,2984,5,63,0,0,2984,2985,5,237,0,0,2985,2986,5,2,0,0,
		2986,2987,3,216,108,0,2987,2988,5,3,0,0,2988,2989,5,86,0,0,2989,2990,3,
		1336,668,0,2990,2991,3,214,107,0,2991,2992,3,222,111,0,2992,2993,3,230,
		115,0,2993,2994,3,440,220,0,2994,2996,1,0,0,0,2995,2937,1,0,0,0,2995,2943,
		1,0,0,0,2995,2957,1,0,0,0,2995,2972,1,0,0,0,2995,2983,1,0,0,0,2996,211,
		1,0,0,0,2997,2998,5,263,0,0,2998,3001,5,229,0,0,2999,3001,1,0,0,0,3000,
		2997,1,0,0,0,3000,2999,1,0,0,0,3001,213,1,0,0,0,3002,3003,5,2,0,0,3003,
		3004,3,216,108,0,3004,3005,5,3,0,0,3005,3008,1,0,0,0,3006,3008,1,0,0,0,
		3007,3002,1,0,0,0,3007,3006,1,0,0,0,3008,215,1,0,0,0,3009,3014,3,218,109,
		0,3010,3011,5,6,0,0,3011,3013,3,218,109,0,3012,3010,1,0,0,0,3013,3016,
		1,0,0,0,3014,3012,1,0,0,0,3014,3015,1,0,0,0,3015,217,1,0,0,0,3016,3014,
		1,0,0,0,3017,3018,3,1372,686,0,3018,219,1,0,0,0,3019,3020,5,442,0,0,3020,
		3021,5,2,0,0,3021,3022,3,216,108,0,3022,3023,5,3,0,0,3023,3026,1,0,0,0,
		3024,3026,1,0,0,0,3025,3019,1,0,0,0,3025,3024,1,0,0,0,3026,221,1,0,0,0,
		3027,3028,5,250,0,0,3028,3031,7,14,0,0,3029,3031,1,0,0,0,3030,3027,1,0,
		0,0,3030,3029,1,0,0,0,3031,223,1,0,0,0,3032,3037,3,226,113,0,3033,3034,
		5,6,0,0,3034,3036,3,226,113,0,3035,3033,1,0,0,0,3036,3039,1,0,0,0,3037,
		3035,1,0,0,0,3037,3038,1,0,0,0,3038,225,1,0,0,0,3039,3037,1,0,0,0,3040,
		3041,3,602,301,0,3041,3048,5,105,0,0,3042,3049,3,684,342,0,3043,3044,5,
		272,0,0,3044,3045,5,2,0,0,3045,3046,3,684,342,0,3046,3047,5,3,0,0,3047,
		3049,1,0,0,0,3048,3042,1,0,0,0,3048,3043,1,0,0,0,3049,227,1,0,0,0,3050,
		3051,5,103,0,0,3051,3052,5,2,0,0,3052,3053,3,1162,581,0,3053,3054,5,3,
		0,0,3054,3057,1,0,0,0,3055,3057,1,0,0,0,3056,3050,1,0,0,0,3056,3055,1,
		0,0,0,3057,229,1,0,0,0,3058,3068,3,232,116,0,3059,3068,3,234,117,0,3060,
		3061,3,232,116,0,3061,3062,3,234,117,0,3062,3068,1,0,0,0,3063,3064,3,234,
		117,0,3064,3065,3,232,116,0,3065,3068,1,0,0,0,3066,3068,1,0,0,0,3067,3058,
		1,0,0,0,3067,3059,1,0,0,0,3067,3060,1,0,0,0,3067,3063,1,0,0,0,3067,3066,
		1,0,0,0,3068,231,1,0,0,0,3069,3070,5,80,0,0,3070,3071,5,363,0,0,3071,3072,
		3,236,118,0,3072,233,1,0,0,0,3073,3074,5,80,0,0,3074,3075,5,183,0,0,3075,
		3076,3,236,118,0,3076,235,1,0,0,0,3077,3078,5,263,0,0,3078,3084,5,132,
		0,0,3079,3084,5,309,0,0,3080,3084,5,151,0,0,3081,3082,5,327,0,0,3082,3084,
		7,15,0,0,3083,3077,1,0,0,0,3083,3079,1,0,0,0,3083,3080,1,0,0,0,3083,3081,
		1,0,0,0,3084,237,1,0,0,0,3085,3086,5,230,0,0,3086,3087,5,2,0,0,3087,3088,
		3,1334,667,0,3088,3089,5,3,0,0,3089,3092,1,0,0,0,3090,3092,1,0,0,0,3091,
		3085,1,0,0,0,3091,3090,1,0,0,0,3092,239,1,0,0,0,3093,3096,3,242,121,0,
		3094,3096,1,0,0,0,3095,3093,1,0,0,0,3095,3094,1,0,0,0,3096,241,1,0,0,0,
		3097,3098,5,279,0,0,3098,3099,5,148,0,0,3099,3100,3,1372,686,0,3100,3101,
		5,2,0,0,3101,3102,3,244,122,0,3102,3103,5,3,0,0,3103,243,1,0,0,0,3104,
		3109,3,246,123,0,3105,3106,5,6,0,0,3106,3108,3,246,123,0,3107,3105,1,0,
		0,0,3108,3111,1,0,0,0,3109,3107,1,0,0,0,3109,3110,1,0,0,0,3110,245,1,0,
		0,0,3111,3109,1,0,0,0,3112,3113,3,1372,686,0,3113,3114,3,608,304,0,3114,
		3115,3,610,305,0,3115,3127,1,0,0,0,3116,3117,3,1214,607,0,3117,3118,3,
		608,304,0,3118,3119,3,610,305,0,3119,3127,1,0,0,0,3120,3121,5,2,0,0,3121,
		3122,3,1162,581,0,3122,3123,5,3,0,0,3123,3124,3,608,304,0,3124,3125,3,
		610,305,0,3125,3127,1,0,0,0,3126,3112,1,0,0,0,3126,3116,1,0,0,0,3126,3120,
		1,0,0,0,3127,247,1,0,0,0,3128,3129,5,100,0,0,3129,3132,3,1340,670,0,3130,
		3132,1,0,0,0,3131,3128,1,0,0,0,3131,3130,1,0,0,0,3132,249,1,0,0,0,3133,
		3134,5,105,0,0,3134,3139,3,116,58,0,3135,3136,5,373,0,0,3136,3139,5,271,
		0,0,3137,3139,1,0,0,0,3138,3133,1,0,0,0,3138,3135,1,0,0,0,3138,3137,1,
		0,0,0,3139,251,1,0,0,0,3140,3141,5,80,0,0,3141,3147,5,162,0,0,3142,3148,
		5,192,0,0,3143,3144,5,183,0,0,3144,3148,5,314,0,0,3145,3146,5,286,0,0,
		3146,3148,5,314,0,0,3147,3142,1,0,0,0,3147,3143,1,0,0,0,3147,3145,1,0,
		0,0,3148,3151,1,0,0,0,3149,3151,1,0,0,0,3150,3140,1,0,0,0,3150,3149,1,
		0,0,0,3151,253,1,0,0,0,3152,3153,5,345,0,0,3153,3156,3,1340,670,0,3154,
		3156,1,0,0,0,3155,3152,1,0,0,0,3155,3154,1,0,0,0,3156,255,1,0,0,0,3157,
		3158,5,100,0,0,3158,3159,5,227,0,0,3159,3160,5,345,0,0,3160,3163,3,1340,
		670,0,3161,3163,1,0,0,0,3162,3157,1,0,0,0,3162,3161,1,0,0,0,3163,257,1,
		0,0,0,3164,3165,5,100,0,0,3165,3166,5,227,0,0,3166,3167,3,1340,670,0,3167,
		259,1,0,0,0,3168,3169,5,46,0,0,3169,3173,5,336,0,0,3170,3171,5,221,0,0,
		3171,3172,5,77,0,0,3172,3174,5,390,0,0,3173,3170,1,0,0,0,3173,3174,1,0,
		0,0,3174,3175,1,0,0,0,3175,3176,3,524,262,0,3176,3177,3,870,435,0,3177,
		3178,5,80,0,0,3178,3179,3,1280,640,0,3179,3180,5,64,0,0,3180,3181,3,1056,
		528,0,3181,261,1,0,0,0,3182,3183,5,138,0,0,3183,3186,5,336,0,0,3184,3185,
		5,221,0,0,3185,3187,5,390,0,0,3186,3184,1,0,0,0,3186,3187,1,0,0,0,3187,
		3188,1,0,0,0,3188,3189,3,524,262,0,3189,3190,5,327,0,0,3190,3191,5,336,
		0,0,3191,3192,3,1364,682,0,3192,263,1,0,0,0,3193,3194,5,46,0,0,3194,3195,
		3,174,87,0,3195,3199,5,92,0,0,3196,3197,5,221,0,0,3197,3198,5,77,0,0,3198,
		3200,5,390,0,0,3199,3196,1,0,0,0,3199,3200,1,0,0,0,3200,3201,1,0,0,0,3201,
		3202,3,266,133,0,3202,3203,5,36,0,0,3203,3204,3,960,480,0,3204,3205,3,
		268,134,0,3205,265,1,0,0,0,3206,3207,3,1336,668,0,3207,3208,3,214,107,
		0,3208,3209,3,248,124,0,3209,3210,3,250,125,0,3210,3211,3,252,126,0,3211,
		3212,3,254,127,0,3212,267,1,0,0,0,3213,3217,5,105,0,0,3214,3218,5,175,
		0,0,3215,3216,5,263,0,0,3216,3218,5,175,0,0,3217,3214,1,0,0,0,3217,3215,
		1,0,0,0,3218,3221,1,0,0,0,3219,3221,1,0,0,0,3220,3213,1,0,0,0,3220,3219,
		1,0,0,0,3221,269,1,0,0,0,3222,3223,5,46,0,0,3223,3224,3,274,137,0,3224,
		3225,5,252,0,0,3225,3229,5,370,0,0,3226,3227,5,221,0,0,3227,3228,5,77,
		0,0,3228,3230,5,390,0,0,3229,3226,1,0,0,0,3229,3230,1,0,0,0,3230,3231,
		1,0,0,0,3231,3232,3,272,136,0,3232,3233,5,36,0,0,3233,3234,3,960,480,0,
		3234,3235,3,268,134,0,3235,271,1,0,0,0,3236,3237,3,1336,668,0,3237,3238,
		3,214,107,0,3238,3239,3,248,124,0,3239,3240,3,118,59,0,3240,3241,3,254,
		127,0,3241,273,1,0,0,0,3242,3245,5,361,0,0,3243,3245,1,0,0,0,3244,3242,
		1,0,0,0,3244,3243,1,0,0,0,3245,275,1,0,0,0,3246,3247,5,299,0,0,3247,3248,
		5,252,0,0,3248,3249,5,370,0,0,3249,3250,3,592,296,0,3250,3251,3,1336,668,
		0,3251,3252,3,268,134,0,3252,277,1,0,0,0,3253,3254,5,46,0,0,3254,3255,
		3,174,87,0,3255,3259,5,322,0,0,3256,3257,5,221,0,0,3257,3258,5,77,0,0,
		3258,3260,5,390,0,0,3259,3256,1,0,0,0,3259,3260,1,0,0,0,3260,3261,1,0,
		0,0,3261,3262,3,1336,668,0,3262,3263,3,282,141,0,3263,279,1,0,0,0,3264,
		3265,5,138,0,0,3265,3268,5,322,0,0,3266,3267,5,221,0,0,3267,3269,5,390,
		0,0,3268,3266,1,0,0,0,3268,3269,1,0,0,0,3269,3270,1,0,0,0,3270,3271,3,
		1336,668,0,3271,3272,3,286,143,0,3272,281,1,0,0,0,3273,3276,3,286,143,
		0,3274,3276,1,0,0,0,3275,3273,1,0,0,0,3275,3274,1,0,0,0,3276,283,1,0,0,
		0,3277,3278,5,2,0,0,3278,3279,3,286,143,0,3279,3280,5,3,0,0,3280,3283,
		1,0,0,0,3281,3283,1,0,0,0,3282,3277,1,0,0,0,3282,3281,1,0,0,0,3283,285,
		1,0,0,0,3284,3286,3,288,144,0,3285,3284,1,0,0,0,3286,3287,1,0,0,0,3287,
		3285,1,0,0,0,3287,3288,1,0,0,0,3288,287,1,0,0,0,3289,3290,5,36,0,0,3290,
		3320,3,1122,561,0,3291,3292,5,149,0,0,3292,3320,3,292,146,0,3293,3320,
		5,174,0,0,3294,3295,5,226,0,0,3295,3296,3,290,145,0,3296,3297,3,292,146,
		0,3297,3320,1,0,0,0,3298,3299,5,253,0,0,3299,3320,3,292,146,0,3300,3301,
		5,256,0,0,3301,3320,3,292,146,0,3302,3303,5,263,0,0,3303,3320,7,16,0,0,
		3304,3305,5,275,0,0,3305,3306,5,148,0,0,3306,3320,3,524,262,0,3307,3308,
		5,322,0,0,3308,3309,5,260,0,0,3309,3320,3,524,262,0,3310,3311,5,334,0,
		0,3311,3312,3,16,8,0,3312,3313,3,292,146,0,3313,3320,1,0,0,0,3314,3315,
		5,308,0,0,3315,3317,3,16,8,0,3316,3318,3,292,146,0,3317,3316,1,0,0,0,3317,
		3318,1,0,0,0,3318,3320,1,0,0,0,3319,3289,1,0,0,0,3319,3291,1,0,0,0,3319,
		3293,1,0,0,0,3319,3294,1,0,0,0,3319,3298,1,0,0,0,3319,3300,1,0,0,0,3319,
		3302,1,0,0,0,3319,3304,1,0,0,0,3319,3307,1,0,0,0,3319,3310,1,0,0,0,3319,
		3314,1,0,0,0,3320,289,1,0,0,0,3321,3324,5,148,0,0,3322,3324,1,0,0,0,3323,
		3321,1,0,0,0,3323,3322,1,0,0,0,3324,291,1,0,0,0,3325,3332,3,1354,677,0,
		3326,3327,5,12,0,0,3327,3332,3,1354,677,0,3328,3329,5,13,0,0,3329,3332,
		3,1354,677,0,3330,3332,3,1364,682,0,3331,3325,1,0,0,0,3331,3326,1,0,0,
		0,3331,3328,1,0,0,0,3331,3330,1,0,0,0,3332,293,1,0,0,0,3333,3338,3,292,
		146,0,3334,3335,5,6,0,0,3335,3337,3,292,146,0,3336,3334,1,0,0,0,3337,3340,
		1,0,0,0,3338,3336,1,0,0,0,3338,3339,1,0,0,0,3339,295,1,0,0,0,3340,3338,
		1,0,0,0,3341,3342,5,46,0,0,3342,3343,3,618,309,0,3343,3344,3,298,149,0,
		3344,3345,3,308,154,0,3345,3346,5,239,0,0,3346,3352,3,1340,670,0,3347,
		3348,5,216,0,0,3348,3349,3,300,150,0,3349,3350,3,302,151,0,3350,3351,3,
		306,153,0,3351,3353,1,0,0,0,3352,3347,1,0,0,0,3352,3353,1,0,0,0,3353,297,
		1,0,0,0,3354,3357,5,353,0,0,3355,3357,1,0,0,0,3356,3354,1,0,0,0,3356,3355,
		1,0,0,0,3357,299,1,0,0,0,3358,3360,3,1340,670,0,3359,3361,3,526,263,0,
		3360,3359,1,0,0,0,3360,3361,1,0,0,0,3361,301,1,0,0,0,3362,3363,5,231,0,
		0,3363,3366,3,300,150,0,3364,3366,1,0,0,0,3365,3362,1,0,0,0,3365,3364,
		1,0,0,0,3366,303,1,0,0,0,3367,3368,5,367,0,0,3368,3372,3,300,150,0,3369,
		3370,5,263,0,0,3370,3372,5,367,0,0,3371,3367,1,0,0,0,3371,3369,1,0,0,0,
		3372,305,1,0,0,0,3373,3376,3,304,152,0,3374,3376,1,0,0,0,3375,3373,1,0,
		0,0,3375,3374,1,0,0,0,3376,307,1,0,0,0,3377,3380,5,289,0,0,3378,3380,1,
		0,0,0,3379,3377,1,0,0,0,3379,3378,1,0,0,0,3380,309,1,0,0,0,3381,3382,5,
		46,0,0,3382,3383,5,345,0,0,3383,3384,3,1340,670,0,3384,3385,3,312,156,
		0,3385,3386,5,247,0,0,3386,3387,3,1358,679,0,3387,3388,3,118,59,0,3388,
		311,1,0,0,0,3389,3390,5,276,0,0,3390,3393,3,1368,684,0,3391,3393,1,0,0,
		0,3392,3389,1,0,0,0,3392,3391,1,0,0,0,3393,313,1,0,0,0,3394,3395,5,192,
		0,0,3395,3398,5,345,0,0,3396,3397,5,221,0,0,3397,3399,5,390,0,0,3398,3396,
		1,0,0,0,3398,3399,1,0,0,0,3399,3400,1,0,0,0,3400,3401,3,1340,670,0,3401,
		315,1,0,0,0,3402,3403,5,46,0,0,3403,3407,5,205,0,0,3404,3405,5,221,0,0,
		3405,3406,5,77,0,0,3406,3408,5,390,0,0,3407,3404,1,0,0,0,3407,3408,1,0,
		0,0,3408,3409,1,0,0,0,3409,3410,3,1340,670,0,3410,3411,3,16,8,0,3411,3412,
		3,318,159,0,3412,317,1,0,0,0,3413,3415,3,320,160,0,3414,3413,1,0,0,0,3415,
		3418,1,0,0,0,3416,3414,1,0,0,0,3416,3417,1,0,0,0,3417,319,1,0,0,0,3418,
		3416,1,0,0,0,3419,3420,5,317,0,0,3420,3427,3,1340,670,0,3421,3422,5,369,
		0,0,3422,3427,3,72,36,0,3423,3424,5,64,0,0,3424,3427,3,72,36,0,3425,3427,
		5,151,0,0,3426,3419,1,0,0,0,3426,3421,1,0,0,0,3426,3423,1,0,0,0,3426,3425,
		1,0,0,0,3427,321,1,0,0,0,3428,3429,5,138,0,0,3429,3430,5,205,0,0,3430,
		3431,3,1340,670,0,3431,3432,5,363,0,0,3432,3433,3,324,162,0,3433,323,1,
		0,0,0,3434,3436,3,326,163,0,3435,3434,1,0,0,0,3436,3439,1,0,0,0,3437,3435,
		1,0,0,0,3437,3438,1,0,0,0,3438,325,1,0,0,0,3439,3437,1,0,0,0,3440,3441,
		5,94,0,0,3441,3442,3,72,36,0,3442,327,1,0,0,0,3443,3444,5,138,0,0,3444,
		3445,5,205,0,0,3445,3446,3,1340,670,0,3446,3447,3,40,20,0,3447,3448,3,
		516,258,0,3448,3449,3,1340,670,0,3449,3548,1,0,0,0,3450,3451,5,138,0,0,
		3451,3452,5,205,0,0,3452,3453,3,1340,670,0,3453,3454,3,40,20,0,3454,3455,
		3,514,257,0,3455,3456,3,524,262,0,3456,3548,1,0,0,0,3457,3458,5,138,0,
		0,3458,3459,5,205,0,0,3459,3460,3,1340,670,0,3460,3461,3,40,20,0,3461,
		3462,5,136,0,0,3462,3463,3,650,325,0,3463,3548,1,0,0,0,3464,3465,5,138,
		0,0,3465,3466,5,205,0,0,3466,3467,3,1340,670,0,3467,3468,3,40,20,0,3468,
		3469,5,41,0,0,3469,3470,5,2,0,0,3470,3471,3,1118,559,0,3471,3472,5,36,
		0,0,3472,3473,3,1118,559,0,3473,3474,5,3,0,0,3474,3548,1,0,0,0,3475,3476,
		5,138,0,0,3476,3477,5,205,0,0,3477,3478,3,1340,670,0,3478,3479,3,40,20,
		0,3479,3480,5,190,0,0,3480,3481,3,1118,559,0,3481,3548,1,0,0,0,3482,3483,
		5,138,0,0,3483,3484,5,205,0,0,3484,3485,3,1340,670,0,3485,3486,3,40,20,
		0,3486,3487,5,212,0,0,3487,3488,3,626,313,0,3488,3548,1,0,0,0,3489,3490,
		5,138,0,0,3490,3491,5,205,0,0,3491,3492,3,1340,670,0,3492,3493,3,40,20,
		0,3493,3494,5,272,0,0,3494,3495,3,688,344,0,3495,3548,1,0,0,0,3496,3497,
		5,138,0,0,3497,3498,5,205,0,0,3498,3499,3,1340,670,0,3499,3500,3,40,20,
		0,3500,3501,5,272,0,0,3501,3502,5,157,0,0,3502,3503,3,524,262,0,3503,3504,
		5,100,0,0,3504,3505,3,1340,670,0,3505,3548,1,0,0,0,3506,3507,5,138,0,0,
		3507,3508,5,205,0,0,3508,3509,3,1340,670,0,3509,3510,3,40,20,0,3510,3511,
		5,272,0,0,3511,3512,5,207,0,0,3512,3513,3,524,262,0,3513,3514,5,100,0,
		0,3514,3515,3,1340,670,0,3515,3548,1,0,0,0,3516,3517,5,138,0,0,3517,3518,
		5,205,0,0,3518,3519,3,1340,670,0,3519,3520,3,40,20,0,3520,3521,5,290,0,
		0,3521,3522,3,626,313,0,3522,3548,1,0,0,0,3523,3524,5,138,0,0,3524,3525,
		5,205,0,0,3525,3526,3,1340,670,0,3526,3527,3,40,20,0,3527,3528,5,443,0,
		0,3528,3529,3,626,313,0,3529,3548,1,0,0,0,3530,3531,5,138,0,0,3531,3532,
		5,205,0,0,3532,3533,3,1340,670,0,3533,3534,3,40,20,0,3534,3535,5,444,0,
		0,3535,3536,5,62,0,0,3536,3537,3,1118,559,0,3537,3538,5,239,0,0,3538,3539,
		3,1340,670,0,3539,3548,1,0,0,0,3540,3541,5,138,0,0,3541,3542,5,205,0,0,
		3542,3543,3,1340,670,0,3543,3544,3,40,20,0,3544,3545,5,354,0,0,3545,3546,
		3,1118,559,0,3546,3548,1,0,0,0,3547,3443,1,0,0,0,3547,3450,1,0,0,0,3547,
		3457,1,0,0,0,3547,3464,1,0,0,0,3547,3475,1,0,0,0,3547,3482,1,0,0,0,3547,
		3489,1,0,0,0,3547,3496,1,0,0,0,3547,3506,1,0,0,0,3547,3516,1,0,0,0,3547,
		3523,1,0,0,0,3547,3530,1,0,0,0,3547,3540,1,0,0,0,3548,329,1,0,0,0,3549,
		3550,5,46,0,0,3550,3551,5,63,0,0,3551,3552,5,175,0,0,3552,3553,5,375,0,
		0,3553,3554,3,1340,670,0,3554,3555,3,336,168,0,3555,3556,3,340,170,0,3556,
		331,1,0,0,0,3557,3558,5,216,0,0,3558,3566,3,300,150,0,3559,3560,5,263,
		0,0,3560,3566,5,216,0,0,3561,3562,5,367,0,0,3562,3566,3,300,150,0,3563,
		3564,5,263,0,0,3564,3566,5,367,0,0,3565,3557,1,0,0,0,3565,3559,1,0,0,0,
		3565,3561,1,0,0,0,3565,3563,1,0,0,0,3566,333,1,0,0,0,3567,3569,3,332,166,
		0,3568,3567,1,0,0,0,3569,3570,1,0,0,0,3570,3568,1,0,0,0,3570,3571,1,0,
		0,0,3571,335,1,0,0,0,3572,3575,3,334,167,0,3573,3575,1,0,0,0,3574,3572,
		1,0,0,0,3574,3573,1,0,0,0,3575,337,1,0,0,0,3576,3577,5,138,0,0,3577,3578,
		5,63,0,0,3578,3579,5,175,0,0,3579,3580,5,375,0,0,3580,3581,3,1340,670,
		0,3581,3582,3,336,168,0,3582,3583,3,344,172,0,3583,3592,1,0,0,0,3584,3585,
		5,138,0,0,3585,3586,5,63,0,0,3586,3587,5,175,0,0,3587,3588,5,375,0,0,3588,
		3589,3,1340,670,0,3589,3590,3,334,167,0,3590,3592,1,0,0,0,3591,3576,1,
		0,0,0,3591,3584,1,0,0,0,3592,339,1,0,0,0,3593,3594,5,274,0,0,3594,3595,
		5,2,0,0,3595,3596,3,342,171,0,3596,3597,5,3,0,0,3597,3600,1,0,0,0,3598,
		3600,1,0,0,0,3599,3593,1,0,0,0,3599,3598,1,0,0,0,3600,341,1,0,0,0,3601,
		3606,3,350,175,0,3602,3603,5,6,0,0,3603,3605,3,350,175,0,3604,3602,1,0,
		0,0,3605,3608,1,0,0,0,3606,3604,1,0,0,0,3606,3607,1,0,0,0,3607,343,1,0,
		0,0,3608,3606,1,0,0,0,3609,3610,5,274,0,0,3610,3611,5,2,0,0,3611,3612,
		3,346,173,0,3612,3613,5,3,0,0,3613,345,1,0,0,0,3614,3619,3,348,174,0,3615,
		3616,5,6,0,0,3616,3618,3,348,174,0,3617,3615,1,0,0,0,3618,3621,1,0,0,0,
		3619,3617,1,0,0,0,3619,3620,1,0,0,0,3620,347,1,0,0,0,3621,3619,1,0,0,0,
		3622,3630,3,350,175,0,3623,3624,5,327,0,0,3624,3630,3,350,175,0,3625,3626,
		5,133,0,0,3626,3630,3,350,175,0,3627,3628,5,192,0,0,3628,3630,3,352,176,
		0,3629,3622,1,0,0,0,3629,3623,1,0,0,0,3629,3625,1,0,0,0,3629,3627,1,0,
		0,0,3630,349,1,0,0,0,3631,3632,3,352,176,0,3632,3633,3,354,177,0,3633,
		351,1,0,0,0,3634,3635,3,1380,690,0,3635,353,1,0,0,0,3636,3637,3,1358,679,
		0,3637,355,1,0,0,0,3638,3639,5,46,0,0,3639,3640,5,325,0,0,3640,3641,3,
		1340,670,0,3641,3642,3,358,179,0,3642,3643,3,362,181,0,3643,3644,5,63,
		0,0,3644,3645,5,175,0,0,3645,3646,5,375,0,0,3646,3647,3,1340,670,0,3647,
		3648,3,340,170,0,3648,3664,1,0,0,0,3649,3650,5,46,0,0,3650,3651,5,325,
		0,0,3651,3652,5,221,0,0,3652,3653,5,77,0,0,3653,3654,5,390,0,0,3654,3655,
		3,1340,670,0,3655,3656,3,358,179,0,3656,3657,3,362,181,0,3657,3658,5,63,
		0,0,3658,3659,5,175,0,0,3659,3660,5,375,0,0,3660,3661,3,1340,670,0,3661,
		3662,3,340,170,0,3662,3664,1,0,0,0,3663,3638,1,0,0,0,3663,3649,1,0,0,0,
		3664,357,1,0,0,0,3665,3666,5,354,0,0,3666,3669,3,1358,679,0,3667,3669,
		1,0,0,0,3668,3665,1,0,0,0,3668,3667,1,0,0,0,3669,359,1,0,0,0,3670,3673,
		5,369,0,0,3671,3674,3,1358,679,0,3672,3674,5,78,0,0,3673,3671,1,0,0,0,
		3673,3672,1,0,0,0,3674,361,1,0,0,0,3675,3678,3,360,180,0,3676,3678,1,0,
		0,0,3677,3675,1,0,0,0,3677,3676,1,0,0,0,3678,363,1,0,0,0,3679,3680,5,138,
		0,0,3680,3681,5,325,0,0,3681,3687,3,1340,670,0,3682,3688,3,344,172,0,3683,
		3685,3,360,180,0,3684,3686,3,344,172,0,3685,3684,1,0,0,0,3685,3686,1,0,
		0,0,3686,3688,1,0,0,0,3687,3682,1,0,0,0,3687,3683,1,0,0,0,3688,365,1,0,
		0,0,3689,3690,5,46,0,0,3690,3691,5,63,0,0,3691,3692,5,92,0,0,3692,3693,
		3,1336,668,0,3693,3694,5,2,0,0,3694,3695,3,176,88,0,3695,3696,5,3,0,0,
		3696,3697,3,238,119,0,3697,3698,5,325,0,0,3698,3699,3,1340,670,0,3699,
		3700,3,340,170,0,3700,3746,1,0,0,0,3701,3702,5,46,0,0,3702,3703,5,63,0,
		0,3703,3704,5,92,0,0,3704,3705,5,221,0,0,3705,3706,5,77,0,0,3706,3707,
		5,390,0,0,3707,3708,3,1336,668,0,3708,3709,5,2,0,0,3709,3710,3,176,88,
		0,3710,3711,5,3,0,0,3711,3712,3,238,119,0,3712,3713,5,325,0,0,3713,3714,
		3,1340,670,0,3714,3715,3,340,170,0,3715,3746,1,0,0,0,3716,3717,5,46,0,
		0,3717,3718,5,63,0,0,3718,3719,5,92,0,0,3719,3720,3,1336,668,0,3720,3721,
		5,279,0,0,3721,3722,5,269,0,0,3722,3723,3,1336,668,0,3723,3724,3,178,89,
		0,3724,3725,3,128,64,0,3725,3726,5,325,0,0,3726,3727,3,1340,670,0,3727,
		3728,3,340,170,0,3728,3746,1,0,0,0,3729,3730,5,46,0,0,3730,3731,5,63,0,
		0,3731,3732,5,92,0,0,3732,3733,5,221,0,0,3733,3734,5,77,0,0,3734,3735,
		5,390,0,0,3735,3736,3,1336,668,0,3736,3737,5,279,0,0,3737,3738,5,269,0,
		0,3738,3739,3,1336,668,0,3739,3740,3,178,89,0,3740,3741,3,128,64,0,3741,
		3742,5,325,0,0,3742,3743,3,1340,670,0,3743,3744,3,340,170,0,3744,3746,
		1,0,0,0,3745,3689,1,0,0,0,3745,3701,1,0,0,0,3745,3716,1,0,0,0,3745,3729,
		1,0,0,0,3746,367,1,0,0,0,3747,3748,5,445,0,0,3748,3749,5,63,0,0,3749,3750,
		5,317,0,0,3750,3751,3,1340,670,0,3751,3752,3,372,186,0,3752,3753,5,64,
		0,0,3753,3754,5,325,0,0,3754,3755,3,1340,670,0,3755,3756,5,71,0,0,3756,
		3757,3,1340,670,0,3757,3758,3,340,170,0,3758,369,1,0,0,0,3759,3760,5,74,
		0,0,3760,3763,5,94,0,0,3761,3763,5,59,0,0,3762,3759,1,0,0,0,3762,3761,
		1,0,0,0,3763,371,1,0,0,0,3764,3765,3,370,185,0,3765,3766,5,2,0,0,3766,
		3767,3,1076,538,0,3767,3768,5,3,0,0,3768,3771,1,0,0,0,3769,3771,1,0,0,
		0,3770,3764,1,0,0,0,3770,3769,1,0,0,0,3771,373,1,0,0,0,3772,3773,5,46,
		0,0,3773,3774,5,99,0,0,3774,3775,5,249,0,0,3775,3776,5,62,0,0,3776,3777,
		3,376,188,0,3777,3778,5,325,0,0,3778,3779,3,1340,670,0,3779,3780,3,340,
		170,0,3780,3794,1,0,0,0,3781,3782,5,46,0,0,3782,3783,5,99,0,0,3783,3784,
		5,249,0,0,3784,3785,5,221,0,0,3785,3786,5,77,0,0,3786,3787,5,390,0,0,3787,
		3788,5,62,0,0,3788,3789,3,376,188,0,3789,3790,5,325,0,0,3790,3791,3,1340,
		670,0,3791,3792,3,340,170,0,3792,3794,1,0,0,0,3793,3772,1,0,0,0,3793,3781,
		1,0,0,0,3794,375,1,0,0,0,3795,3798,3,1368,684,0,3796,3798,5,99,0,0,3797,
		3795,1,0,0,0,3797,3796,1,0,0,0,3798,377,1,0,0,0,3799,3800,5,192,0,0,3800,
		3801,5,99,0,0,3801,3802,5,249,0,0,3802,3803,5,62,0,0,3803,3804,3,376,188,
		0,3804,3805,5,325,0,0,3805,3806,3,1340,670,0,3806,3818,1,0,0,0,3807,3808,
		5,192,0,0,3808,3809,5,99,0,0,3809,3810,5,249,0,0,3810,3811,5,221,0,0,3811,
		3812,5,390,0,0,3812,3813,5,62,0,0,3813,3814,3,376,188,0,3814,3815,5,325,
		0,0,3815,3816,3,1340,670,0,3816,3818,1,0,0,0,3817,3799,1,0,0,0,3817,3807,
		1,0,0,0,3818,379,1,0,0,0,3819,3820,5,138,0,0,3820,3821,5,99,0,0,3821,3822,
		5,249,0,0,3822,3823,5,62,0,0,3823,3824,3,376,188,0,3824,3825,5,325,0,0,
		3825,3826,3,1340,670,0,3826,3827,3,344,172,0,3827,381,1,0,0,0,3828,3829,
		5,46,0,0,3829,3830,5,446,0,0,3830,3831,3,1340,670,0,3831,3832,5,80,0,0,
		3832,3833,3,1336,668,0,3833,3834,3,394,197,0,3834,3835,3,396,198,0,3835,
		3836,3,390,195,0,3836,3837,3,386,193,0,3837,3838,3,388,194,0,3838,383,
		1,0,0,0,3839,3840,5,138,0,0,3840,3841,5,446,0,0,3841,3842,3,1340,670,0,
		3842,3843,5,80,0,0,3843,3844,3,1336,668,0,3844,3845,3,392,196,0,3845,3846,
		3,386,193,0,3846,3847,3,388,194,0,3847,385,1,0,0,0,3848,3849,5,100,0,0,
		3849,3850,5,2,0,0,3850,3851,3,1162,581,0,3851,3852,5,3,0,0,3852,3855,1,
		0,0,0,3853,3855,1,0,0,0,3854,3848,1,0,0,0,3854,3853,1,0,0,0,3855,387,1,
		0,0,0,3856,3857,5,105,0,0,3857,3858,5,42,0,0,3858,3859,5,2,0,0,3859,3860,
		3,1162,581,0,3860,3861,5,3,0,0,3861,3864,1,0,0,0,3862,3864,1,0,0,0,3863,
		3856,1,0,0,0,3863,3862,1,0,0,0,3864,389,1,0,0,0,3865,3866,5,94,0,0,3866,
		3869,3,1370,685,0,3867,3869,1,0,0,0,3868,3865,1,0,0,0,3868,3867,1,0,0,
		0,3869,391,1,0,0,0,3870,3871,5,94,0,0,3871,3874,3,1370,685,0,3872,3874,
		1,0,0,0,3873,3870,1,0,0,0,3873,3872,1,0,0,0,3874,393,1,0,0,0,3875,3876,
		5,36,0,0,3876,3879,3,1382,691,0,3877,3879,1,0,0,0,3878,3875,1,0,0,0,3878,
		3877,1,0,0,0,3879,395,1,0,0,0,3880,3881,5,62,0,0,3881,3884,3,398,199,0,
		3882,3884,1,0,0,0,3883,3880,1,0,0,0,3883,3882,1,0,0,0,3884,397,1,0,0,0,
		3885,3886,7,17,0,0,3886,399,1,0,0,0,3887,3888,5,46,0,0,3888,3889,5,131,
		0,0,3889,3890,5,447,0,0,3890,3891,3,1340,670,0,3891,3892,5,354,0,0,3892,
		3893,3,402,201,0,3893,3894,5,216,0,0,3894,3895,3,300,150,0,3895,401,1,
		0,0,0,3896,3897,7,18,0,0,3897,403,1,0,0,0,3898,3899,5,46,0,0,3899,3900,
		3,618,309,0,3900,3901,5,351,0,0,3901,3902,3,1340,670,0,3902,3903,3,406,
		203,0,3903,3904,3,408,204,0,3904,3905,5,80,0,0,3905,3906,3,1336,668,0,
		3906,3907,3,412,206,0,3907,3908,3,424,212,0,3908,3909,3,430,215,0,3909,
		3910,5,203,0,0,3910,3911,3,432,216,0,3911,3912,3,1346,673,0,3912,3913,
		5,2,0,0,3913,3914,3,434,217,0,3914,3915,5,3,0,0,3915,3938,1,0,0,0,3916,
		3917,5,46,0,0,3917,3918,5,45,0,0,3918,3919,5,351,0,0,3919,3920,3,1340,
		670,0,3920,3921,5,135,0,0,3921,3922,3,408,204,0,3922,3923,5,80,0,0,3923,
		3924,3,1336,668,0,3924,3925,3,438,219,0,3925,3926,3,440,220,0,3926,3927,
		5,62,0,0,3927,3928,5,193,0,0,3928,3929,5,408,0,0,3929,3930,3,430,215,0,
		3930,3931,5,203,0,0,3931,3932,3,432,216,0,3932,3933,3,1346,673,0,3933,
		3934,5,2,0,0,3934,3935,3,434,217,0,3935,3936,5,3,0,0,3936,3938,1,0,0,0,
		3937,3898,1,0,0,0,3937,3916,1,0,0,0,3938,405,1,0,0,0,3939,3944,5,146,0,
		0,3940,3944,5,135,0,0,3941,3942,5,234,0,0,3942,3944,5,269,0,0,3943,3939,
		1,0,0,0,3943,3940,1,0,0,0,3943,3941,1,0,0,0,3944,407,1,0,0,0,3945,3950,
		3,410,205,0,3946,3947,5,82,0,0,3947,3949,3,410,205,0,3948,3946,1,0,0,0,
		3949,3952,1,0,0,0,3950,3948,1,0,0,0,3950,3951,1,0,0,0,3951,409,1,0,0,0,
		3952,3950,1,0,0,0,3953,3961,5,233,0,0,3954,3961,5,183,0,0,3955,3961,5,
		363,0,0,3956,3957,5,363,0,0,3957,3958,5,269,0,0,3958,3961,3,216,108,0,
		3959,3961,5,352,0,0,3960,3953,1,0,0,0,3960,3954,1,0,0,0,3960,3955,1,0,
		0,0,3960,3956,1,0,0,0,3960,3959,1,0,0,0,3961,411,1,0,0,0,3962,3963,5,448,
		0,0,3963,3966,3,414,207,0,3964,3966,1,0,0,0,3965,3962,1,0,0,0,3965,3964,
		1,0,0,0,3966,413,1,0,0,0,3967,3969,3,416,208,0,3968,3967,1,0,0,0,3969,
		3970,1,0,0,0,3970,3968,1,0,0,0,3970,3971,1,0,0,0,3971,415,1,0,0,0,3972,
		3973,3,418,209,0,3973,3974,3,420,210,0,3974,3975,3,834,417,0,3975,3976,
		3,422,211,0,3976,417,1,0,0,0,3977,3978,7,19,0,0,3978,419,1,0,0,0,3979,
		3980,7,20,0,0,3980,421,1,0,0,0,3981,3982,3,1372,686,0,3982,423,1,0,0,0,
		3983,3984,5,62,0,0,3984,3985,3,426,213,0,3985,3986,3,428,214,0,3986,3989,
		1,0,0,0,3987,3989,1,0,0,0,3988,3983,1,0,0,0,3988,3987,1,0,0,0,3989,425,
		1,0,0,0,3990,3993,5,193,0,0,3991,3993,1,0,0,0,3992,3990,1,0,0,0,3992,3991,
		1,0,0,0,3993,427,1,0,0,0,3994,3995,7,21,0,0,3995,429,1,0,0,0,3996,3997,
		5,102,0,0,3997,3998,5,2,0,0,3998,3999,3,1162,581,0,3999,4000,5,3,0,0,4000,
		4003,1,0,0,0,4001,4003,1,0,0,0,4002,3996,1,0,0,0,4002,4001,1,0,0,0,4003,
		431,1,0,0,0,4004,4005,7,22,0,0,4005,433,1,0,0,0,4006,4009,3,436,218,0,
		4007,4009,1,0,0,0,4008,4006,1,0,0,0,4008,4007,1,0,0,0,4009,4014,1,0,0,
		0,4010,4011,5,6,0,0,4011,4013,3,436,218,0,4012,4010,1,0,0,0,4013,4016,
		1,0,0,0,4014,4012,1,0,0,0,4014,4015,1,0,0,0,4015,435,1,0,0,0,4016,4014,
		1,0,0,0,4017,4022,3,1356,678,0,4018,4022,3,1354,677,0,4019,4022,3,1358,
		679,0,4020,4022,3,1380,690,0,4021,4017,1,0,0,0,4021,4018,1,0,0,0,4021,
		4019,1,0,0,0,4021,4020,1,0,0,0,4022,437,1,0,0,0,4023,4024,5,64,0,0,4024,
		4027,3,1336,668,0,4025,4027,1,0,0,0,4026,4023,1,0,0,0,4026,4025,1,0,0,
		0,4027,439,1,0,0,0,4028,4030,3,442,221,0,4029,4028,1,0,0,0,4030,4033,1,
		0,0,0,4031,4029,1,0,0,0,4031,4032,1,0,0,0,4032,441,1,0,0,0,4033,4031,1,
		0,0,0,4034,4035,5,77,0,0,4035,4046,5,54,0,0,4036,4046,5,54,0,0,4037,4038,
		5,69,0,0,4038,4046,5,222,0,0,4039,4040,5,69,0,0,4040,4046,5,181,0,0,4041,
		4042,5,77,0,0,4042,4046,5,365,0,0,4043,4044,5,263,0,0,4044,4046,5,229,
		0,0,4045,4034,1,0,0,0,4045,4036,1,0,0,0,4045,4037,1,0,0,0,4045,4039,1,
		0,0,0,4045,4041,1,0,0,0,4045,4043,1,0,0,0,4046,443,1,0,0,0,4047,4048,5,
		46,0,0,4048,4049,5,199,0,0,4049,4050,5,351,0,0,4050,4051,3,1340,670,0,
		4051,4052,5,80,0,0,4052,4053,3,1380,690,0,4053,4054,5,203,0,0,4054,4055,
		3,432,216,0,4055,4056,3,1346,673,0,4056,4057,5,2,0,0,4057,4058,5,3,0,0,
		4058,4074,1,0,0,0,4059,4060,5,46,0,0,4060,4061,5,199,0,0,4061,4062,5,351,
		0,0,4062,4063,3,1340,670,0,4063,4064,5,80,0,0,4064,4065,3,1380,690,0,4065,
		4066,5,102,0,0,4066,4067,3,446,223,0,4067,4068,5,203,0,0,4068,4069,3,432,
		216,0,4069,4070,3,1346,673,0,4070,4071,5,2,0,0,4071,4072,5,3,0,0,4072,
		4074,1,0,0,0,4073,4047,1,0,0,0,4073,4059,1,0,0,0,4074,445,1,0,0,0,4075,
		4080,3,448,224,0,4076,4077,5,33,0,0,4077,4079,3,448,224,0,4078,4076,1,
		0,0,0,4079,4082,1,0,0,0,4080,4078,1,0,0,0,4080,4081,1,0,0,0,4081,447,1,
		0,0,0,4082,4080,1,0,0,0,4083,4084,3,1372,686,0,4084,4085,5,68,0,0,4085,
		4086,5,2,0,0,4086,4087,3,450,225,0,4087,4088,5,3,0,0,4088,449,1,0,0,0,
		4089,4094,3,1358,679,0,4090,4091,5,6,0,0,4091,4093,3,1358,679,0,4092,4090,
		1,0,0,0,4093,4096,1,0,0,0,4094,4092,1,0,0,0,4094,4095,1,0,0,0,4095,451,
		1,0,0,0,4096,4094,1,0,0,0,4097,4098,5,138,0,0,4098,4099,5,199,0,0,4099,
		4100,5,351,0,0,4100,4101,3,1340,670,0,4101,4102,3,454,227,0,4102,453,1,
		0,0,0,4103,4110,5,194,0,0,4104,4105,5,194,0,0,4105,4110,5,306,0,0,4106,
		4107,5,194,0,0,4107,4110,5,139,0,0,4108,4110,5,187,0,0,4109,4103,1,0,0,
		0,4109,4104,1,0,0,0,4109,4106,1,0,0,0,4109,4108,1,0,0,0,4110,455,1,0,0,
		0,4111,4112,5,46,0,0,4112,4113,5,140,0,0,4113,4114,3,524,262,0,4114,4115,
		5,42,0,0,4115,4116,5,2,0,0,4116,4117,3,1162,581,0,4117,4118,5,3,0,0,4118,
		4119,3,440,220,0,4119,457,1,0,0,0,4120,4121,5,46,0,0,4121,4122,3,618,309,
		0,4122,4123,5,136,0,0,4123,4124,3,1346,673,0,4124,4125,3,646,323,0,4125,
		4126,3,460,230,0,4126,4227,1,0,0,0,4127,4128,5,46,0,0,4128,4129,3,618,
		309,0,4129,4130,5,136,0,0,4130,4131,3,1346,673,0,4131,4132,3,468,234,0,
		4132,4227,1,0,0,0,4133,4134,5,46,0,0,4134,4135,5,272,0,0,4135,4136,3,684,
		342,0,4136,4137,3,460,230,0,4137,4227,1,0,0,0,4138,4139,5,46,0,0,4139,
		4140,5,354,0,0,4140,4141,3,524,262,0,4141,4142,3,460,230,0,4142,4227,1,
		0,0,0,4143,4144,5,46,0,0,4144,4145,5,354,0,0,4145,4227,3,524,262,0,4146,
		4147,5,46,0,0,4147,4148,5,354,0,0,4148,4149,3,524,262,0,4149,4150,5,36,
		0,0,4150,4151,5,2,0,0,4151,4152,3,1098,549,0,4152,4153,5,3,0,0,4153,4227,
		1,0,0,0,4154,4155,5,46,0,0,4155,4156,5,354,0,0,4156,4157,3,524,262,0,4157,
		4158,5,36,0,0,4158,4159,5,197,0,0,4159,4160,5,2,0,0,4160,4161,3,474,237,
		0,4161,4162,5,3,0,0,4162,4227,1,0,0,0,4163,4164,5,46,0,0,4164,4165,5,354,
		0,0,4165,4166,3,524,262,0,4166,4167,5,36,0,0,4167,4168,5,293,0,0,4168,
		4169,3,460,230,0,4169,4227,1,0,0,0,4170,4171,5,46,0,0,4171,4172,5,349,
		0,0,4172,4173,5,319,0,0,4173,4174,5,277,0,0,4174,4175,3,524,262,0,4175,
		4176,3,460,230,0,4176,4227,1,0,0,0,4177,4178,5,46,0,0,4178,4179,5,349,
		0,0,4179,4180,5,319,0,0,4180,4181,5,186,0,0,4181,4182,3,524,262,0,4182,
		4183,3,460,230,0,4183,4227,1,0,0,0,4184,4185,5,46,0,0,4185,4186,5,349,
		0,0,4186,4187,5,319,0,0,4187,4188,5,347,0,0,4188,4189,3,524,262,0,4189,
		4190,3,460,230,0,4190,4227,1,0,0,0,4191,4192,5,46,0,0,4192,4193,5,349,
		0,0,4193,4194,5,319,0,0,4194,4195,5,164,0,0,4195,4196,3,524,262,0,4196,
		4197,3,460,230,0,4197,4227,1,0,0,0,4198,4199,5,46,0,0,4199,4200,5,108,
		0,0,4200,4201,3,524,262,0,4201,4202,3,460,230,0,4202,4227,1,0,0,0,4203,
		4204,5,46,0,0,4204,4205,5,108,0,0,4205,4206,5,221,0,0,4206,4207,5,77,0,
		0,4207,4208,5,390,0,0,4208,4209,3,524,262,0,4209,4210,3,460,230,0,4210,
		4227,1,0,0,0,4211,4212,5,46,0,0,4212,4213,5,108,0,0,4213,4214,3,524,262,
		0,4214,4215,5,64,0,0,4215,4216,3,524,262,0,4216,4227,1,0,0,0,4217,4218,
		5,46,0,0,4218,4219,5,108,0,0,4219,4220,5,221,0,0,4220,4221,5,77,0,0,4221,
		4222,5,390,0,0,4222,4223,3,524,262,0,4223,4224,5,64,0,0,4224,4225,3,524,
		262,0,4225,4227,1,0,0,0,4226,4120,1,0,0,0,4226,4127,1,0,0,0,4226,4133,
		1,0,0,0,4226,4138,1,0,0,0,4226,4143,1,0,0,0,4226,4146,1,0,0,0,4226,4154,
		1,0,0,0,4226,4163,1,0,0,0,4226,4170,1,0,0,0,4226,4177,1,0,0,0,4226,4184,
		1,0,0,0,4226,4191,1,0,0,0,4226,4198,1,0,0,0,4226,4203,1,0,0,0,4226,4211,
		1,0,0,0,4226,4217,1,0,0,0,4227,459,1,0,0,0,4228,4229,5,2,0,0,4229,4230,
		3,462,231,0,4230,4231,5,3,0,0,4231,461,1,0,0,0,4232,4237,3,464,232,0,4233,
		4234,5,6,0,0,4234,4236,3,464,232,0,4235,4233,1,0,0,0,4236,4239,1,0,0,0,
		4237,4235,1,0,0,0,4237,4238,1,0,0,0,4238,463,1,0,0,0,4239,4237,1,0,0,0,
		4240,4243,3,1380,690,0,4241,4242,5,10,0,0,4242,4244,3,466,233,0,4243,4241,
		1,0,0,0,4243,4244,1,0,0,0,4244,465,1,0,0,0,4245,4252,3,640,320,0,4246,
		4252,3,1392,696,0,4247,4252,3,1276,638,0,4248,4252,3,292,146,0,4249,4252,
		3,1358,679,0,4250,4252,5,401,0,0,4251,4245,1,0,0,0,4251,4246,1,0,0,0,4251,
		4247,1,0,0,0,4251,4248,1,0,0,0,4251,4249,1,0,0,0,4251,4250,1,0,0,0,4252,
		467,1,0,0,0,4253,4254,5,2,0,0,4254,4255,3,470,235,0,4255,4256,5,3,0,0,
		4256,469,1,0,0,0,4257,4262,3,472,236,0,4258,4259,5,6,0,0,4259,4261,3,472,
		236,0,4260,4258,1,0,0,0,4261,4264,1,0,0,0,4262,4260,1,0,0,0,4262,4263,
		1,0,0,0,4263,471,1,0,0,0,4264,4262,1,0,0,0,4265,4266,3,1382,691,0,4266,
		4267,5,10,0,0,4267,4268,3,466,233,0,4268,473,1,0,0,0,4269,4272,3,476,238,
		0,4270,4272,1,0,0,0,4271,4269,1,0,0,0,4271,4270,1,0,0,0,4272,475,1,0,0,
		0,4273,4278,3,1358,679,0,4274,4275,5,6,0,0,4275,4277,3,1358,679,0,4276,
		4274,1,0,0,0,4277,4280,1,0,0,0,4278,4276,1,0,0,0,4278,4279,1,0,0,0,4279,
		477,1,0,0,0,4280,4278,1,0,0,0,4281,4282,5,138,0,0,4282,4283,5,354,0,0,
		4283,4284,3,524,262,0,4284,4285,5,133,0,0,4285,4286,5,451,0,0,4286,4287,
		3,480,240,0,4287,4288,3,1358,679,0,4288,4319,1,0,0,0,4289,4290,5,138,0,
		0,4290,4291,5,354,0,0,4291,4292,3,524,262,0,4292,4293,5,133,0,0,4293,4294,
		5,451,0,0,4294,4295,3,480,240,0,4295,4296,3,1358,679,0,4296,4297,5,146,
		0,0,4297,4298,3,1358,679,0,4298,4319,1,0,0,0,4299,4300,5,138,0,0,4300,
		4301,5,354,0,0,4301,4302,3,524,262,0,4302,4303,5,133,0,0,4303,4304,5,451,
		0,0,4304,4305,3,480,240,0,4305,4306,3,1358,679,0,4306,4307,5,135,0,0,4307,
		4308,3,1358,679,0,4308,4319,1,0,0,0,4309,4310,5,138,0,0,4310,4311,5,354,
		0,0,4311,4312,3,524,262,0,4312,4313,5,303,0,0,4313,4314,5,451,0,0,4314,
		4315,3,1358,679,0,4315,4316,5,94,0,0,4316,4317,3,1358,679,0,4317,4319,
		1,0,0,0,4318,4281,1,0,0,0,4318,4289,1,0,0,0,4318,4299,1,0,0,0,4318,4309,
		1,0,0,0,4319,479,1,0,0,0,4320,4321,5,221,0,0,4321,4322,5,77,0,0,4322,4325,
		5,390,0,0,4323,4325,1,0,0,0,4324,4320,1,0,0,0,4324,4323,1,0,0,0,4325,481,
		1,0,0,0,4326,4327,5,46,0,0,4327,4328,5,272,0,0,4328,4329,5,157,0,0,4329,
		4330,3,524,262,0,4330,4331,3,488,244,0,4331,4332,5,62,0,0,4332,4333,5,
		354,0,0,4333,4334,3,1118,559,0,4334,4335,5,100,0,0,4335,4336,3,1340,670,
		0,4336,4337,3,490,245,0,4337,4338,5,36,0,0,4338,4339,3,484,242,0,4339,
		483,1,0,0,0,4340,4345,3,486,243,0,4341,4342,5,6,0,0,4342,4344,3,486,243,
		0,4343,4341,1,0,0,0,4344,4347,1,0,0,0,4345,4343,1,0,0,0,4345,4346,1,0,
		0,0,4346,485,1,0,0,0,4347,4345,1,0,0,0,4348,4349,5,272,0,0,4349,4350,3,
		1356,678,0,4350,4351,3,684,342,0,4351,4352,3,492,246,0,4352,4353,3,494,
		247,0,4353,4374,1,0,0,0,4354,4355,5,272,0,0,4355,4356,3,1356,678,0,4356,
		4357,3,688,344,0,4357,4358,3,492,246,0,4358,4359,3,494,247,0,4359,4374,
		1,0,0,0,4360,4361,5,212,0,0,4361,4362,3,1356,678,0,4362,4363,3,626,313,
		0,4363,4374,1,0,0,0,4364,4365,5,212,0,0,4365,4366,3,1356,678,0,4366,4367,
		5,2,0,0,4367,4368,3,1286,643,0,4368,4369,5,3,0,0,4369,4370,3,626,313,0,
		4370,4374,1,0,0,0,4371,4372,5,339,0,0,4372,4374,3,1118,559,0,4373,4348,
		1,0,0,0,4373,4354,1,0,0,0,4373,4360,1,0,0,0,4373,4364,1,0,0,0,4373,4371,
		1,0,0,0,4374,487,1,0,0,0,4375,4378,5,53,0,0,4376,4378,1,0,0,0,4377,4375,
		1,0,0,0,4377,4376,1,0,0,0,4378,489,1,0,0,0,4379,4380,5,207,0,0,4380,4383,
		3,524,262,0,4381,4383,1,0,0,0,4382,4379,1,0,0,0,4382,4381,1,0,0,0,4383,
		491,1,0,0,0,4384,4385,5,62,0,0,4385,4392,5,319,0,0,4386,4387,5,62,0,0,
		4387,4388,5,83,0,0,4388,4389,5,148,0,0,4389,4392,3,524,262,0,4390,4392,
		1,0,0,0,4391,4384,1,0,0,0,4391,4386,1,0,0,0,4391,4390,1,0,0,0,4392,493,
		1,0,0,0,4393,4396,5,296,0,0,4394,4396,1,0,0,0,4395,4393,1,0,0,0,4395,4394,
		1,0,0,0,4396,495,1,0,0,0,4397,4398,5,46,0,0,4398,4399,5,272,0,0,4399,4400,
		5,207,0,0,4400,4401,3,524,262,0,4401,4402,5,100,0,0,4402,4403,3,1340,670,
		0,4403,497,1,0,0,0,4404,4405,5,138,0,0,4405,4406,5,272,0,0,4406,4407,5,
		207,0,0,4407,4408,3,524,262,0,4408,4409,5,100,0,0,4409,4410,3,1340,670,
		0,4410,4411,5,133,0,0,4411,4412,3,484,242,0,4412,4423,1,0,0,0,4413,4414,
		5,138,0,0,4414,4415,5,272,0,0,4415,4416,5,207,0,0,4416,4417,3,524,262,
		0,4417,4418,5,100,0,0,4418,4419,3,1340,670,0,4419,4420,5,192,0,0,4420,
		4421,3,500,250,0,4421,4423,1,0,0,0,4422,4404,1,0,0,0,4422,4413,1,0,0,0,
		4423,499,1,0,0,0,4424,4429,3,502,251,0,4425,4426,5,6,0,0,4426,4428,3,502,
		251,0,4427,4425,1,0,0,0,4428,4431,1,0,0,0,4429,4427,1,0,0,0,4429,4430,
		1,0,0,0,4430,501,1,0,0,0,4431,4429,1,0,0,0,4432,4433,5,272,0,0,4433,4434,
		3,1356,678,0,4434,4435,5,2,0,0,4435,4436,3,1286,643,0,4436,4437,5,3,0,
		0,4437,4445,1,0,0,0,4438,4439,5,212,0,0,4439,4440,3,1356,678,0,4440,4441,
		5,2,0,0,4441,4442,3,1286,643,0,4442,4443,5,3,0,0,4443,4445,1,0,0,0,4444,
		4432,1,0,0,0,4444,4438,1,0,0,0,4445,503,1,0,0,0,4446,4447,5,192,0,0,4447,
		4448,5,272,0,0,4448,4449,5,157,0,0,4449,4450,3,524,262,0,4450,4451,5,100,
		0,0,4451,4452,3,1340,670,0,4452,4453,3,108,54,0,4453,4465,1,0,0,0,4454,
		4455,5,192,0,0,4455,4456,5,272,0,0,4456,4457,5,157,0,0,4457,4458,5,221,
		0,0,4458,4459,5,390,0,0,4459,4460,3,524,262,0,4460,4461,5,100,0,0,4461,
		4462,3,1340,670,0,4462,4463,3,108,54,0,4463,4465,1,0,0,0,4464,4446,1,0,
		0,0,4464,4454,1,0,0,0,4465,505,1,0,0,0,4466,4467,5,192,0,0,4467,4468,5,
		272,0,0,4468,4469,5,207,0,0,4469,4470,3,524,262,0,4470,4471,5,100,0,0,
		4471,4472,3,1340,670,0,4472,4473,3,108,54,0,4473,4485,1,0,0,0,4474,4475,
		5,192,0,0,4475,4476,5,272,0,0,4476,4477,5,207,0,0,4477,4478,5,221,0,0,
		4478,4479,5,390,0,0,4479,4480,3,524,262,0,4480,4481,5,100,0,0,4481,4482,
		3,1340,670,0,4482,4483,3,108,54,0,4483,4485,1,0,0,0,4484,4466,1,0,0,0,
		4484,4474,1,0,0,0,4485,507,1,0,0,0,4486,4487,5,192,0,0,4487,4488,5,275,
		0,0,4488,4489,5,148,0,0,4489,4490,3,1370,685,0,4490,4491,3,108,54,0,4491,
		509,1,0,0,0,4492,4493,5,295,0,0,4493,4494,5,275,0,0,4494,4495,5,148,0,
		0,4495,4496,3,1370,685,0,4496,4497,5,94,0,0,4497,4498,3,1368,684,0,4498,
		511,1,0,0,0,4499,4500,5,192,0,0,4500,4501,3,514,257,0,4501,4502,5,221,
		0,0,4502,4503,5,390,0,0,4503,4504,3,522,261,0,4504,4505,3,108,54,0,4505,
		4578,1,0,0,0,4506,4507,5,192,0,0,4507,4508,3,514,257,0,4508,4509,3,522,
		261,0,4509,4510,3,108,54,0,4510,4578,1,0,0,0,4511,4512,5,192,0,0,4512,
		4513,3,518,259,0,4513,4514,5,221,0,0,4514,4515,5,390,0,0,4515,4516,3,1338,
		669,0,4516,4517,3,108,54,0,4517,4578,1,0,0,0,4518,4519,5,192,0,0,4519,
		4520,3,518,259,0,4520,4521,3,1338,669,0,4521,4522,3,108,54,0,4522,4578,
		1,0,0,0,4523,4524,5,192,0,0,4524,4525,3,520,260,0,4525,4526,3,1340,670,
		0,4526,4527,5,80,0,0,4527,4528,3,524,262,0,4528,4529,3,108,54,0,4529,4578,
		1,0,0,0,4530,4531,5,192,0,0,4531,4532,3,520,260,0,4532,4533,5,221,0,0,
		4533,4534,5,390,0,0,4534,4535,3,1340,670,0,4535,4536,5,80,0,0,4536,4537,
		3,524,262,0,4537,4538,3,108,54,0,4538,4578,1,0,0,0,4539,4540,5,192,0,0,
		4540,4541,5,354,0,0,4541,4542,3,528,264,0,4542,4543,3,108,54,0,4543,4578,
		1,0,0,0,4544,4545,5,192,0,0,4545,4546,5,354,0,0,4546,4547,5,221,0,0,4547,
		4548,5,390,0,0,4548,4549,3,528,264,0,4549,4550,3,108,54,0,4550,4578,1,
		0,0,0,4551,4552,5,192,0,0,4552,4553,5,190,0,0,4553,4554,3,528,264,0,4554,
		4555,3,108,54,0,4555,4578,1,0,0,0,4556,4557,5,192,0,0,4557,4558,5,190,
		0,0,4558,4559,5,221,0,0,4559,4560,5,390,0,0,4560,4561,3,528,264,0,4561,
		4562,3,108,54,0,4562,4578,1,0,0,0,4563,4564,5,192,0,0,4564,4565,5,227,
		0,0,4565,4566,5,109,0,0,4566,4567,3,522,261,0,4567,4568,3,108,54,0,4568,
		4578,1,0,0,0,4569,4570,5,192,0,0,4570,4571,5,227,0,0,4571,4572,5,109,0,
		0,4572,4573,5,221,0,0,4573,4574,5,390,0,0,4574,4575,3,522,261,0,4575,4576,
		3,108,54,0,4576,4578,1,0,0,0,4577,4499,1,0,0,0,4577,4506,1,0,0,0,4577,
		4511,1,0,0,0,4577,4518,1,0,0,0,4577,4523,1,0,0,0,4577,4530,1,0,0,0,4577,
		4539,1,0,0,0,4577,4544,1,0,0,0,4577,4551,1,0,0,0,4577,4556,1,0,0,0,4577,
		4563,1,0,0,0,4577,4569,1,0,0,0,4578,513,1,0,0,0,4579,4603,5,92,0,0,4580,
		4603,5,322,0,0,4581,4603,5,370,0,0,4582,4583,5,252,0,0,4583,4603,5,370,
		0,0,4584,4603,5,227,0,0,4585,4586,5,63,0,0,4586,4603,5,92,0,0,4587,4603,
		5,108,0,0,4588,4603,5,169,0,0,4589,4603,5,336,0,0,4590,4591,5,349,0,0,
		4591,4592,5,319,0,0,4592,4603,5,277,0,0,4593,4594,5,349,0,0,4594,4595,
		5,319,0,0,4595,4603,5,186,0,0,4596,4597,5,349,0,0,4597,4598,5,319,0,0,
		4598,4603,5,347,0,0,4599,4600,5,349,0,0,4600,4601,5,319,0,0,4601,4603,
		5,164,0,0,4602,4579,1,0,0,0,4602,4580,1,0,0,0,4602,4581,1,0,0,0,4602,4582,
		1,0,0,0,4602,4584,1,0,0,0,4602,4585,1,0,0,0,4602,4587,1,0,0,0,4602,4588,
		1,0,0,0,4602,4589,1,0,0,0,4602,4590,1,0,0,0,4602,4593,1,0,0,0,4602,4596,
		1,0,0,0,4602,4599,1,0,0,0,4603,515,1,0,0,0,4604,4610,3,518,259,0,4605,
		4610,5,176,0,0,4606,4610,5,312,0,0,4607,4610,5,452,0,0,4608,4610,5,345,
		0,0,4609,4604,1,0,0,0,4609,4605,1,0,0,0,4609,4606,1,0,0,0,4609,4607,1,
		0,0,0,4609,4608,1,0,0,0,4610,517,1,0,0,0,4611,4612,5,131,0,0,4612,4626,
		5,447,0,0,4613,4614,5,199,0,0,4614,4626,5,351,0,0,4615,4626,5,205,0,0,
		4616,4617,5,63,0,0,4617,4618,5,175,0,0,4618,4626,5,375,0,0,4619,4620,3,
		308,154,0,4620,4621,5,239,0,0,4621,4626,1,0,0,0,4622,4626,5,453,0,0,4623,
		4626,5,317,0,0,4624,4626,5,325,0,0,4625,4611,1,0,0,0,4625,4613,1,0,0,0,
		4625,4615,1,0,0,0,4625,4616,1,0,0,0,4625,4619,1,0,0,0,4625,4622,1,0,0,
		0,4625,4623,1,0,0,0,4625,4624,1,0,0,0,4626,519,1,0,0,0,4627,4628,7,23,
		0,0,4628,521,1,0,0,0,4629,4634,3,524,262,0,4630,4631,5,6,0,0,4631,4633,
		3,524,262,0,4632,4630,1,0,0,0,4633,4636,1,0,0,0,4634,4632,1,0,0,0,4634,
		4635,1,0,0,0,4635,523,1,0,0,0,4636,4634,1,0,0,0,4637,4639,3,1372,686,0,
		4638,4640,3,526,263,0,4639,4638,1,0,0,0,4639,4640,1,0,0,0,4640,525,1,0,
		0,0,4641,4642,5,11,0,0,4642,4644,3,1342,671,0,4643,4641,1,0,0,0,4644,4645,
		1,0,0,0,4645,4643,1,0,0,0,4645,4646,1,0,0,0,4646,527,1,0,0,0,4647,4652,
		3,1118,559,0,4648,4649,5,6,0,0,4649,4651,3,1118,559,0,4650,4648,1,0,0,
		0,4651,4654,1,0,0,0,4652,4650,1,0,0,0,4652,4653,1,0,0,0,4653,529,1,0,0,
		0,4654,4652,1,0,0,0,4655,4656,5,352,0,0,4656,4657,3,988,494,0,4657,4658,
		3,1076,538,0,4658,4659,3,532,266,0,4659,4660,3,108,54,0,4660,531,1,0,0,
		0,4661,4662,5,168,0,0,4662,4667,5,220,0,0,4663,4664,5,308,0,0,4664,4667,
		5,220,0,0,4665,4667,1,0,0,0,4666,4661,1,0,0,0,4666,4663,1,0,0,0,4666,4665,
		1,0,0,0,4667,533,1,0,0,0,4668,4669,5,160,0,0,4669,4670,5,80,0,0,4670,4671,
		3,514,257,0,4671,4672,3,524,262,0,4672,4673,5,116,0,0,4673,4674,3,536,
		268,0,4674,4816,1,0,0,0,4675,4676,5,160,0,0,4676,4677,5,80,0,0,4677,4678,
		5,44,0,0,4678,4679,3,524,262,0,4679,4680,5,116,0,0,4680,4681,3,536,268,
		0,4681,4816,1,0,0,0,4682,4683,5,160,0,0,4683,4684,5,80,0,0,4684,4685,3,
		516,258,0,4685,4686,3,1340,670,0,4686,4687,5,116,0,0,4687,4688,3,536,268,
		0,4688,4816,1,0,0,0,4689,4690,5,160,0,0,4690,4691,5,80,0,0,4691,4692,5,
		354,0,0,4692,4693,3,1118,559,0,4693,4694,5,116,0,0,4694,4695,3,536,268,
		0,4695,4816,1,0,0,0,4696,4697,5,160,0,0,4697,4698,5,80,0,0,4698,4699,5,
		190,0,0,4699,4700,3,1118,559,0,4700,4701,5,116,0,0,4701,4702,3,536,268,
		0,4702,4816,1,0,0,0,4703,4704,5,160,0,0,4704,4705,5,80,0,0,4705,4706,5,
		136,0,0,4706,4707,3,650,325,0,4707,4708,5,116,0,0,4708,4709,3,536,268,
		0,4709,4816,1,0,0,0,4710,4711,5,160,0,0,4711,4712,5,80,0,0,4712,4713,5,
		212,0,0,4713,4714,3,626,313,0,4714,4715,5,116,0,0,4715,4716,3,536,268,
		0,4716,4816,1,0,0,0,4717,4718,5,160,0,0,4718,4719,5,80,0,0,4719,4720,5,
		272,0,0,4720,4721,3,688,344,0,4721,4722,5,116,0,0,4722,4723,3,536,268,
		0,4723,4816,1,0,0,0,4724,4725,5,160,0,0,4725,4726,5,80,0,0,4726,4727,5,
		45,0,0,4727,4728,3,1340,670,0,4728,4729,5,80,0,0,4729,4730,3,524,262,0,
		4730,4731,5,116,0,0,4731,4732,3,536,268,0,4732,4816,1,0,0,0,4733,4734,
		5,160,0,0,4734,4735,5,80,0,0,4735,4736,5,45,0,0,4736,4737,3,1340,670,0,
		4737,4738,5,80,0,0,4738,4739,5,190,0,0,4739,4740,3,524,262,0,4740,4741,
		5,116,0,0,4741,4742,3,536,268,0,4742,4816,1,0,0,0,4743,4744,5,160,0,0,
		4744,4745,5,80,0,0,4745,4746,3,520,260,0,4746,4747,3,1340,670,0,4747,4748,
		5,80,0,0,4748,4749,3,524,262,0,4749,4750,5,116,0,0,4750,4751,3,536,268,
		0,4751,4816,1,0,0,0,4752,4753,5,160,0,0,4753,4754,5,80,0,0,4754,4755,5,
		290,0,0,4755,4756,3,626,313,0,4756,4757,5,116,0,0,4757,4758,3,536,268,
		0,4758,4816,1,0,0,0,4759,4760,5,160,0,0,4760,4761,5,80,0,0,4761,4762,5,
		443,0,0,4762,4763,3,626,313,0,4763,4764,5,116,0,0,4764,4765,3,536,268,
		0,4765,4816,1,0,0,0,4766,4767,5,160,0,0,4767,4768,5,80,0,0,4768,4769,5,
		444,0,0,4769,4770,5,62,0,0,4770,4771,3,1118,559,0,4771,4772,5,239,0,0,
		4772,4773,3,1340,670,0,4773,4774,5,116,0,0,4774,4775,3,536,268,0,4775,
		4816,1,0,0,0,4776,4777,5,160,0,0,4777,4778,5,80,0,0,4778,4779,5,272,0,
		0,4779,4780,5,157,0,0,4780,4781,3,524,262,0,4781,4782,5,100,0,0,4782,4783,
		3,1340,670,0,4783,4784,5,116,0,0,4784,4785,3,536,268,0,4785,4816,1,0,0,
		0,4786,4787,5,160,0,0,4787,4788,5,80,0,0,4788,4789,5,272,0,0,4789,4790,
		5,207,0,0,4790,4791,3,524,262,0,4791,4792,5,100,0,0,4792,4793,3,1340,670,
		0,4793,4794,5,116,0,0,4794,4795,3,536,268,0,4795,4816,1,0,0,0,4796,4797,
		5,160,0,0,4797,4798,5,80,0,0,4798,4799,5,240,0,0,4799,4800,5,268,0,0,4800,
		4801,3,292,146,0,4801,4802,5,116,0,0,4802,4803,3,536,268,0,4803,4816,1,
		0,0,0,4804,4805,5,160,0,0,4805,4806,5,80,0,0,4806,4807,5,41,0,0,4807,4808,
		5,2,0,0,4808,4809,3,1118,559,0,4809,4810,5,36,0,0,4810,4811,3,1118,559,
		0,4811,4812,5,3,0,0,4812,4813,5,116,0,0,4813,4814,3,536,268,0,4814,4816,
		1,0,0,0,4815,4668,1,0,0,0,4815,4675,1,0,0,0,4815,4682,1,0,0,0,4815,4689,
		1,0,0,0,4815,4696,1,0,0,0,4815,4703,1,0,0,0,4815,4710,1,0,0,0,4815,4717,
		1,0,0,0,4815,4724,1,0,0,0,4815,4733,1,0,0,0,4815,4743,1,0,0,0,4815,4752,
		1,0,0,0,4815,4759,1,0,0,0,4815,4766,1,0,0,0,4815,4776,1,0,0,0,4815,4786,
		1,0,0,0,4815,4796,1,0,0,0,4815,4804,1,0,0,0,4816,535,1,0,0,0,4817,4820,
		3,1358,679,0,4818,4820,5,78,0,0,4819,4817,1,0,0,0,4819,4818,1,0,0,0,4820,
		537,1,0,0,0,4821,4822,5,321,0,0,4822,4823,5,238,0,0,4823,4824,3,540,270,
		0,4824,4825,5,80,0,0,4825,4826,3,514,257,0,4826,4827,3,524,262,0,4827,
		4828,5,116,0,0,4828,4829,3,542,271,0,4829,4913,1,0,0,0,4830,4831,5,321,
		0,0,4831,4832,5,238,0,0,4832,4833,3,540,270,0,4833,4834,5,80,0,0,4834,
		4835,5,44,0,0,4835,4836,3,524,262,0,4836,4837,5,116,0,0,4837,4838,3,542,
		271,0,4838,4913,1,0,0,0,4839,4840,5,321,0,0,4840,4841,5,238,0,0,4841,4842,
		3,540,270,0,4842,4843,5,80,0,0,4843,4844,3,516,258,0,4844,4845,3,1340,
		670,0,4845,4846,5,116,0,0,4846,4847,3,542,271,0,4847,4913,1,0,0,0,4848,
		4849,5,321,0,0,4849,4850,5,238,0,0,4850,4851,3,540,270,0,4851,4852,5,80,
		0,0,4852,4853,5,354,0,0,4853,4854,3,1118,559,0,4854,4855,5,116,0,0,4855,
		4856,3,542,271,0,4856,4913,1,0,0,0,4857,4858,5,321,0,0,4858,4859,5,238,
		0,0,4859,4860,3,540,270,0,4860,4861,5,80,0,0,4861,4862,5,190,0,0,4862,
		4863,3,1118,559,0,4863,4864,5,116,0,0,4864,4865,3,542,271,0,4865,4913,
		1,0,0,0,4866,4867,5,321,0,0,4867,4868,5,238,0,0,4868,4869,3,540,270,0,
		4869,4870,5,80,0,0,4870,4871,5,136,0,0,4871,4872,3,650,325,0,4872,4873,
		5,116,0,0,4873,4874,3,542,271,0,4874,4913,1,0,0,0,4875,4876,5,321,0,0,
		4876,4877,5,238,0,0,4877,4878,3,540,270,0,4878,4879,5,80,0,0,4879,4880,
		5,212,0,0,4880,4881,3,626,313,0,4881,4882,5,116,0,0,4882,4883,3,542,271,
		0,4883,4913,1,0,0,0,4884,4885,5,321,0,0,4885,4886,5,238,0,0,4886,4887,
		3,540,270,0,4887,4888,5,80,0,0,4888,4889,5,240,0,0,4889,4890,5,268,0,0,
		4890,4891,3,292,146,0,4891,4892,5,116,0,0,4892,4893,3,542,271,0,4893,4913,
		1,0,0,0,4894,4895,5,321,0,0,4895,4896,5,238,0,0,4896,4897,3,540,270,0,
		4897,4898,5,80,0,0,4898,4899,5,290,0,0,4899,4900,3,626,313,0,4900,4901,
		5,116,0,0,4901,4902,3,542,271,0,4902,4913,1,0,0,0,4903,4904,5,321,0,0,
		4904,4905,5,238,0,0,4905,4906,3,540,270,0,4906,4907,5,80,0,0,4907,4908,
		5,443,0,0,4908,4909,3,626,313,0,4909,4910,5,116,0,0,4910,4911,3,542,271,
		0,4911,4913,1,0,0,0,4912,4821,1,0,0,0,4912,4830,1,0,0,0,4912,4839,1,0,
		0,0,4912,4848,1,0,0,0,4912,4857,1,0,0,0,4912,4866,1,0,0,0,4912,4875,1,
		0,0,0,4912,4884,1,0,0,0,4912,4894,1,0,0,0,4912,4903,1,0,0,0,4913,539,1,
		0,0,0,4914,4915,5,62,0,0,4915,4918,3,72,36,0,4916,4918,1,0,0,0,4917,4914,
		1,0,0,0,4917,4916,1,0,0,0,4918,541,1,0,0,0,4919,4922,3,1358,679,0,4920,
		4922,5,78,0,0,4921,4919,1,0,0,0,4921,4920,1,0,0,0,4922,543,1,0,0,0,4923,
		4924,5,61,0,0,4924,4928,3,546,273,0,4925,4926,5,259,0,0,4926,4928,3,546,
		273,0,4927,4923,1,0,0,0,4927,4925,1,0,0,0,4928,545,1,0,0,0,4929,4996,3,
		954,477,0,4930,4931,3,548,274,0,4931,4932,3,954,477,0,4932,4996,1,0,0,
		0,4933,4934,5,262,0,0,4934,4935,3,550,275,0,4935,4936,3,954,477,0,4936,
		4996,1,0,0,0,4937,4938,5,287,0,0,4938,4939,3,550,275,0,4939,4940,3,954,
		477,0,4940,4996,1,0,0,0,4941,4942,5,208,0,0,4942,4943,3,550,275,0,4943,
		4944,3,954,477,0,4944,4996,1,0,0,0,4945,4946,5,241,0,0,4946,4947,3,550,
		275,0,4947,4948,3,954,477,0,4948,4996,1,0,0,0,4949,4950,5,130,0,0,4950,
		4951,3,1364,682,0,4951,4952,3,550,275,0,4952,4953,3,954,477,0,4953,4996,
		1,0,0,0,4954,4955,5,301,0,0,4955,4956,3,1364,682,0,4956,4957,3,550,275,
		0,4957,4958,3,954,477,0,4958,4996,1,0,0,0,4959,4960,3,1364,682,0,4960,
		4961,3,550,275,0,4961,4962,3,954,477,0,4962,4996,1,0,0,0,4963,4964,5,30,
		0,0,4964,4965,3,550,275,0,4965,4966,3,954,477,0,4966,4996,1,0,0,0,4967,
		4968,5,211,0,0,4968,4969,3,550,275,0,4969,4970,3,954,477,0,4970,4996,1,
		0,0,0,4971,4972,5,211,0,0,4972,4973,3,1364,682,0,4973,4974,3,550,275,0,
		4974,4975,3,954,477,0,4975,4996,1,0,0,0,4976,4977,5,211,0,0,4977,4978,
		5,30,0,0,4978,4979,3,550,275,0,4979,4980,3,954,477,0,4980,4996,1,0,0,0,
		4981,4982,5,145,0,0,4982,4983,3,550,275,0,4983,4984,3,954,477,0,4984,4996,
		1,0,0,0,4985,4986,5,145,0,0,4986,4987,3,1364,682,0,4987,4988,3,550,275,
		0,4988,4989,3,954,477,0,4989,4996,1,0,0,0,4990,4991,5,145,0,0,4991,4992,
		5,30,0,0,4992,4993,3,550,275,0,4993,4994,3,954,477,0,4994,4996,1,0,0,0,
		4995,4929,1,0,0,0,4995,4930,1,0,0,0,4995,4933,1,0,0,0,4995,4937,1,0,0,
		0,4995,4941,1,0,0,0,4995,4945,1,0,0,0,4995,4949,1,0,0,0,4995,4954,1,0,
		0,0,4995,4959,1,0,0,0,4995,4963,1,0,0,0,4995,4967,1,0,0,0,4995,4971,1,
		0,0,0,4995,4976,1,0,0,0,4995,4981,1,0,0,0,4995,4985,1,0,0,0,4995,4990,
		1,0,0,0,4996,547,1,0,0,0,4997,4998,7,24,0,0,4998,549,1,0,0,0,4999,5002,
		3,548,274,0,5000,5002,1,0,0,0,5001,4999,1,0,0,0,5001,5000,1,0,0,0,5002,
		551,1,0,0,0,5003,5004,5,65,0,0,5004,5005,3,556,278,0,5005,5006,5,80,0,
		0,5006,5007,3,562,281,0,5007,5008,5,94,0,0,5008,5009,3,564,282,0,5009,
		5010,3,568,284,0,5010,553,1,0,0,0,5011,5012,5,311,0,0,5012,5013,3,556,
		278,0,5013,5014,5,80,0,0,5014,5015,3,562,281,0,5015,5016,5,64,0,0,5016,
		5017,3,564,282,0,5017,5018,3,108,54,0,5018,5031,1,0,0,0,5019,5020,5,311,
		0,0,5020,5021,5,65,0,0,5021,5022,5,273,0,0,5022,5023,5,62,0,0,5023,5024,
		3,556,278,0,5024,5025,5,80,0,0,5025,5026,3,562,281,0,5026,5027,5,64,0,
		0,5027,5028,3,564,282,0,5028,5029,3,108,54,0,5029,5031,1,0,0,0,5030,5011,
		1,0,0,0,5030,5019,1,0,0,0,5031,555,1,0,0,0,5032,5048,3,558,279,0,5033,
		5048,5,30,0,0,5034,5035,5,30,0,0,5035,5048,5,288,0,0,5036,5037,5,30,0,
		0,5037,5038,5,2,0,0,5038,5039,3,216,108,0,5039,5040,5,3,0,0,5040,5048,
		1,0,0,0,5041,5042,5,30,0,0,5042,5043,5,288,0,0,5043,5044,5,2,0,0,5044,
		5045,3,216,108,0,5045,5046,5,3,0,0,5046,5048,1,0,0,0,5047,5032,1,0,0,0,
		5047,5033,1,0,0,0,5047,5034,1,0,0,0,5047,5036,1,0,0,0,5047,5041,1,0,0,
		0,5048,557,1,0,0,0,5049,5054,3,560,280,0,5050,5051,5,6,0,0,5051,5053,3,
		560,280,0,5052,5050,1,0,0,0,5053,5056,1,0,0,0,5054,5052,1,0,0,0,5054,5055,
		1,0,0,0,5055,559,1,0,0,0,5056,5054,1,0,0,0,5057,5058,5,88,0,0,5058,5067,
		3,214,107,0,5059,5060,5,86,0,0,5060,5067,3,214,107,0,5061,5062,5,46,0,
		0,5062,5067,3,214,107,0,5063,5064,3,1372,686,0,5064,5065,3,214,107,0,5065,
		5067,1,0,0,0,5066,5057,1,0,0,0,5066,5059,1,0,0,0,5066,5061,1,0,0,0,5066,
		5063,1,0,0,0,5067,561,1,0,0,0,5068,5127,3,1334,667,0,5069,5070,5,92,0,
		0,5070,5127,3,1334,667,0,5071,5072,5,322,0,0,5072,5127,3,1334,667,0,5073,
		5074,5,63,0,0,5074,5075,5,175,0,0,5075,5076,5,375,0,0,5076,5127,3,1338,
		669,0,5077,5078,5,63,0,0,5078,5079,5,325,0,0,5079,5127,3,1338,669,0,5080,
		5081,5,212,0,0,5081,5127,3,624,312,0,5082,5083,5,290,0,0,5083,5127,3,624,
		312,0,5084,5085,5,443,0,0,5085,5127,3,624,312,0,5086,5087,5,176,0,0,5087,
		5127,3,1338,669,0,5088,5089,5,190,0,0,5089,5127,3,522,261,0,5090,5091,
		5,239,0,0,5091,5127,3,1338,669,0,5092,5093,5,240,0,0,5093,5094,5,268,0,
		0,5094,5127,3,294,147,0,5095,5096,5,317,0,0,5096,5127,3,1338,669,0,5097,
		5098,5,345,0,0,5098,5127,3,1338,669,0,5099,5100,5,354,0,0,5100,5127,3,
		522,261,0,5101,5102,5,30,0,0,5102,5103,5,344,0,0,5103,5104,5,68,0,0,5104,
		5105,5,317,0,0,5105,5127,3,1338,669,0,5106,5107,5,30,0,0,5107,5108,5,323,
		0,0,5108,5109,5,68,0,0,5109,5110,5,317,0,0,5110,5127,3,1338,669,0,5111,
		5112,5,30,0,0,5112,5113,5,213,0,0,5113,5114,5,68,0,0,5114,5115,5,317,0,
		0,5115,5127,3,1338,669,0,5116,5117,5,30,0,0,5117,5118,5,458,0,0,5118,5119,
		5,68,0,0,5119,5120,5,317,0,0,5120,5127,3,1338,669,0,5121,5122,5,30,0,0,
		5122,5123,5,456,0,0,5123,5124,5,68,0,0,5124,5125,5,317,0,0,5125,5127,3,
		1338,669,0,5126,5068,1,0,0,0,5126,5069,1,0,0,0,5126,5071,1,0,0,0,5126,
		5073,1,0,0,0,5126,5077,1,0,0,0,5126,5080,1,0,0,0,5126,5082,1,0,0,0,5126,
		5084,1,0,0,0,5126,5086,1,0,0,0,5126,5088,1,0,0,0,5126,5090,1,0,0,0,5126,
		5092,1,0,0,0,5126,5095,1,0,0,0,5126,5097,1,0,0,0,5126,5099,1,0,0,0,5126,
		5101,1,0,0,0,5126,5106,1,0,0,0,5126,5111,1,0,0,0,5126,5116,1,0,0,0,5126,
		5121,1,0,0,0,5127,563,1,0,0,0,5128,5133,3,566,283,0,5129,5130,5,6,0,0,
		5130,5132,3,566,283,0,5131,5129,1,0,0,0,5132,5135,1,0,0,0,5133,5131,1,
		0,0,0,5133,5134,1,0,0,0,5134,565,1,0,0,0,5135,5133,1,0,0,0,5136,5140,3,
		1368,684,0,5137,5138,5,66,0,0,5138,5140,3,1368,684,0,5139,5136,1,0,0,0,
		5139,5137,1,0,0,0,5140,567,1,0,0,0,5141,5142,5,105,0,0,5142,5143,5,65,
		0,0,5143,5146,5,273,0,0,5144,5146,1,0,0,0,5145,5141,1,0,0,0,5145,5144,
		1,0,0,0,5146,569,1,0,0,0,5147,5148,5,65,0,0,5148,5149,3,558,279,0,5149,
		5150,5,94,0,0,5150,5151,3,1370,685,0,5151,5152,3,574,287,0,5152,5153,3,
		576,288,0,5153,571,1,0,0,0,5154,5155,5,311,0,0,5155,5156,3,558,279,0,5156,
		5157,5,64,0,0,5157,5158,3,1370,685,0,5158,5159,3,576,288,0,5159,5160,3,
		108,54,0,5160,5172,1,0,0,0,5161,5162,5,311,0,0,5162,5163,5,134,0,0,5163,
		5164,5,273,0,0,5164,5165,5,62,0,0,5165,5166,3,558,279,0,5166,5167,5,64,
		0,0,5167,5168,3,1370,685,0,5168,5169,3,576,288,0,5169,5170,3,108,54,0,
		5170,5172,1,0,0,0,5171,5154,1,0,0,0,5171,5161,1,0,0,0,5172,573,1,0,0,0,
		5173,5174,5,105,0,0,5174,5175,5,134,0,0,5175,5178,5,273,0,0,5176,5178,
		1,0,0,0,5177,5173,1,0,0,0,5177,5176,1,0,0,0,5178,575,1,0,0,0,5179,5180,
		5,215,0,0,5180,5181,5,148,0,0,5181,5184,3,1368,684,0,5182,5184,1,0,0,0,
		5183,5179,1,0,0,0,5183,5182,1,0,0,0,5184,577,1,0,0,0,5185,5186,5,138,0,
		0,5186,5187,5,53,0,0,5187,5188,5,288,0,0,5188,5189,3,580,290,0,5189,5190,
		3,584,292,0,5190,579,1,0,0,0,5191,5193,3,582,291,0,5192,5191,1,0,0,0,5193,
		5196,1,0,0,0,5194,5192,1,0,0,0,5194,5195,1,0,0,0,5195,581,1,0,0,0,5196,
		5194,1,0,0,0,5197,5198,5,68,0,0,5198,5199,5,317,0,0,5199,5207,3,1338,669,
		0,5200,5201,5,62,0,0,5201,5202,5,312,0,0,5202,5207,3,1370,685,0,5203,5204,
		5,62,0,0,5204,5205,5,99,0,0,5205,5207,3,1370,685,0,5206,5197,1,0,0,0,5206,
		5200,1,0,0,0,5206,5203,1,0,0,0,5207,583,1,0,0,0,5208,5209,5,65,0,0,5209,
		5210,3,556,278,0,5210,5211,5,80,0,0,5211,5212,3,586,293,0,5212,5213,5,
		94,0,0,5213,5214,3,564,282,0,5214,5215,3,568,284,0,5215,5236,1,0,0,0,5216,
		5217,5,311,0,0,5217,5218,3,556,278,0,5218,5219,5,80,0,0,5219,5220,3,586,
		293,0,5220,5221,5,64,0,0,5221,5222,3,564,282,0,5222,5223,3,108,54,0,5223,
		5236,1,0,0,0,5224,5225,5,311,0,0,5225,5226,5,65,0,0,5226,5227,5,273,0,
		0,5227,5228,5,62,0,0,5228,5229,3,556,278,0,5229,5230,5,80,0,0,5230,5231,
		3,586,293,0,5231,5232,5,64,0,0,5232,5233,3,564,282,0,5233,5234,3,108,54,
		0,5234,5236,1,0,0,0,5235,5208,1,0,0,0,5235,5216,1,0,0,0,5235,5224,1,0,
		0,0,5236,585,1,0,0,0,5237,5238,7,25,0,0,5238,587,1,0,0,0,5239,5240,5,46,
		0,0,5240,5241,3,590,295,0,5241,5242,5,227,0,0,5242,5243,3,592,296,0,5243,
		5244,3,594,297,0,5244,5245,5,80,0,0,5245,5246,3,1074,537,0,5246,5247,3,
		596,298,0,5247,5248,5,2,0,0,5248,5249,3,598,299,0,5249,5250,5,3,0,0,5250,
		5251,3,604,302,0,5251,5252,3,118,59,0,5252,5253,3,254,127,0,5253,5254,
		3,1094,547,0,5254,5275,1,0,0,0,5255,5256,5,46,0,0,5256,5257,3,590,295,
		0,5257,5258,5,227,0,0,5258,5259,3,592,296,0,5259,5260,5,221,0,0,5260,5261,
		5,77,0,0,5261,5262,5,390,0,0,5262,5263,3,1340,670,0,5263,5264,5,80,0,0,
		5264,5265,3,1074,537,0,5265,5266,3,596,298,0,5266,5267,5,2,0,0,5267,5268,
		3,598,299,0,5268,5269,5,3,0,0,5269,5270,3,604,302,0,5270,5271,3,118,59,
		0,5271,5272,3,254,127,0,5272,5273,3,1094,547,0,5273,5275,1,0,0,0,5274,
		5239,1,0,0,0,5274,5255,1,0,0,0,5275,589,1,0,0,0,5276,5279,5,98,0,0,5277,
		5279,1,0,0,0,5278,5276,1,0,0,0,5278,5277,1,0,0,0,5279,591,1,0,0,0,5280,
		5283,5,109,0,0,5281,5283,1,0,0,0,5282,5280,1,0,0,0,5282,5281,1,0,0,0,5283,
		593,1,0,0,0,5284,5287,3,1340,670,0,5285,5287,1,0,0,0,5286,5284,1,0,0,0,
		5286,5285,1,0,0,0,5287,595,1,0,0,0,5288,5289,5,100,0,0,5289,5292,3,1340,
		670,0,5290,5292,1,0,0,0,5291,5288,1,0,0,0,5291,5290,1,0,0,0,5292,597,1,
		0,0,0,5293,5298,3,602,301,0,5294,5295,5,6,0,0,5295,5297,3,602,301,0,5296,
		5294,1,0,0,0,5297,5300,1,0,0,0,5298,5296,1,0,0,0,5298,5299,1,0,0,0,5299,
		599,1,0,0,0,5300,5298,1,0,0,0,5301,5302,3,608,304,0,5302,5303,3,610,305,
		0,5303,5304,3,612,306,0,5304,5305,3,614,307,0,5305,5313,1,0,0,0,5306,5307,
		3,608,304,0,5307,5308,3,524,262,0,5308,5309,3,116,58,0,5309,5310,3,612,
		306,0,5310,5311,3,614,307,0,5311,5313,1,0,0,0,5312,5301,1,0,0,0,5312,5306,
		1,0,0,0,5313,601,1,0,0,0,5314,5315,3,1372,686,0,5315,5316,3,600,300,0,
		5316,5326,1,0,0,0,5317,5318,3,1214,607,0,5318,5319,3,600,300,0,5319,5326,
		1,0,0,0,5320,5321,5,2,0,0,5321,5322,3,1162,581,0,5322,5323,5,3,0,0,5323,
		5324,3,600,300,0,5324,5326,1,0,0,0,5325,5314,1,0,0,0,5325,5317,1,0,0,0,
		5325,5320,1,0,0,0,5326,603,1,0,0,0,5327,5328,5,442,0,0,5328,5329,5,2,0,
		0,5329,5330,3,606,303,0,5330,5331,5,3,0,0,5331,5334,1,0,0,0,5332,5334,
		1,0,0,0,5333,5327,1,0,0,0,5333,5332,1,0,0,0,5334,605,1,0,0,0,5335,5340,
		3,602,301,0,5336,5337,5,6,0,0,5337,5339,3,602,301,0,5338,5336,1,0,0,0,
		5339,5342,1,0,0,0,5340,5338,1,0,0,0,5340,5341,1,0,0,0,5341,607,1,0,0,0,
		5342,5340,1,0,0,0,5343,5344,5,43,0,0,5344,5347,3,524,262,0,5345,5347,1,
		0,0,0,5346,5343,1,0,0,0,5346,5345,1,0,0,0,5347,609,1,0,0,0,5348,5351,3,
		524,262,0,5349,5351,1,0,0,0,5350,5348,1,0,0,0,5350,5349,1,0,0,0,5351,611,
		1,0,0,0,5352,5356,5,37,0,0,5353,5356,5,55,0,0,5354,5356,1,0,0,0,5355,5352,
		1,0,0,0,5355,5353,1,0,0,0,5355,5354,1,0,0,0,5356,613,1,0,0,0,5357,5358,
		5,267,0,0,5358,5363,5,208,0,0,5359,5360,5,267,0,0,5360,5363,5,241,0,0,
		5361,5363,1,0,0,0,5362,5357,1,0,0,0,5362,5359,1,0,0,0,5362,5361,1,0,0,
		0,5363,615,1,0,0,0,5364,5365,5,46,0,0,5365,5366,3,618,309,0,5366,5367,
		7,26,0,0,5367,5368,3,1346,673,0,5368,5378,3,628,314,0,5369,5376,5,310,
		0,0,5370,5377,3,638,319,0,5371,5372,5,92,0,0,5372,5373,5,2,0,0,5373,5374,
		3,668,334,0,5374,5375,5,3,0,0,5375,5377,1,0,0,0,5376,5370,1,0,0,0,5376,
		5371,1,0,0,0,5377,5379,1,0,0,0,5378,5369,1,0,0,0,5378,5379,1,0,0,0,5379,
		5380,1,0,0,0,5380,5381,3,654,327,0,5381,617,1,0,0,0,5382,5383,5,82,0,0,
		5383,5386,5,305,0,0,5384,5386,1,0,0,0,5385,5382,1,0,0,0,5385,5384,1,0,
		0,0,5386,619,1,0,0,0,5387,5389,5,2,0,0,5388,5390,3,622,311,0,5389,5388,
		1,0,0,0,5389,5390,1,0,0,0,5390,5391,1,0,0,0,5391,5392,5,3,0,0,5392,621,
		1,0,0,0,5393,5398,3,632,316,0,5394,5395,5,6,0,0,5395,5397,3,632,316,0,
		5396,5394,1,0,0,0,5397,5400,1,0,0,0,5398,5396,1,0,0,0,5398,5399,1,0,0,
		0,5399,623,1,0,0,0,5400,5398,1,0,0,0,5401,5406,3,626,313,0,5402,5403,5,
		6,0,0,5403,5405,3,626,313,0,5404,5402,1,0,0,0,5405,5408,1,0,0,0,5406,5404,
		1,0,0,0,5406,5407,1,0,0,0,5407,625,1,0,0,0,5408,5406,1,0,0,0,5409,5410,
		3,1346,673,0,5410,5411,3,620,310,0,5411,5418,1,0,0,0,5412,5418,3,1390,
		695,0,5413,5415,3,1372,686,0,5414,5416,3,1324,662,0,5415,5414,1,0,0,0,
		5415,5416,1,0,0,0,5416,5418,1,0,0,0,5417,5409,1,0,0,0,5417,5412,1,0,0,
		0,5417,5413,1,0,0,0,5418,627,1,0,0,0,5419,5421,5,2,0,0,5420,5422,3,630,
		315,0,5421,5420,1,0,0,0,5421,5422,1,0,0,0,5422,5423,1,0,0,0,5423,5424,
		5,3,0,0,5424,629,1,0,0,0,5425,5430,3,642,321,0,5426,5427,5,6,0,0,5427,
		5429,3,642,321,0,5428,5426,1,0,0,0,5429,5432,1,0,0,0,5430,5428,1,0,0,0,
		5430,5431,1,0,0,0,5431,631,1,0,0,0,5432,5430,1,0,0,0,5433,5435,3,634,317,
		0,5434,5436,3,636,318,0,5435,5434,1,0,0,0,5435,5436,1,0,0,0,5436,5437,
		1,0,0,0,5437,5438,3,640,320,0,5438,5447,1,0,0,0,5439,5441,3,636,318,0,
		5440,5442,3,634,317,0,5441,5440,1,0,0,0,5441,5442,1,0,0,0,5442,5443,1,
		0,0,0,5443,5444,3,640,320,0,5444,5447,1,0,0,0,5445,5447,3,640,320,0,5446,
		5433,1,0,0,0,5446,5439,1,0,0,0,5446,5445,1,0,0,0,5447,633,1,0,0,0,5448,
		5450,5,68,0,0,5449,5451,5,454,0,0,5450,5449,1,0,0,0,5450,5451,1,0,0,0,
		5451,5456,1,0,0,0,5452,5456,5,454,0,0,5453,5456,5,394,0,0,5454,5456,5,
		101,0,0,5455,5448,1,0,0,0,5455,5452,1,0,0,0,5455,5453,1,0,0,0,5455,5454,
		1,0,0,0,5456,635,1,0,0,0,5457,5462,3,1376,688,0,5458,5462,3,1394,697,0,
		5459,5462,5,119,0,0,5460,5462,5,126,0,0,5461,5457,1,0,0,0,5461,5458,1,
		0,0,0,5461,5459,1,0,0,0,5461,5460,1,0,0,0,5462,637,1,0,0,0,5463,5464,3,
		640,320,0,5464,639,1,0,0,0,5465,5480,3,1118,559,0,5466,5468,5,409,0,0,
		5467,5466,1,0,0,0,5467,5468,1,0,0,0,5468,5473,1,0,0,0,5469,5474,3,1394,
		697,0,5470,5474,3,1376,688,0,5471,5474,5,119,0,0,5472,5474,5,126,0,0,5473,
		5469,1,0,0,0,5473,5470,1,0,0,0,5473,5471,1,0,0,0,5473,5472,1,0,0,0,5474,
		5475,1,0,0,0,5475,5476,3,526,263,0,5476,5477,5,27,0,0,5477,5478,5,354,
		0,0,5478,5480,1,0,0,0,5479,5465,1,0,0,0,5479,5467,1,0,0,0,5480,641,1,0,
		0,0,5481,5484,3,632,316,0,5482,5483,7,27,0,0,5483,5485,3,1162,581,0,5484,
		5482,1,0,0,0,5484,5485,1,0,0,0,5485,643,1,0,0,0,5486,5487,3,632,316,0,
		5487,645,1,0,0,0,5488,5499,5,2,0,0,5489,5500,5,9,0,0,5490,5500,3,648,324,
		0,5491,5492,5,83,0,0,5492,5493,5,148,0,0,5493,5500,3,648,324,0,5494,5495,
		3,648,324,0,5495,5496,5,83,0,0,5496,5497,5,148,0,0,5497,5498,3,648,324,
		0,5498,5500,1,0,0,0,5499,5489,1,0,0,0,5499,5490,1,0,0,0,5499,5491,1,0,
		0,0,5499,5494,1,0,0,0,5500,5501,1,0,0,0,5501,5502,5,3,0,0,5502,647,1,0,
		0,0,5503,5508,3,644,322,0,5504,5505,5,6,0,0,5505,5507,3,644,322,0,5506,
		5504,1,0,0,0,5507,5510,1,0,0,0,5508,5506,1,0,0,0,5508,5509,1,0,0,0,5509,
		649,1,0,0,0,5510,5508,1,0,0,0,5511,5512,3,1346,673,0,5512,5513,3,646,323,
		0,5513,651,1,0,0,0,5514,5519,3,650,325,0,5515,5516,5,6,0,0,5516,5518,3,
		650,325,0,5517,5515,1,0,0,0,5518,5521,1,0,0,0,5519,5517,1,0,0,0,5519,5520,
		1,0,0,0,5520,653,1,0,0,0,5521,5519,1,0,0,0,5522,5524,3,658,329,0,5523,
		5522,1,0,0,0,5524,5525,1,0,0,0,5525,5523,1,0,0,0,5525,5526,1,0,0,0,5526,
		5527,1,0,0,0,5527,5528,6,327,-1,0,5528,655,1,0,0,0,5529,5530,5,150,0,0,
		5530,5531,5,80,0,0,5531,5532,5,78,0,0,5532,5565,5,459,0,0,5533,5534,5,
		310,0,0,5534,5535,5,78,0,0,5535,5536,5,80,0,0,5536,5537,5,78,0,0,5537,
		5565,5,459,0,0,5538,5565,5,340,0,0,5539,5565,5,223,0,0,5540,5565,5,332,
		0,0,5541,5565,5,371,0,0,5542,5543,5,206,0,0,5543,5544,5,321,0,0,5544,5565,
		5,182,0,0,5545,5546,5,206,0,0,5546,5547,5,321,0,0,5547,5565,5,235,0,0,
		5548,5549,5,321,0,0,5549,5565,5,182,0,0,5550,5551,5,321,0,0,5551,5565,
		5,235,0,0,5552,5565,5,242,0,0,5553,5554,5,77,0,0,5554,5565,5,242,0,0,5555,
		5556,5,171,0,0,5556,5565,3,292,146,0,5557,5558,5,314,0,0,5558,5565,3,292,
		146,0,5559,5560,5,460,0,0,5560,5565,3,524,262,0,5561,5565,3,82,41,0,5562,
		5563,5,461,0,0,5563,5565,3,1372,686,0,5564,5529,1,0,0,0,5564,5533,1,0,
		0,0,5564,5538,1,0,0,0,5564,5539,1,0,0,0,5564,5540,1,0,0,0,5564,5541,1,
		0,0,0,5564,5542,1,0,0,0,5564,5545,1,0,0,0,5564,5548,1,0,0,0,5564,5550,
		1,0,0,0,5564,5552,1,0,0,0,5564,5553,1,0,0,0,5564,5555,1,0,0,0,5564,5557,
		1,0,0,0,5564,5559,1,0,0,0,5564,5561,1,0,0,0,5564,5562,1,0,0,0,5565,657,
		1,0,0,0,5566,5567,5,36,0,0,5567,5575,3,660,330,0,5568,5569,5,239,0,0,5569,
		5575,3,72,36,0,5570,5571,5,444,0,0,5571,5575,3,662,331,0,5572,5575,5,104,
		0,0,5573,5575,3,656,328,0,5574,5566,1,0,0,0,5574,5568,1,0,0,0,5574,5570,
		1,0,0,0,5574,5572,1,0,0,0,5574,5573,1,0,0,0,5575,659,1,0,0,0,5576,5582,
		3,1358,679,0,5577,5578,3,1358,679,0,5578,5579,5,6,0,0,5579,5580,3,1358,
		679,0,5580,5582,1,0,0,0,5581,5576,1,0,0,0,5581,5577,1,0,0,0,5582,661,1,
		0,0,0,5583,5584,5,62,0,0,5584,5585,5,354,0,0,5585,5592,3,1118,559,0,5586,
		5587,5,6,0,0,5587,5588,5,62,0,0,5588,5589,5,354,0,0,5589,5591,3,1118,559,
		0,5590,5586,1,0,0,0,5591,5594,1,0,0,0,5592,5590,1,0,0,0,5592,5593,1,0,
		0,0,5593,663,1,0,0,0,5594,5592,1,0,0,0,5595,5596,5,105,0,0,5596,5599,3,
		460,230,0,5597,5599,1,0,0,0,5598,5595,1,0,0,0,5598,5597,1,0,0,0,5599,665,
		1,0,0,0,5600,5601,3,636,318,0,5601,5602,3,640,320,0,5602,667,1,0,0,0,5603,
		5608,3,666,333,0,5604,5605,5,6,0,0,5605,5607,3,666,333,0,5606,5604,1,0,
		0,0,5607,5610,1,0,0,0,5608,5606,1,0,0,0,5608,5609,1,0,0,0,5609,669,1,0,
		0,0,5610,5608,1,0,0,0,5611,5612,5,138,0,0,5612,5613,7,28,0,0,5613,5614,
		3,626,313,0,5614,5615,3,672,336,0,5615,5616,3,674,337,0,5616,671,1,0,0,
		0,5617,5619,3,656,328,0,5618,5617,1,0,0,0,5619,5620,1,0,0,0,5620,5618,
		1,0,0,0,5620,5621,1,0,0,0,5621,673,1,0,0,0,5622,5625,5,309,0,0,5623,5625,
		1,0,0,0,5624,5622,1,0,0,0,5624,5623,1,0,0,0,5625,675,1,0,0,0,5626,5627,
		5,192,0,0,5627,5628,5,212,0,0,5628,5629,3,624,312,0,5629,5630,3,108,54,
		0,5630,5663,1,0,0,0,5631,5632,5,192,0,0,5632,5633,5,212,0,0,5633,5634,
		5,221,0,0,5634,5635,5,390,0,0,5635,5636,3,624,312,0,5636,5637,3,108,54,
		0,5637,5663,1,0,0,0,5638,5639,5,192,0,0,5639,5640,5,290,0,0,5640,5641,
		3,624,312,0,5641,5642,3,108,54,0,5642,5663,1,0,0,0,5643,5644,5,192,0,0,
		5644,5645,5,290,0,0,5645,5646,5,221,0,0,5646,5647,5,390,0,0,5647,5648,
		3,624,312,0,5648,5649,3,108,54,0,5649,5663,1,0,0,0,5650,5651,5,192,0,0,
		5651,5652,5,443,0,0,5652,5653,3,624,312,0,5653,5654,3,108,54,0,5654,5663,
		1,0,0,0,5655,5656,5,192,0,0,5656,5657,5,443,0,0,5657,5658,5,221,0,0,5658,
		5659,5,390,0,0,5659,5660,3,624,312,0,5660,5661,3,108,54,0,5661,5663,1,
		0,0,0,5662,5626,1,0,0,0,5662,5631,1,0,0,0,5662,5638,1,0,0,0,5662,5643,
		1,0,0,0,5662,5650,1,0,0,0,5662,5655,1,0,0,0,5663,677,1,0,0,0,5664,5665,
		5,192,0,0,5665,5666,5,136,0,0,5666,5667,3,652,326,0,5667,5668,3,108,54,
		0,5668,5677,1,0,0,0,5669,5670,5,192,0,0,5670,5671,5,136,0,0,5671,5672,
		5,221,0,0,5672,5673,5,390,0,0,5673,5674,3,652,326,0,5674,5675,3,108,54,
		0,5675,5677,1,0,0,0,5676,5664,1,0,0,0,5676,5669,1,0,0,0,5677,679,1,0,0,
		0,5678,5679,5,192,0,0,5679,5680,5,272,0,0,5680,5681,3,686,343,0,5681,5682,
		3,108,54,0,5682,5691,1,0,0,0,5683,5684,5,192,0,0,5684,5685,5,272,0,0,5685,
		5686,5,221,0,0,5686,5687,5,390,0,0,5687,5688,3,686,343,0,5688,5689,3,108,
		54,0,5689,5691,1,0,0,0,5690,5678,1,0,0,0,5690,5683,1,0,0,0,5691,681,1,
		0,0,0,5692,5693,5,2,0,0,5693,5694,3,1118,559,0,5694,5695,5,3,0,0,5695,
		5715,1,0,0,0,5696,5697,5,2,0,0,5697,5698,3,1118,559,0,5698,5699,5,6,0,
		0,5699,5700,3,1118,559,0,5700,5701,5,3,0,0,5701,5715,1,0,0,0,5702,5703,
		5,2,0,0,5703,5704,5,401,0,0,5704,5705,5,6,0,0,5705,5706,3,1118,559,0,5706,
		5707,5,3,0,0,5707,5715,1,0,0,0,5708,5709,5,2,0,0,5709,5710,3,1118,559,
		0,5710,5711,5,6,0,0,5711,5712,5,401,0,0,5712,5713,5,3,0,0,5713,5715,1,
		0,0,0,5714,5692,1,0,0,0,5714,5696,1,0,0,0,5714,5702,1,0,0,0,5714,5708,
		1,0,0,0,5715,683,1,0,0,0,5716,5717,3,1372,686,0,5717,5718,5,11,0,0,5718,
		5720,1,0,0,0,5719,5716,1,0,0,0,5720,5723,1,0,0,0,5721,5719,1,0,0,0,5721,
		5722,1,0,0,0,5722,5724,1,0,0,0,5723,5721,1,0,0,0,5724,5725,3,1270,635,
		0,5725,685,1,0,0,0,5726,5731,3,688,344,0,5727,5728,5,6,0,0,5728,5730,3,
		688,344,0,5729,5727,1,0,0,0,5730,5733,1,0,0,0,5731,5729,1,0,0,0,5731,5732,
		1,0,0,0,5732,687,1,0,0,0,5733,5731,1,0,0,0,5734,5735,3,684,342,0,5735,
		5736,3,682,341,0,5736,689,1,0,0,0,5737,5738,5,57,0,0,5738,5739,3,692,346,
		0,5739,691,1,0,0,0,5740,5742,3,694,347,0,5741,5740,1,0,0,0,5742,5743,1,
		0,0,0,5743,5741,1,0,0,0,5743,5744,1,0,0,0,5744,693,1,0,0,0,5745,5749,3,
		1358,679,0,5746,5747,5,239,0,0,5747,5749,3,72,36,0,5748,5745,1,0,0,0,5748,
		5746,1,0,0,0,5749,695,1,0,0,0,5750,5751,5,46,0,0,5751,5752,5,41,0,0,5752,
		5753,5,2,0,0,5753,5754,3,1118,559,0,5754,5755,5,36,0,0,5755,5756,3,1118,
		559,0,5756,5757,5,3,0,0,5757,5758,5,105,0,0,5758,5759,5,212,0,0,5759,5760,
		3,626,313,0,5760,5761,3,698,349,0,5761,5785,1,0,0,0,5762,5763,5,46,0,0,
		5763,5764,5,41,0,0,5764,5765,5,2,0,0,5765,5766,3,1118,559,0,5766,5767,
		5,36,0,0,5767,5768,3,1118,559,0,5768,5769,5,3,0,0,5769,5770,5,373,0,0,
		5770,5771,5,212,0,0,5771,5772,3,698,349,0,5772,5785,1,0,0,0,5773,5774,
		5,46,0,0,5774,5775,5,41,0,0,5775,5776,5,2,0,0,5776,5777,3,1118,559,0,5777,
		5778,5,36,0,0,5778,5779,3,1118,559,0,5779,5780,5,3,0,0,5780,5781,5,105,
		0,0,5781,5782,5,394,0,0,5782,5783,3,698,349,0,5783,5785,1,0,0,0,5784,5750,
		1,0,0,0,5784,5762,1,0,0,0,5784,5773,1,0,0,0,5785,697,1,0,0,0,5786,5787,
		5,36,0,0,5787,5792,5,224,0,0,5788,5789,5,36,0,0,5789,5792,5,141,0,0,5790,
		5792,1,0,0,0,5791,5786,1,0,0,0,5791,5788,1,0,0,0,5791,5790,1,0,0,0,5792,
		699,1,0,0,0,5793,5794,5,192,0,0,5794,5795,5,41,0,0,5795,5796,3,702,351,
		0,5796,5797,5,2,0,0,5797,5798,3,1118,559,0,5798,5799,5,36,0,0,5799,5800,
		3,1118,559,0,5800,5801,5,3,0,0,5801,5802,3,108,54,0,5802,701,1,0,0,0,5803,
		5804,5,221,0,0,5804,5807,5,390,0,0,5805,5807,1,0,0,0,5806,5803,1,0,0,0,
		5806,5805,1,0,0,0,5807,703,1,0,0,0,5808,5809,5,46,0,0,5809,5810,3,618,
		309,0,5810,5811,5,444,0,0,5811,5812,5,62,0,0,5812,5813,3,1118,559,0,5813,
		5814,5,239,0,0,5814,5815,3,1340,670,0,5815,5816,5,2,0,0,5816,5817,3,706,
		353,0,5817,5818,5,3,0,0,5818,705,1,0,0,0,5819,5820,5,64,0,0,5820,5821,
		5,462,0,0,5821,5822,5,105,0,0,5822,5823,5,212,0,0,5823,5824,3,626,313,
		0,5824,5825,5,6,0,0,5825,5826,5,94,0,0,5826,5827,5,462,0,0,5827,5828,5,
		105,0,0,5828,5829,5,212,0,0,5829,5830,3,626,313,0,5830,5854,1,0,0,0,5831,
		5832,5,94,0,0,5832,5833,5,462,0,0,5833,5834,5,105,0,0,5834,5835,5,212,
		0,0,5835,5836,3,626,313,0,5836,5837,5,6,0,0,5837,5838,5,64,0,0,5838,5839,
		5,462,0,0,5839,5840,5,105,0,0,5840,5841,5,212,0,0,5841,5842,3,626,313,
		0,5842,5854,1,0,0,0,5843,5844,5,64,0,0,5844,5845,5,462,0,0,5845,5846,5,
		105,0,0,5846,5847,5,212,0,0,5847,5854,3,626,313,0,5848,5849,5,94,0,0,5849,
		5850,5,462,0,0,5850,5851,5,105,0,0,5851,5852,5,212,0,0,5852,5854,3,626,
		313,0,5853,5819,1,0,0,0,5853,5831,1,0,0,0,5853,5843,1,0,0,0,5853,5848,
		1,0,0,0,5854,707,1,0,0,0,5855,5856,5,192,0,0,5856,5857,5,444,0,0,5857,
		5858,3,702,351,0,5858,5859,5,62,0,0,5859,5860,3,1118,559,0,5860,5861,5,
		239,0,0,5861,5862,3,1340,670,0,5862,5863,3,108,54,0,5863,709,1,0,0,0,5864,
		5865,5,300,0,0,5865,5866,3,712,356,0,5866,5867,3,592,296,0,5867,5868,3,
		1336,668,0,5868,5891,1,0,0,0,5869,5870,5,300,0,0,5870,5871,3,714,357,0,
		5871,5872,3,592,296,0,5872,5873,3,1340,670,0,5873,5891,1,0,0,0,5874,5875,
		5,300,0,0,5875,5876,5,2,0,0,5876,5877,3,716,358,0,5877,5878,5,3,0,0,5878,
		5879,3,712,356,0,5879,5880,3,592,296,0,5880,5881,3,1336,668,0,5881,5891,
		1,0,0,0,5882,5883,5,300,0,0,5883,5884,5,2,0,0,5884,5885,3,716,358,0,5885,
		5886,5,3,0,0,5886,5887,3,714,357,0,5887,5888,3,592,296,0,5888,5889,3,1340,
		670,0,5889,5891,1,0,0,0,5890,5864,1,0,0,0,5890,5869,1,0,0,0,5890,5874,
		1,0,0,0,5890,5882,1,0,0,0,5891,711,1,0,0,0,5892,5893,7,29,0,0,5893,713,
		1,0,0,0,5894,5895,7,30,0,0,5895,715,1,0,0,0,5896,5901,3,718,359,0,5897,
		5898,5,6,0,0,5898,5900,3,718,359,0,5899,5897,1,0,0,0,5900,5903,1,0,0,0,
		5901,5899,1,0,0,0,5901,5902,1,0,0,0,5902,717,1,0,0,0,5903,5901,1,0,0,0,
		5904,5905,7,31,0,0,5905,719,1,0,0,0,5906,5907,5,138,0,0,5907,5908,5,345,
		0,0,5908,5909,3,1340,670,0,5909,5910,5,327,0,0,5910,5911,3,116,58,0,5911,
		5919,1,0,0,0,5912,5913,5,138,0,0,5913,5914,5,345,0,0,5914,5915,3,1340,
		670,0,5915,5916,5,307,0,0,5916,5917,3,116,58,0,5917,5919,1,0,0,0,5918,
		5906,1,0,0,0,5918,5912,1,0,0,0,5919,721,1,0,0,0,5920,5921,5,138,0,0,5921,
		5922,5,136,0,0,5922,5923,3,650,325,0,5923,5924,5,303,0,0,5924,5925,5,94,
		0,0,5925,5926,3,1340,670,0,5926,6389,1,0,0,0,5927,5928,5,138,0,0,5928,
		5929,5,108,0,0,5929,5930,3,524,262,0,5930,5931,5,303,0,0,5931,5932,5,94,
		0,0,5932,5933,3,1340,670,0,5933,6389,1,0,0,0,5934,5935,5,138,0,0,5935,
		5936,5,169,0,0,5936,5937,3,524,262,0,5937,5938,5,303,0,0,5938,5939,5,94,
		0,0,5939,5940,3,1340,670,0,5940,6389,1,0,0,0,5941,5942,5,138,0,0,5942,
		5943,5,176,0,0,5943,5944,3,1340,670,0,5944,5945,5,303,0,0,5945,5946,5,
		94,0,0,5946,5947,3,1340,670,0,5947,6389,1,0,0,0,5948,5949,5,138,0,0,5949,
		5950,5,190,0,0,5950,5951,3,524,262,0,5951,5952,5,303,0,0,5952,5953,5,94,
		0,0,5953,5954,3,1340,670,0,5954,6389,1,0,0,0,5955,5956,5,138,0,0,5956,
		5957,5,190,0,0,5957,5958,3,524,262,0,5958,5959,5,303,0,0,5959,5960,5,45,
		0,0,5960,5961,3,1340,670,0,5961,5962,5,94,0,0,5962,5963,3,1340,670,0,5963,
		6389,1,0,0,0,5964,5965,5,138,0,0,5965,5966,5,63,0,0,5966,5967,5,175,0,
		0,5967,5968,5,375,0,0,5968,5969,3,1340,670,0,5969,5970,5,303,0,0,5970,
		5971,5,94,0,0,5971,5972,3,1340,670,0,5972,6389,1,0,0,0,5973,5974,5,138,
		0,0,5974,5975,5,212,0,0,5975,5976,3,626,313,0,5976,5977,5,303,0,0,5977,
		5978,5,94,0,0,5978,5979,3,1340,670,0,5979,6389,1,0,0,0,5980,5981,5,138,
		0,0,5981,5982,5,66,0,0,5982,5983,3,1366,683,0,5983,5984,5,303,0,0,5984,
		5985,5,94,0,0,5985,5986,3,1366,683,0,5986,6389,1,0,0,0,5987,5988,5,138,
		0,0,5988,5989,3,308,154,0,5989,5990,5,239,0,0,5990,5991,3,1340,670,0,5991,
		5992,5,303,0,0,5992,5993,5,94,0,0,5993,5994,3,1340,670,0,5994,6389,1,0,
		0,0,5995,5996,5,138,0,0,5996,5997,5,272,0,0,5997,5998,5,157,0,0,5998,5999,
		3,524,262,0,5999,6000,5,100,0,0,6000,6001,3,1340,670,0,6001,6002,5,303,
		0,0,6002,6003,5,94,0,0,6003,6004,3,1340,670,0,6004,6389,1,0,0,0,6005,6006,
		5,138,0,0,6006,6007,5,272,0,0,6007,6008,5,207,0,0,6008,6009,3,524,262,
		0,6009,6010,5,100,0,0,6010,6011,3,1340,670,0,6011,6012,5,303,0,0,6012,
		6013,5,94,0,0,6013,6014,3,1340,670,0,6014,6389,1,0,0,0,6015,6016,5,138,
		0,0,6016,6017,5,446,0,0,6017,6018,3,1340,670,0,6018,6019,5,80,0,0,6019,
		6020,3,1336,668,0,6020,6021,5,303,0,0,6021,6022,5,94,0,0,6022,6023,3,1340,
		670,0,6023,6389,1,0,0,0,6024,6025,5,138,0,0,6025,6026,5,446,0,0,6026,6027,
		5,221,0,0,6027,6028,5,390,0,0,6028,6029,3,1340,670,0,6029,6030,5,80,0,
		0,6030,6031,3,1336,668,0,6031,6032,5,303,0,0,6032,6033,5,94,0,0,6033,6034,
		3,1340,670,0,6034,6389,1,0,0,0,6035,6036,5,138,0,0,6036,6037,5,290,0,0,
		6037,6038,3,626,313,0,6038,6039,5,303,0,0,6039,6040,5,94,0,0,6040,6041,
		3,1340,670,0,6041,6389,1,0,0,0,6042,6043,5,138,0,0,6043,6044,5,453,0,0,
		6044,6045,3,1340,670,0,6045,6046,5,303,0,0,6046,6047,5,94,0,0,6047,6048,
		3,1340,670,0,6048,6389,1,0,0,0,6049,6050,5,138,0,0,6050,6051,5,443,0,0,
		6051,6052,3,626,313,0,6052,6053,5,303,0,0,6053,6054,5,94,0,0,6054,6055,
		3,1340,670,0,6055,6389,1,0,0,0,6056,6057,5,138,0,0,6057,6058,5,317,0,0,
		6058,6059,3,1340,670,0,6059,6060,5,303,0,0,6060,6061,5,94,0,0,6061,6062,
		3,1340,670,0,6062,6389,1,0,0,0,6063,6064,5,138,0,0,6064,6065,5,325,0,0,
		6065,6066,3,1340,670,0,6066,6067,5,303,0,0,6067,6068,5,94,0,0,6068,6069,
		3,1340,670,0,6069,6389,1,0,0,0,6070,6071,5,138,0,0,6071,6072,5,452,0,0,
		6072,6073,3,1340,670,0,6073,6074,5,303,0,0,6074,6075,5,94,0,0,6075,6076,
		3,1340,670,0,6076,6389,1,0,0,0,6077,6078,5,138,0,0,6078,6079,5,92,0,0,
		6079,6080,3,1074,537,0,6080,6081,5,303,0,0,6081,6082,5,94,0,0,6082,6083,
		3,1340,670,0,6083,6389,1,0,0,0,6084,6085,5,138,0,0,6085,6086,5,92,0,0,
		6086,6087,5,221,0,0,6087,6088,5,390,0,0,6088,6089,3,1074,537,0,6089,6090,
		5,303,0,0,6090,6091,5,94,0,0,6091,6092,3,1340,670,0,6092,6389,1,0,0,0,
		6093,6094,5,138,0,0,6094,6095,5,322,0,0,6095,6096,3,1336,668,0,6096,6097,
		5,303,0,0,6097,6098,5,94,0,0,6098,6099,3,1340,670,0,6099,6389,1,0,0,0,
		6100,6101,5,138,0,0,6101,6102,5,322,0,0,6102,6103,5,221,0,0,6103,6104,
		5,390,0,0,6104,6105,3,1336,668,0,6105,6106,5,303,0,0,6106,6107,5,94,0,
		0,6107,6108,3,1340,670,0,6108,6389,1,0,0,0,6109,6110,5,138,0,0,6110,6111,
		5,370,0,0,6111,6112,3,1336,668,0,6112,6113,5,303,0,0,6113,6114,5,94,0,
		0,6114,6115,3,1340,670,0,6115,6389,1,0,0,0,6116,6117,5,138,0,0,6117,6118,
		5,370,0,0,6118,6119,5,221,0,0,6119,6120,5,390,0,0,6120,6121,3,1336,668,
		0,6121,6122,5,303,0,0,6122,6123,5,94,0,0,6123,6124,3,1340,670,0,6124,6389,
		1,0,0,0,6125,6126,5,138,0,0,6126,6127,5,252,0,0,6127,6128,5,370,0,0,6128,
		6129,3,1336,668,0,6129,6130,5,303,0,0,6130,6131,5,94,0,0,6131,6132,3,1340,
		670,0,6132,6389,1,0,0,0,6133,6134,5,138,0,0,6134,6135,5,252,0,0,6135,6136,
		5,370,0,0,6136,6137,5,221,0,0,6137,6138,5,390,0,0,6138,6139,3,1336,668,
		0,6139,6140,5,303,0,0,6140,6141,5,94,0,0,6141,6142,3,1340,670,0,6142,6389,
		1,0,0,0,6143,6144,5,138,0,0,6144,6145,5,227,0,0,6145,6146,3,1336,668,0,
		6146,6147,5,303,0,0,6147,6148,5,94,0,0,6148,6149,3,1340,670,0,6149,6389,
		1,0,0,0,6150,6151,5,138,0,0,6151,6152,5,227,0,0,6152,6153,5,221,0,0,6153,
		6154,5,390,0,0,6154,6155,3,1336,668,0,6155,6156,5,303,0,0,6156,6157,5,
		94,0,0,6157,6158,3,1340,670,0,6158,6389,1,0,0,0,6159,6160,5,138,0,0,6160,
		6161,5,63,0,0,6161,6162,5,92,0,0,6162,6163,3,1074,537,0,6163,6164,5,303,
		0,0,6164,6165,5,94,0,0,6165,6166,3,1340,670,0,6166,6389,1,0,0,0,6167,6168,
		5,138,0,0,6168,6169,5,63,0,0,6169,6170,5,92,0,0,6170,6171,5,221,0,0,6171,
		6172,5,390,0,0,6172,6173,3,1074,537,0,6173,6174,5,303,0,0,6174,6175,5,
		94,0,0,6175,6176,3,1340,670,0,6176,6389,1,0,0,0,6177,6178,5,138,0,0,6178,
		6179,5,92,0,0,6179,6180,3,1074,537,0,6180,6181,5,303,0,0,6181,6182,3,724,
		362,0,6182,6183,3,1340,670,0,6183,6184,5,94,0,0,6184,6185,3,1340,670,0,
		6185,6389,1,0,0,0,6186,6187,5,138,0,0,6187,6188,5,92,0,0,6188,6189,5,221,
		0,0,6189,6190,5,390,0,0,6190,6191,3,1074,537,0,6191,6192,5,303,0,0,6192,
		6193,3,724,362,0,6193,6194,3,1340,670,0,6194,6195,5,94,0,0,6195,6196,3,
		1340,670,0,6196,6389,1,0,0,0,6197,6198,5,138,0,0,6198,6199,5,370,0,0,6199,
		6200,3,1336,668,0,6200,6201,5,303,0,0,6201,6202,3,724,362,0,6202,6203,
		3,1340,670,0,6203,6204,5,94,0,0,6204,6205,3,1340,670,0,6205,6389,1,0,0,
		0,6206,6207,5,138,0,0,6207,6208,5,370,0,0,6208,6209,5,221,0,0,6209,6210,
		5,390,0,0,6210,6211,3,1336,668,0,6211,6212,5,303,0,0,6212,6213,3,724,362,
		0,6213,6214,3,1340,670,0,6214,6215,5,94,0,0,6215,6216,3,1340,670,0,6216,
		6389,1,0,0,0,6217,6218,5,138,0,0,6218,6219,5,252,0,0,6219,6220,5,370,0,
		0,6220,6221,3,1336,668,0,6221,6222,5,303,0,0,6222,6223,3,724,362,0,6223,
		6224,3,1340,670,0,6224,6225,5,94,0,0,6225,6226,3,1340,670,0,6226,6389,
		1,0,0,0,6227,6228,5,138,0,0,6228,6229,5,252,0,0,6229,6230,5,370,0,0,6230,
		6231,5,221,0,0,6231,6232,5,390,0,0,6232,6233,3,1336,668,0,6233,6234,5,
		303,0,0,6234,6235,3,724,362,0,6235,6236,3,1340,670,0,6236,6237,5,94,0,
		0,6237,6238,3,1340,670,0,6238,6389,1,0,0,0,6239,6240,5,138,0,0,6240,6241,
		5,92,0,0,6241,6242,3,1074,537,0,6242,6243,5,303,0,0,6243,6244,5,45,0,0,
		6244,6245,3,1340,670,0,6245,6246,5,94,0,0,6246,6247,3,1340,670,0,6247,
		6389,1,0,0,0,6248,6249,5,138,0,0,6249,6250,5,92,0,0,6250,6251,5,221,0,
		0,6251,6252,5,390,0,0,6252,6253,3,1074,537,0,6253,6254,5,303,0,0,6254,
		6255,5,45,0,0,6255,6256,3,1340,670,0,6256,6257,5,94,0,0,6257,6258,3,1340,
		670,0,6258,6389,1,0,0,0,6259,6260,5,138,0,0,6260,6261,5,63,0,0,6261,6262,
		5,92,0,0,6262,6263,3,1074,537,0,6263,6264,5,303,0,0,6264,6265,3,724,362,
		0,6265,6266,3,1340,670,0,6266,6267,5,94,0,0,6267,6268,3,1340,670,0,6268,
		6389,1,0,0,0,6269,6270,5,138,0,0,6270,6271,5,63,0,0,6271,6272,5,92,0,0,
		6272,6273,5,221,0,0,6273,6274,5,390,0,0,6274,6275,3,1074,537,0,6275,6276,
		5,303,0,0,6276,6277,3,724,362,0,6277,6278,3,1340,670,0,6278,6279,5,94,
		0,0,6279,6280,3,1340,670,0,6280,6389,1,0,0,0,6281,6282,5,138,0,0,6282,
		6283,5,315,0,0,6283,6284,3,1340,670,0,6284,6285,5,80,0,0,6285,6286,3,1336,
		668,0,6286,6287,5,303,0,0,6287,6288,5,94,0,0,6288,6289,3,1340,670,0,6289,
		6389,1,0,0,0,6290,6291,5,138,0,0,6291,6292,5,351,0,0,6292,6293,3,1340,
		670,0,6293,6294,5,80,0,0,6294,6295,3,1336,668,0,6295,6296,5,303,0,0,6296,
		6297,5,94,0,0,6297,6298,3,1340,670,0,6298,6389,1,0,0,0,6299,6300,5,138,
		0,0,6300,6301,5,199,0,0,6301,6302,5,351,0,0,6302,6303,3,1340,670,0,6303,
		6304,5,303,0,0,6304,6305,5,94,0,0,6305,6306,3,1340,670,0,6306,6389,1,0,
		0,0,6307,6308,5,138,0,0,6308,6309,5,312,0,0,6309,6310,3,1366,683,0,6310,
		6311,5,303,0,0,6311,6312,5,94,0,0,6312,6313,3,1366,683,0,6313,6389,1,0,
		0,0,6314,6315,5,138,0,0,6315,6316,5,99,0,0,6316,6317,3,1366,683,0,6317,
		6318,5,303,0,0,6318,6319,5,94,0,0,6319,6320,3,1366,683,0,6320,6389,1,0,
		0,0,6321,6322,5,138,0,0,6322,6323,5,345,0,0,6323,6324,3,1340,670,0,6324,
		6325,5,303,0,0,6325,6326,5,94,0,0,6326,6327,3,1340,670,0,6327,6389,1,0,
		0,0,6328,6329,5,138,0,0,6329,6330,5,336,0,0,6330,6331,3,524,262,0,6331,
		6332,5,303,0,0,6332,6333,5,94,0,0,6333,6334,3,1340,670,0,6334,6389,1,0,
		0,0,6335,6336,5,138,0,0,6336,6337,5,349,0,0,6337,6338,5,319,0,0,6338,6339,
		5,277,0,0,6339,6340,3,524,262,0,6340,6341,5,303,0,0,6341,6342,5,94,0,0,
		6342,6343,3,1340,670,0,6343,6389,1,0,0,0,6344,6345,5,138,0,0,6345,6346,
		5,349,0,0,6346,6347,5,319,0,0,6347,6348,5,186,0,0,6348,6349,3,524,262,
		0,6349,6350,5,303,0,0,6350,6351,5,94,0,0,6351,6352,3,1340,670,0,6352,6389,
		1,0,0,0,6353,6354,5,138,0,0,6354,6355,5,349,0,0,6355,6356,5,319,0,0,6356,
		6357,5,347,0,0,6357,6358,3,524,262,0,6358,6359,5,303,0,0,6359,6360,5,94,
		0,0,6360,6361,3,1340,670,0,6361,6389,1,0,0,0,6362,6363,5,138,0,0,6363,
		6364,5,349,0,0,6364,6365,5,319,0,0,6365,6366,5,164,0,0,6366,6367,3,524,
		262,0,6367,6368,5,303,0,0,6368,6369,5,94,0,0,6369,6370,3,1340,670,0,6370,
		6389,1,0,0,0,6371,6372,5,138,0,0,6372,6373,5,354,0,0,6373,6374,3,524,262,
		0,6374,6375,5,303,0,0,6375,6376,5,94,0,0,6376,6377,3,1340,670,0,6377,6389,
		1,0,0,0,6378,6379,5,138,0,0,6379,6380,5,354,0,0,6380,6381,3,524,262,0,
		6381,6382,5,303,0,0,6382,6383,5,144,0,0,6383,6384,3,1340,670,0,6384,6385,
		5,94,0,0,6385,6386,3,1340,670,0,6386,6387,3,108,54,0,6387,6389,1,0,0,0,
		6388,5920,1,0,0,0,6388,5927,1,0,0,0,6388,5934,1,0,0,0,6388,5941,1,0,0,
		0,6388,5948,1,0,0,0,6388,5955,1,0,0,0,6388,5964,1,0,0,0,6388,5973,1,0,
		0,0,6388,5980,1,0,0,0,6388,5987,1,0,0,0,6388,5995,1,0,0,0,6388,6005,1,
		0,0,0,6388,6015,1,0,0,0,6388,6024,1,0,0,0,6388,6035,1,0,0,0,6388,6042,
		1,0,0,0,6388,6049,1,0,0,0,6388,6056,1,0,0,0,6388,6063,1,0,0,0,6388,6070,
		1,0,0,0,6388,6077,1,0,0,0,6388,6084,1,0,0,0,6388,6093,1,0,0,0,6388,6100,
		1,0,0,0,6388,6109,1,0,0,0,6388,6116,1,0,0,0,6388,6125,1,0,0,0,6388,6133,
		1,0,0,0,6388,6143,1,0,0,0,6388,6150,1,0,0,0,6388,6159,1,0,0,0,6388,6167,
		1,0,0,0,6388,6177,1,0,0,0,6388,6186,1,0,0,0,6388,6197,1,0,0,0,6388,6206,
		1,0,0,0,6388,6217,1,0,0,0,6388,6227,1,0,0,0,6388,6239,1,0,0,0,6388,6248,
		1,0,0,0,6388,6259,1,0,0,0,6388,6269,1,0,0,0,6388,6281,1,0,0,0,6388,6290,
		1,0,0,0,6388,6299,1,0,0,0,6388,6307,1,0,0,0,6388,6314,1,0,0,0,6388,6321,
		1,0,0,0,6388,6328,1,0,0,0,6388,6335,1,0,0,0,6388,6344,1,0,0,0,6388,6353,
		1,0,0,0,6388,6362,1,0,0,0,6388,6371,1,0,0,0,6388,6378,1,0,0,0,6389,723,
		1,0,0,0,6390,6393,5,44,0,0,6391,6393,1,0,0,0,6392,6390,1,0,0,0,6392,6391,
		1,0,0,0,6393,725,1,0,0,0,6394,6395,5,327,0,0,6395,6398,5,175,0,0,6396,
		6398,1,0,0,0,6397,6394,1,0,0,0,6397,6396,1,0,0,0,6398,727,1,0,0,0,6399,
		6400,5,138,0,0,6400,6401,5,212,0,0,6401,6402,3,626,313,0,6402,6403,3,730,
		365,0,6403,6404,5,463,0,0,6404,6405,5,80,0,0,6405,6406,5,205,0,0,6406,
		6407,3,1340,670,0,6407,6457,1,0,0,0,6408,6409,5,138,0,0,6409,6410,5,290,
		0,0,6410,6411,3,626,313,0,6411,6412,3,730,365,0,6412,6413,5,463,0,0,6413,
		6414,5,80,0,0,6414,6415,5,205,0,0,6415,6416,3,1340,670,0,6416,6457,1,0,
		0,0,6417,6418,5,138,0,0,6418,6419,5,443,0,0,6419,6420,3,626,313,0,6420,
		6421,3,730,365,0,6421,6422,5,463,0,0,6422,6423,5,80,0,0,6423,6424,5,205,
		0,0,6424,6425,3,1340,670,0,6425,6457,1,0,0,0,6426,6427,5,138,0,0,6427,
		6428,5,351,0,0,6428,6429,3,1340,670,0,6429,6430,5,80,0,0,6430,6431,3,1336,
		668,0,6431,6432,3,730,365,0,6432,6433,5,463,0,0,6433,6434,5,80,0,0,6434,
		6435,5,205,0,0,6435,6436,3,1340,670,0,6436,6457,1,0,0,0,6437,6438,5,138,
		0,0,6438,6439,5,252,0,0,6439,6440,5,370,0,0,6440,6441,3,1336,668,0,6441,
		6442,3,730,365,0,6442,6443,5,463,0,0,6443,6444,5,80,0,0,6444,6445,5,205,
		0,0,6445,6446,3,1340,670,0,6446,6457,1,0,0,0,6447,6448,5,138,0,0,6448,
		6449,5,227,0,0,6449,6450,3,1336,668,0,6450,6451,3,730,365,0,6451,6452,
		5,463,0,0,6452,6453,5,80,0,0,6453,6454,5,205,0,0,6454,6455,3,1340,670,
		0,6455,6457,1,0,0,0,6456,6399,1,0,0,0,6456,6408,1,0,0,0,6456,6417,1,0,
		0,0,6456,6426,1,0,0,0,6456,6437,1,0,0,0,6456,6447,1,0,0,0,6457,729,1,0,
		0,0,6458,6461,5,263,0,0,6459,6461,1,0,0,0,6460,6458,1,0,0,0,6460,6459,
		1,0,0,0,6461,731,1,0,0,0,6462,6463,5,138,0,0,6463,6464,5,136,0,0,6464,
		6465,3,650,325,0,6465,6466,5,327,0,0,6466,6467,5,317,0,0,6467,6468,3,1340,
		670,0,6468,6680,1,0,0,0,6469,6470,5,138,0,0,6470,6471,5,108,0,0,6471,6472,
		3,524,262,0,6472,6473,5,327,0,0,6473,6474,5,317,0,0,6474,6475,3,1340,670,
		0,6475,6680,1,0,0,0,6476,6477,5,138,0,0,6477,6478,5,169,0,0,6478,6479,
		3,524,262,0,6479,6480,5,327,0,0,6480,6481,5,317,0,0,6481,6482,3,1340,670,
		0,6482,6680,1,0,0,0,6483,6484,5,138,0,0,6484,6485,5,190,0,0,6485,6486,
		3,524,262,0,6486,6487,5,327,0,0,6487,6488,5,317,0,0,6488,6489,3,1340,670,
		0,6489,6680,1,0,0,0,6490,6491,5,138,0,0,6491,6492,5,205,0,0,6492,6493,
		3,1340,670,0,6493,6494,5,327,0,0,6494,6495,5,317,0,0,6495,6496,3,1340,
		670,0,6496,6680,1,0,0,0,6497,6498,5,138,0,0,6498,6499,5,212,0,0,6499,6500,
		3,626,313,0,6500,6501,5,327,0,0,6501,6502,5,317,0,0,6502,6503,3,1340,670,
		0,6503,6680,1,0,0,0,6504,6505,5,138,0,0,6505,6506,5,272,0,0,6506,6507,
		3,688,344,0,6507,6508,5,327,0,0,6508,6509,5,317,0,0,6509,6510,3,1340,670,
		0,6510,6680,1,0,0,0,6511,6512,5,138,0,0,6512,6513,5,272,0,0,6513,6514,
		5,157,0,0,6514,6515,3,524,262,0,6515,6516,5,100,0,0,6516,6517,3,1340,670,
		0,6517,6518,5,327,0,0,6518,6519,5,317,0,0,6519,6520,3,1340,670,0,6520,
		6680,1,0,0,0,6521,6522,5,138,0,0,6522,6523,5,272,0,0,6523,6524,5,207,0,
		0,6524,6525,3,524,262,0,6525,6526,5,100,0,0,6526,6527,3,1340,670,0,6527,
		6528,5,327,0,0,6528,6529,5,317,0,0,6529,6530,3,1340,670,0,6530,6680,1,
		0,0,0,6531,6532,5,138,0,0,6532,6533,5,290,0,0,6533,6534,3,626,313,0,6534,
		6535,5,327,0,0,6535,6536,5,317,0,0,6536,6537,3,1340,670,0,6537,6680,1,
		0,0,0,6538,6539,5,138,0,0,6539,6540,5,443,0,0,6540,6541,3,626,313,0,6541,
		6542,5,327,0,0,6542,6543,5,317,0,0,6543,6544,3,1340,670,0,6544,6680,1,
		0,0,0,6545,6546,5,138,0,0,6546,6547,5,92,0,0,6547,6548,3,1074,537,0,6548,
		6549,5,327,0,0,6549,6550,5,317,0,0,6550,6551,3,1340,670,0,6551,6680,1,
		0,0,0,6552,6553,5,138,0,0,6553,6554,5,92,0,0,6554,6555,5,221,0,0,6555,
		6556,5,390,0,0,6556,6557,3,1074,537,0,6557,6558,5,327,0,0,6558,6559,5,
		317,0,0,6559,6560,3,1340,670,0,6560,6680,1,0,0,0,6561,6562,5,138,0,0,6562,
		6563,5,336,0,0,6563,6564,3,524,262,0,6564,6565,5,327,0,0,6565,6566,5,317,
		0,0,6566,6567,3,1340,670,0,6567,6680,1,0,0,0,6568,6569,5,138,0,0,6569,
		6570,5,349,0,0,6570,6571,5,319,0,0,6571,6572,5,277,0,0,6572,6573,3,524,
		262,0,6573,6574,5,327,0,0,6574,6575,5,317,0,0,6575,6576,3,1340,670,0,6576,
		6680,1,0,0,0,6577,6578,5,138,0,0,6578,6579,5,349,0,0,6579,6580,5,319,0,
		0,6580,6581,5,186,0,0,6581,6582,3,524,262,0,6582,6583,5,327,0,0,6583,6584,
		5,317,0,0,6584,6585,3,1340,670,0,6585,6680,1,0,0,0,6586,6587,5,138,0,0,
		6587,6588,5,349,0,0,6588,6589,5,319,0,0,6589,6590,5,347,0,0,6590,6591,
		3,524,262,0,6591,6592,5,327,0,0,6592,6593,5,317,0,0,6593,6594,3,1340,670,
		0,6594,6680,1,0,0,0,6595,6596,5,138,0,0,6596,6597,5,349,0,0,6597,6598,
		5,319,0,0,6598,6599,5,164,0,0,6599,6600,3,524,262,0,6600,6601,5,327,0,
		0,6601,6602,5,317,0,0,6602,6603,3,1340,670,0,6603,6680,1,0,0,0,6604,6605,
		5,138,0,0,6605,6606,5,322,0,0,6606,6607,3,1336,668,0,6607,6608,5,327,0,
		0,6608,6609,5,317,0,0,6609,6610,3,1340,670,0,6610,6680,1,0,0,0,6611,6612,
		5,138,0,0,6612,6613,5,322,0,0,6613,6614,5,221,0,0,6614,6615,5,390,0,0,
		6615,6616,3,1336,668,0,6616,6617,5,327,0,0,6617,6618,5,317,0,0,6618,6619,
		3,1340,670,0,6619,6680,1,0,0,0,6620,6621,5,138,0,0,6621,6622,5,370,0,0,
		6622,6623,3,1336,668,0,6623,6624,5,327,0,0,6624,6625,5,317,0,0,6625,6626,
		3,1340,670,0,6626,6680,1,0,0,0,6627,6628,5,138,0,0,6628,6629,5,370,0,0,
		6629,6630,5,221,0,0,6630,6631,5,390,0,0,6631,6632,3,1336,668,0,6632,6633,
		5,327,0,0,6633,6634,5,317,0,0,6634,6635,3,1340,670,0,6635,6680,1,0,0,0,
		6636,6637,5,138,0,0,6637,6638,5,252,0,0,6638,6639,5,370,0,0,6639,6640,
		3,1336,668,0,6640,6641,5,327,0,0,6641,6642,5,317,0,0,6642,6643,3,1340,
		670,0,6643,6680,1,0,0,0,6644,6645,5,138,0,0,6645,6646,5,252,0,0,6646,6647,
		5,370,0,0,6647,6648,5,221,0,0,6648,6649,5,390,0,0,6649,6650,3,1336,668,
		0,6650,6651,5,327,0,0,6651,6652,5,317,0,0,6652,6653,3,1340,670,0,6653,
		6680,1,0,0,0,6654,6655,5,138,0,0,6655,6656,5,63,0,0,6656,6657,5,92,0,0,
		6657,6658,3,1074,537,0,6658,6659,5,327,0,0,6659,6660,5,317,0,0,6660,6661,
		3,1340,670,0,6661,6680,1,0,0,0,6662,6663,5,138,0,0,6663,6664,5,63,0,0,
		6664,6665,5,92,0,0,6665,6666,5,221,0,0,6666,6667,5,390,0,0,6667,6668,3,
		1074,537,0,6668,6669,5,327,0,0,6669,6670,5,317,0,0,6670,6671,3,1340,670,
		0,6671,6680,1,0,0,0,6672,6673,5,138,0,0,6673,6674,5,354,0,0,6674,6675,
		3,524,262,0,6675,6676,5,327,0,0,6676,6677,5,317,0,0,6677,6678,3,1340,670,
		0,6678,6680,1,0,0,0,6679,6462,1,0,0,0,6679,6469,1,0,0,0,6679,6476,1,0,
		0,0,6679,6483,1,0,0,0,6679,6490,1,0,0,0,6679,6497,1,0,0,0,6679,6504,1,
		0,0,0,6679,6511,1,0,0,0,6679,6521,1,0,0,0,6679,6531,1,0,0,0,6679,6538,
		1,0,0,0,6679,6545,1,0,0,0,6679,6552,1,0,0,0,6679,6561,1,0,0,0,6679,6568,
		1,0,0,0,6679,6577,1,0,0,0,6679,6586,1,0,0,0,6679,6595,1,0,0,0,6679,6604,
		1,0,0,0,6679,6611,1,0,0,0,6679,6620,1,0,0,0,6679,6627,1,0,0,0,6679,6636,
		1,0,0,0,6679,6644,1,0,0,0,6679,6654,1,0,0,0,6679,6662,1,0,0,0,6679,6672,
		1,0,0,0,6680,733,1,0,0,0,6681,6682,5,138,0,0,6682,6683,5,272,0,0,6683,
		6684,3,688,344,0,6684,6685,5,327,0,0,6685,6686,5,2,0,0,6686,6687,3,736,
		368,0,6687,6688,5,3,0,0,6688,735,1,0,0,0,6689,6694,3,738,369,0,6690,6691,
		5,6,0,0,6691,6693,3,738,369,0,6692,6690,1,0,0,0,6693,6696,1,0,0,0,6694,
		6692,1,0,0,0,6694,6695,1,0,0,0,6695,737,1,0,0,0,6696,6694,1,0,0,0,6697,
		6698,3,1380,690,0,6698,6699,5,10,0,0,6699,6700,5,401,0,0,6700,6706,1,0,
		0,0,6701,6702,3,1380,690,0,6702,6703,5,10,0,0,6703,6704,3,740,370,0,6704,
		6706,1,0,0,0,6705,6697,1,0,0,0,6705,6701,1,0,0,0,6706,739,1,0,0,0,6707,
		6713,3,640,320,0,6708,6713,3,1392,696,0,6709,6713,3,1276,638,0,6710,6713,
		3,292,146,0,6711,6713,3,1358,679,0,6712,6707,1,0,0,0,6712,6708,1,0,0,0,
		6712,6709,1,0,0,0,6712,6710,1,0,0,0,6712,6711,1,0,0,0,6713,741,1,0,0,0,
		6714,6715,5,138,0,0,6715,6716,5,354,0,0,6716,6717,3,524,262,0,6717,6718,
		5,327,0,0,6718,6719,5,2,0,0,6719,6720,3,736,368,0,6720,6721,5,3,0,0,6721,
		743,1,0,0,0,6722,6723,5,138,0,0,6723,6724,5,136,0,0,6724,6725,3,650,325,
		0,6725,6726,5,276,0,0,6726,6727,5,94,0,0,6727,6728,3,1368,684,0,6728,6906,
		1,0,0,0,6729,6730,5,138,0,0,6730,6731,5,108,0,0,6731,6732,3,524,262,0,
		6732,6733,5,276,0,0,6733,6734,5,94,0,0,6734,6735,3,1368,684,0,6735,6906,
		1,0,0,0,6736,6737,5,138,0,0,6737,6738,5,169,0,0,6738,6739,3,524,262,0,
		6739,6740,5,276,0,0,6740,6741,5,94,0,0,6741,6742,3,1368,684,0,6742,6906,
		1,0,0,0,6743,6744,5,138,0,0,6744,6745,5,176,0,0,6745,6746,3,1340,670,0,
		6746,6747,5,276,0,0,6747,6748,5,94,0,0,6748,6749,3,1368,684,0,6749,6906,
		1,0,0,0,6750,6751,5,138,0,0,6751,6752,5,190,0,0,6752,6753,3,524,262,0,
		6753,6754,5,276,0,0,6754,6755,5,94,0,0,6755,6756,3,1368,684,0,6756,6906,
		1,0,0,0,6757,6758,5,138,0,0,6758,6759,5,212,0,0,6759,6760,3,626,313,0,
		6760,6761,5,276,0,0,6761,6762,5,94,0,0,6762,6763,3,1368,684,0,6763,6906,
		1,0,0,0,6764,6765,5,138,0,0,6765,6766,3,308,154,0,6766,6767,5,239,0,0,
		6767,6768,3,1340,670,0,6768,6769,5,276,0,0,6769,6770,5,94,0,0,6770,6771,
		3,1368,684,0,6771,6906,1,0,0,0,6772,6773,5,138,0,0,6773,6774,5,240,0,0,
		6774,6775,5,268,0,0,6775,6776,3,292,146,0,6776,6777,5,276,0,0,6777,6778,
		5,94,0,0,6778,6779,3,1368,684,0,6779,6906,1,0,0,0,6780,6781,5,138,0,0,
		6781,6782,5,272,0,0,6782,6783,3,688,344,0,6783,6784,5,276,0,0,6784,6785,
		5,94,0,0,6785,6786,3,1368,684,0,6786,6906,1,0,0,0,6787,6788,5,138,0,0,
		6788,6789,5,272,0,0,6789,6790,5,157,0,0,6790,6791,3,524,262,0,6791,6792,
		5,100,0,0,6792,6793,3,1340,670,0,6793,6794,5,276,0,0,6794,6795,5,94,0,
		0,6795,6796,3,1368,684,0,6796,6906,1,0,0,0,6797,6798,5,138,0,0,6798,6799,
		5,272,0,0,6799,6800,5,207,0,0,6800,6801,3,524,262,0,6801,6802,5,100,0,
		0,6802,6803,3,1340,670,0,6803,6804,5,276,0,0,6804,6805,5,94,0,0,6805,6806,
		3,1368,684,0,6806,6906,1,0,0,0,6807,6808,5,138,0,0,6808,6809,5,290,0,0,
		6809,6810,3,626,313,0,6810,6811,5,276,0,0,6811,6812,5,94,0,0,6812,6813,
		3,1368,684,0,6813,6906,1,0,0,0,6814,6815,5,138,0,0,6815,6816,5,443,0,0,
		6816,6817,3,626,313,0,6817,6818,5,276,0,0,6818,6819,5,94,0,0,6819,6820,
		3,1368,684,0,6820,6906,1,0,0,0,6821,6822,5,138,0,0,6822,6823,5,317,0,0,
		6823,6824,3,1340,670,0,6824,6825,5,276,0,0,6825,6826,5,94,0,0,6826,6827,
		3,1368,684,0,6827,6906,1,0,0,0,6828,6829,5,138,0,0,6829,6830,5,354,0,0,
		6830,6831,3,524,262,0,6831,6832,5,276,0,0,6832,6833,5,94,0,0,6833,6834,
		3,1368,684,0,6834,6906,1,0,0,0,6835,6836,5,138,0,0,6836,6837,5,345,0,0,
		6837,6838,3,1340,670,0,6838,6839,5,276,0,0,6839,6840,5,94,0,0,6840,6841,
		3,1368,684,0,6841,6906,1,0,0,0,6842,6843,5,138,0,0,6843,6844,5,336,0,0,
		6844,6845,3,524,262,0,6845,6846,5,276,0,0,6846,6847,5,94,0,0,6847,6848,
		3,1368,684,0,6848,6906,1,0,0,0,6849,6850,5,138,0,0,6850,6851,5,349,0,0,
		6851,6852,5,319,0,0,6852,6853,5,186,0,0,6853,6854,3,524,262,0,6854,6855,
		5,276,0,0,6855,6856,5,94,0,0,6856,6857,3,1368,684,0,6857,6906,1,0,0,0,
		6858,6859,5,138,0,0,6859,6860,5,349,0,0,6860,6861,5,319,0,0,6861,6862,
		5,164,0,0,6862,6863,3,524,262,0,6863,6864,5,276,0,0,6864,6865,5,94,0,0,
		6865,6866,3,1368,684,0,6866,6906,1,0,0,0,6867,6868,5,138,0,0,6868,6869,
		5,63,0,0,6869,6870,5,175,0,0,6870,6871,5,375,0,0,6871,6872,3,1340,670,
		0,6872,6873,5,276,0,0,6873,6874,5,94,0,0,6874,6875,3,1368,684,0,6875,6906,
		1,0,0,0,6876,6877,5,138,0,0,6877,6878,5,325,0,0,6878,6879,3,1340,670,0,
		6879,6880,5,276,0,0,6880,6881,5,94,0,0,6881,6882,3,1368,684,0,6882,6906,
		1,0,0,0,6883,6884,5,138,0,0,6884,6885,5,199,0,0,6885,6886,5,351,0,0,6886,
		6887,3,1340,670,0,6887,6888,5,276,0,0,6888,6889,5,94,0,0,6889,6890,3,1368,
		684,0,6890,6906,1,0,0,0,6891,6892,5,138,0,0,6892,6893,5,453,0,0,6893,6894,
		3,1340,670,0,6894,6895,5,276,0,0,6895,6896,5,94,0,0,6896,6897,3,1368,684,
		0,6897,6906,1,0,0,0,6898,6899,5,138,0,0,6899,6900,5,452,0,0,6900,6901,
		3,1340,670,0,6901,6902,5,276,0,0,6902,6903,5,94,0,0,6903,6904,3,1368,684,
		0,6904,6906,1,0,0,0,6905,6722,1,0,0,0,6905,6729,1,0,0,0,6905,6736,1,0,
		0,0,6905,6743,1,0,0,0,6905,6750,1,0,0,0,6905,6757,1,0,0,0,6905,6764,1,
		0,0,0,6905,6772,1,0,0,0,6905,6780,1,0,0,0,6905,6787,1,0,0,0,6905,6797,
		1,0,0,0,6905,6807,1,0,0,0,6905,6814,1,0,0,0,6905,6821,1,0,0,0,6905,6828,
		1,0,0,0,6905,6835,1,0,0,0,6905,6842,1,0,0,0,6905,6849,1,0,0,0,6905,6858,
		1,0,0,0,6905,6867,1,0,0,0,6905,6876,1,0,0,0,6905,6883,1,0,0,0,6905,6891,
		1,0,0,0,6905,6898,1,0,0,0,6906,745,1,0,0,0,6907,6908,5,46,0,0,6908,6909,
		5,453,0,0,6909,6910,3,1340,670,0,6910,6911,3,748,374,0,6911,6912,3,664,
		332,0,6912,747,1,0,0,0,6913,6916,3,750,375,0,6914,6916,1,0,0,0,6915,6913,
		1,0,0,0,6915,6914,1,0,0,0,6916,749,1,0,0,0,6917,6918,5,62,0,0,6918,6919,
		5,92,0,0,6919,6924,3,1076,538,0,6920,6921,5,62,0,0,6921,6922,5,30,0,0,
		6922,6924,5,344,0,0,6923,6917,1,0,0,0,6923,6920,1,0,0,0,6924,751,1,0,0,
		0,6925,6926,5,138,0,0,6926,6927,5,453,0,0,6927,6928,3,1340,670,0,6928,
		6929,5,327,0,0,6929,6930,3,460,230,0,6930,6953,1,0,0,0,6931,6932,5,138,
		0,0,6932,6933,5,453,0,0,6933,6934,3,1340,670,0,6934,6935,5,133,0,0,6935,
		6936,5,92,0,0,6936,6937,3,1076,538,0,6937,6953,1,0,0,0,6938,6939,5,138,
		0,0,6939,6940,5,453,0,0,6940,6941,3,1340,670,0,6941,6942,5,327,0,0,6942,
		6943,5,92,0,0,6943,6944,3,1076,538,0,6944,6953,1,0,0,0,6945,6946,5,138,
		0,0,6946,6947,5,453,0,0,6947,6948,3,1340,670,0,6948,6949,5,192,0,0,6949,
		6950,5,92,0,0,6950,6951,3,1076,538,0,6951,6953,1,0,0,0,6952,6925,1,0,0,
		0,6952,6931,1,0,0,0,6952,6938,1,0,0,0,6952,6945,1,0,0,0,6953,753,1,0,0,
		0,6954,6955,5,46,0,0,6955,6956,5,452,0,0,6956,6957,3,1340,670,0,6957,6958,
		5,165,0,0,6958,6959,3,1358,679,0,6959,6960,5,453,0,0,6960,6961,3,756,378,
		0,6961,6962,3,664,332,0,6962,755,1,0,0,0,6963,6968,3,758,379,0,6964,6965,
		5,6,0,0,6965,6967,3,758,379,0,6966,6964,1,0,0,0,6967,6970,1,0,0,0,6968,
		6966,1,0,0,0,6968,6969,1,0,0,0,6969,757,1,0,0,0,6970,6968,1,0,0,0,6971,
		6972,3,1380,690,0,6972,759,1,0,0,0,6973,6974,5,138,0,0,6974,6975,5,452,
		0,0,6975,6976,3,1340,670,0,6976,6977,5,327,0,0,6977,6978,3,460,230,0,6978,
		7011,1,0,0,0,6979,6980,5,138,0,0,6980,6981,5,452,0,0,6981,6982,3,1340,
		670,0,6982,6983,5,165,0,0,6983,6984,3,1358,679,0,6984,7011,1,0,0,0,6985,
		6986,5,138,0,0,6986,6987,5,452,0,0,6987,6988,3,1340,670,0,6988,6989,5,
		299,0,0,6989,6990,5,453,0,0,6990,6991,3,664,332,0,6991,7011,1,0,0,0,6992,
		6993,5,138,0,0,6993,6994,5,452,0,0,6994,6995,3,1340,670,0,6995,6996,5,
		327,0,0,6996,6997,5,453,0,0,6997,6998,3,756,378,0,6998,6999,3,664,332,
		0,6999,7011,1,0,0,0,7000,7001,5,138,0,0,7001,7002,5,452,0,0,7002,7003,
		3,1340,670,0,7003,7004,5,194,0,0,7004,7011,1,0,0,0,7005,7006,5,138,0,0,
		7006,7007,5,452,0,0,7007,7008,3,1340,670,0,7008,7009,5,187,0,0,7009,7011,
		1,0,0,0,7010,6973,1,0,0,0,7010,6979,1,0,0,0,7010,6985,1,0,0,0,7010,6992,
		1,0,0,0,7010,7000,1,0,0,0,7010,7005,1,0,0,0,7011,761,1,0,0,0,7012,7013,
		5,192,0,0,7013,7014,5,452,0,0,7014,7015,3,1340,670,0,7015,7016,3,108,54,
		0,7016,7025,1,0,0,0,7017,7018,5,192,0,0,7018,7019,5,452,0,0,7019,7020,
		5,221,0,0,7020,7021,5,390,0,0,7021,7022,3,1340,670,0,7022,7023,3,108,54,
		0,7023,7025,1,0,0,0,7024,7012,1,0,0,0,7024,7017,1,0,0,0,7025,763,1,0,0,
		0,7026,7027,5,46,0,0,7027,7028,3,618,309,0,7028,7029,5,315,0,0,7029,7030,
		3,1340,670,0,7030,7031,5,36,0,0,7031,7032,5,80,0,0,7032,7033,3,774,387,
		0,7033,7034,5,94,0,0,7034,7035,3,1336,668,0,7035,7036,3,1094,547,0,7036,
		7037,5,57,0,0,7037,7038,3,776,388,0,7038,7039,3,766,383,0,7039,765,1,0,
		0,0,7040,7047,5,264,0,0,7041,7047,3,770,385,0,7042,7043,5,2,0,0,7043,7044,
		3,768,384,0,7044,7045,5,3,0,0,7045,7047,1,0,0,0,7046,7040,1,0,0,0,7046,
		7041,1,0,0,0,7046,7042,1,0,0,0,7047,767,1,0,0,0,7048,7053,3,772,386,0,
		7049,7050,5,7,0,0,7050,7052,3,772,386,0,7051,7049,1,0,0,0,7052,7055,1,
		0,0,0,7053,7051,1,0,0,0,7053,7054,1,0,0,0,7054,769,1,0,0,0,7055,7053,1,
		0,0,0,7056,7062,3,960,480,0,7057,7062,3,902,451,0,7058,7062,3,942,471,
		0,7059,7062,3,928,464,0,7060,7062,3,778,389,0,7061,7056,1,0,0,0,7061,7057,
		1,0,0,0,7061,7058,1,0,0,0,7061,7059,1,0,0,0,7061,7060,1,0,0,0,7062,771,
		1,0,0,0,7063,7066,3,770,385,0,7064,7066,1,0,0,0,7065,7063,1,0,0,0,7065,
		7064,1,0,0,0,7066,773,1,0,0,0,7067,7068,7,32,0,0,7068,775,1,0,0,0,7069,
		7073,5,234,0,0,7070,7073,5,137,0,0,7071,7073,1,0,0,0,7072,7069,1,0,0,0,
		7072,7070,1,0,0,0,7072,7071,1,0,0,0,7073,777,1,0,0,0,7074,7075,5,265,0,
		0,7075,7076,3,1372,686,0,7076,7077,3,780,390,0,7077,779,1,0,0,0,7078,7079,
		5,6,0,0,7079,7082,3,1358,679,0,7080,7082,1,0,0,0,7081,7078,1,0,0,0,7081,
		7080,1,0,0,0,7082,781,1,0,0,0,7083,7084,5,244,0,0,7084,7085,3,1372,686,
		0,7085,783,1,0,0,0,7086,7087,5,360,0,0,7087,7091,3,1372,686,0,7088,7089,
		5,360,0,0,7089,7091,5,9,0,0,7090,7086,1,0,0,0,7090,7088,1,0,0,0,7091,785,
		1,0,0,0,7092,7093,5,129,0,0,7093,7094,3,788,394,0,7094,7095,3,796,398,
		0,7095,7143,1,0,0,0,7096,7097,5,147,0,0,7097,7098,3,788,394,0,7098,7099,
		3,794,397,0,7099,7143,1,0,0,0,7100,7101,5,334,0,0,7101,7102,5,350,0,0,
		7102,7143,3,794,397,0,7103,7104,5,162,0,0,7104,7105,3,788,394,0,7105,7106,
		3,796,398,0,7106,7143,1,0,0,0,7107,7108,5,455,0,0,7108,7109,3,788,394,
		0,7109,7110,3,796,398,0,7110,7143,1,0,0,0,7111,7112,5,313,0,0,7112,7113,
		3,788,394,0,7113,7114,3,796,398,0,7114,7143,1,0,0,0,7115,7116,5,316,0,
		0,7116,7143,3,1372,686,0,7117,7118,5,302,0,0,7118,7119,5,316,0,0,7119,
		7143,3,1372,686,0,7120,7121,5,302,0,0,7121,7143,3,1372,686,0,7122,7123,
		5,313,0,0,7123,7124,3,788,394,0,7124,7125,5,94,0,0,7125,7126,5,316,0,0,
		7126,7127,3,1372,686,0,7127,7143,1,0,0,0,7128,7129,5,313,0,0,7129,7130,
		3,788,394,0,7130,7131,5,94,0,0,7131,7132,3,1372,686,0,7132,7143,1,0,0,
		0,7133,7134,5,284,0,0,7134,7135,5,350,0,0,7135,7143,3,1358,679,0,7136,
		7137,5,162,0,0,7137,7138,5,285,0,0,7138,7143,3,1358,679,0,7139,7140,5,
		313,0,0,7140,7141,5,285,0,0,7141,7143,3,1358,679,0,7142,7092,1,0,0,0,7142,
		7096,1,0,0,0,7142,7100,1,0,0,0,7142,7103,1,0,0,0,7142,7107,1,0,0,0,7142,
		7111,1,0,0,0,7142,7115,1,0,0,0,7142,7117,1,0,0,0,7142,7120,1,0,0,0,7142,
		7122,1,0,0,0,7142,7128,1,0,0,0,7142,7133,1,0,0,0,7142,7136,1,0,0,0,7142,
		7139,1,0,0,0,7143,787,1,0,0,0,7144,7149,5,374,0,0,7145,7149,5,350,0,0,
		7146,7149,5,143,0,0,7147,7149,1,0,0,0,7148,7144,1,0,0,0,7148,7145,1,0,
		0,0,7148,7146,1,0,0,0,7148,7147,1,0,0,0,7149,789,1,0,0,0,7150,7151,5,236,
		0,0,7151,7152,5,243,0,0,7152,7161,3,64,32,0,7153,7154,5,294,0,0,7154,7161,
		5,81,0,0,7155,7156,5,294,0,0,7156,7161,5,376,0,0,7157,7161,5,54,0,0,7158,
		7159,5,77,0,0,7159,7161,5,54,0,0,7160,7150,1,0,0,0,7160,7153,1,0,0,0,7160,
		7155,1,0,0,0,7160,7157,1,0,0,0,7160,7158,1,0,0,0,7161,791,1,0,0,0,7162,
		7169,3,790,395,0,7163,7165,5,6,0,0,7164,7163,1,0,0,0,7164,7165,1,0,0,0,
		7165,7166,1,0,0,0,7166,7168,3,790,395,0,7167,7164,1,0,0,0,7168,7171,1,
		0,0,0,7169,7167,1,0,0,0,7169,7170,1,0,0,0,7170,793,1,0,0,0,7171,7169,1,
		0,0,0,7172,7175,3,792,396,0,7173,7175,1,0,0,0,7174,7172,1,0,0,0,7174,7173,
		1,0,0,0,7175,795,1,0,0,0,7176,7178,5,33,0,0,7177,7179,5,263,0,0,7178,7177,
		1,0,0,0,7178,7179,1,0,0,0,7179,7180,1,0,0,0,7180,7183,5,154,0,0,7181,7183,
		1,0,0,0,7182,7176,1,0,0,0,7182,7181,1,0,0,0,7183,797,1,0,0,0,7184,7187,
		5,46,0,0,7185,7186,5,82,0,0,7186,7188,5,305,0,0,7187,7185,1,0,0,0,7187,
		7188,1,0,0,0,7188,7189,1,0,0,0,7189,7203,3,174,87,0,7190,7191,5,370,0,
		0,7191,7192,3,1336,668,0,7192,7193,3,214,107,0,7193,7194,3,118,59,0,7194,
		7204,1,0,0,0,7195,7196,5,297,0,0,7196,7197,5,370,0,0,7197,7198,3,1336,
		668,0,7198,7199,5,2,0,0,7199,7200,3,216,108,0,7200,7201,5,3,0,0,7201,7202,
		3,118,59,0,7202,7204,1,0,0,0,7203,7190,1,0,0,0,7203,7195,1,0,0,0,7204,
		7205,1,0,0,0,7205,7206,5,36,0,0,7206,7207,3,960,480,0,7207,7208,3,800,
		400,0,7208,799,1,0,0,0,7209,7211,5,105,0,0,7210,7212,7,33,0,0,7211,7210,
		1,0,0,0,7211,7212,1,0,0,0,7212,7213,1,0,0,0,7213,7214,5,42,0,0,7214,7217,
		5,273,0,0,7215,7217,1,0,0,0,7216,7209,1,0,0,0,7216,7215,1,0,0,0,7217,801,
		1,0,0,0,7218,7219,5,245,0,0,7219,7220,3,1344,672,0,7220,803,1,0,0,0,7221,
		7222,5,46,0,0,7222,7223,5,176,0,0,7223,7224,3,1340,670,0,7224,7225,3,16,
		8,0,7225,7226,3,806,403,0,7226,805,1,0,0,0,7227,7230,3,808,404,0,7228,
		7230,1,0,0,0,7229,7227,1,0,0,0,7229,7228,1,0,0,0,7230,807,1,0,0,0,7231,
		7233,3,810,405,0,7232,7231,1,0,0,0,7233,7234,1,0,0,0,7234,7232,1,0,0,0,
		7234,7235,1,0,0,0,7235,809,1,0,0,0,7236,7237,3,812,406,0,7237,7241,3,814,
		407,0,7238,7242,3,1364,682,0,7239,7242,3,66,33,0,7240,7242,5,53,0,0,7241,
		7238,1,0,0,0,7241,7239,1,0,0,0,7241,7240,1,0,0,0,7242,811,1,0,0,0,7243,
		7252,3,1382,691,0,7244,7245,5,165,0,0,7245,7252,5,74,0,0,7246,7252,5,195,
		0,0,7247,7252,5,247,0,0,7248,7252,5,276,0,0,7249,7252,5,345,0,0,7250,7252,
		5,347,0,0,7251,7243,1,0,0,0,7251,7244,1,0,0,0,7251,7246,1,0,0,0,7251,7247,
		1,0,0,0,7251,7248,1,0,0,0,7251,7249,1,0,0,0,7251,7250,1,0,0,0,7252,813,
		1,0,0,0,7253,7256,5,10,0,0,7254,7256,1,0,0,0,7255,7253,1,0,0,0,7255,7254,
		1,0,0,0,7256,815,1,0,0,0,7257,7258,5,138,0,0,7258,7259,5,176,0,0,7259,
		7266,3,1340,670,0,7260,7261,5,105,0,0,7261,7267,3,806,403,0,7262,7267,
		3,806,403,0,7263,7264,5,327,0,0,7264,7265,5,345,0,0,7265,7267,3,1340,670,
		0,7266,7260,1,0,0,0,7266,7262,1,0,0,0,7266,7263,1,0,0,0,7267,817,1,0,0,
		0,7268,7269,5,138,0,0,7269,7270,5,176,0,0,7270,7271,3,1340,670,0,7271,
		7272,3,80,40,0,7272,819,1,0,0,0,7273,7274,5,192,0,0,7274,7277,5,176,0,
		0,7275,7276,5,221,0,0,7276,7278,5,390,0,0,7277,7275,1,0,0,0,7277,7278,
		1,0,0,0,7278,7279,1,0,0,0,7279,7285,3,1340,670,0,7280,7281,3,16,8,0,7281,
		7282,5,2,0,0,7282,7283,3,822,411,0,7283,7284,5,3,0,0,7284,7286,1,0,0,0,
		7285,7280,1,0,0,0,7285,7286,1,0,0,0,7286,821,1,0,0,0,7287,7292,3,824,412,
		0,7288,7289,5,6,0,0,7289,7291,3,824,412,0,7290,7288,1,0,0,0,7291,7294,
		1,0,0,0,7292,7290,1,0,0,0,7292,7293,1,0,0,0,7293,823,1,0,0,0,7294,7292,
		1,0,0,0,7295,7296,5,210,0,0,7296,825,1,0,0,0,7297,7298,5,138,0,0,7298,
		7299,5,108,0,0,7299,7300,3,524,262,0,7300,7301,5,299,0,0,7301,7302,5,369,
		0,0,7302,827,1,0,0,0,7303,7304,5,138,0,0,7304,7305,5,343,0,0,7305,7306,
		7,34,0,0,7306,7307,3,54,27,0,7307,829,1,0,0,0,7308,7309,5,46,0,0,7309,
		7310,5,190,0,0,7310,7311,3,524,262,0,7311,7312,3,834,417,0,7312,7313,3,
		1118,559,0,7313,7314,3,192,96,0,7314,831,1,0,0,0,7315,7316,5,138,0,0,7316,
		7317,5,190,0,0,7317,7339,3,524,262,0,7318,7340,3,106,53,0,7319,7320,5,
		192,0,0,7320,7321,5,77,0,0,7321,7340,5,78,0,0,7322,7323,5,327,0,0,7323,
		7324,5,77,0,0,7324,7340,5,78,0,0,7325,7326,5,133,0,0,7326,7340,3,208,104,
		0,7327,7328,5,192,0,0,7328,7331,5,45,0,0,7329,7330,5,221,0,0,7330,7332,
		5,390,0,0,7331,7329,1,0,0,0,7331,7332,1,0,0,0,7332,7333,1,0,0,0,7333,7334,
		3,1340,670,0,7334,7335,3,108,54,0,7335,7340,1,0,0,0,7336,7337,5,366,0,
		0,7337,7338,5,45,0,0,7338,7340,3,1340,670,0,7339,7318,1,0,0,0,7339,7319,
		1,0,0,0,7339,7322,1,0,0,0,7339,7325,1,0,0,0,7339,7327,1,0,0,0,7339,7336,
		1,0,0,0,7340,833,1,0,0,0,7341,7344,5,36,0,0,7342,7344,1,0,0,0,7343,7341,
		1,0,0,0,7343,7342,1,0,0,0,7344,835,1,0,0,0,7345,7346,5,138,0,0,7346,7347,
		5,349,0,0,7347,7348,5,319,0,0,7348,7349,5,186,0,0,7349,7350,3,524,262,
		0,7350,7351,3,460,230,0,7351,837,1,0,0,0,7352,7353,5,138,0,0,7353,7354,
		5,349,0,0,7354,7355,5,319,0,0,7355,7356,5,164,0,0,7356,7357,3,524,262,
		0,7357,7358,5,133,0,0,7358,7359,5,249,0,0,7359,7360,5,62,0,0,7360,7361,
		3,1338,669,0,7361,7362,3,840,420,0,7362,7363,3,522,261,0,7363,7425,1,0,
		0,0,7364,7365,5,138,0,0,7365,7366,5,349,0,0,7366,7367,5,319,0,0,7367,7368,
		5,164,0,0,7368,7369,3,524,262,0,7369,7370,5,138,0,0,7370,7371,5,249,0,
		0,7371,7372,5,62,0,0,7372,7373,3,1338,669,0,7373,7374,3,840,420,0,7374,
		7375,3,522,261,0,7375,7425,1,0,0,0,7376,7377,5,138,0,0,7377,7378,5,349,
		0,0,7378,7379,5,319,0,0,7379,7380,5,164,0,0,7380,7381,3,524,262,0,7381,
		7382,5,138,0,0,7382,7383,5,249,0,0,7383,7384,5,305,0,0,7384,7385,3,524,
		262,0,7385,7386,3,840,420,0,7386,7387,3,524,262,0,7387,7425,1,0,0,0,7388,
		7389,5,138,0,0,7389,7390,5,349,0,0,7390,7391,5,319,0,0,7391,7392,5,164,
		0,0,7392,7393,3,524,262,0,7393,7394,5,138,0,0,7394,7395,5,249,0,0,7395,
		7396,5,62,0,0,7396,7397,3,1338,669,0,7397,7398,5,305,0,0,7398,7399,3,524,
		262,0,7399,7400,3,840,420,0,7400,7401,3,524,262,0,7401,7425,1,0,0,0,7402,
		7403,5,138,0,0,7403,7404,5,349,0,0,7404,7405,5,319,0,0,7405,7406,5,164,
		0,0,7406,7407,3,524,262,0,7407,7408,5,192,0,0,7408,7409,5,249,0,0,7409,
		7410,5,62,0,0,7410,7411,3,1338,669,0,7411,7425,1,0,0,0,7412,7413,5,138,
		0,0,7413,7414,5,349,0,0,7414,7415,5,319,0,0,7415,7416,5,164,0,0,7416,7417,
		3,524,262,0,7417,7418,5,192,0,0,7418,7419,5,249,0,0,7419,7420,5,221,0,
		0,7420,7421,5,390,0,0,7421,7422,5,62,0,0,7422,7423,3,1338,669,0,7423,7425,
		1,0,0,0,7424,7352,1,0,0,0,7424,7364,1,0,0,0,7424,7376,1,0,0,0,7424,7388,
		1,0,0,0,7424,7402,1,0,0,0,7424,7412,1,0,0,0,7425,839,1,0,0,0,7426,7427,
		5,105,0,0,7427,841,1,0,0,0,7428,7429,5,46,0,0,7429,7430,3,488,244,0,7430,
		7431,5,169,0,0,7431,7432,3,524,262,0,7432,7433,5,62,0,0,7433,7434,3,1358,
		679,0,7434,7435,5,94,0,0,7435,7436,3,1358,679,0,7436,7437,5,64,0,0,7437,
		7438,3,524,262,0,7438,843,1,0,0,0,7439,7440,5,159,0,0,7440,7441,3,864,
		432,0,7441,7442,3,1336,668,0,7442,7443,3,846,423,0,7443,7453,1,0,0,0,7444,
		7445,5,159,0,0,7445,7453,3,864,432,0,7446,7447,5,159,0,0,7447,7448,3,864,
		432,0,7448,7449,3,1340,670,0,7449,7450,5,80,0,0,7450,7451,3,1336,668,0,
		7451,7453,1,0,0,0,7452,7439,1,0,0,0,7452,7444,1,0,0,0,7452,7446,1,0,0,
		0,7453,845,1,0,0,0,7454,7455,5,100,0,0,7455,7458,3,1340,670,0,7456,7458,
		1,0,0,0,7457,7454,1,0,0,0,7457,7456,1,0,0,0,7458,847,1,0,0,0,7459,7460,
		5,364,0,0,7460,7461,3,866,433,0,7461,7462,3,868,434,0,7462,7463,3,864,
		432,0,7463,7464,3,862,431,0,7464,7465,3,876,438,0,7465,7473,1,0,0,0,7466,
		7467,5,364,0,0,7467,7468,5,2,0,0,7468,7469,3,852,426,0,7469,7470,5,3,0,
		0,7470,7471,3,876,438,0,7471,7473,1,0,0,0,7472,7459,1,0,0,0,7472,7466,
		1,0,0,0,7473,849,1,0,0,0,7474,7475,3,854,427,0,7475,7476,3,864,432,0,7476,
		7477,3,876,438,0,7477,7485,1,0,0,0,7478,7479,3,854,427,0,7479,7480,5,2,
		0,0,7480,7481,3,852,426,0,7481,7482,5,3,0,0,7482,7483,3,876,438,0,7483,
		7485,1,0,0,0,7484,7474,1,0,0,0,7484,7478,1,0,0,0,7485,851,1,0,0,0,7486,
		7491,3,856,428,0,7487,7488,5,6,0,0,7488,7490,3,856,428,0,7489,7487,1,0,
		0,0,7490,7493,1,0,0,0,7491,7489,1,0,0,0,7491,7492,1,0,0,0,7492,853,1,0,
		0,0,7493,7491,1,0,0,0,7494,7495,7,35,0,0,7495,855,1,0,0,0,7496,7497,3,
		858,429,0,7497,7498,3,860,430,0,7498,857,1,0,0,0,7499,7502,3,1378,689,
		0,7500,7502,3,854,427,0,7501,7499,1,0,0,0,7501,7500,1,0,0,0,7502,859,1,
		0,0,0,7503,7507,3,66,33,0,7504,7507,3,292,146,0,7505,7507,1,0,0,0,7506,
		7503,1,0,0,0,7506,7504,1,0,0,0,7506,7505,1,0,0,0,7507,861,1,0,0,0,7508,
		7511,3,854,427,0,7509,7511,1,0,0,0,7510,7508,1,0,0,0,7510,7509,1,0,0,0,
		7511,863,1,0,0,0,7512,7515,5,128,0,0,7513,7515,1,0,0,0,7514,7512,1,0,0,
		0,7514,7513,1,0,0,0,7515,865,1,0,0,0,7516,7519,5,113,0,0,7517,7519,1,0,
		0,0,7518,7516,1,0,0,0,7518,7517,1,0,0,0,7519,867,1,0,0,0,7520,7523,5,112,
		0,0,7521,7523,1,0,0,0,7522,7520,1,0,0,0,7522,7521,1,0,0,0,7523,869,1,0,
		0,0,7524,7525,5,2,0,0,7525,7526,3,1338,669,0,7526,7527,5,3,0,0,7527,7530,
		1,0,0,0,7528,7530,1,0,0,0,7529,7524,1,0,0,0,7529,7528,1,0,0,0,7530,871,
		1,0,0,0,7531,7532,3,1336,668,0,7532,7533,3,870,435,0,7533,873,1,0,0,0,
		7534,7539,3,872,436,0,7535,7536,5,6,0,0,7536,7538,3,872,436,0,7537,7535,
		1,0,0,0,7538,7541,1,0,0,0,7539,7537,1,0,0,0,7539,7540,1,0,0,0,7540,875,
		1,0,0,0,7541,7539,1,0,0,0,7542,7545,3,874,437,0,7543,7545,1,0,0,0,7544,
		7542,1,0,0,0,7544,7543,1,0,0,0,7545,877,1,0,0,0,7546,7547,5,204,0,0,7547,
		7563,3,880,440,0,7548,7549,5,204,0,0,7549,7550,3,854,427,0,7550,7551,3,
		864,432,0,7551,7552,3,880,440,0,7552,7563,1,0,0,0,7553,7554,5,204,0,0,
		7554,7555,5,128,0,0,7555,7563,3,880,440,0,7556,7557,5,204,0,0,7557,7558,
		5,2,0,0,7558,7559,3,882,441,0,7559,7560,5,3,0,0,7560,7561,3,880,440,0,
		7561,7563,1,0,0,0,7562,7546,1,0,0,0,7562,7548,1,0,0,0,7562,7553,1,0,0,
		0,7562,7556,1,0,0,0,7563,879,1,0,0,0,7564,7574,3,960,480,0,7565,7574,3,
		902,451,0,7566,7574,3,942,471,0,7567,7574,3,928,464,0,7568,7574,3,952,
		476,0,7569,7574,3,264,132,0,7570,7574,3,270,135,0,7571,7574,3,276,138,
		0,7572,7574,3,896,448,0,7573,7564,1,0,0,0,7573,7565,1,0,0,0,7573,7566,
		1,0,0,0,7573,7567,1,0,0,0,7573,7568,1,0,0,0,7573,7569,1,0,0,0,7573,7570,
		1,0,0,0,7573,7571,1,0,0,0,7573,7572,1,0,0,0,7574,881,1,0,0,0,7575,7580,
		3,884,442,0,7576,7577,5,6,0,0,7577,7579,3,884,442,0,7578,7576,1,0,0,0,
		7579,7582,1,0,0,0,7580,7578,1,0,0,0,7580,7581,1,0,0,0,7581,883,1,0,0,0,
		7582,7580,1,0,0,0,7583,7584,3,886,443,0,7584,7585,3,888,444,0,7585,885,
		1,0,0,0,7586,7589,3,1378,689,0,7587,7589,3,854,427,0,7588,7586,1,0,0,0,
		7588,7587,1,0,0,0,7589,887,1,0,0,0,7590,7594,3,66,33,0,7591,7594,3,292,
		146,0,7592,7594,1,0,0,0,7593,7590,1,0,0,0,7593,7591,1,0,0,0,7593,7592,
		1,0,0,0,7594,889,1,0,0,0,7595,7596,5,284,0,0,7596,7597,3,1340,670,0,7597,
		7598,3,892,446,0,7598,7599,5,36,0,0,7599,7600,3,894,447,0,7600,891,1,0,
		0,0,7601,7602,5,2,0,0,7602,7603,3,1286,643,0,7603,7604,5,3,0,0,7604,7607,
		1,0,0,0,7605,7607,1,0,0,0,7606,7601,1,0,0,0,7606,7605,1,0,0,0,7607,893,
		1,0,0,0,7608,7613,3,960,480,0,7609,7613,3,902,451,0,7610,7613,3,942,471,
		0,7611,7613,3,928,464,0,7612,7608,1,0,0,0,7612,7609,1,0,0,0,7612,7610,
		1,0,0,0,7612,7611,1,0,0,0,7613,895,1,0,0,0,7614,7615,5,203,0,0,7615,7616,
		3,1340,670,0,7616,7617,3,898,449,0,7617,7642,1,0,0,0,7618,7619,5,46,0,
		0,7619,7620,3,174,87,0,7620,7621,5,92,0,0,7621,7622,3,266,133,0,7622,7623,
		5,36,0,0,7623,7624,5,203,0,0,7624,7625,3,1340,670,0,7625,7626,3,898,449,
		0,7626,7627,3,268,134,0,7627,7642,1,0,0,0,7628,7629,5,46,0,0,7629,7630,
		3,174,87,0,7630,7631,5,92,0,0,7631,7632,5,221,0,0,7632,7633,5,77,0,0,7633,
		7634,5,390,0,0,7634,7635,3,266,133,0,7635,7636,5,36,0,0,7636,7637,5,203,
		0,0,7637,7638,3,1340,670,0,7638,7639,3,898,449,0,7639,7640,3,268,134,0,
		7640,7642,1,0,0,0,7641,7614,1,0,0,0,7641,7618,1,0,0,0,7641,7628,1,0,0,
		0,7642,897,1,0,0,0,7643,7644,5,2,0,0,7644,7645,3,1280,640,0,7645,7646,
		5,3,0,0,7646,7649,1,0,0,0,7647,7649,1,0,0,0,7648,7643,1,0,0,0,7648,7647,
		1,0,0,0,7649,899,1,0,0,0,7650,7651,5,178,0,0,7651,7661,3,1340,670,0,7652,
		7653,5,178,0,0,7653,7654,5,284,0,0,7654,7661,3,1340,670,0,7655,7656,5,
		178,0,0,7656,7661,5,30,0,0,7657,7658,5,178,0,0,7658,7659,5,284,0,0,7659,
		7661,5,30,0,0,7660,7650,1,0,0,0,7660,7652,1,0,0,0,7660,7655,1,0,0,0,7660,
		7657,1,0,0,0,7661,901,1,0,0,0,7662,7663,3,980,490,0,7663,7664,5,233,0,
		0,7664,7665,5,71,0,0,7665,7666,3,904,452,0,7666,7667,3,906,453,0,7667,
		7668,3,914,457,0,7668,7669,3,918,459,0,7669,903,1,0,0,0,7670,7673,3,1336,
		668,0,7671,7672,5,36,0,0,7672,7674,3,1372,686,0,7673,7671,1,0,0,0,7673,
		7674,1,0,0,0,7674,905,1,0,0,0,7675,7695,3,960,480,0,7676,7677,5,464,0,
		0,7677,7678,3,908,454,0,7678,7679,5,451,0,0,7679,7680,3,960,480,0,7680,
		7695,1,0,0,0,7681,7682,5,2,0,0,7682,7683,3,910,455,0,7683,7688,5,3,0,0,
		7684,7685,5,464,0,0,7685,7686,3,908,454,0,7686,7687,5,451,0,0,7687,7689,
		1,0,0,0,7688,7684,1,0,0,0,7688,7689,1,0,0,0,7689,7690,1,0,0,0,7690,7691,
		3,960,480,0,7691,7695,1,0,0,0,7692,7693,5,53,0,0,7693,7695,5,416,0,0,7694,
		7675,1,0,0,0,7694,7676,1,0,0,0,7694,7681,1,0,0,0,7694,7692,1,0,0,0,7695,
		907,1,0,0,0,7696,7697,7,36,0,0,7697,909,1,0,0,0,7698,7703,3,912,456,0,
		7699,7700,5,6,0,0,7700,7702,3,912,456,0,7701,7699,1,0,0,0,7702,7705,1,
		0,0,0,7703,7701,1,0,0,0,7703,7704,1,0,0,0,7704,911,1,0,0,0,7705,7703,1,
		0,0,0,7706,7707,3,1372,686,0,7707,7708,3,1326,663,0,7708,913,1,0,0,0,7709,
		7710,5,80,0,0,7710,7711,5,465,0,0,7711,7712,3,916,458,0,7712,7719,5,57,
		0,0,7713,7714,5,363,0,0,7714,7715,5,327,0,0,7715,7716,3,944,472,0,7716,
		7717,3,1094,547,0,7717,7720,1,0,0,0,7718,7720,5,264,0,0,7719,7713,1,0,
		0,0,7719,7718,1,0,0,0,7720,7723,1,0,0,0,7721,7723,1,0,0,0,7722,7709,1,
		0,0,0,7722,7721,1,0,0,0,7723,915,1,0,0,0,7724,7725,5,2,0,0,7725,7726,3,
		598,299,0,7726,7727,5,3,0,0,7727,7728,3,1094,547,0,7728,7734,1,0,0,0,7729,
		7730,5,80,0,0,7730,7731,5,45,0,0,7731,7734,3,1340,670,0,7732,7734,1,0,
		0,0,7733,7724,1,0,0,0,7733,7729,1,0,0,0,7733,7732,1,0,0,0,7734,917,1,0,
		0,0,7735,7736,5,87,0,0,7736,7739,3,1330,665,0,7737,7739,1,0,0,0,7738,7735,
		1,0,0,0,7738,7737,1,0,0,0,7739,919,1,0,0,0,7740,7742,5,254,0,0,7741,7743,
		5,71,0,0,7742,7741,1,0,0,0,7742,7743,1,0,0,0,7743,7744,1,0,0,0,7744,7746,
		3,1336,668,0,7745,7747,3,1062,531,0,7746,7745,1,0,0,0,7746,7747,1,0,0,
		0,7747,7748,1,0,0,0,7748,7751,5,100,0,0,7749,7752,3,962,481,0,7750,7752,
		3,1336,668,0,7751,7749,1,0,0,0,7751,7750,1,0,0,0,7752,7754,1,0,0,0,7753,
		7755,3,1062,531,0,7754,7753,1,0,0,0,7754,7755,1,0,0,0,7755,7756,1,0,0,
		0,7756,7757,5,80,0,0,7757,7766,3,1162,581,0,7758,7760,3,922,461,0,7759,
		7761,3,924,462,0,7760,7759,1,0,0,0,7760,7761,1,0,0,0,7761,7767,1,0,0,0,
		7762,7764,3,924,462,0,7763,7765,3,922,461,0,7764,7763,1,0,0,0,7764,7765,
		1,0,0,0,7765,7767,1,0,0,0,7766,7758,1,0,0,0,7766,7762,1,0,0,0,7767,7769,
		1,0,0,0,7768,7770,3,926,463,0,7769,7768,1,0,0,0,7769,7770,1,0,0,0,7770,
		921,1,0,0,0,7771,7772,5,102,0,0,7772,7773,5,77,0,0,7773,7776,5,251,0,0,
		7774,7775,5,33,0,0,7775,7777,3,1162,581,0,7776,7774,1,0,0,0,7776,7777,
		1,0,0,0,7777,7779,1,0,0,0,7778,7780,5,93,0,0,7779,7778,1,0,0,0,7779,7780,
		1,0,0,0,7780,7781,1,0,0,0,7781,7786,5,233,0,0,7782,7783,5,2,0,0,7783,7784,
		3,910,455,0,7784,7785,5,3,0,0,7785,7787,1,0,0,0,7786,7782,1,0,0,0,7786,
		7787,1,0,0,0,7787,7788,1,0,0,0,7788,7789,3,1052,526,0,7789,923,1,0,0,0,
		7790,7791,5,102,0,0,7791,7794,5,251,0,0,7792,7793,5,33,0,0,7793,7795,3,
		1162,581,0,7794,7792,1,0,0,0,7794,7795,1,0,0,0,7795,7797,1,0,0,0,7796,
		7798,5,93,0,0,7797,7796,1,0,0,0,7797,7798,1,0,0,0,7798,7799,1,0,0,0,7799,
		7800,5,363,0,0,7800,7801,5,327,0,0,7801,7802,3,944,472,0,7802,925,1,0,
		0,0,7803,7804,5,102,0,0,7804,7806,5,251,0,0,7805,7807,5,93,0,0,7806,7805,
		1,0,0,0,7806,7807,1,0,0,0,7807,7808,1,0,0,0,7808,7809,5,183,0,0,7809,927,
		1,0,0,0,7810,7811,3,980,490,0,7811,7812,5,183,0,0,7812,7813,5,64,0,0,7813,
		7814,3,1078,539,0,7814,7815,3,930,465,0,7815,7816,3,1096,548,0,7816,7817,
		3,918,459,0,7817,929,1,0,0,0,7818,7819,5,100,0,0,7819,7822,3,1056,528,
		0,7820,7822,1,0,0,0,7821,7818,1,0,0,0,7821,7820,1,0,0,0,7822,931,1,0,0,
		0,7823,7824,5,248,0,0,7824,7825,3,988,494,0,7825,7826,3,1076,538,0,7826,
		7827,3,934,467,0,7827,7828,3,938,469,0,7828,933,1,0,0,0,7829,7830,5,68,
		0,0,7830,7831,3,936,468,0,7831,7832,5,257,0,0,7832,7835,1,0,0,0,7833,7835,
		1,0,0,0,7834,7829,1,0,0,0,7834,7833,1,0,0,0,7835,935,1,0,0,0,7836,7837,
		5,131,0,0,7837,7849,7,37,0,0,7838,7839,5,408,0,0,7839,7849,7,37,0,0,7840,
		7845,5,328,0,0,7841,7842,5,363,0,0,7842,7846,5,202,0,0,7843,7844,5,408,
		0,0,7844,7846,5,202,0,0,7845,7841,1,0,0,0,7845,7843,1,0,0,0,7845,7846,
		1,0,0,0,7846,7849,1,0,0,0,7847,7849,5,202,0,0,7848,7836,1,0,0,0,7848,7838,
		1,0,0,0,7848,7840,1,0,0,0,7848,7847,1,0,0,0,7849,937,1,0,0,0,7850,7853,
		5,266,0,0,7851,7853,1,0,0,0,7852,7850,1,0,0,0,7852,7851,1,0,0,0,7853,939,
		1,0,0,0,7854,7859,5,266,0,0,7855,7856,5,466,0,0,7856,7859,5,467,0,0,7857,
		7859,1,0,0,0,7858,7854,1,0,0,0,7858,7855,1,0,0,0,7858,7857,1,0,0,0,7859,
		941,1,0,0,0,7860,7861,3,980,490,0,7861,7862,5,363,0,0,7862,7863,3,1078,
		539,0,7863,7864,5,327,0,0,7864,7865,3,944,472,0,7865,7866,3,1054,527,0,
		7866,7867,3,1096,548,0,7867,7868,3,918,459,0,7868,943,1,0,0,0,7869,7874,
		3,946,473,0,7870,7871,5,6,0,0,7871,7873,3,946,473,0,7872,7870,1,0,0,0,
		7873,7876,1,0,0,0,7874,7872,1,0,0,0,7874,7875,1,0,0,0,7875,945,1,0,0,0,
		7876,7874,1,0,0,0,7877,7878,3,948,474,0,7878,7879,5,10,0,0,7879,7880,3,
		1162,581,0,7880,7888,1,0,0,0,7881,7882,5,2,0,0,7882,7883,3,950,475,0,7883,
		7884,5,3,0,0,7884,7885,5,10,0,0,7885,7886,3,1162,581,0,7886,7888,1,0,0,
		0,7887,7877,1,0,0,0,7887,7881,1,0,0,0,7888,947,1,0,0,0,7889,7890,3,1372,
		686,0,7890,7891,3,1326,663,0,7891,949,1,0,0,0,7892,7897,3,948,474,0,7893,
		7894,5,6,0,0,7894,7896,3,948,474,0,7895,7893,1,0,0,0,7896,7899,1,0,0,0,
		7897,7895,1,0,0,0,7897,7898,1,0,0,0,7898,951,1,0,0,0,7899,7897,1,0,0,0,
		7900,7901,5,179,0,0,7901,7902,3,954,477,0,7902,7903,3,956,478,0,7903,7904,
		5,173,0,0,7904,7905,3,958,479,0,7905,7906,5,62,0,0,7906,7907,3,960,480,
		0,7907,953,1,0,0,0,7908,7909,3,1340,670,0,7909,955,1,0,0,0,7910,7911,5,
		263,0,0,7911,7916,5,318,0,0,7912,7916,5,318,0,0,7913,7916,5,107,0,0,7914,
		7916,5,232,0,0,7915,7910,1,0,0,0,7915,7912,1,0,0,0,7915,7913,1,0,0,0,7915,
		7914,1,0,0,0,7916,7919,1,0,0,0,7917,7915,1,0,0,0,7917,7918,1,0,0,0,7918,
		957,1,0,0,0,7919,7917,1,0,0,0,7920,7926,1,0,0,0,7921,7922,5,105,0,0,7922,
		7926,5,218,0,0,7923,7924,5,373,0,0,7924,7926,5,218,0,0,7925,7920,1,0,0,
		0,7925,7921,1,0,0,0,7925,7923,1,0,0,0,7926,959,1,0,0,0,7927,7930,3,964,
		482,0,7928,7930,3,962,481,0,7929,7927,1,0,0,0,7929,7928,1,0,0,0,7930,961,
		1,0,0,0,7931,7932,5,2,0,0,7932,7933,3,964,482,0,7933,7934,5,3,0,0,7934,
		7940,1,0,0,0,7935,7936,5,2,0,0,7936,7937,3,962,481,0,7937,7938,5,3,0,0,
		7938,7940,1,0,0,0,7939,7931,1,0,0,0,7939,7935,1,0,0,0,7940,963,1,0,0,0,
		7941,7942,3,966,483,0,7942,7949,3,996,498,0,7943,7944,3,1040,520,0,7944,
		7945,3,1006,503,0,7945,7950,1,0,0,0,7946,7947,3,1004,502,0,7947,7948,3,
		1042,521,0,7948,7950,1,0,0,0,7949,7943,1,0,0,0,7949,7946,1,0,0,0,7949,
		7950,1,0,0,0,7950,7963,1,0,0,0,7951,7952,3,972,486,0,7952,7953,3,966,483,
		0,7953,7960,3,996,498,0,7954,7955,3,1040,520,0,7955,7956,3,1006,503,0,
		7956,7961,1,0,0,0,7957,7958,3,1004,502,0,7958,7959,3,1042,521,0,7959,7961,
		1,0,0,0,7960,7954,1,0,0,0,7960,7957,1,0,0,0,7960,7961,1,0,0,0,7961,7963,
		1,0,0,0,7962,7941,1,0,0,0,7962,7951,1,0,0,0,7963,965,1,0,0,0,7964,7974,
		3,968,484,0,7965,7968,5,97,0,0,7966,7968,5,59,0,0,7967,7965,1,0,0,0,7967,
		7966,1,0,0,0,7968,7969,1,0,0,0,7969,7970,3,990,495,0,7970,7971,3,968,484,
		0,7971,7973,1,0,0,0,7972,7967,1,0,0,0,7973,7976,1,0,0,0,7974,7972,1,0,
		0,0,7974,7975,1,0,0,0,7975,967,1,0,0,0,7976,7974,1,0,0,0,7977,7984,3,970,
		485,0,7978,7979,5,70,0,0,7979,7980,3,990,495,0,7980,7981,3,970,485,0,7981,
		7983,1,0,0,0,7982,7978,1,0,0,0,7983,7986,1,0,0,0,7984,7982,1,0,0,0,7984,
		7985,1,0,0,0,7985,969,1,0,0,0,7986,7984,1,0,0,0,7987,7995,5,88,0,0,7988,
		7989,3,994,497,0,7989,7990,3,982,491,0,7990,7991,3,1328,664,0,7991,7996,
		1,0,0,0,7992,7993,3,992,496,0,7993,7994,3,1330,665,0,7994,7996,1,0,0,0,
		7995,7988,1,0,0,0,7995,7992,1,0,0,0,7996,7997,1,0,0,0,7997,7998,3,982,
		491,0,7998,7999,3,1054,527,0,7999,8000,3,1094,547,0,8000,8001,3,1024,512,
		0,8001,8002,3,1038,519,0,8002,8003,3,1240,620,0,8003,8009,1,0,0,0,8004,
		8009,3,1052,526,0,8005,8006,5,92,0,0,8006,8009,3,1074,537,0,8007,8009,
		3,962,481,0,8008,7987,1,0,0,0,8008,8004,1,0,0,0,8008,8005,1,0,0,0,8008,
		8007,1,0,0,0,8009,971,1,0,0,0,8010,8012,5,105,0,0,8011,8013,5,297,0,0,
		8012,8011,1,0,0,0,8012,8013,1,0,0,0,8013,8014,1,0,0,0,8014,8015,3,974,
		487,0,8015,973,1,0,0,0,8016,8021,3,976,488,0,8017,8018,5,6,0,0,8018,8020,
		3,976,488,0,8019,8017,1,0,0,0,8020,8023,1,0,0,0,8021,8019,1,0,0,0,8021,
		8022,1,0,0,0,8022,975,1,0,0,0,8023,8021,1,0,0,0,8024,8025,3,1340,670,0,
		8025,8026,3,870,435,0,8026,8027,5,36,0,0,8027,8028,3,978,489,0,8028,8029,
		5,2,0,0,8029,8030,3,894,447,0,8030,8031,5,3,0,0,8031,977,1,0,0,0,8032,
		8037,5,252,0,0,8033,8034,5,77,0,0,8034,8037,5,252,0,0,8035,8037,1,0,0,
		0,8036,8032,1,0,0,0,8036,8033,1,0,0,0,8036,8035,1,0,0,0,8037,979,1,0,0,
		0,8038,8041,3,972,486,0,8039,8041,1,0,0,0,8040,8038,1,0,0,0,8040,8039,
		1,0,0,0,8041,981,1,0,0,0,8042,8047,5,71,0,0,8043,8044,3,984,492,0,8044,
		8045,3,986,493,0,8045,8048,1,0,0,0,8046,8048,3,1566,783,0,8047,8043,1,
		0,0,0,8047,8046,1,0,0,0,8048,8051,1,0,0,0,8049,8051,1,0,0,0,8050,8042,
		1,0,0,0,8050,8049,1,0,0,0,8051,983,1,0,0,0,8052,8055,1,0,0,0,8053,8055,
		5,340,0,0,8054,8052,1,0,0,0,8054,8053,1,0,0,0,8055,985,1,0,0,0,8056,8058,
		7,38,0,0,8057,8056,1,0,0,0,8057,8058,1,0,0,0,8058,8059,1,0,0,0,8059,8060,
		7,11,0,0,8060,8061,3,988,494,0,8061,8062,3,1336,668,0,8062,8071,1,0,0,
		0,8063,8064,5,361,0,0,8064,8065,3,988,494,0,8065,8066,3,1336,668,0,8066,
		8071,1,0,0,0,8067,8068,5,92,0,0,8068,8071,3,1336,668,0,8069,8071,3,1336,
		668,0,8070,8057,1,0,0,0,8070,8063,1,0,0,0,8070,8067,1,0,0,0,8070,8069,
		1,0,0,0,8071,987,1,0,0,0,8072,8075,5,92,0,0,8073,8075,1,0,0,0,8074,8072,
		1,0,0,0,8074,8073,1,0,0,0,8075,989,1,0,0,0,8076,8080,5,30,0,0,8077,8080,
		5,56,0,0,8078,8080,1,0,0,0,8079,8076,1,0,0,0,8079,8077,1,0,0,0,8079,8078,
		1,0,0,0,8080,991,1,0,0,0,8081,8087,5,56,0,0,8082,8083,5,80,0,0,8083,8084,
		5,2,0,0,8084,8085,3,1280,640,0,8085,8086,5,3,0,0,8086,8088,1,0,0,0,8087,
		8082,1,0,0,0,8087,8088,1,0,0,0,8088,993,1,0,0,0,8089,8092,5,30,0,0,8090,
		8092,1,0,0,0,8091,8089,1,0,0,0,8091,8090,1,0,0,0,8092,995,1,0,0,0,8093,
		8096,3,998,499,0,8094,8096,1,0,0,0,8095,8093,1,0,0,0,8095,8094,1,0,0,0,
		8096,997,1,0,0,0,8097,8098,5,83,0,0,8098,8099,5,148,0,0,8099,8100,3,1000,
		500,0,8100,999,1,0,0,0,8101,8106,3,1002,501,0,8102,8103,5,6,0,0,8103,8105,
		3,1002,501,0,8104,8102,1,0,0,0,8105,8108,1,0,0,0,8106,8104,1,0,0,0,8106,
		8107,1,0,0,0,8107,1001,1,0,0,0,8108,8106,1,0,0,0,8109,8113,3,1162,581,
		0,8110,8111,5,100,0,0,8111,8114,3,1276,638,0,8112,8114,3,612,306,0,8113,
		8110,1,0,0,0,8113,8112,1,0,0,0,8114,8115,1,0,0,0,8115,8116,3,614,307,0,
		8116,1003,1,0,0,0,8117,8119,3,1008,504,0,8118,8120,3,1010,505,0,8119,8118,
		1,0,0,0,8119,8120,1,0,0,0,8120,8126,1,0,0,0,8121,8123,3,1010,505,0,8122,
		8124,3,1008,504,0,8123,8122,1,0,0,0,8123,8124,1,0,0,0,8124,8126,1,0,0,
		0,8125,8117,1,0,0,0,8125,8121,1,0,0,0,8126,1005,1,0,0,0,8127,8130,3,1004,
		502,0,8128,8130,1,0,0,0,8129,8127,1,0,0,0,8129,8128,1,0,0,0,8130,1007,
		1,0,0,0,8131,8132,5,74,0,0,8132,8135,3,1012,506,0,8133,8134,5,6,0,0,8134,
		8136,3,1014,507,0,8135,8133,1,0,0,0,8135,8136,1,0,0,0,8136,8155,1,0,0,
		0,8137,8138,5,61,0,0,8138,8152,3,1022,511,0,8139,8140,3,1016,508,0,8140,
		8144,3,1020,510,0,8141,8145,5,81,0,0,8142,8143,5,105,0,0,8143,8145,5,468,
		0,0,8144,8141,1,0,0,0,8144,8142,1,0,0,0,8145,8153,1,0,0,0,8146,8150,3,
		1020,510,0,8147,8151,5,81,0,0,8148,8149,5,105,0,0,8149,8151,5,468,0,0,
		8150,8147,1,0,0,0,8150,8148,1,0,0,0,8151,8153,1,0,0,0,8152,8139,1,0,0,
		0,8152,8146,1,0,0,0,8153,8155,1,0,0,0,8154,8131,1,0,0,0,8154,8137,1,0,
		0,0,8155,1009,1,0,0,0,8156,8161,5,79,0,0,8157,8162,3,1014,507,0,8158,8159,
		3,1016,508,0,8159,8160,3,1020,510,0,8160,8162,1,0,0,0,8161,8157,1,0,0,
		0,8161,8158,1,0,0,0,8162,1011,1,0,0,0,8163,8166,3,1162,581,0,8164,8166,
		5,30,0,0,8165,8163,1,0,0,0,8165,8164,1,0,0,0,8166,1013,1,0,0,0,8167,8168,
		3,1162,581,0,8168,1015,1,0,0,0,8169,8175,3,1206,603,0,8170,8171,5,12,0,
		0,8171,8175,3,1018,509,0,8172,8173,5,13,0,0,8173,8175,3,1018,509,0,8174,
		8169,1,0,0,0,8174,8170,1,0,0,0,8174,8172,1,0,0,0,8175,1017,1,0,0,0,8176,
		8179,3,1356,678,0,8177,8179,3,1354,677,0,8178,8176,1,0,0,0,8178,8177,1,
		0,0,0,8179,1019,1,0,0,0,8180,8181,7,39,0,0,8181,1021,1,0,0,0,8182,8183,
		7,40,0,0,8183,1023,1,0,0,0,8184,8185,5,66,0,0,8185,8186,5,148,0,0,8186,
		8189,3,1026,513,0,8187,8189,1,0,0,0,8188,8184,1,0,0,0,8188,8187,1,0,0,
		0,8189,1025,1,0,0,0,8190,8195,3,1028,514,0,8191,8192,5,6,0,0,8192,8194,
		3,1028,514,0,8193,8191,1,0,0,0,8194,8197,1,0,0,0,8195,8193,1,0,0,0,8195,
		8196,1,0,0,0,8196,1027,1,0,0,0,8197,8195,1,0,0,0,8198,8204,3,1162,581,
		0,8199,8204,3,1030,515,0,8200,8204,3,1034,517,0,8201,8204,3,1032,516,0,
		8202,8204,3,1036,518,0,8203,8198,1,0,0,0,8203,8199,1,0,0,0,8203,8200,1,
		0,0,0,8203,8201,1,0,0,0,8203,8202,1,0,0,0,8204,1029,1,0,0,0,8205,8206,
		5,2,0,0,8206,8207,5,3,0,0,8207,1031,1,0,0,0,8208,8209,5,469,0,0,8209,8210,
		5,2,0,0,8210,8211,3,1280,640,0,8211,8212,5,3,0,0,8212,1033,1,0,0,0,8213,
		8214,5,470,0,0,8214,8215,5,2,0,0,8215,8216,3,1280,640,0,8216,8217,5,3,
		0,0,8217,1035,1,0,0,0,8218,8219,5,471,0,0,8219,8220,5,472,0,0,8220,8221,
		5,2,0,0,8221,8222,3,1026,513,0,8222,8223,5,3,0,0,8223,1037,1,0,0,0,8224,
		8225,5,67,0,0,8225,8228,3,1162,581,0,8226,8228,1,0,0,0,8227,8224,1,0,0,
		0,8227,8226,1,0,0,0,8228,1039,1,0,0,0,8229,8234,3,1044,522,0,8230,8231,
		5,62,0,0,8231,8232,5,294,0,0,8232,8234,5,81,0,0,8233,8229,1,0,0,0,8233,
		8230,1,0,0,0,8234,1041,1,0,0,0,8235,8238,3,1040,520,0,8236,8238,1,0,0,
		0,8237,8235,1,0,0,0,8237,8236,1,0,0,0,8238,1043,1,0,0,0,8239,8241,3,1046,
		523,0,8240,8239,1,0,0,0,8241,8242,1,0,0,0,8242,8240,1,0,0,0,8242,8243,
		1,0,0,0,8243,1045,1,0,0,0,8244,8245,3,1048,524,0,8245,8246,3,1050,525,
		0,8246,8247,3,940,470,0,8247,1047,1,0,0,0,8248,8258,5,62,0,0,8249,8250,
		5,263,0,0,8250,8252,5,237,0,0,8251,8249,1,0,0,0,8251,8252,1,0,0,0,8252,
		8253,1,0,0,0,8253,8259,5,363,0,0,8254,8256,5,237,0,0,8255,8254,1,0,0,0,
		8255,8256,1,0,0,0,8256,8257,1,0,0,0,8257,8259,5,328,0,0,8258,8251,1,0,
		0,0,8258,8255,1,0,0,0,8259,1049,1,0,0,0,8260,8261,5,269,0,0,8261,8264,
		3,1334,667,0,8262,8264,1,0,0,0,8263,8260,1,0,0,0,8263,8262,1,0,0,0,8264,
		1051,1,0,0,0,8265,8266,5,416,0,0,8266,8267,5,2,0,0,8267,8268,3,1280,640,
		0,8268,8276,5,3,0,0,8269,8270,5,6,0,0,8270,8271,5,2,0,0,8271,8272,3,1280,
		640,0,8272,8273,5,3,0,0,8273,8275,1,0,0,0,8274,8269,1,0,0,0,8275,8278,
		1,0,0,0,8276,8274,1,0,0,0,8276,8277,1,0,0,0,8277,1053,1,0,0,0,8278,8276,
		1,0,0,0,8279,8280,5,64,0,0,8280,8283,3,1056,528,0,8281,8283,1,0,0,0,8282,
		8279,1,0,0,0,8282,8281,1,0,0,0,8283,1055,1,0,0,0,8284,8294,3,1058,529,
		0,8285,8290,3,1060,530,0,8286,8287,5,6,0,0,8287,8289,3,1060,530,0,8288,
		8286,1,0,0,0,8289,8292,1,0,0,0,8290,8288,1,0,0,0,8290,8291,1,0,0,0,8291,
		8294,1,0,0,0,8292,8290,1,0,0,0,8293,8284,1,0,0,0,8293,8285,1,0,0,0,8294,
		1057,1,0,0,0,8295,8298,3,1060,530,0,8296,8297,5,6,0,0,8297,8299,3,1060,
		530,0,8298,8296,1,0,0,0,8299,8300,1,0,0,0,8300,8298,1,0,0,0,8300,8301,
		1,0,0,0,8301,1059,1,0,0,0,8302,8303,3,1074,537,0,8303,8305,3,1064,532,
		0,8304,8306,3,1080,540,0,8305,8304,1,0,0,0,8305,8306,1,0,0,0,8306,8352,
		1,0,0,0,8307,8308,3,1084,542,0,8308,8309,3,1068,534,0,8309,8352,1,0,0,
		0,8310,8311,3,1104,552,0,8311,8312,3,1064,532,0,8312,8352,1,0,0,0,8313,
		8314,3,962,481,0,8314,8315,3,1064,532,0,8315,8352,1,0,0,0,8316,8326,5,
		72,0,0,8317,8318,3,1104,552,0,8318,8319,3,1064,532,0,8319,8327,1,0,0,0,
		8320,8321,3,1084,542,0,8321,8322,3,1068,534,0,8322,8327,1,0,0,0,8323,8324,
		3,962,481,0,8324,8325,3,1064,532,0,8325,8327,1,0,0,0,8326,8317,1,0,0,0,
		8326,8320,1,0,0,0,8326,8323,1,0,0,0,8327,8352,1,0,0,0,8328,8329,5,2,0,
		0,8329,8346,3,1060,530,0,8330,8331,5,110,0,0,8331,8332,5,118,0,0,8332,
		8347,3,1060,530,0,8333,8335,5,121,0,0,8334,8336,3,1070,535,0,8335,8334,
		1,0,0,0,8335,8336,1,0,0,0,8336,8337,1,0,0,0,8337,8338,5,118,0,0,8338,8347,
		3,1060,530,0,8339,8341,3,1070,535,0,8340,8339,1,0,0,0,8340,8341,1,0,0,
		0,8341,8342,1,0,0,0,8342,8343,5,118,0,0,8343,8344,3,1060,530,0,8344,8345,
		3,1072,536,0,8345,8347,1,0,0,0,8346,8330,1,0,0,0,8346,8333,1,0,0,0,8346,
		8340,1,0,0,0,8346,8347,1,0,0,0,8347,8348,1,0,0,0,8348,8349,5,3,0,0,8349,
		8350,3,1064,532,0,8350,8352,1,0,0,0,8351,8302,1,0,0,0,8351,8307,1,0,0,
		0,8351,8310,1,0,0,0,8351,8313,1,0,0,0,8351,8316,1,0,0,0,8351,8328,1,0,
		0,0,8352,8371,1,0,0,0,8353,8354,5,110,0,0,8354,8355,5,118,0,0,8355,8370,
		3,1060,530,0,8356,8358,5,121,0,0,8357,8359,3,1070,535,0,8358,8357,1,0,
		0,0,8358,8359,1,0,0,0,8359,8360,1,0,0,0,8360,8361,5,118,0,0,8361,8370,
		3,1060,530,0,8362,8364,3,1070,535,0,8363,8362,1,0,0,0,8363,8364,1,0,0,
		0,8364,8365,1,0,0,0,8365,8366,5,118,0,0,8366,8367,3,1060,530,0,8367,8368,
		3,1072,536,0,8368,8370,1,0,0,0,8369,8353,1,0,0,0,8369,8356,1,0,0,0,8369,
		8363,1,0,0,0,8370,8373,1,0,0,0,8371,8369,1,0,0,0,8371,8372,1,0,0,0,8372,
		1061,1,0,0,0,8373,8371,1,0,0,0,8374,8376,5,36,0,0,8375,8374,1,0,0,0,8375,
		8376,1,0,0,0,8376,8377,1,0,0,0,8377,8382,3,1372,686,0,8378,8379,5,2,0,
		0,8379,8380,3,1338,669,0,8380,8381,5,3,0,0,8381,8383,1,0,0,0,8382,8378,
		1,0,0,0,8382,8383,1,0,0,0,8383,1063,1,0,0,0,8384,8387,3,1066,533,0,8385,
		8387,1,0,0,0,8386,8384,1,0,0,0,8386,8385,1,0,0,0,8387,1065,1,0,0,0,8388,
		8390,5,36,0,0,8389,8388,1,0,0,0,8389,8390,1,0,0,0,8390,8391,1,0,0,0,8391,
		8396,3,1374,687,0,8392,8393,5,2,0,0,8393,8394,3,1338,669,0,8394,8395,5,
		3,0,0,8395,8397,1,0,0,0,8396,8392,1,0,0,0,8396,8397,1,0,0,0,8397,1067,
		1,0,0,0,8398,8412,3,1062,531,0,8399,8401,5,36,0,0,8400,8402,3,1372,686,
		0,8401,8400,1,0,0,0,8401,8402,1,0,0,0,8402,8405,1,0,0,0,8403,8405,3,1372,
		686,0,8404,8399,1,0,0,0,8404,8403,1,0,0,0,8405,8406,1,0,0,0,8406,8407,
		5,2,0,0,8407,8408,3,1100,550,0,8408,8409,5,3,0,0,8409,8412,1,0,0,0,8410,
		8412,1,0,0,0,8411,8398,1,0,0,0,8411,8404,1,0,0,0,8411,8410,1,0,0,0,8412,
		1069,1,0,0,0,8413,8415,7,41,0,0,8414,8416,5,123,0,0,8415,8414,1,0,0,0,
		8415,8416,1,0,0,0,8416,1071,1,0,0,0,8417,8418,5,100,0,0,8418,8419,5,2,
		0,0,8419,8420,3,1338,669,0,8420,8421,5,3,0,0,8421,8425,1,0,0,0,8422,8423,
		5,80,0,0,8423,8425,3,1162,581,0,8424,8417,1,0,0,0,8424,8422,1,0,0,0,8425,
		1073,1,0,0,0,8426,8428,3,1336,668,0,8427,8429,5,9,0,0,8428,8427,1,0,0,
		0,8428,8429,1,0,0,0,8429,8439,1,0,0,0,8430,8436,5,81,0,0,8431,8437,3,1336,
		668,0,8432,8433,5,2,0,0,8433,8434,3,1336,668,0,8434,8435,5,3,0,0,8435,
		8437,1,0,0,0,8436,8431,1,0,0,0,8436,8432,1,0,0,0,8437,8439,1,0,0,0,8438,
		8426,1,0,0,0,8438,8430,1,0,0,0,8439,1075,1,0,0,0,8440,8445,3,1074,537,
		0,8441,8442,5,6,0,0,8442,8444,3,1074,537,0,8443,8441,1,0,0,0,8444,8447,
		1,0,0,0,8445,8443,1,0,0,0,8445,8446,1,0,0,0,8446,1077,1,0,0,0,8447,8445,
		1,0,0,0,8448,8453,3,1074,537,0,8449,8451,5,36,0,0,8450,8449,1,0,0,0,8450,
		8451,1,0,0,0,8451,8452,1,0,0,0,8452,8454,3,1372,686,0,8453,8450,1,0,0,
		0,8453,8454,1,0,0,0,8454,1079,1,0,0,0,8455,8456,5,473,0,0,8456,8457,3,
		1346,673,0,8457,8458,5,2,0,0,8458,8459,3,1280,640,0,8459,8460,5,3,0,0,
		8460,8461,3,1082,541,0,8461,1081,1,0,0,0,8462,8463,5,304,0,0,8463,8464,
		5,2,0,0,8464,8465,3,1162,581,0,8465,8466,5,3,0,0,8466,8469,1,0,0,0,8467,
		8469,1,0,0,0,8468,8462,1,0,0,0,8468,8467,1,0,0,0,8469,1083,1,0,0,0,8470,
		8471,3,1214,607,0,8471,8472,3,1092,546,0,8472,8481,1,0,0,0,8473,8474,5,
		314,0,0,8474,8475,5,64,0,0,8475,8476,5,2,0,0,8476,8477,3,1088,544,0,8477,
		8478,5,3,0,0,8478,8479,3,1092,546,0,8479,8481,1,0,0,0,8480,8470,1,0,0,
		0,8480,8473,1,0,0,0,8481,1085,1,0,0,0,8482,8483,3,1214,607,0,8483,8484,
		3,1090,545,0,8484,1087,1,0,0,0,8485,8490,3,1086,543,0,8486,8487,5,6,0,
		0,8487,8489,3,1086,543,0,8488,8486,1,0,0,0,8489,8492,1,0,0,0,8490,8488,
		1,0,0,0,8490,8491,1,0,0,0,8491,1089,1,0,0,0,8492,8490,1,0,0,0,8493,8494,
		5,36,0,0,8494,8495,5,2,0,0,8495,8496,3,1100,550,0,8496,8497,5,3,0,0,8497,
		8500,1,0,0,0,8498,8500,1,0,0,0,8499,8493,1,0,0,0,8499,8498,1,0,0,0,8500,
		1091,1,0,0,0,8501,8502,5,105,0,0,8502,8505,5,474,0,0,8503,8505,1,0,0,0,
		8504,8501,1,0,0,0,8504,8503,1,0,0,0,8505,1093,1,0,0,0,8506,8507,5,103,
		0,0,8507,8510,3,1162,581,0,8508,8510,1,0,0,0,8509,8506,1,0,0,0,8509,8508,
		1,0,0,0,8510,1095,1,0,0,0,8511,8516,5,103,0,0,8512,8513,5,435,0,0,8513,
		8514,5,269,0,0,8514,8517,3,954,477,0,8515,8517,3,1162,581,0,8516,8512,
		1,0,0,0,8516,8515,1,0,0,0,8517,8520,1,0,0,0,8518,8520,1,0,0,0,8519,8511,
		1,0,0,0,8519,8518,1,0,0,0,8520,1097,1,0,0,0,8521,8524,3,1100,550,0,8522,
		8524,1,0,0,0,8523,8521,1,0,0,0,8523,8522,1,0,0,0,8524,1099,1,0,0,0,8525,
		8530,3,1102,551,0,8526,8527,5,6,0,0,8527,8529,3,1102,551,0,8528,8526,1,
		0,0,0,8529,8532,1,0,0,0,8530,8528,1,0,0,0,8530,8531,1,0,0,0,8531,1101,
		1,0,0,0,8532,8530,1,0,0,0,8533,8534,3,1372,686,0,8534,8535,3,1118,559,
		0,8535,8536,3,110,55,0,8536,1103,1,0,0,0,8537,8538,5,475,0,0,8538,8554,
		5,2,0,0,8539,8540,3,1206,603,0,8540,8541,3,1232,616,0,8541,8542,5,476,
		0,0,8542,8543,3,1106,553,0,8543,8555,1,0,0,0,8544,8545,5,477,0,0,8545,
		8546,5,2,0,0,8546,8547,3,1114,557,0,8547,8548,5,3,0,0,8548,8549,5,6,0,
		0,8549,8550,3,1206,603,0,8550,8551,3,1232,616,0,8551,8552,5,476,0,0,8552,
		8553,3,1106,553,0,8553,8555,1,0,0,0,8554,8539,1,0,0,0,8554,8544,1,0,0,
		0,8555,8556,1,0,0,0,8556,8557,5,3,0,0,8557,1105,1,0,0,0,8558,8563,3,1108,
		554,0,8559,8560,5,6,0,0,8560,8562,3,1108,554,0,8561,8559,1,0,0,0,8562,
		8565,1,0,0,0,8563,8561,1,0,0,0,8563,8564,1,0,0,0,8564,1107,1,0,0,0,8565,
		8563,1,0,0,0,8566,8573,3,1372,686,0,8567,8569,3,1118,559,0,8568,8570,3,
		1110,555,0,8569,8568,1,0,0,0,8569,8570,1,0,0,0,8570,8574,1,0,0,0,8571,
		8572,5,62,0,0,8572,8574,5,474,0,0,8573,8567,1,0,0,0,8573,8571,1,0,0,0,
		8574,1109,1,0,0,0,8575,8577,3,1112,556,0,8576,8575,1,0,0,0,8577,8578,1,
		0,0,0,8578,8576,1,0,0,0,8578,8579,1,0,0,0,8579,1111,1,0,0,0,8580,8581,
		5,53,0,0,8581,8589,3,1162,581,0,8582,8583,3,1382,691,0,8583,8584,3,1162,
		581,0,8584,8589,1,0,0,0,8585,8586,5,77,0,0,8586,8589,5,78,0,0,8587,8589,
		5,78,0,0,8588,8580,1,0,0,0,8588,8582,1,0,0,0,8588,8585,1,0,0,0,8588,8587,
		1,0,0,0,8589,1113,1,0,0,0,8590,8595,3,1116,558,0,8591,8592,5,6,0,0,8592,
		8594,3,1116,558,0,8593,8591,1,0,0,0,8594,8597,1,0,0,0,8595,8593,1,0,0,
		0,8595,8596,1,0,0,0,8596,1115,1,0,0,0,8597,8595,1,0,0,0,8598,8599,3,1204,
		602,0,8599,8600,5,36,0,0,8600,8601,3,1380,690,0,8601,8605,1,0,0,0,8602,
		8603,5,53,0,0,8603,8605,3,1204,602,0,8604,8598,1,0,0,0,8604,8602,1,0,0,
		0,8605,1117,1,0,0,0,8606,8608,5,409,0,0,8607,8606,1,0,0,0,8607,8608,1,
		0,0,0,8608,8609,1,0,0,0,8609,8618,3,1122,561,0,8610,8619,3,1120,560,0,
		8611,8616,5,35,0,0,8612,8613,5,4,0,0,8613,8614,3,1356,678,0,8614,8615,
		5,5,0,0,8615,8617,1,0,0,0,8616,8612,1,0,0,0,8616,8617,1,0,0,0,8617,8619,
		1,0,0,0,8618,8610,1,0,0,0,8618,8611,1,0,0,0,8619,8625,1,0,0,0,8620,8621,
		3,1336,668,0,8621,8622,5,27,0,0,8622,8623,7,42,0,0,8623,8625,1,0,0,0,8624,
		8607,1,0,0,0,8624,8620,1,0,0,0,8625,1119,1,0,0,0,8626,8628,5,4,0,0,8627,
		8629,3,1356,678,0,8628,8627,1,0,0,0,8628,8629,1,0,0,0,8629,8630,1,0,0,
		0,8630,8632,5,5,0,0,8631,8626,1,0,0,0,8632,8635,1,0,0,0,8633,8631,1,0,
		0,0,8633,8634,1,0,0,0,8634,1121,1,0,0,0,8635,8633,1,0,0,0,8636,8650,3,
		1126,563,0,8637,8650,3,1130,565,0,8638,8650,3,1134,567,0,8639,8650,3,1142,
		571,0,8640,8650,3,1150,575,0,8641,8647,3,1152,576,0,8642,8648,3,1156,578,
		0,8643,8644,5,2,0,0,8644,8645,3,1356,678,0,8645,8646,5,3,0,0,8646,8648,
		1,0,0,0,8647,8642,1,0,0,0,8647,8643,1,0,0,0,8648,8650,1,0,0,0,8649,8636,
		1,0,0,0,8649,8637,1,0,0,0,8649,8638,1,0,0,0,8649,8639,1,0,0,0,8649,8640,
		1,0,0,0,8649,8641,1,0,0,0,8650,1123,1,0,0,0,8651,8656,3,1130,565,0,8652,
		8656,3,1136,568,0,8653,8656,3,1144,572,0,8654,8656,3,1150,575,0,8655,8651,
		1,0,0,0,8655,8652,1,0,0,0,8655,8653,1,0,0,0,8655,8654,1,0,0,0,8656,1125,
		1,0,0,0,8657,8662,3,1394,697,0,8658,8662,3,1376,688,0,8659,8662,5,119,
		0,0,8660,8662,5,126,0,0,8661,8657,1,0,0,0,8661,8658,1,0,0,0,8661,8659,
		1,0,0,0,8661,8660,1,0,0,0,8662,8664,1,0,0,0,8663,8665,3,526,263,0,8664,
		8663,1,0,0,0,8664,8665,1,0,0,0,8665,8666,1,0,0,0,8666,8667,3,1128,564,
		0,8667,1127,1,0,0,0,8668,8669,5,2,0,0,8669,8670,3,1280,640,0,8670,8671,
		5,3,0,0,8671,8674,1,0,0,0,8672,8674,1,0,0,0,8673,8668,1,0,0,0,8673,8672,
		1,0,0,0,8674,1129,1,0,0,0,8675,8692,5,395,0,0,8676,8692,5,396,0,0,8677,
		8692,5,410,0,0,8678,8692,5,382,0,0,8679,8692,5,407,0,0,8680,8681,5,392,
		0,0,8681,8692,3,1132,566,0,8682,8683,5,191,0,0,8683,8692,5,406,0,0,8684,
		8685,5,389,0,0,8685,8692,3,1128,564,0,8686,8687,5,388,0,0,8687,8692,3,
		1128,564,0,8688,8689,5,403,0,0,8689,8692,3,1128,564,0,8690,8692,5,384,
		0,0,8691,8675,1,0,0,0,8691,8676,1,0,0,0,8691,8677,1,0,0,0,8691,8678,1,
		0,0,0,8691,8679,1,0,0,0,8691,8680,1,0,0,0,8691,8682,1,0,0,0,8691,8684,
		1,0,0,0,8691,8686,1,0,0,0,8691,8688,1,0,0,0,8691,8690,1,0,0,0,8692,1131,
		1,0,0,0,8693,8694,5,2,0,0,8694,8695,3,1356,678,0,8695,8696,5,3,0,0,8696,
		8699,1,0,0,0,8697,8699,1,0,0,0,8698,8693,1,0,0,0,8698,8697,1,0,0,0,8699,
		1133,1,0,0,0,8700,8703,3,1138,569,0,8701,8703,3,1140,570,0,8702,8700,1,
		0,0,0,8702,8701,1,0,0,0,8703,1135,1,0,0,0,8704,8707,3,1138,569,0,8705,
		8707,3,1140,570,0,8706,8704,1,0,0,0,8706,8705,1,0,0,0,8707,1137,1,0,0,
		0,8708,8709,5,383,0,0,8709,8710,3,1148,574,0,8710,8711,5,2,0,0,8711,8712,
		3,1280,640,0,8712,8713,5,3,0,0,8713,1139,1,0,0,0,8714,8715,5,383,0,0,8715,
		8716,3,1148,574,0,8716,1141,1,0,0,0,8717,8722,3,1146,573,0,8718,8719,5,
		2,0,0,8719,8720,3,1356,678,0,8720,8721,5,3,0,0,8721,8723,1,0,0,0,8722,
		8718,1,0,0,0,8722,8723,1,0,0,0,8723,1143,1,0,0,0,8724,8729,3,1146,573,
		0,8725,8726,5,2,0,0,8726,8727,3,1356,678,0,8727,8728,5,3,0,0,8728,8730,
		1,0,0,0,8729,8725,1,0,0,0,8729,8730,1,0,0,0,8730,1145,1,0,0,0,8731,8732,
		7,43,0,0,8732,8738,3,1148,574,0,8733,8738,5,417,0,0,8734,8735,5,399,0,
		0,8735,8736,7,44,0,0,8736,8738,3,1148,574,0,8737,8731,1,0,0,0,8737,8733,
		1,0,0,0,8737,8734,1,0,0,0,8738,1147,1,0,0,0,8739,8742,5,368,0,0,8740,8742,
		1,0,0,0,8741,8739,1,0,0,0,8741,8740,1,0,0,0,8742,1149,1,0,0,0,8743,8748,
		7,45,0,0,8744,8745,5,2,0,0,8745,8746,3,1356,678,0,8746,8747,5,3,0,0,8747,
		8749,1,0,0,0,8748,8744,1,0,0,0,8748,8749,1,0,0,0,8749,8750,1,0,0,0,8750,
		8751,3,1154,577,0,8751,1151,1,0,0,0,8752,8753,5,397,0,0,8753,1153,1,0,
		0,0,8754,8755,5,105,0,0,8755,8756,5,412,0,0,8756,8762,5,380,0,0,8757,8758,
		5,373,0,0,8758,8759,5,412,0,0,8759,8762,5,380,0,0,8760,8762,1,0,0,0,8761,
		8754,1,0,0,0,8761,8757,1,0,0,0,8761,8760,1,0,0,0,8762,1155,1,0,0,0,8763,
		8790,5,378,0,0,8764,8790,5,258,0,0,8765,8790,5,177,0,0,8766,8790,5,219,
		0,0,8767,8790,5,255,0,0,8768,8790,3,1158,579,0,8769,8770,5,378,0,0,8770,
		8771,5,94,0,0,8771,8790,5,258,0,0,8772,8773,5,177,0,0,8773,8777,5,94,0,
		0,8774,8778,5,219,0,0,8775,8778,5,255,0,0,8776,8778,3,1158,579,0,8777,
		8774,1,0,0,0,8777,8775,1,0,0,0,8777,8776,1,0,0,0,8778,8790,1,0,0,0,8779,
		8780,5,219,0,0,8780,8783,5,94,0,0,8781,8784,5,255,0,0,8782,8784,3,1158,
		579,0,8783,8781,1,0,0,0,8783,8782,1,0,0,0,8784,8790,1,0,0,0,8785,8786,
		5,255,0,0,8786,8787,5,94,0,0,8787,8790,3,1158,579,0,8788,8790,1,0,0,0,
		8789,8763,1,0,0,0,8789,8764,1,0,0,0,8789,8765,1,0,0,0,8789,8766,1,0,0,
		0,8789,8767,1,0,0,0,8789,8768,1,0,0,0,8789,8769,1,0,0,0,8789,8772,1,0,
		0,0,8789,8779,1,0,0,0,8789,8785,1,0,0,0,8789,8788,1,0,0,0,8790,1157,1,
		0,0,0,8791,8796,5,320,0,0,8792,8793,5,2,0,0,8793,8794,3,1356,678,0,8794,
		8795,5,3,0,0,8795,8797,1,0,0,0,8796,8792,1,0,0,0,8796,8797,1,0,0,0,8797,
		1159,1,0,0,0,8798,8799,5,198,0,0,8799,8802,3,1162,581,0,8800,8802,1,0,
		0,0,8801,8798,1,0,0,0,8801,8800,1,0,0,0,8802,1161,1,0,0,0,8803,8804,3,
		1164,582,0,8804,1163,1,0,0,0,8805,8807,3,1166,583,0,8806,8808,3,1274,637,
		0,8807,8806,1,0,0,0,8807,8808,1,0,0,0,8808,1165,1,0,0,0,8809,8814,3,1168,
		584,0,8810,8811,7,46,0,0,8811,8813,3,1168,584,0,8812,8810,1,0,0,0,8813,
		8816,1,0,0,0,8814,8812,1,0,0,0,8814,8815,1,0,0,0,8815,1167,1,0,0,0,8816,
		8814,1,0,0,0,8817,8822,3,1170,585,0,8818,8819,5,82,0,0,8819,8821,3,1170,
		585,0,8820,8818,1,0,0,0,8821,8824,1,0,0,0,8822,8820,1,0,0,0,8822,8823,
		1,0,0,0,8823,1169,1,0,0,0,8824,8822,1,0,0,0,8825,8830,3,1172,586,0,8826,
		8827,5,33,0,0,8827,8829,3,1172,586,0,8828,8826,1,0,0,0,8829,8832,1,0,0,
		0,8830,8828,1,0,0,0,8830,8831,1,0,0,0,8831,1171,1,0,0,0,8832,8830,1,0,
		0,0,8833,8845,3,1174,587,0,8834,8836,5,77,0,0,8835,8834,1,0,0,0,8835,8836,
		1,0,0,0,8836,8837,1,0,0,0,8837,8839,5,381,0,0,8838,8840,5,91,0,0,8839,
		8838,1,0,0,0,8839,8840,1,0,0,0,8840,8841,1,0,0,0,8841,8842,3,1174,587,
		0,8842,8843,5,33,0,0,8843,8844,3,1174,587,0,8844,8846,1,0,0,0,8845,8835,
		1,0,0,0,8845,8846,1,0,0,0,8846,1173,1,0,0,0,8847,8853,3,1176,588,0,8848,
		8850,5,77,0,0,8849,8848,1,0,0,0,8849,8850,1,0,0,0,8850,8851,1,0,0,0,8851,
		8852,5,68,0,0,8852,8854,3,1306,653,0,8853,8849,1,0,0,0,8853,8854,1,0,0,
		0,8854,1175,1,0,0,0,8855,8857,5,77,0,0,8856,8855,1,0,0,0,8856,8857,1,0,
		0,0,8857,8858,1,0,0,0,8858,8859,3,1178,589,0,8859,1177,1,0,0,0,8860,8868,
		3,1180,590,0,8861,8869,5,117,0,0,8862,8869,5,122,0,0,8863,8864,5,116,0,
		0,8864,8869,5,78,0,0,8865,8866,5,116,0,0,8866,8867,5,77,0,0,8867,8869,
		5,78,0,0,8868,8861,1,0,0,0,8868,8862,1,0,0,0,8868,8863,1,0,0,0,8868,8865,
		1,0,0,0,8868,8869,1,0,0,0,8869,1179,1,0,0,0,8870,8890,3,1182,591,0,8871,
		8873,5,116,0,0,8872,8874,5,77,0,0,8873,8872,1,0,0,0,8873,8874,1,0,0,0,
		8874,8888,1,0,0,0,8875,8876,7,47,0,0,8876,8877,5,64,0,0,8877,8889,3,1162,
		581,0,8878,8879,5,269,0,0,8879,8880,5,2,0,0,8880,8881,3,1286,643,0,8881,
		8882,5,3,0,0,8882,8889,1,0,0,0,8883,8889,5,189,0,0,8884,8886,3,1296,648,
		0,8885,8884,1,0,0,0,8885,8886,1,0,0,0,8886,8887,1,0,0,0,8887,8889,5,479,
		0,0,8888,8875,1,0,0,0,8888,8878,1,0,0,0,8888,8883,1,0,0,0,8888,8885,1,
		0,0,0,8889,8891,1,0,0,0,8890,8871,1,0,0,0,8890,8891,1,0,0,0,8891,1181,
		1,0,0,0,8892,8904,3,1184,592,0,8893,8894,7,48,0,0,8894,8905,3,1184,592,
		0,8895,8896,3,1278,639,0,8896,8902,3,1268,634,0,8897,8903,3,962,481,0,
		8898,8899,5,2,0,0,8899,8900,3,1162,581,0,8900,8901,5,3,0,0,8901,8903,1,
		0,0,0,8902,8897,1,0,0,0,8902,8898,1,0,0,0,8903,8905,1,0,0,0,8904,8893,
		1,0,0,0,8904,8895,1,0,0,0,8904,8905,1,0,0,0,8905,1183,1,0,0,0,8906,8919,
		3,1186,593,0,8907,8909,5,77,0,0,8908,8907,1,0,0,0,8908,8909,1,0,0,0,8909,
		8914,1,0,0,0,8910,8915,5,120,0,0,8911,8915,5,114,0,0,8912,8913,5,127,0,
		0,8913,8915,5,94,0,0,8914,8910,1,0,0,0,8914,8911,1,0,0,0,8914,8912,1,0,
		0,0,8915,8916,1,0,0,0,8916,8917,3,1186,593,0,8917,8918,3,1160,580,0,8918,
		8920,1,0,0,0,8919,8908,1,0,0,0,8919,8920,1,0,0,0,8920,1185,1,0,0,0,8921,
		8927,3,1188,594,0,8922,8923,3,1274,637,0,8923,8924,3,1188,594,0,8924,8926,
		1,0,0,0,8925,8922,1,0,0,0,8926,8929,1,0,0,0,8927,8925,1,0,0,0,8927,8928,
		1,0,0,0,8928,1187,1,0,0,0,8929,8927,1,0,0,0,8930,8932,3,1274,637,0,8931,
		8930,1,0,0,0,8931,8932,1,0,0,0,8932,8933,1,0,0,0,8933,8934,3,1190,595,
		0,8934,1189,1,0,0,0,8935,8940,3,1192,596,0,8936,8937,7,49,0,0,8937,8939,
		3,1192,596,0,8938,8936,1,0,0,0,8939,8942,1,0,0,0,8940,8938,1,0,0,0,8940,
		8941,1,0,0,0,8941,1191,1,0,0,0,8942,8940,1,0,0,0,8943,8948,3,1194,597,
		0,8944,8945,7,50,0,0,8945,8947,3,1194,597,0,8946,8944,1,0,0,0,8947,8950,
		1,0,0,0,8948,8946,1,0,0,0,8948,8949,1,0,0,0,8949,1193,1,0,0,0,8950,8948,
		1,0,0,0,8951,8954,3,1196,598,0,8952,8953,5,15,0,0,8953,8955,3,1162,581,
		0,8954,8952,1,0,0,0,8954,8955,1,0,0,0,8955,1195,1,0,0,0,8956,8958,7,49,
		0,0,8957,8956,1,0,0,0,8957,8958,1,0,0,0,8958,8959,1,0,0,0,8959,8960,3,
		1198,599,0,8960,1197,1,0,0,0,8961,8966,3,1200,600,0,8962,8963,5,142,0,
		0,8963,8964,5,412,0,0,8964,8965,5,380,0,0,8965,8967,3,1162,581,0,8966,
		8962,1,0,0,0,8966,8967,1,0,0,0,8967,1199,1,0,0,0,8968,8971,3,1202,601,
		0,8969,8970,5,43,0,0,8970,8972,3,524,262,0,8971,8969,1,0,0,0,8971,8972,
		1,0,0,0,8972,1201,1,0,0,0,8973,8978,3,1206,603,0,8974,8975,5,26,0,0,8975,
		8977,3,1118,559,0,8976,8974,1,0,0,0,8977,8980,1,0,0,0,8978,8976,1,0,0,
		0,8978,8979,1,0,0,0,8979,1203,1,0,0,0,8980,8978,1,0,0,0,8981,8982,6,602,
		-1,0,8982,8989,3,1206,603,0,8983,8984,7,49,0,0,8984,8989,3,1204,602,9,
		8985,8986,3,1274,637,0,8986,8987,3,1204,602,3,8987,8989,1,0,0,0,8988,8981,
		1,0,0,0,8988,8983,1,0,0,0,8988,8985,1,0,0,0,8989,9029,1,0,0,0,8990,8991,
		10,8,0,0,8991,8992,5,15,0,0,8992,9028,3,1204,602,9,8993,8994,10,7,0,0,
		8994,8995,7,50,0,0,8995,9028,3,1204,602,8,8996,8997,10,6,0,0,8997,8998,
		7,49,0,0,8998,9028,3,1204,602,7,8999,9000,10,5,0,0,9000,9001,3,1274,637,
		0,9001,9002,3,1204,602,6,9002,9028,1,0,0,0,9003,9004,10,4,0,0,9004,9005,
		7,48,0,0,9005,9028,3,1204,602,5,9006,9007,10,10,0,0,9007,9008,5,26,0,0,
		9008,9028,3,1118,559,0,9009,9010,10,2,0,0,9010,9028,3,1274,637,0,9011,
		9012,10,1,0,0,9012,9014,5,116,0,0,9013,9015,5,77,0,0,9014,9013,1,0,0,0,
		9014,9015,1,0,0,0,9015,9025,1,0,0,0,9016,9017,5,56,0,0,9017,9018,5,64,
		0,0,9018,9026,3,1204,602,0,9019,9020,5,269,0,0,9020,9021,5,2,0,0,9021,
		9022,3,1286,643,0,9022,9023,5,3,0,0,9023,9026,1,0,0,0,9024,9026,5,189,
		0,0,9025,9016,1,0,0,0,9025,9019,1,0,0,0,9025,9024,1,0,0,0,9026,9028,1,
		0,0,0,9027,8990,1,0,0,0,9027,8993,1,0,0,0,9027,8996,1,0,0,0,9027,8999,
		1,0,0,0,9027,9003,1,0,0,0,9027,9006,1,0,0,0,9027,9009,1,0,0,0,9027,9011,
		1,0,0,0,9028,9031,1,0,0,0,9029,9027,1,0,0,0,9029,9030,1,0,0,0,9030,1205,
		1,0,0,0,9031,9029,1,0,0,0,9032,9033,5,390,0,0,9033,9069,3,962,481,0,9034,
		9037,5,35,0,0,9035,9038,3,962,481,0,9036,9038,3,1288,644,0,9037,9035,1,
		0,0,0,9037,9036,1,0,0,0,9038,9069,1,0,0,0,9039,9040,5,28,0,0,9040,9069,
		3,1326,663,0,9041,9042,5,471,0,0,9042,9043,5,2,0,0,9043,9044,3,1280,640,
		0,9044,9045,5,3,0,0,9045,9069,1,0,0,0,9046,9047,5,98,0,0,9047,9069,3,962,
		481,0,9048,9069,3,1318,659,0,9049,9069,3,1348,674,0,9050,9069,3,1208,604,
		0,9051,9052,5,2,0,0,9052,9053,3,1162,581,0,9053,9054,5,3,0,0,9054,9055,
		3,1326,663,0,9055,9069,1,0,0,0,9056,9069,3,1308,654,0,9057,9069,3,1212,
		606,0,9058,9060,3,962,481,0,9059,9061,3,1324,662,0,9060,9059,1,0,0,0,9060,
		9061,1,0,0,0,9061,9069,1,0,0,0,9062,9069,3,1264,632,0,9063,9069,3,1266,
		633,0,9064,9065,3,1262,631,0,9065,9066,5,125,0,0,9066,9067,3,1262,631,
		0,9067,9069,1,0,0,0,9068,9032,1,0,0,0,9068,9034,1,0,0,0,9068,9039,1,0,
		0,0,9068,9041,1,0,0,0,9068,9046,1,0,0,0,9068,9048,1,0,0,0,9068,9049,1,
		0,0,0,9068,9050,1,0,0,0,9068,9051,1,0,0,0,9068,9056,1,0,0,0,9068,9057,
		1,0,0,0,9068,9058,1,0,0,0,9068,9062,1,0,0,0,9068,9063,1,0,0,0,9068,9064,
		1,0,0,0,9069,1207,1,0,0,0,9070,9071,5,662,0,0,9071,1209,1,0,0,0,9072,9073,
		3,1346,673,0,9073,9092,5,2,0,0,9074,9078,3,1282,641,0,9075,9076,5,6,0,
		0,9076,9077,5,101,0,0,9077,9079,3,1284,642,0,9078,9075,1,0,0,0,9078,9079,
		1,0,0,0,9079,9080,1,0,0,0,9080,9081,3,996,498,0,9081,9093,1,0,0,0,9082,
		9083,5,101,0,0,9083,9084,3,1284,642,0,9084,9085,3,996,498,0,9085,9093,
		1,0,0,0,9086,9087,7,51,0,0,9087,9088,3,1282,641,0,9088,9089,3,996,498,
		0,9089,9093,1,0,0,0,9090,9093,5,9,0,0,9091,9093,1,0,0,0,9092,9074,1,0,
		0,0,9092,9082,1,0,0,0,9092,9086,1,0,0,0,9092,9090,1,0,0,0,9092,9091,1,
		0,0,0,9093,9094,1,0,0,0,9094,9095,5,3,0,0,9095,1211,1,0,0,0,9096,9097,
		3,1210,605,0,9097,9098,3,1236,618,0,9098,9099,3,1238,619,0,9099,9100,3,
		1246,623,0,9100,9103,1,0,0,0,9101,9103,3,1216,608,0,9102,9096,1,0,0,0,
		9102,9101,1,0,0,0,9103,1213,1,0,0,0,9104,9107,3,1210,605,0,9105,9107,3,
		1216,608,0,9106,9104,1,0,0,0,9106,9105,1,0,0,0,9107,1215,1,0,0,0,9108,
		9109,5,108,0,0,9109,9110,5,62,0,0,9110,9111,5,2,0,0,9111,9112,3,1162,581,
		0,9112,9113,5,3,0,0,9113,9286,1,0,0,0,9114,9286,5,48,0,0,9115,9120,5,50,
		0,0,9116,9117,5,2,0,0,9117,9118,3,1356,678,0,9118,9119,5,3,0,0,9119,9121,
		1,0,0,0,9120,9116,1,0,0,0,9120,9121,1,0,0,0,9121,9286,1,0,0,0,9122,9127,
		5,51,0,0,9123,9124,5,2,0,0,9124,9125,3,1356,678,0,9125,9126,5,3,0,0,9126,
		9128,1,0,0,0,9127,9123,1,0,0,0,9127,9128,1,0,0,0,9128,9286,1,0,0,0,9129,
		9134,5,75,0,0,9130,9131,5,2,0,0,9131,9132,3,1356,678,0,9132,9133,5,3,0,
		0,9133,9135,1,0,0,0,9134,9130,1,0,0,0,9134,9135,1,0,0,0,9135,9286,1,0,
		0,0,9136,9141,5,76,0,0,9137,9138,5,2,0,0,9138,9139,3,1356,678,0,9139,9140,
		5,3,0,0,9140,9142,1,0,0,0,9141,9137,1,0,0,0,9141,9142,1,0,0,0,9142,9286,
		1,0,0,0,9143,9286,5,49,0,0,9144,9286,5,52,0,0,9145,9286,5,89,0,0,9146,
		9286,5,99,0,0,9147,9286,5,47,0,0,9148,9286,5,111,0,0,9149,9150,5,41,0,
		0,9150,9151,5,2,0,0,9151,9152,3,1162,581,0,9152,9153,5,36,0,0,9153,9154,
		3,1118,559,0,9154,9155,5,3,0,0,9155,9286,1,0,0,0,9156,9157,5,391,0,0,9157,
		9158,5,2,0,0,9158,9159,3,1292,646,0,9159,9160,5,3,0,0,9160,9286,1,0,0,
		0,9161,9162,5,490,0,0,9162,9163,5,2,0,0,9163,9166,3,1162,581,0,9164,9165,
		5,6,0,0,9165,9167,3,1296,648,0,9166,9164,1,0,0,0,9166,9167,1,0,0,0,9167,
		9168,1,0,0,0,9168,9169,5,3,0,0,9169,9286,1,0,0,0,9170,9171,5,404,0,0,9171,
		9172,5,2,0,0,9172,9173,3,1298,649,0,9173,9174,5,3,0,0,9174,9286,1,0,0,
		0,9175,9176,5,405,0,0,9176,9177,5,2,0,0,9177,9178,3,1300,650,0,9178,9179,
		5,3,0,0,9179,9286,1,0,0,0,9180,9181,5,411,0,0,9181,9182,5,2,0,0,9182,9183,
		3,1302,651,0,9183,9184,5,3,0,0,9184,9286,1,0,0,0,9185,9186,5,414,0,0,9186,
		9187,5,2,0,0,9187,9188,3,1162,581,0,9188,9189,5,36,0,0,9189,9190,3,1118,
		559,0,9190,9191,5,3,0,0,9191,9286,1,0,0,0,9192,9193,5,415,0,0,9193,9195,
		5,2,0,0,9194,9196,7,52,0,0,9195,9194,1,0,0,0,9195,9196,1,0,0,0,9196,9197,
		1,0,0,0,9197,9198,3,1304,652,0,9198,9199,5,3,0,0,9199,9286,1,0,0,0,9200,
		9201,5,402,0,0,9201,9202,5,2,0,0,9202,9203,3,1162,581,0,9203,9204,5,6,
		0,0,9204,9205,3,1162,581,0,9205,9206,5,3,0,0,9206,9286,1,0,0,0,9207,9208,
		5,387,0,0,9208,9209,5,2,0,0,9209,9210,3,1280,640,0,9210,9211,5,3,0,0,9211,
		9286,1,0,0,0,9212,9213,5,393,0,0,9213,9214,5,2,0,0,9214,9215,3,1280,640,
		0,9215,9216,5,3,0,0,9216,9286,1,0,0,0,9217,9218,5,398,0,0,9218,9219,5,
		2,0,0,9219,9220,3,1280,640,0,9220,9221,5,3,0,0,9221,9286,1,0,0,0,9222,
		9223,5,426,0,0,9223,9224,5,2,0,0,9224,9225,3,1280,640,0,9225,9226,5,3,
		0,0,9226,9286,1,0,0,0,9227,9228,5,427,0,0,9228,9229,5,2,0,0,9229,9230,
		5,260,0,0,9230,9236,3,1380,690,0,9231,9234,5,6,0,0,9232,9235,3,1222,611,
		0,9233,9235,3,1280,640,0,9234,9232,1,0,0,0,9234,9233,1,0,0,0,9235,9237,
		1,0,0,0,9236,9231,1,0,0,0,9236,9237,1,0,0,0,9237,9238,1,0,0,0,9238,9239,
		5,3,0,0,9239,9286,1,0,0,0,9240,9241,5,428,0,0,9241,9242,5,2,0,0,9242,9243,
		3,1206,603,0,9243,9244,3,1232,616,0,9244,9245,5,3,0,0,9245,9286,1,0,0,
		0,9246,9247,5,429,0,0,9247,9248,5,2,0,0,9248,9249,3,1224,612,0,9249,9250,
		5,3,0,0,9250,9286,1,0,0,0,9251,9252,5,430,0,0,9252,9253,5,2,0,0,9253,9254,
		3,1228,614,0,9254,9255,3,1162,581,0,9255,9256,3,1230,615,0,9256,9257,5,
		3,0,0,9257,9286,1,0,0,0,9258,9259,5,431,0,0,9259,9260,5,2,0,0,9260,9261,
		5,260,0,0,9261,9264,3,1380,690,0,9262,9263,5,6,0,0,9263,9265,3,1162,581,
		0,9264,9262,1,0,0,0,9264,9265,1,0,0,0,9265,9266,1,0,0,0,9266,9267,5,3,
		0,0,9267,9286,1,0,0,0,9268,9269,5,432,0,0,9269,9270,5,2,0,0,9270,9271,
		5,377,0,0,9271,9272,3,1162,581,0,9272,9273,5,6,0,0,9273,9274,3,1218,609,
		0,9274,9275,3,1220,610,0,9275,9276,5,3,0,0,9276,9286,1,0,0,0,9277,9278,
		5,433,0,0,9278,9279,5,2,0,0,9279,9280,3,1228,614,0,9280,9281,3,1162,581,
		0,9281,9282,5,36,0,0,9282,9283,3,1122,561,0,9283,9284,5,3,0,0,9284,9286,
		1,0,0,0,9285,9108,1,0,0,0,9285,9114,1,0,0,0,9285,9115,1,0,0,0,9285,9122,
		1,0,0,0,9285,9129,1,0,0,0,9285,9136,1,0,0,0,9285,9143,1,0,0,0,9285,9144,
		1,0,0,0,9285,9145,1,0,0,0,9285,9146,1,0,0,0,9285,9147,1,0,0,0,9285,9148,
		1,0,0,0,9285,9149,1,0,0,0,9285,9156,1,0,0,0,9285,9161,1,0,0,0,9285,9170,
		1,0,0,0,9285,9175,1,0,0,0,9285,9180,1,0,0,0,9285,9185,1,0,0,0,9285,9192,
		1,0,0,0,9285,9200,1,0,0,0,9285,9207,1,0,0,0,9285,9212,1,0,0,0,9285,9217,
		1,0,0,0,9285,9222,1,0,0,0,9285,9227,1,0,0,0,9285,9240,1,0,0,0,9285,9246,
		1,0,0,0,9285,9251,1,0,0,0,9285,9258,1,0,0,0,9285,9268,1,0,0,0,9285,9277,
		1,0,0,0,9286,1217,1,0,0,0,9287,9288,5,369,0,0,9288,9293,3,1162,581,0,9289,
		9290,5,369,0,0,9290,9291,5,263,0,0,9291,9293,5,451,0,0,9292,9287,1,0,0,
		0,9292,9289,1,0,0,0,9293,1219,1,0,0,0,9294,9295,5,6,0,0,9295,9296,5,333,
		0,0,9296,9306,5,379,0,0,9297,9298,5,6,0,0,9298,9299,5,333,0,0,9299,9306,
		5,263,0,0,9300,9301,5,6,0,0,9301,9302,5,333,0,0,9302,9303,5,263,0,0,9303,
		9306,5,451,0,0,9304,9306,1,0,0,0,9305,9294,1,0,0,0,9305,9297,1,0,0,0,9305,
		9300,1,0,0,0,9305,9304,1,0,0,0,9306,1221,1,0,0,0,9307,9308,5,418,0,0,9308,
		9309,5,2,0,0,9309,9310,3,1224,612,0,9310,9311,5,3,0,0,9311,1223,1,0,0,
		0,9312,9317,3,1226,613,0,9313,9314,5,6,0,0,9314,9316,3,1226,613,0,9315,
		9313,1,0,0,0,9316,9319,1,0,0,0,9317,9315,1,0,0,0,9317,9318,1,0,0,0,9318,
		1225,1,0,0,0,9319,9317,1,0,0,0,9320,9323,3,1162,581,0,9321,9322,5,36,0,
		0,9322,9324,3,1380,690,0,9323,9321,1,0,0,0,9323,9324,1,0,0,0,9324,1227,
		1,0,0,0,9325,9326,7,53,0,0,9326,1229,1,0,0,0,9327,9328,5,286,0,0,9328,
		9333,5,372,0,0,9329,9330,5,341,0,0,9330,9333,5,372,0,0,9331,9333,1,0,0,
		0,9332,9327,1,0,0,0,9332,9329,1,0,0,0,9332,9331,1,0,0,0,9333,1231,1,0,
		0,0,9334,9335,5,280,0,0,9335,9350,3,1206,603,0,9336,9337,5,280,0,0,9337,
		9338,3,1206,603,0,9338,9339,3,1234,617,0,9339,9350,1,0,0,0,9340,9341,5,
		280,0,0,9341,9342,3,1234,617,0,9342,9343,3,1206,603,0,9343,9350,1,0,0,
		0,9344,9345,5,280,0,0,9345,9346,3,1234,617,0,9346,9347,3,1206,603,0,9347,
		9348,3,1234,617,0,9348,9350,1,0,0,0,9349,9334,1,0,0,0,9349,9336,1,0,0,
		0,9349,9340,1,0,0,0,9349,9344,1,0,0,0,9350,1233,1,0,0,0,9351,9352,5,148,
		0,0,9352,9353,7,54,0,0,9353,1235,1,0,0,0,9354,9355,5,480,0,0,9355,9356,
		5,66,0,0,9356,9357,5,2,0,0,9357,9358,3,998,499,0,9358,9359,5,3,0,0,9359,
		9362,1,0,0,0,9360,9362,1,0,0,0,9361,9354,1,0,0,0,9361,9360,1,0,0,0,9362,
		1237,1,0,0,0,9363,9364,5,481,0,0,9364,9365,5,2,0,0,9365,9366,5,103,0,0,
		9366,9367,3,1162,581,0,9367,9368,5,3,0,0,9368,9371,1,0,0,0,9369,9371,1,
		0,0,0,9370,9363,1,0,0,0,9370,9369,1,0,0,0,9371,1239,1,0,0,0,9372,9373,
		5,104,0,0,9373,9376,3,1242,621,0,9374,9376,1,0,0,0,9375,9372,1,0,0,0,9375,
		9374,1,0,0,0,9376,1241,1,0,0,0,9377,9382,3,1244,622,0,9378,9379,5,6,0,
		0,9379,9381,3,1244,622,0,9380,9378,1,0,0,0,9381,9384,1,0,0,0,9382,9380,
		1,0,0,0,9382,9383,1,0,0,0,9383,1243,1,0,0,0,9384,9382,1,0,0,0,9385,9386,
		3,1372,686,0,9386,9387,5,36,0,0,9387,9388,3,1248,624,0,9388,1245,1,0,0,
		0,9389,9392,5,124,0,0,9390,9393,3,1248,624,0,9391,9393,3,1372,686,0,9392,
		9390,1,0,0,0,9392,9391,1,0,0,0,9393,9396,1,0,0,0,9394,9396,1,0,0,0,9395,
		9389,1,0,0,0,9395,9394,1,0,0,0,9396,1247,1,0,0,0,9397,9398,5,2,0,0,9398,
		9399,3,1250,625,0,9399,9400,3,1252,626,0,9400,9401,3,996,498,0,9401,9402,
		3,1254,627,0,9402,9403,5,3,0,0,9403,1249,1,0,0,0,9404,9407,3,1372,686,
		0,9405,9407,1,0,0,0,9406,9404,1,0,0,0,9406,9405,1,0,0,0,9407,1251,1,0,
		0,0,9408,9409,5,279,0,0,9409,9410,5,148,0,0,9410,9413,3,1280,640,0,9411,
		9413,1,0,0,0,9412,9408,1,0,0,0,9412,9411,1,0,0,0,9413,1253,1,0,0,0,9414,
		9415,5,293,0,0,9415,9416,3,1256,628,0,9416,9417,3,1260,630,0,9417,9428,
		1,0,0,0,9418,9419,5,314,0,0,9419,9420,3,1256,628,0,9420,9421,3,1260,630,
		0,9421,9428,1,0,0,0,9422,9423,5,482,0,0,9423,9424,3,1256,628,0,9424,9425,
		3,1260,630,0,9425,9428,1,0,0,0,9426,9428,1,0,0,0,9427,9414,1,0,0,0,9427,
		9418,1,0,0,0,9427,9422,1,0,0,0,9427,9426,1,0,0,0,9428,1255,1,0,0,0,9429,
		9436,3,1258,629,0,9430,9431,5,381,0,0,9431,9432,3,1258,629,0,9432,9433,
		5,33,0,0,9433,9434,3,1258,629,0,9434,9436,1,0,0,0,9435,9429,1,0,0,0,9435,
		9430,1,0,0,0,9436,1257,1,0,0,0,9437,9438,5,356,0,0,9438,9445,7,55,0,0,
		9439,9440,5,435,0,0,9440,9445,5,408,0,0,9441,9442,3,1162,581,0,9442,9443,
		7,55,0,0,9443,9445,1,0,0,0,9444,9437,1,0,0,0,9444,9439,1,0,0,0,9444,9441,
		1,0,0,0,9445,1259,1,0,0,0,9446,9453,5,200,0,0,9447,9448,5,435,0,0,9448,
		9454,5,408,0,0,9449,9454,5,66,0,0,9450,9454,5,468,0,0,9451,9452,5,263,
		0,0,9452,9454,5,483,0,0,9453,9447,1,0,0,0,9453,9449,1,0,0,0,9453,9450,
		1,0,0,0,9453,9451,1,0,0,0,9454,9457,1,0,0,0,9455,9457,1,0,0,0,9456,9446,
		1,0,0,0,9456,9455,1,0,0,0,9457,1261,1,0,0,0,9458,9459,5,408,0,0,9459,9461,
		5,2,0,0,9460,9462,3,1280,640,0,9461,9460,1,0,0,0,9461,9462,1,0,0,0,9462,
		9463,1,0,0,0,9463,9471,5,3,0,0,9464,9465,5,2,0,0,9465,9466,3,1280,640,
		0,9466,9467,5,6,0,0,9467,9468,3,1162,581,0,9468,9469,5,3,0,0,9469,9471,
		1,0,0,0,9470,9458,1,0,0,0,9470,9464,1,0,0,0,9471,1263,1,0,0,0,9472,9473,
		5,408,0,0,9473,9475,5,2,0,0,9474,9476,3,1280,640,0,9475,9474,1,0,0,0,9475,
		9476,1,0,0,0,9476,9477,1,0,0,0,9477,9478,5,3,0,0,9478,1265,1,0,0,0,9479,
		9480,5,2,0,0,9480,9481,3,1280,640,0,9481,9482,5,6,0,0,9482,9483,3,1162,
		581,0,9483,9484,5,3,0,0,9484,1267,1,0,0,0,9485,9486,7,56,0,0,9486,1269,
		1,0,0,0,9487,9490,5,29,0,0,9488,9490,3,1272,636,0,9489,9487,1,0,0,0,9489,
		9488,1,0,0,0,9490,1271,1,0,0,0,9491,9492,7,57,0,0,9492,1273,1,0,0,0,9493,
		9500,5,29,0,0,9494,9495,5,272,0,0,9495,9496,5,2,0,0,9496,9497,3,684,342,
		0,9497,9498,5,3,0,0,9498,9500,1,0,0,0,9499,9493,1,0,0,0,9499,9494,1,0,
		0,0,9500,1275,1,0,0,0,9501,9508,3,1270,635,0,9502,9503,5,272,0,0,9503,
		9504,5,2,0,0,9504,9505,3,684,342,0,9505,9506,5,3,0,0,9506,9508,1,0,0,0,
		9507,9501,1,0,0,0,9507,9502,1,0,0,0,9508,1277,1,0,0,0,9509,9522,3,1270,
		635,0,9510,9511,5,272,0,0,9511,9512,5,2,0,0,9512,9513,3,684,342,0,9513,
		9514,5,3,0,0,9514,9522,1,0,0,0,9515,9522,5,120,0,0,9516,9517,5,77,0,0,
		9517,9522,5,120,0,0,9518,9522,5,114,0,0,9519,9520,5,77,0,0,9520,9522,5,
		114,0,0,9521,9509,1,0,0,0,9521,9510,1,0,0,0,9521,9515,1,0,0,0,9521,9516,
		1,0,0,0,9521,9518,1,0,0,0,9521,9519,1,0,0,0,9522,1279,1,0,0,0,9523,9528,
		3,1162,581,0,9524,9525,5,6,0,0,9525,9527,3,1162,581,0,9526,9524,1,0,0,
		0,9527,9530,1,0,0,0,9528,9526,1,0,0,0,9528,9529,1,0,0,0,9529,1281,1,0,
		0,0,9530,9528,1,0,0,0,9531,9536,3,1284,642,0,9532,9533,5,6,0,0,9533,9535,
		3,1284,642,0,9534,9532,1,0,0,0,9535,9538,1,0,0,0,9536,9534,1,0,0,0,9536,
		9537,1,0,0,0,9537,1283,1,0,0,0,9538,9536,1,0,0,0,9539,9545,3,1162,581,
		0,9540,9541,3,636,318,0,9541,9542,7,58,0,0,9542,9543,3,1162,581,0,9543,
		9545,1,0,0,0,9544,9539,1,0,0,0,9544,9540,1,0,0,0,9545,1285,1,0,0,0,9546,
		9551,3,1118,559,0,9547,9548,5,6,0,0,9548,9550,3,1118,559,0,9549,9547,1,
		0,0,0,9550,9553,1,0,0,0,9551,9549,1,0,0,0,9551,9552,1,0,0,0,9552,1287,
		1,0,0,0,9553,9551,1,0,0,0,9554,9557,5,4,0,0,9555,9558,3,1280,640,0,9556,
		9558,3,1290,645,0,9557,9555,1,0,0,0,9557,9556,1,0,0,0,9557,9558,1,0,0,
		0,9558,9559,1,0,0,0,9559,9560,5,5,0,0,9560,1289,1,0,0,0,9561,9566,3,1288,
		644,0,9562,9563,5,6,0,0,9563,9565,3,1288,644,0,9564,9562,1,0,0,0,9565,
		9568,1,0,0,0,9566,9564,1,0,0,0,9566,9567,1,0,0,0,9567,1291,1,0,0,0,9568,
		9566,1,0,0,0,9569,9570,3,1294,647,0,9570,9571,5,64,0,0,9571,9572,3,1162,
		581,0,9572,9575,1,0,0,0,9573,9575,1,0,0,0,9574,9569,1,0,0,0,9574,9573,
		1,0,0,0,9575,1293,1,0,0,0,9576,9585,3,1382,691,0,9577,9585,5,378,0,0,9578,
		9585,5,258,0,0,9579,9585,5,177,0,0,9580,9585,5,219,0,0,9581,9585,5,255,
		0,0,9582,9585,5,320,0,0,9583,9585,3,1358,679,0,9584,9576,1,0,0,0,9584,
		9577,1,0,0,0,9584,9578,1,0,0,0,9584,9579,1,0,0,0,9584,9580,1,0,0,0,9584,
		9581,1,0,0,0,9584,9582,1,0,0,0,9584,9583,1,0,0,0,9585,1295,1,0,0,0,9586,
		9587,7,59,0,0,9587,1297,1,0,0,0,9588,9589,3,1162,581,0,9589,9590,5,84,
		0,0,9590,9591,3,1162,581,0,9591,9592,5,64,0,0,9592,9595,3,1162,581,0,9593,
		9594,5,62,0,0,9594,9596,3,1162,581,0,9595,9593,1,0,0,0,9595,9596,1,0,0,
		0,9596,1299,1,0,0,0,9597,9598,3,1204,602,0,9598,9599,5,68,0,0,9599,9600,
		3,1204,602,0,9600,9603,1,0,0,0,9601,9603,1,0,0,0,9602,9597,1,0,0,0,9602,
		9601,1,0,0,0,9603,1301,1,0,0,0,9604,9605,3,1162,581,0,9605,9606,5,64,0,
		0,9606,9607,3,1162,581,0,9607,9608,5,62,0,0,9608,9609,3,1162,581,0,9609,
		9632,1,0,0,0,9610,9611,3,1162,581,0,9611,9612,5,62,0,0,9612,9613,3,1162,
		581,0,9613,9614,5,64,0,0,9614,9615,3,1162,581,0,9615,9632,1,0,0,0,9616,
		9617,3,1162,581,0,9617,9618,5,64,0,0,9618,9619,3,1162,581,0,9619,9632,
		1,0,0,0,9620,9621,3,1162,581,0,9621,9622,5,62,0,0,9622,9623,3,1162,581,
		0,9623,9632,1,0,0,0,9624,9625,3,1162,581,0,9625,9626,5,127,0,0,9626,9627,
		3,1162,581,0,9627,9628,5,198,0,0,9628,9629,3,1162,581,0,9629,9632,1,0,
		0,0,9630,9632,3,1280,640,0,9631,9604,1,0,0,0,9631,9610,1,0,0,0,9631,9616,
		1,0,0,0,9631,9620,1,0,0,0,9631,9624,1,0,0,0,9631,9630,1,0,0,0,9632,1303,
		1,0,0,0,9633,9634,3,1162,581,0,9634,9635,5,64,0,0,9635,9636,3,1280,640,
		0,9636,9641,1,0,0,0,9637,9638,5,64,0,0,9638,9641,3,1280,640,0,9639,9641,
		3,1280,640,0,9640,9633,1,0,0,0,9640,9637,1,0,0,0,9640,9639,1,0,0,0,9641,
		1305,1,0,0,0,9642,9648,3,962,481,0,9643,9644,5,2,0,0,9644,9645,3,1280,
		640,0,9645,9646,5,3,0,0,9646,9648,1,0,0,0,9647,9642,1,0,0,0,9647,9643,
		1,0,0,0,9648,1307,1,0,0,0,9649,9650,5,40,0,0,9650,9651,3,1316,658,0,9651,
		9652,3,1310,655,0,9652,9653,3,1314,657,0,9653,9654,5,455,0,0,9654,1309,
		1,0,0,0,9655,9657,3,1312,656,0,9656,9655,1,0,0,0,9657,9658,1,0,0,0,9658,
		9656,1,0,0,0,9658,9659,1,0,0,0,9659,1311,1,0,0,0,9660,9661,5,102,0,0,9661,
		9662,3,1162,581,0,9662,9663,5,93,0,0,9663,9664,3,1162,581,0,9664,1313,
		1,0,0,0,9665,9666,5,58,0,0,9666,9669,3,1162,581,0,9667,9669,1,0,0,0,9668,
		9665,1,0,0,0,9668,9667,1,0,0,0,9669,1315,1,0,0,0,9670,9673,3,1162,581,
		0,9671,9673,1,0,0,0,9672,9670,1,0,0,0,9672,9671,1,0,0,0,9673,1317,1,0,
		0,0,9674,9676,3,1372,686,0,9675,9677,3,1324,662,0,9676,9675,1,0,0,0,9676,
		9677,1,0,0,0,9677,1319,1,0,0,0,9678,9681,5,11,0,0,9679,9682,3,1342,671,
		0,9680,9682,5,9,0,0,9681,9679,1,0,0,0,9681,9680,1,0,0,0,9682,9694,1,0,
		0,0,9683,9689,5,4,0,0,9684,9690,3,1162,581,0,9685,9686,3,1322,661,0,9686,
		9687,5,8,0,0,9687,9688,3,1322,661,0,9688,9690,1,0,0,0,9689,9684,1,0,0,
		0,9689,9685,1,0,0,0,9690,9691,1,0,0,0,9691,9692,5,5,0,0,9692,9694,1,0,
		0,0,9693,9678,1,0,0,0,9693,9683,1,0,0,0,9694,1321,1,0,0,0,9695,9698,3,
		1162,581,0,9696,9698,1,0,0,0,9697,9695,1,0,0,0,9697,9696,1,0,0,0,9698,
		1323,1,0,0,0,9699,9701,3,1320,660,0,9700,9699,1,0,0,0,9701,9702,1,0,0,
		0,9702,9700,1,0,0,0,9702,9703,1,0,0,0,9703,1325,1,0,0,0,9704,9706,3,1320,
		660,0,9705,9704,1,0,0,0,9706,9709,1,0,0,0,9707,9705,1,0,0,0,9707,9708,
		1,0,0,0,9708,1327,1,0,0,0,9709,9707,1,0,0,0,9710,9713,3,1330,665,0,9711,
		9713,1,0,0,0,9712,9710,1,0,0,0,9712,9711,1,0,0,0,9713,1329,1,0,0,0,9714,
		9719,3,1332,666,0,9715,9716,5,6,0,0,9716,9718,3,1332,666,0,9717,9715,1,
		0,0,0,9718,9721,1,0,0,0,9719,9717,1,0,0,0,9719,9720,1,0,0,0,9720,1331,
		1,0,0,0,9721,9719,1,0,0,0,9722,9727,3,1162,581,0,9723,9724,5,36,0,0,9724,
		9728,3,1380,690,0,9725,9728,3,1382,691,0,9726,9728,1,0,0,0,9727,9723,1,
		0,0,0,9727,9725,1,0,0,0,9727,9726,1,0,0,0,9728,9731,1,0,0,0,9729,9731,
		5,9,0,0,9730,9722,1,0,0,0,9730,9729,1,0,0,0,9731,1333,1,0,0,0,9732,9737,
		3,1336,668,0,9733,9734,5,6,0,0,9734,9736,3,1336,668,0,9735,9733,1,0,0,
		0,9736,9739,1,0,0,0,9737,9735,1,0,0,0,9737,9738,1,0,0,0,9738,1335,1,0,
		0,0,9739,9737,1,0,0,0,9740,9742,3,1372,686,0,9741,9743,3,1324,662,0,9742,
		9741,1,0,0,0,9742,9743,1,0,0,0,9743,1337,1,0,0,0,9744,9749,3,1340,670,
		0,9745,9746,5,6,0,0,9746,9748,3,1340,670,0,9747,9745,1,0,0,0,9748,9751,
		1,0,0,0,9749,9747,1,0,0,0,9749,9750,1,0,0,0,9750,1339,1,0,0,0,9751,9749,
		1,0,0,0,9752,9753,3,1372,686,0,9753,1341,1,0,0,0,9754,9755,3,1380,690,
		0,9755,1343,1,0,0,0,9756,9757,3,1358,679,0,9757,1345,1,0,0,0,9758,9766,
		3,1394,697,0,9759,9766,3,1376,688,0,9760,9761,3,1372,686,0,9761,9762,3,
		1324,662,0,9762,9766,1,0,0,0,9763,9766,5,119,0,0,9764,9766,5,126,0,0,9765,
		9758,1,0,0,0,9765,9759,1,0,0,0,9765,9760,1,0,0,0,9765,9763,1,0,0,0,9765,
		9764,1,0,0,0,9766,1347,1,0,0,0,9767,9800,3,1356,678,0,9768,9800,3,1354,
		677,0,9769,9800,3,1358,679,0,9770,9800,3,1352,676,0,9771,9800,3,1350,675,
		0,9772,9780,3,1346,673,0,9773,9781,3,1358,679,0,9774,9775,5,2,0,0,9775,
		9776,3,1282,641,0,9776,9777,3,996,498,0,9777,9778,5,3,0,0,9778,9779,3,
		1358,679,0,9779,9781,1,0,0,0,9780,9773,1,0,0,0,9780,9774,1,0,0,0,9781,
		9800,1,0,0,0,9782,9783,3,1124,562,0,9783,9784,3,1358,679,0,9784,9800,1,
		0,0,0,9785,9794,3,1152,576,0,9786,9787,3,1358,679,0,9787,9788,3,1156,578,
		0,9788,9795,1,0,0,0,9789,9790,5,2,0,0,9790,9791,3,1356,678,0,9791,9792,
		5,3,0,0,9792,9793,3,1358,679,0,9793,9795,1,0,0,0,9794,9786,1,0,0,0,9794,
		9789,1,0,0,0,9795,9800,1,0,0,0,9796,9800,5,96,0,0,9797,9800,5,60,0,0,9798,
		9800,5,78,0,0,9799,9767,1,0,0,0,9799,9768,1,0,0,0,9799,9769,1,0,0,0,9799,
		9770,1,0,0,0,9799,9771,1,0,0,0,9799,9772,1,0,0,0,9799,9782,1,0,0,0,9799,
		9785,1,0,0,0,9799,9796,1,0,0,0,9799,9797,1,0,0,0,9799,9798,1,0,0,0,9800,
		1349,1,0,0,0,9801,9802,5,655,0,0,9802,1351,1,0,0,0,9803,9804,5,651,0,0,
		9804,1353,1,0,0,0,9805,9806,5,661,0,0,9806,1355,1,0,0,0,9807,9808,5,659,
		0,0,9808,1357,1,0,0,0,9809,9810,3,1360,680,0,9810,9811,3,1362,681,0,9811,
		1359,1,0,0,0,9812,9824,5,646,0,0,9813,9824,5,648,0,0,9814,9818,5,650,0,
		0,9815,9817,5,678,0,0,9816,9815,1,0,0,0,9817,9820,1,0,0,0,9818,9816,1,
		0,0,0,9818,9819,1,0,0,0,9819,9821,1,0,0,0,9820,9818,1,0,0,0,9821,9824,
		5,679,0,0,9822,9824,5,672,0,0,9823,9812,1,0,0,0,9823,9813,1,0,0,0,9823,
		9814,1,0,0,0,9823,9822,1,0,0,0,9824,1361,1,0,0,0,9825,9826,5,488,0,0,9826,
		9829,3,1360,680,0,9827,9829,1,0,0,0,9828,9825,1,0,0,0,9828,9827,1,0,0,
		0,9829,1363,1,0,0,0,9830,9836,3,1356,678,0,9831,9832,5,12,0,0,9832,9836,
		3,1356,678,0,9833,9834,5,13,0,0,9834,9836,3,1356,678,0,9835,9830,1,0,0,
		0,9835,9831,1,0,0,0,9835,9833,1,0,0,0,9836,1365,1,0,0,0,9837,9838,3,1368,
		684,0,9838,1367,1,0,0,0,9839,9843,3,1378,689,0,9840,9843,5,52,0,0,9841,
		9843,5,89,0,0,9842,9839,1,0,0,0,9842,9840,1,0,0,0,9842,9841,1,0,0,0,9843,
		1369,1,0,0,0,9844,9849,3,1368,684,0,9845,9846,5,6,0,0,9846,9848,3,1368,
		684,0,9847,9845,1,0,0,0,9848,9851,1,0,0,0,9849,9847,1,0,0,0,9849,9850,
		1,0,0,0,9850,1371,1,0,0,0,9851,9849,1,0,0,0,9852,9859,3,1382,691,0,9853,
		9859,3,1386,693,0,9854,9859,3,1388,694,0,9855,9859,3,1608,804,0,9856,9859,
		5,119,0,0,9857,9859,5,126,0,0,9858,9852,1,0,0,0,9858,9853,1,0,0,0,9858,
		9854,1,0,0,0,9858,9855,1,0,0,0,9858,9856,1,0,0,0,9858,9857,1,0,0,0,9859,
		1373,1,0,0,0,9860,9865,3,1382,691,0,9861,9865,3,1386,693,0,9862,9865,3,
		1388,694,0,9863,9865,3,1608,804,0,9864,9860,1,0,0,0,9864,9861,1,0,0,0,
		9864,9862,1,0,0,0,9864,9863,1,0,0,0,9865,1375,1,0,0,0,9866,9871,3,1382,
		691,0,9867,9871,3,1386,693,0,9868,9871,3,1608,804,0,9869,9871,3,1390,695,
		0,9870,9866,1,0,0,0,9870,9867,1,0,0,0,9870,9868,1,0,0,0,9870,9869,1,0,
		0,0,9871,1377,1,0,0,0,9872,9877,3,1382,691,0,9873,9877,3,1386,693,0,9874,
		9877,3,1388,694,0,9875,9877,3,1390,695,0,9876,9872,1,0,0,0,9876,9873,1,
		0,0,0,9876,9874,1,0,0,0,9876,9875,1,0,0,0,9877,1379,1,0,0,0,9878,9885,
		3,1382,691,0,9879,9885,3,1608,804,0,9880,9885,3,1386,693,0,9881,9885,3,
		1388,694,0,9882,9885,3,1390,695,0,9883,9885,3,1392,696,0,9884,9878,1,0,
		0,0,9884,9879,1,0,0,0,9884,9880,1,0,0,0,9884,9881,1,0,0,0,9884,9882,1,
		0,0,0,9884,9883,1,0,0,0,9885,1381,1,0,0,0,9886,9887,5,637,0,0,9887,9894,
		3,1362,681,0,9888,9894,5,638,0,0,9889,9894,5,642,0,0,9890,9894,3,1208,
		604,0,9891,9894,3,1384,692,0,9892,9894,3,1608,804,0,9893,9886,1,0,0,0,
		9893,9888,1,0,0,0,9893,9889,1,0,0,0,9893,9890,1,0,0,0,9893,9891,1,0,0,
		0,9893,9892,1,0,0,0,9894,1383,1,0,0,0,9895,9896,5,663,0,0,9896,1385,1,
		0,0,0,9897,9898,7,60,0,0,9898,1387,1,0,0,0,9899,9952,5,381,0,0,9900,9952,
		5,382,0,0,9901,9952,3,1134,567,0,9902,9952,5,384,0,0,9903,9952,5,385,0,
		0,9904,9952,3,1142,571,0,9905,9952,5,387,0,0,9906,9952,5,388,0,0,9907,
		9952,5,389,0,0,9908,9952,5,390,0,0,9909,9952,5,391,0,0,9910,9952,5,392,
		0,0,9911,9952,5,393,0,0,9912,9952,5,471,0,0,9913,9952,5,394,0,0,9914,9952,
		5,395,0,0,9915,9952,5,396,0,0,9916,9952,5,397,0,0,9917,9952,5,398,0,0,
		9918,9952,5,399,0,0,9919,9952,5,400,0,0,9920,9952,5,401,0,0,9921,9952,
		5,490,0,0,9922,9952,5,402,0,0,9923,9952,3,1130,565,0,9924,9952,5,454,0,
		0,9925,9952,5,404,0,0,9926,9952,5,405,0,0,9927,9952,5,406,0,0,9928,9952,
		5,407,0,0,9929,9952,5,408,0,0,9930,9952,5,409,0,0,9931,9952,5,410,0,0,
		9932,9952,5,411,0,0,9933,9952,5,412,0,0,9934,9952,5,413,0,0,9935,9952,
		5,414,0,0,9936,9952,5,415,0,0,9937,9952,5,416,0,0,9938,9952,5,417,0,0,
		9939,9952,5,418,0,0,9940,9952,5,426,0,0,9941,9952,5,427,0,0,9942,9952,
		5,428,0,0,9943,9952,5,429,0,0,9944,9952,5,477,0,0,9945,9952,5,430,0,0,
		9946,9952,5,431,0,0,9947,9952,5,432,0,0,9948,9952,5,433,0,0,9949,9952,
		5,475,0,0,9950,9952,3,1394,697,0,9951,9899,1,0,0,0,9951,9900,1,0,0,0,9951,
		9901,1,0,0,0,9951,9902,1,0,0,0,9951,9903,1,0,0,0,9951,9904,1,0,0,0,9951,
		9905,1,0,0,0,9951,9906,1,0,0,0,9951,9907,1,0,0,0,9951,9908,1,0,0,0,9951,
		9909,1,0,0,0,9951,9910,1,0,0,0,9951,9911,1,0,0,0,9951,9912,1,0,0,0,9951,
		9913,1,0,0,0,9951,9914,1,0,0,0,9951,9915,1,0,0,0,9951,9916,1,0,0,0,9951,
		9917,1,0,0,0,9951,9918,1,0,0,0,9951,9919,1,0,0,0,9951,9920,1,0,0,0,9951,
		9921,1,0,0,0,9951,9922,1,0,0,0,9951,9923,1,0,0,0,9951,9924,1,0,0,0,9951,
		9925,1,0,0,0,9951,9926,1,0,0,0,9951,9927,1,0,0,0,9951,9928,1,0,0,0,9951,
		9929,1,0,0,0,9951,9930,1,0,0,0,9951,9931,1,0,0,0,9951,9932,1,0,0,0,9951,
		9933,1,0,0,0,9951,9934,1,0,0,0,9951,9935,1,0,0,0,9951,9936,1,0,0,0,9951,
		9937,1,0,0,0,9951,9938,1,0,0,0,9951,9939,1,0,0,0,9951,9940,1,0,0,0,9951,
		9941,1,0,0,0,9951,9942,1,0,0,0,9951,9943,1,0,0,0,9951,9944,1,0,0,0,9951,
		9945,1,0,0,0,9951,9946,1,0,0,0,9951,9947,1,0,0,0,9951,9948,1,0,0,0,9951,
		9949,1,0,0,0,9951,9950,1,0,0,0,9952,1389,1,0,0,0,9953,9954,7,61,0,0,9954,
		1391,1,0,0,0,9955,9956,7,62,0,0,9956,1393,1,0,0,0,9957,9958,7,63,0,0,9958,
		1395,1,0,0,0,9959,9960,3,1398,699,0,9960,9961,3,1408,704,0,9961,9962,3,
		1406,703,0,9962,1397,1,0,0,0,9963,9965,3,1400,700,0,9964,9963,1,0,0,0,
		9965,9968,1,0,0,0,9966,9964,1,0,0,0,9966,9967,1,0,0,0,9967,1399,1,0,0,
		0,9968,9966,1,0,0,0,9969,9970,3,1402,701,0,9970,9971,5,273,0,0,9971,9972,
		5,491,0,0,9972,9990,1,0,0,0,9973,9974,3,1402,701,0,9974,9975,5,492,0,0,
		9975,9976,3,1404,702,0,9976,9990,1,0,0,0,9977,9978,3,1402,701,0,9978,9979,
		5,493,0,0,9979,9980,5,494,0,0,9980,9990,1,0,0,0,9981,9982,3,1402,701,0,
		9982,9983,5,493,0,0,9983,9984,5,495,0,0,9984,9990,1,0,0,0,9985,9986,3,
		1402,701,0,9986,9987,5,493,0,0,9987,9988,5,496,0,0,9988,9990,1,0,0,0,9989,
		9969,1,0,0,0,9989,9973,1,0,0,0,9989,9977,1,0,0,0,9989,9981,1,0,0,0,9989,
		9985,1,0,0,0,9990,1401,1,0,0,0,9991,9992,5,29,0,0,9992,1403,1,0,0,0,9993,
		9998,3,1358,679,0,9994,9998,3,1392,696,0,9995,9998,3,1608,804,0,9996,9998,
		3,1386,693,0,9997,9993,1,0,0,0,9997,9994,1,0,0,0,9997,9995,1,0,0,0,9997,
		9996,1,0,0,0,9998,1405,1,0,0,0,9999,10002,1,0,0,0,10000,10002,5,7,0,0,
		10001,9999,1,0,0,0,10001,10000,1,0,0,0,10002,1407,1,0,0,0,10003,10004,
		3,1410,705,0,10004,10005,5,147,0,0,10005,10006,3,1452,726,0,10006,10007,
		3,1588,794,0,10007,10008,5,455,0,0,10008,10009,3,1602,801,0,10009,1409,
		1,0,0,0,10010,10015,3,1598,799,0,10011,10013,3,1412,706,0,10012,10014,
		3,1414,707,0,10013,10012,1,0,0,0,10013,10014,1,0,0,0,10014,10016,1,0,0,
		0,10015,10011,1,0,0,0,10015,10016,1,0,0,0,10016,1411,1,0,0,0,10017,10018,
		5,179,0,0,10018,1413,1,0,0,0,10019,10021,3,1418,709,0,10020,10019,1,0,
		0,0,10021,10022,1,0,0,0,10022,10020,1,0,0,0,10022,10023,1,0,0,0,10023,
		1415,1,0,0,0,10024,10025,5,18,0,0,10025,10026,3,1606,803,0,10026,10027,
		5,19,0,0,10027,1417,1,0,0,0,10028,10032,3,1420,710,0,10029,10032,5,179,
		0,0,10030,10032,3,1416,708,0,10031,10028,1,0,0,0,10031,10029,1,0,0,0,10031,
		10030,1,0,0,0,10032,1419,1,0,0,0,10033,10049,3,1436,718,0,10034,10035,
		5,497,0,0,10035,10036,5,62,0,0,10036,10050,3,1434,717,0,10037,10038,3,
		1438,719,0,10038,10039,3,1440,720,0,10039,10040,3,1442,721,0,10040,10041,
		3,1444,722,0,10041,10042,3,1446,723,0,10042,10050,1,0,0,0,10043,10044,
		3,1422,711,0,10044,10045,5,173,0,0,10045,10046,3,1426,713,0,10046,10047,
		3,1432,716,0,10047,10048,3,1424,712,0,10048,10050,1,0,0,0,10049,10034,
		1,0,0,0,10049,10037,1,0,0,0,10049,10043,1,0,0,0,10050,10051,1,0,0,0,10051,
		10052,5,7,0,0,10052,1421,1,0,0,0,10053,10058,1,0,0,0,10054,10055,5,263,
		0,0,10055,10058,5,318,0,0,10056,10058,5,318,0,0,10057,10053,1,0,0,0,10057,
		10054,1,0,0,0,10057,10056,1,0,0,0,10058,1423,1,0,0,0,10059,10060,3,960,
		480,0,10060,1425,1,0,0,0,10061,10067,1,0,0,0,10062,10063,5,2,0,0,10063,
		10064,3,1428,714,0,10064,10065,5,3,0,0,10065,10067,1,0,0,0,10066,10061,
		1,0,0,0,10066,10062,1,0,0,0,10067,1427,1,0,0,0,10068,10073,3,1430,715,
		0,10069,10070,5,6,0,0,10070,10072,3,1430,715,0,10071,10069,1,0,0,0,10072,
		10075,1,0,0,0,10073,10071,1,0,0,0,10073,10074,1,0,0,0,10074,1429,1,0,0,
		0,10075,10073,1,0,0,0,10076,10077,3,1436,718,0,10077,10078,3,1440,720,
		0,10078,1431,1,0,0,0,10079,10080,7,64,0,0,10080,1433,1,0,0,0,10081,10084,
		5,28,0,0,10082,10084,3,1372,686,0,10083,10081,1,0,0,0,10083,10082,1,0,
		0,0,10084,1435,1,0,0,0,10085,10086,3,1606,803,0,10086,1437,1,0,0,0,10087,
		10090,1,0,0,0,10088,10090,5,498,0,0,10089,10087,1,0,0,0,10089,10088,1,
		0,0,0,10090,1439,1,0,0,0,10091,10092,3,1118,559,0,10092,1441,1,0,0,0,10093,
		10097,1,0,0,0,10094,10095,5,43,0,0,10095,10097,3,524,262,0,10096,10093,
		1,0,0,0,10096,10094,1,0,0,0,10097,1443,1,0,0,0,10098,10102,1,0,0,0,10099,
		10100,5,77,0,0,10100,10102,5,78,0,0,10101,10098,1,0,0,0,10101,10099,1,
		0,0,0,10102,1445,1,0,0,0,10103,10108,1,0,0,0,10104,10105,3,1448,724,0,
		10105,10106,3,1610,805,0,10106,10108,1,0,0,0,10107,10103,1,0,0,0,10107,
		10104,1,0,0,0,10108,1447,1,0,0,0,10109,10112,3,1450,725,0,10110,10112,
		5,53,0,0,10111,10109,1,0,0,0,10111,10110,1,0,0,0,10112,1449,1,0,0,0,10113,
		10114,7,65,0,0,10114,1451,1,0,0,0,10115,10117,3,1454,727,0,10116,10115,
		1,0,0,0,10117,10120,1,0,0,0,10118,10116,1,0,0,0,10118,10119,1,0,0,0,10119,
		1453,1,0,0,0,10120,10118,1,0,0,0,10121,10122,3,1408,704,0,10122,10123,
		5,7,0,0,10123,10149,1,0,0,0,10124,10149,3,1520,760,0,10125,10149,3,1524,
		762,0,10126,10149,3,1462,731,0,10127,10149,3,1478,739,0,10128,10149,3,
		1484,742,0,10129,10149,3,1494,747,0,10130,10149,3,1496,748,0,10131,10149,
		3,1498,749,0,10132,10149,3,1512,756,0,10133,10149,3,1516,758,0,10134,10149,
		3,1536,768,0,10135,10149,3,1542,771,0,10136,10149,3,1544,772,0,10137,10149,
		3,1456,728,0,10138,10149,3,1458,729,0,10139,10149,3,1464,732,0,10140,10149,
		3,1552,776,0,10141,10149,3,1564,782,0,10142,10149,3,1572,786,0,10143,10149,
		3,1574,787,0,10144,10149,3,1576,788,0,10145,10149,3,1578,789,0,10146,10149,
		3,1580,790,0,10147,10149,3,1584,792,0,10148,10121,1,0,0,0,10148,10124,
		1,0,0,0,10148,10125,1,0,0,0,10148,10126,1,0,0,0,10148,10127,1,0,0,0,10148,
		10128,1,0,0,0,10148,10129,1,0,0,0,10148,10130,1,0,0,0,10148,10131,1,0,
		0,0,10148,10132,1,0,0,0,10148,10133,1,0,0,0,10148,10134,1,0,0,0,10148,
		10135,1,0,0,0,10148,10136,1,0,0,0,10148,10137,1,0,0,0,10148,10138,1,0,
		0,0,10148,10139,1,0,0,0,10148,10140,1,0,0,0,10148,10141,1,0,0,0,10148,
		10142,1,0,0,0,10148,10143,1,0,0,0,10148,10144,1,0,0,0,10148,10145,1,0,
		0,0,10148,10146,1,0,0,0,10148,10147,1,0,0,0,10149,1455,1,0,0,0,10150,10151,
		5,499,0,0,10151,10152,3,1614,807,0,10152,10153,5,7,0,0,10153,1457,1,0,
		0,0,10154,10155,5,434,0,0,10155,10156,3,1606,803,0,10156,10157,5,2,0,0,
		10157,10158,3,1460,730,0,10158,10159,5,3,0,0,10159,10160,5,7,0,0,10160,
		10169,1,0,0,0,10161,10162,5,57,0,0,10162,10163,3,1606,803,0,10163,10164,
		5,2,0,0,10164,10165,3,1460,730,0,10165,10166,5,3,0,0,10166,10167,5,7,0,
		0,10167,10169,1,0,0,0,10168,10154,1,0,0,0,10168,10161,1,0,0,0,10169,1459,
		1,0,0,0,10170,10173,1,0,0,0,10171,10173,3,1280,640,0,10172,10170,1,0,0,
		0,10172,10171,1,0,0,0,10173,1461,1,0,0,0,10174,10175,3,1476,738,0,10175,
		10176,3,1450,725,0,10176,10177,3,1610,805,0,10177,10178,5,7,0,0,10178,
		1463,1,0,0,0,10179,10180,5,500,0,0,10180,10181,3,1466,733,0,10181,10182,
		5,501,0,0,10182,10183,3,1468,734,0,10183,10184,5,7,0,0,10184,1465,1,0,
		0,0,10185,10189,1,0,0,0,10186,10189,5,435,0,0,10187,10189,5,502,0,0,10188,
		10185,1,0,0,0,10188,10186,1,0,0,0,10188,10187,1,0,0,0,10189,1467,1,0,0,
		0,10190,10195,3,1470,735,0,10191,10192,5,6,0,0,10192,10194,3,1470,735,
		0,10193,10191,1,0,0,0,10194,10197,1,0,0,0,10195,10193,1,0,0,0,10195,10196,
		1,0,0,0,10196,1469,1,0,0,0,10197,10195,1,0,0,0,10198,10199,3,1474,737,
		0,10199,10200,3,1450,725,0,10200,10201,3,1472,736,0,10201,1471,1,0,0,0,
		10202,10203,3,1372,686,0,10203,1473,1,0,0,0,10204,10205,3,1476,738,0,10205,
		1475,1,0,0,0,10206,10209,3,524,262,0,10207,10209,5,28,0,0,10208,10206,
		1,0,0,0,10208,10207,1,0,0,0,10209,10216,1,0,0,0,10210,10211,5,4,0,0,10211,
		10212,3,1616,808,0,10212,10213,5,5,0,0,10213,10215,1,0,0,0,10214,10210,
		1,0,0,0,10215,10218,1,0,0,0,10216,10214,1,0,0,0,10216,10217,1,0,0,0,10217,
		1477,1,0,0,0,10218,10216,1,0,0,0,10219,10220,5,221,0,0,10220,10221,3,1612,
		806,0,10221,10222,5,93,0,0,10222,10223,3,1452,726,0,10223,10224,3,1480,
		740,0,10224,10225,3,1482,741,0,10225,10226,5,455,0,0,10226,10227,5,221,
		0,0,10227,10228,5,7,0,0,10228,1479,1,0,0,0,10229,10230,5,503,0,0,10230,
		10231,3,1162,581,0,10231,10232,5,93,0,0,10232,10233,3,1452,726,0,10233,
		10235,1,0,0,0,10234,10229,1,0,0,0,10235,10238,1,0,0,0,10236,10234,1,0,
		0,0,10236,10237,1,0,0,0,10237,1481,1,0,0,0,10238,10236,1,0,0,0,10239,10243,
		1,0,0,0,10240,10241,5,58,0,0,10241,10243,3,1452,726,0,10242,10239,1,0,
		0,0,10242,10240,1,0,0,0,10243,1483,1,0,0,0,10244,10245,5,40,0,0,10245,
		10246,3,1486,743,0,10246,10247,3,1488,744,0,10247,10248,3,1492,746,0,10248,
		10249,5,455,0,0,10249,10250,5,40,0,0,10250,10251,5,7,0,0,10251,1485,1,
		0,0,0,10252,10255,1,0,0,0,10253,10255,3,1610,805,0,10254,10252,1,0,0,0,
		10254,10253,1,0,0,0,10255,1487,1,0,0,0,10256,10258,3,1490,745,0,10257,
		10256,1,0,0,0,10258,10259,1,0,0,0,10259,10257,1,0,0,0,10259,10260,1,0,
		0,0,10260,1489,1,0,0,0,10261,10262,5,102,0,0,10262,10263,3,1280,640,0,
		10263,10264,5,93,0,0,10264,10265,3,1452,726,0,10265,1491,1,0,0,0,10266,
		10270,1,0,0,0,10267,10268,5,58,0,0,10268,10270,3,1452,726,0,10269,10266,
		1,0,0,0,10269,10267,1,0,0,0,10270,1493,1,0,0,0,10271,10272,3,1600,800,
		0,10272,10273,3,1540,770,0,10273,1495,1,0,0,0,10274,10275,3,1600,800,0,
		10275,10276,5,504,0,0,10276,10277,3,1618,809,0,10277,10278,3,1540,770,
		0,10278,1497,1,0,0,0,10279,10280,3,1600,800,0,10280,10281,5,62,0,0,10281,
		10282,3,1500,750,0,10282,10283,3,1540,770,0,10283,1499,1,0,0,0,10284,10285,
		3,1510,755,0,10285,10301,5,68,0,0,10286,10287,3,954,477,0,10287,10288,
		3,1504,752,0,10288,10302,1,0,0,0,10289,10302,3,960,480,0,10290,10302,3,
		878,439,0,10291,10292,5,203,0,0,10292,10293,3,1162,581,0,10293,10294,3,
		1502,751,0,10294,10302,1,0,0,0,10295,10296,3,1506,753,0,10296,10297,3,
		1162,581,0,10297,10298,5,24,0,0,10298,10299,3,1162,581,0,10299,10300,3,
		1508,754,0,10300,10302,1,0,0,0,10301,10286,1,0,0,0,10301,10289,1,0,0,0,
		10301,10290,1,0,0,0,10301,10291,1,0,0,0,10301,10295,1,0,0,0,10302,1501,
		1,0,0,0,10303,10307,1,0,0,0,10304,10305,5,100,0,0,10305,10307,3,1280,640,
		0,10306,10303,1,0,0,0,10306,10304,1,0,0,0,10307,1503,1,0,0,0,10308,10321,
		1,0,0,0,10309,10310,5,2,0,0,10310,10315,3,1162,581,0,10311,10312,5,6,0,
		0,10312,10314,3,1162,581,0,10313,10311,1,0,0,0,10314,10317,1,0,0,0,10315,
		10313,1,0,0,0,10315,10316,1,0,0,0,10316,10318,1,0,0,0,10317,10315,1,0,
		0,0,10318,10319,5,3,0,0,10319,10321,1,0,0,0,10320,10308,1,0,0,0,10320,
		10309,1,0,0,0,10321,1505,1,0,0,0,10322,10325,1,0,0,0,10323,10325,5,505,
		0,0,10324,10322,1,0,0,0,10324,10323,1,0,0,0,10325,1507,1,0,0,0,10326,10330,
		1,0,0,0,10327,10328,5,148,0,0,10328,10330,3,1162,581,0,10329,10326,1,0,
		0,0,10329,10327,1,0,0,0,10330,1509,1,0,0,0,10331,10332,3,522,261,0,10332,
		1511,1,0,0,0,10333,10334,3,1600,800,0,10334,10335,5,506,0,0,10335,10336,
		3,1510,755,0,10336,10337,3,1514,757,0,10337,10338,5,68,0,0,10338,10339,
		5,35,0,0,10339,10340,3,1162,581,0,10340,10341,3,1540,770,0,10341,1513,
		1,0,0,0,10342,10346,1,0,0,0,10343,10344,5,507,0,0,10344,10346,3,1356,678,
		0,10345,10342,1,0,0,0,10345,10343,1,0,0,0,10346,1515,1,0,0,0,10347,10348,
		3,1518,759,0,10348,10349,3,1602,801,0,10349,10350,3,1604,802,0,10350,10351,
		5,7,0,0,10351,1517,1,0,0,0,10352,10353,7,66,0,0,10353,1519,1,0,0,0,10354,
		10366,5,509,0,0,10355,10356,5,262,0,0,10356,10367,3,1610,805,0,10357,10363,
		5,510,0,0,10358,10359,5,203,0,0,10359,10360,3,1162,581,0,10360,10361,3,
		1502,751,0,10361,10364,1,0,0,0,10362,10364,3,960,480,0,10363,10358,1,0,
		0,0,10363,10362,1,0,0,0,10364,10367,1,0,0,0,10365,10367,3,1522,761,0,10366,
		10355,1,0,0,0,10366,10357,1,0,0,0,10366,10365,1,0,0,0,10367,10368,1,0,
		0,0,10368,10369,5,7,0,0,10369,1521,1,0,0,0,10370,10373,1,0,0,0,10371,10373,
		3,1610,805,0,10372,10370,1,0,0,0,10372,10371,1,0,0,0,10373,1523,1,0,0,
		0,10374,10375,5,511,0,0,10375,10376,3,1526,763,0,10376,10377,3,1358,679,
		0,10377,10378,3,1528,764,0,10378,10379,3,1530,765,0,10379,10380,5,7,0,
		0,10380,10401,1,0,0,0,10381,10382,5,511,0,0,10382,10383,3,1526,763,0,10383,
		10384,3,1382,691,0,10384,10385,3,1530,765,0,10385,10386,5,7,0,0,10386,
		10401,1,0,0,0,10387,10388,5,511,0,0,10388,10389,3,1526,763,0,10389,10390,
		5,512,0,0,10390,10391,3,1358,679,0,10391,10392,3,1530,765,0,10392,10393,
		5,7,0,0,10393,10401,1,0,0,0,10394,10395,5,511,0,0,10395,10396,3,1526,763,
		0,10396,10397,3,1530,765,0,10397,10398,5,7,0,0,10398,10401,1,0,0,0,10399,
		10401,5,511,0,0,10400,10374,1,0,0,0,10400,10381,1,0,0,0,10400,10387,1,
		0,0,0,10400,10394,1,0,0,0,10400,10399,1,0,0,0,10401,1525,1,0,0,0,10402,
		10411,1,0,0,0,10403,10411,1,0,0,0,10404,10411,5,513,0,0,10405,10411,5,
		514,0,0,10406,10411,5,515,0,0,10407,10411,5,516,0,0,10408,10411,5,517,
		0,0,10409,10411,5,518,0,0,10410,10402,1,0,0,0,10410,10403,1,0,0,0,10410,
		10404,1,0,0,0,10410,10405,1,0,0,0,10410,10406,1,0,0,0,10410,10407,1,0,
		0,0,10410,10408,1,0,0,0,10410,10409,1,0,0,0,10411,1527,1,0,0,0,10412,10420,
		1,0,0,0,10413,10414,5,6,0,0,10414,10416,3,1162,581,0,10415,10413,1,0,0,
		0,10416,10417,1,0,0,0,10417,10415,1,0,0,0,10417,10418,1,0,0,0,10418,10420,
		1,0,0,0,10419,10412,1,0,0,0,10419,10415,1,0,0,0,10420,1529,1,0,0,0,10421,
		10425,1,0,0,0,10422,10423,5,100,0,0,10423,10425,3,1534,767,0,10424,10421,
		1,0,0,0,10424,10422,1,0,0,0,10425,1531,1,0,0,0,10426,10427,3,1382,691,
		0,10427,10428,5,10,0,0,10428,10429,3,1162,581,0,10429,1533,1,0,0,0,10430,
		10435,3,1532,766,0,10431,10432,5,6,0,0,10432,10434,3,1532,766,0,10433,
		10431,1,0,0,0,10434,10437,1,0,0,0,10435,10433,1,0,0,0,10435,10436,1,0,
		0,0,10436,1535,1,0,0,0,10437,10435,1,0,0,0,10438,10439,5,519,0,0,10439,
		10440,3,1610,805,0,10440,10441,3,1538,769,0,10441,10442,5,7,0,0,10442,
		1537,1,0,0,0,10443,10447,1,0,0,0,10444,10445,5,6,0,0,10445,10447,3,1610,
		805,0,10446,10443,1,0,0,0,10446,10444,1,0,0,0,10447,1539,1,0,0,0,10448,
		10449,5,520,0,0,10449,10450,3,1452,726,0,10450,10451,5,455,0,0,10451,10452,
		5,520,0,0,10452,10453,3,1602,801,0,10453,10454,5,7,0,0,10454,1541,1,0,
		0,0,10455,10456,3,1620,810,0,10456,10457,5,7,0,0,10457,1543,1,0,0,0,10458,
		10459,5,203,0,0,10459,10467,3,1162,581,0,10460,10461,3,1550,775,0,10461,
		10462,3,1546,773,0,10462,10468,1,0,0,0,10463,10464,3,1546,773,0,10464,
		10465,3,1550,775,0,10465,10468,1,0,0,0,10466,10468,1,0,0,0,10467,10460,
		1,0,0,0,10467,10463,1,0,0,0,10467,10466,1,0,0,0,10468,10469,1,0,0,0,10469,
		10470,5,7,0,0,10470,1545,1,0,0,0,10471,10475,1,0,0,0,10472,10473,5,100,
		0,0,10473,10475,3,1548,774,0,10474,10471,1,0,0,0,10474,10472,1,0,0,0,10475,
		1547,1,0,0,0,10476,10481,3,1162,581,0,10477,10478,5,6,0,0,10478,10480,
		3,1162,581,0,10479,10477,1,0,0,0,10480,10483,1,0,0,0,10481,10479,1,0,0,
		0,10481,10482,1,0,0,0,10482,1549,1,0,0,0,10483,10481,1,0,0,0,10484,10491,
		1,0,0,0,10485,10487,5,71,0,0,10486,10488,5,340,0,0,10487,10486,1,0,0,0,
		10487,10488,1,0,0,0,10488,10489,1,0,0,0,10489,10491,3,1566,783,0,10490,
		10484,1,0,0,0,10490,10485,1,0,0,0,10491,1551,1,0,0,0,10492,10510,5,521,
		0,0,10493,10494,3,1586,793,0,10494,10495,3,1560,780,0,10495,10501,5,62,
		0,0,10496,10502,3,960,480,0,10497,10498,5,203,0,0,10498,10499,3,1610,805,
		0,10499,10500,3,1558,779,0,10500,10502,1,0,0,0,10501,10496,1,0,0,0,10501,
		10497,1,0,0,0,10502,10511,1,0,0,0,10503,10508,3,1372,686,0,10504,10505,
		5,2,0,0,10505,10506,3,1556,778,0,10506,10507,5,3,0,0,10507,10509,1,0,0,
		0,10508,10504,1,0,0,0,10508,10509,1,0,0,0,10509,10511,1,0,0,0,10510,10493,
		1,0,0,0,10510,10503,1,0,0,0,10511,10512,1,0,0,0,10512,10513,5,7,0,0,10513,
		1553,1,0,0,0,10514,10515,3,1372,686,0,10515,10516,5,20,0,0,10516,10517,
		3,1162,581,0,10517,10520,1,0,0,0,10518,10520,3,1162,581,0,10519,10514,
		1,0,0,0,10519,10518,1,0,0,0,10520,1555,1,0,0,0,10521,10526,3,1554,777,
		0,10522,10523,5,6,0,0,10523,10525,3,1554,777,0,10524,10522,1,0,0,0,10525,
		10528,1,0,0,0,10526,10524,1,0,0,0,10526,10527,1,0,0,0,10527,1557,1,0,0,
		0,10528,10526,1,0,0,0,10529,10533,1,0,0,0,10530,10531,5,100,0,0,10531,
		10533,3,1280,640,0,10532,10529,1,0,0,0,10532,10530,1,0,0,0,10533,1559,
		1,0,0,0,10534,10539,1,0,0,0,10535,10536,3,1562,781,0,10536,10537,5,318,
		0,0,10537,10539,1,0,0,0,10538,10534,1,0,0,0,10538,10535,1,0,0,0,10539,
		1561,1,0,0,0,10540,10543,1,0,0,0,10541,10543,5,263,0,0,10542,10540,1,0,
		0,0,10542,10541,1,0,0,0,10543,1563,1,0,0,0,10544,10545,5,61,0,0,10545,
		10546,3,1570,785,0,10546,10547,3,1568,784,0,10547,10548,3,1586,793,0,10548,
		10549,5,71,0,0,10549,10550,3,1566,783,0,10550,10551,5,7,0,0,10551,1565,
		1,0,0,0,10552,10553,3,1280,640,0,10553,1567,1,0,0,0,10554,10558,1,0,0,
		0,10555,10558,5,64,0,0,10556,10558,5,68,0,0,10557,10554,1,0,0,0,10557,
		10555,1,0,0,0,10557,10556,1,0,0,0,10558,1569,1,0,0,0,10559,10577,1,0,0,
		0,10560,10577,1,0,0,0,10561,10577,5,262,0,0,10562,10577,5,287,0,0,10563,
		10577,5,208,0,0,10564,10577,5,241,0,0,10565,10566,5,130,0,0,10566,10577,
		3,1162,581,0,10567,10568,5,301,0,0,10568,10577,3,1162,581,0,10569,10577,
		3,1162,581,0,10570,10577,5,30,0,0,10571,10574,7,67,0,0,10572,10575,3,1162,
		581,0,10573,10575,5,30,0,0,10574,10572,1,0,0,0,10574,10573,1,0,0,0,10574,
		10575,1,0,0,0,10575,10577,1,0,0,0,10576,10559,1,0,0,0,10576,10560,1,0,
		0,0,10576,10561,1,0,0,0,10576,10562,1,0,0,0,10576,10563,1,0,0,0,10576,
		10564,1,0,0,0,10576,10565,1,0,0,0,10576,10567,1,0,0,0,10576,10569,1,0,
		0,0,10576,10570,1,0,0,0,10576,10571,1,0,0,0,10577,1571,1,0,0,0,10578,10579,
		5,259,0,0,10579,10580,3,1570,785,0,10580,10581,3,1586,793,0,10581,10582,
		5,7,0,0,10582,1573,1,0,0,0,10583,10584,5,158,0,0,10584,10585,3,1586,793,
		0,10585,10586,5,7,0,0,10586,1575,1,0,0,0,10587,10588,5,78,0,0,10588,10589,
		5,7,0,0,10589,1577,1,0,0,0,10590,10591,5,162,0,0,10591,10592,3,1582,791,
		0,10592,10593,5,7,0,0,10593,1579,1,0,0,0,10594,10595,5,313,0,0,10595,10596,
		3,1582,791,0,10596,10597,5,7,0,0,10597,1581,1,0,0,0,10598,10600,5,33,0,
		0,10599,10601,5,263,0,0,10600,10599,1,0,0,0,10600,10601,1,0,0,0,10601,
		10602,1,0,0,0,10602,10605,5,154,0,0,10603,10605,1,0,0,0,10604,10598,1,
		0,0,0,10604,10603,1,0,0,0,10605,1583,1,0,0,0,10606,10607,5,327,0,0,10607,
		10608,3,524,262,0,10608,10609,5,94,0,0,10609,10610,5,53,0,0,10610,10611,
		5,7,0,0,10611,10619,1,0,0,0,10612,10615,5,307,0,0,10613,10616,3,524,262,
		0,10614,10616,5,30,0,0,10615,10613,1,0,0,0,10615,10614,1,0,0,0,10616,10617,
		1,0,0,0,10617,10619,5,7,0,0,10618,10606,1,0,0,0,10618,10612,1,0,0,0,10619,
		1585,1,0,0,0,10620,10623,3,1372,686,0,10621,10623,5,28,0,0,10622,10620,
		1,0,0,0,10622,10621,1,0,0,0,10623,1587,1,0,0,0,10624,10628,1,0,0,0,10625,
		10626,5,518,0,0,10626,10628,3,1590,795,0,10627,10624,1,0,0,0,10627,10625,
		1,0,0,0,10628,1589,1,0,0,0,10629,10631,3,1592,796,0,10630,10629,1,0,0,
		0,10631,10632,1,0,0,0,10632,10630,1,0,0,0,10632,10633,1,0,0,0,10633,1591,
		1,0,0,0,10634,10635,5,102,0,0,10635,10636,3,1594,797,0,10636,10637,5,93,
		0,0,10637,10638,3,1452,726,0,10638,1593,1,0,0,0,10639,10644,3,1596,798,
		0,10640,10641,5,82,0,0,10641,10643,3,1596,798,0,10642,10640,1,0,0,0,10643,
		10646,1,0,0,0,10644,10642,1,0,0,0,10644,10645,1,0,0,0,10645,1595,1,0,0,
		0,10646,10644,1,0,0,0,10647,10651,3,1606,803,0,10648,10649,5,512,0,0,10649,
		10651,3,1358,679,0,10650,10647,1,0,0,0,10650,10648,1,0,0,0,10651,1597,
		1,0,0,0,10652,10655,1,0,0,0,10653,10655,3,1416,708,0,10654,10652,1,0,0,
		0,10654,10653,1,0,0,0,10655,1599,1,0,0,0,10656,10659,1,0,0,0,10657,10659,
		3,1416,708,0,10658,10656,1,0,0,0,10658,10657,1,0,0,0,10659,1601,1,0,0,
		0,10660,10663,1,0,0,0,10661,10663,3,1606,803,0,10662,10660,1,0,0,0,10662,
		10661,1,0,0,0,10663,1603,1,0,0,0,10664,10665,5,102,0,0,10665,10668,3,1614,
		807,0,10666,10668,1,0,0,0,10667,10664,1,0,0,0,10667,10666,1,0,0,0,10668,
		1605,1,0,0,0,10669,10672,3,1372,686,0,10670,10672,3,1608,804,0,10671,10669,
		1,0,0,0,10671,10670,1,0,0,0,10672,1607,1,0,0,0,10673,10674,7,68,0,0,10674,
		1609,1,0,0,0,10675,10676,3,1328,664,0,10676,10677,3,982,491,0,10677,10678,
		3,1054,527,0,10678,10679,3,1094,547,0,10679,10680,3,1024,512,0,10680,10681,
		3,1038,519,0,10681,10682,3,1240,620,0,10682,1611,1,0,0,0,10683,10684,3,
		1610,805,0,10684,1613,1,0,0,0,10685,10686,3,1610,805,0,10686,1615,1,0,
		0,0,10687,10688,3,1162,581,0,10688,1617,1,0,0,0,10689,10690,3,1162,581,
		0,10690,1619,1,0,0,0,10691,10692,3,8,4,0,10692,10693,3,1622,811,0,10693,
		1621,1,0,0,0,10694,10695,5,71,0,0,10695,10696,3,984,492,0,10696,10697,
		3,1566,783,0,10697,10700,1,0,0,0,10698,10700,1,0,0,0,10699,10694,1,0,0,
		0,10699,10698,1,0,0,0,10700,1623,1,0,0,0,745,1633,1637,1765,1769,1782,
		1787,1793,1799,1814,1826,1844,1849,1859,1883,1890,1896,1901,1910,1914,
		1926,1957,1964,1972,1977,1984,1990,2007,2012,2016,2029,2033,2038,2043,
		2055,2064,2077,2082,2093,2104,2109,2120,2131,2140,2150,2165,2177,2182,
		2189,2200,2458,2465,2470,2475,2480,2488,2497,2504,2514,2516,2521,2527,
		2533,2535,2563,2573,2586,2598,2612,2617,2641,2647,2652,2659,2664,2702,
		2706,2713,2717,2724,2738,2745,2756,2789,2799,2803,2810,2817,2825,2831,
		2835,2845,2852,2863,2895,2903,2908,2915,2925,2935,2955,2970,2995,3000,
		3007,3014,3025,3030,3037,3048,3056,3067,3083,3091,3095,3109,3126,3131,
		3138,3147,3150,3155,3162,3173,3186,3199,3217,3220,3229,3244,3259,3268,
		3275,3282,3287,3317,3319,3323,3331,3338,3352,3356,3360,3365,3371,3375,
		3379,3392,3398,3407,3416,3426,3437,3547,3565,3570,3574,3591,3599,3606,
		3619,3629,3663,3668,3673,3677,3685,3687,3745,3762,3770,3793,3797,3817,
		3854,3863,3868,3873,3878,3883,3937,3943,3950,3960,3965,3970,3988,3992,
		4002,4008,4014,4021,4026,4031,4045,4073,4080,4094,4109,4226,4237,4243,
		4251,4262,4271,4278,4318,4324,4345,4373,4377,4382,4391,4395,4422,4429,
		4444,4464,4484,4577,4602,4609,4625,4634,4639,4645,4652,4666,4815,4819,
		4912,4917,4921,4927,4995,5001,5030,5047,5054,5066,5126,5133,5139,5145,
		5171,5177,5183,5194,5206,5235,5274,5278,5282,5286,5291,5298,5312,5325,
		5333,5340,5346,5350,5355,5362,5376,5378,5385,5389,5398,5406,5415,5417,
		5421,5430,5435,5441,5446,5450,5455,5461,5467,5473,5479,5484,5499,5508,
		5519,5525,5564,5574,5581,5592,5598,5608,5620,5624,5662,5676,5690,5714,
		5721,5731,5743,5748,5784,5791,5806,5853,5890,5901,5918,6388,6392,6397,
		6456,6460,6679,6694,6705,6712,6905,6915,6923,6952,6968,7010,7024,7046,
		7053,7061,7065,7072,7081,7090,7142,7148,7160,7164,7169,7174,7178,7182,
		7187,7203,7211,7216,7229,7234,7241,7251,7255,7266,7277,7285,7292,7331,
		7339,7343,7424,7452,7457,7472,7484,7491,7501,7506,7510,7514,7518,7522,
		7529,7539,7544,7562,7573,7580,7588,7593,7606,7612,7641,7648,7660,7673,
		7688,7694,7703,7719,7722,7733,7738,7742,7746,7751,7754,7760,7764,7766,
		7769,7776,7779,7786,7794,7797,7806,7821,7834,7845,7848,7852,7858,7874,
		7887,7897,7915,7917,7925,7929,7939,7949,7960,7962,7967,7974,7984,7995,
		8008,8012,8021,8036,8040,8047,8050,8054,8057,8070,8074,8079,8087,8091,
		8095,8106,8113,8119,8123,8125,8129,8135,8144,8150,8152,8154,8161,8165,
		8174,8178,8188,8195,8203,8227,8233,8237,8242,8251,8255,8258,8263,8276,
		8282,8290,8293,8300,8305,8326,8335,8340,8346,8351,8358,8363,8369,8371,
		8375,8382,8386,8389,8396,8401,8404,8411,8415,8424,8428,8436,8438,8445,
		8450,8453,8468,8480,8490,8499,8504,8509,8516,8519,8523,8530,8554,8563,
		8569,8573,8578,8588,8595,8604,8607,8616,8618,8624,8628,8633,8647,8649,
		8655,8661,8664,8673,8691,8698,8702,8706,8722,8729,8737,8741,8748,8761,
		8777,8783,8789,8796,8801,8807,8814,8822,8830,8835,8839,8845,8849,8853,
		8856,8868,8873,8885,8888,8890,8902,8904,8908,8914,8919,8927,8931,8940,
		8948,8954,8957,8966,8971,8978,8988,9014,9025,9027,9029,9037,9060,9068,
		9078,9092,9102,9106,9120,9127,9134,9141,9166,9195,9234,9236,9264,9285,
		9292,9305,9317,9323,9332,9349,9361,9370,9375,9382,9392,9395,9406,9412,
		9427,9435,9444,9453,9456,9461,9470,9475,9489,9499,9507,9521,9528,9536,
		9544,9551,9557,9566,9574,9584,9595,9602,9631,9640,9647,9658,9668,9672,
		9676,9681,9689,9693,9697,9702,9707,9712,9719,9727,9730,9737,9742,9749,
		9765,9780,9794,9799,9818,9823,9828,9835,9842,9849,9858,9864,9870,9876,
		9884,9893,9951,9966,9989,9997,10001,10013,10015,10022,10031,10049,10057,
		10066,10073,10083,10089,10096,10101,10107,10111,10118,10148,10168,10172,
		10188,10195,10208,10216,10236,10242,10254,10259,10269,10301,10306,10315,
		10320,10324,10329,10345,10363,10366,10372,10400,10410,10417,10419,10424,
		10435,10446,10467,10474,10481,10487,10490,10501,10508,10510,10519,10526,
		10532,10538,10542,10557,10574,10576,10600,10604,10615,10618,10622,10627,
		10632,10644,10650,10654,10658,10662,10667,10671,10699
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
